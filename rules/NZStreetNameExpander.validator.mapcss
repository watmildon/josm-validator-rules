meta
{
    title: "(NZ) Abbreviated Streetname Fixup";
    version: "0,1_1_2024-10-22";
    description: "Expands common street name abbreviations in NZ";
    author: "watmildon";
    link: "https://github.com/watmildon/josm-validator-rules/blob/main/rules/NZStreetNameExpander.validator.mapcss";
    baselanguage: "en";
    min-josm-version: 14481;
}

/*
Generated from a list on the NZ post website
https://www.nzpost.co.nz/sites/nz/files/2021-10/adv358-address-standards.pdf page 79+80
*/

/*
[out:json][timeout:300];
{{geocodeArea:"Austrailia"}}->.a;
(
  wr[highway][highway!=platform][highway!="bus_stop"][amenity!=shelter][!bus][name~" Accs$| Accswy$| Aly$| Ancg$| App$| Arc$| Arch$| Ave$| Bank$| Bay$| Bch$| Belt$| Blf$| Blvd$| Bnd$| Brae$| Brg$| Briars$| Byp$| Ch$| Cir$| Cl$| Clm$| Cmn$| Crcs$| Cres$| Crk$| Crst$| Crt$| Crts$| Ctr$| Cul$| Cv$| Del$| Dle$| Downs$| Dr$| Dune$| Dvn$| Elm$| End$| Ent$| Esp$| Est$| Fall$| Fare$| Fawy$| Fen$| Fern$| Flt$| Flts$| Frms$| Gdn$| Gdns$| Gld$| Gln$| Gly$| Grg$| Grn$| Grv$| Gte$| Head$| Hl$| Hts$| Hvn$| Hwy$| Is$| Jct$| Key$| Knob$| Ladr$| Lane$| Lea$| Ledr$| Lgh$| Line$| Link$| Lkt$| Lndg$| Loop$| Mall$| Mdws$| Mead$| Mews$| Mile$| Motu$| Mt$| Mwy$| Nvs$| Oaks$| Padk$| Paku$| Pass$| Pde$| Pk$| Pkwy$| Pl$| Priors$| Prom$| Psge$| Pt$| Pth$| Qdrt$| Qy$| Rd$| Rdge$| Rds$| Rdwy$| Reef$| Res$| Rest$| Rise$| Row$| Rte$| Rtr$| SH$| Slp$| Spa$| Spur$| Sq$| St$| Steep$| Stgt$| Stps$| Strd$| Svln$| Tce$| Tmwy$| Trk$| Trl$| Trs$| Twrs$| Vale$| Vis$| Vlg$| Vlls$| Vly$| Vnus$| Vue$| Vw$| Vws$| Waters$| Way$| Whrf$| Wlk$| Wynd$"](area.a);
  wr[highway][highway!=platform][highway!="bus_stop"][amenity!=shelter][!bus][name~" Accs.$| Accswy.$| Aly.$| Ancg.$| App.$| Arc.$| Arch.$| Ave.$| Bank.$| Bay.$| Bch.$| Belt.$| Blf.$| Blvd.$| Bnd.$| Brae.$| Brg.$| Briars.$| Byp.$| Ch.$| Cir.$| Cl.$| Clm.$| Cmn.$| Crcs.$| Cres.$| Crk.$| Crst.$| Crt.$| Crts.$| Ctr.$| Cul.$| Cv.$| Del.$| Dle.$| Downs.$| Dr.$| Dune.$| Dvn.$| Elm.$| End.$| Ent.$| Esp.$| Est.$| Fall.$| Fare.$| Fawy.$| Fen.$| Fern.$| Flt.$| Flts.$| Frms.$| Gdn.$| Gdns.$| Gld.$| Gln.$| Gly.$| Grg.$| Grn.$| Grv.$| Gte.$| Head.$| Hl.$| Hts.$| Hvn.$| Hwy.$| Is.$| Jct.$| Key.$| Knob.$| Ladr.$| Lane.$| Lea.$| Ledr.$| Lgh.$| Line.$| Link.$| Lkt.$| Lndg.$| Loop.$| Mall.$| Mdws.$| Mead.$| Mews.$| Mile.$| Motu.$| Mt.$| Mwy.$| Nvs.$| Oaks.$| Padk.$| Paku.$| Pass.$| Pde.$| Pk.$| Pkwy.$| Pl.$| Priors.$| Prom.$| Psge.$| Pt.$| Pth.$| Qdrt.$| Qy.$| Rd.$| Rdge.$| Rds.$| Rdwy.$| Reef.$| Res.$| Rest.$| Rise.$| Row.$| Rte.$| Rtr.$| SH.$| Slp.$| Spa.$| Spur.$| Sq.$| St.$| Steep.$| Stgt.$| Stps.$| Strd.$| Svln.$| Tce.$| Tmwy.$| Trk.$| Trl.$| Trs.$| Twrs.$| Vale.$| Vis.$| Vlg.$| Vlls.$| Vly.$| Vnus.$| Vue.$| Vw.$| Vws.$| Waters.$| Way.$| Whrf.$| Wlk.$| Wynd.$"](area.a);
  wr[highway][highway!=platform][highway!="bus_stop"][amenity!=shelter][!bus][name~"^Accs |^Accswy |^Aly |^Ancg |^App |^Arc |^Arch |^Ave |^Bank |^Bay |^Bch |^Belt |^Blf |^Blvd |^Bnd |^Brae |^Brg |^Briars |^Byp |^Ch |^Cir |^Cl |^Clm |^Cmn |^Crcs |^Cres |^Crk |^Crst |^Crt |^Crts |^Ctr |^Cul |^Cv |^Del |^Dle |^Downs |^Dr |^Dune |^Dvn |^Elm |^End |^Ent |^Esp |^Est |^Fall |^Fare |^Fawy |^Fen |^Fern |^Flt |^Flts |^Frms |^Gdn |^Gdns |^Gld |^Gln |^Gly |^Grg |^Grn |^Grv |^Gte |^Head |^Hl |^Hts |^Hvn |^Hwy |^Is |^Jct |^Key |^Knob |^Ladr |^Lane |^Lea |^Ledr |^Lgh |^Line |^Link |^Lkt |^Lndg |^Loop |^Mall |^Mdws |^Mead |^Mews |^Mile |^Motu |^Mt |^Mwy |^Nvs |^Oaks |^Padk |^Paku |^Pass |^Pde |^Pk |^Pkwy |^Pl |^Priors |^Prom |^Psge |^Pt |^Pth |^Qdrt |^Qy |^Rd |^Rdge |^Rds |^Rdwy |^Reef |^Res |^Rest |^Rise |^Row |^Rte |^Rtr |^SH |^Slp |^Spa |^Spur |^Sq |^St |^Steep |^Stgt |^Stps |^Strd |^Svln |^Tce |^Tmwy |^Trk |^Trl |^Trs |^Twrs |^Vale |^Vis |^Vlg |^Vlls |^Vly |^Vnus |^Vue |^Vw |^Vws |^Waters |^Way |^Whrf |^Wlk |^Wynd "](area.a);
  wr[highway][highway!=platform][highway!="bus_stop"][amenity!=shelter][!bus][name~" Accs | Accswy | Aly | Ancg | App | Arc | Arch | Ave | Bank | Bay | Bch | Belt | Blf | Blvd | Bnd | Brae | Brg | Briars | Byp | Ch | Cir | Cl | Clm | Cmn | Crcs | Cres | Crk | Crst | Crt | Crts | Ctr | Cul | Cv | Del | Dle | Downs | Dr | Dune | Dvn | Elm | End | Ent | Esp | Est | Fall | Fare | Fawy | Fen | Fern | Flt | Flts | Frms | Gdn | Gdns | Gld | Gln | Gly | Grg | Grn | Grv | Gte | Head | Hl | Hts | Hvn | Hwy | Is | Jct | Key | Knob | Ladr | Lane | Lea | Ledr | Lgh | Line | Link | Lkt | Lndg | Loop | Mall | Mdws | Mead | Mews | Mile | Motu | Mt | Mwy | Nvs | Oaks | Padk | Paku | Pass | Pde | Pk | Pkwy | Pl | Priors | Prom | Psge | Pt | Pth | Qdrt | Qy | Rd | Rdge | Rds | Rdwy | Reef | Res | Rest | Rise | Row | Rte | Rtr | SH | Slp | Spa | Spur | Sq | St | Steep | Stgt | Stps | Strd | Svln | Tce | Tmwy | Trk | Trl | Trs | Twrs | Vale | Vis | Vlg | Vlls | Vly | Vnus | Vue | Vw | Vws | Waters | Way | Whrf | Wlk | Wynd "](area.a);
  nwr["addr:street"~" Accs$| Accswy$| Aly$| Ancg$| App$| Arc$| Arch$| Ave$| Bank$| Bay$| Bch$| Belt$| Blf$| Blvd$| Bnd$| Brae$| Brg$| Briars$| Byp$| Ch$| Cir$| Cl$| Clm$| Cmn$| Crcs$| Cres$| Crk$| Crst$| Crt$| Crts$| Ctr$| Cul$| Cv$| Del$| Dle$| Downs$| Dr$| Dune$| Dvn$| Elm$| End$| Ent$| Esp$| Est$| Fall$| Fare$| Fawy$| Fen$| Fern$| Flt$| Flts$| Frms$| Gdn$| Gdns$| Gld$| Gln$| Gly$| Grg$| Grn$| Grv$| Gte$| Head$| Hl$| Hts$| Hvn$| Hwy$| Is$| Jct$| Key$| Knob$| Ladr$| Lane$| Lea$| Ledr$| Lgh$| Line$| Link$| Lkt$| Lndg$| Loop$| Mall$| Mdws$| Mead$| Mews$| Mile$| Motu$| Mt$| Mwy$| Nvs$| Oaks$| Padk$| Paku$| Pass$| Pde$| Pk$| Pkwy$| Pl$| Priors$| Prom$| Psge$| Pt$| Pth$| Qdrt$| Qy$| Rd$| Rdge$| Rds$| Rdwy$| Reef$| Res$| Rest$| Rise$| Row$| Rte$| Rtr$| SH$| Slp$| Spa$| Spur$| Sq$| St$| Steep$| Stgt$| Stps$| Strd$| Svln$| Tce$| Tmwy$| Trk$| Trl$| Trs$| Twrs$| Vale$| Vis$| Vlg$| Vlls$| Vly$| Vnus$| Vue$| Vw$| Vws$| Waters$| Way$| Whrf$| Wlk$| Wynd$"](area.a);
  nwr["addr:street"~" Accs.$| Accswy.$| Aly.$| Ancg.$| App.$| Arc.$| Arch.$| Ave.$| Bank.$| Bay.$| Bch.$| Belt.$| Blf.$| Blvd.$| Bnd.$| Brae.$| Brg.$| Briars.$| Byp.$| Ch.$| Cir.$| Cl.$| Clm.$| Cmn.$| Crcs.$| Cres.$| Crk.$| Crst.$| Crt.$| Crts.$| Ctr.$| Cul.$| Cv.$| Del.$| Dle.$| Downs.$| Dr.$| Dune.$| Dvn.$| Elm.$| End.$| Ent.$| Esp.$| Est.$| Fall.$| Fare.$| Fawy.$| Fen.$| Fern.$| Flt.$| Flts.$| Frms.$| Gdn.$| Gdns.$| Gld.$| Gln.$| Gly.$| Grg.$| Grn.$| Grv.$| Gte.$| Head.$| Hl.$| Hts.$| Hvn.$| Hwy.$| Is.$| Jct.$| Key.$| Knob.$| Ladr.$| Lane.$| Lea.$| Ledr.$| Lgh.$| Line.$| Link.$| Lkt.$| Lndg.$| Loop.$| Mall.$| Mdws.$| Mead.$| Mews.$| Mile.$| Motu.$| Mt.$| Mwy.$| Nvs.$| Oaks.$| Padk.$| Paku.$| Pass.$| Pde.$| Pk.$| Pkwy.$| Pl.$| Priors.$| Prom.$| Psge.$| Pt.$| Pth.$| Qdrt.$| Qy.$| Rd.$| Rdge.$| Rds.$| Rdwy.$| Reef.$| Res.$| Rest.$| Rise.$| Row.$| Rte.$| Rtr.$| SH.$| Slp.$| Spa.$| Spur.$| Sq.$| St.$| Steep.$| Stgt.$| Stps.$| Strd.$| Svln.$| Tce.$| Tmwy.$| Trk.$| Trl.$| Trs.$| Twrs.$| Vale.$| Vis.$| Vlg.$| Vlls.$| Vly.$| Vnus.$| Vue.$| Vw.$| Vws.$| Waters.$| Way.$| Whrf.$| Wlk.$| Wynd.$"](area.a);
  nwr["addr:street"~"^Accs |^Accswy |^Aly |^Ancg |^App |^Arc |^Arch |^Ave |^Bank |^Bay |^Bch |^Belt |^Blf |^Blvd |^Bnd |^Brae |^Brg |^Briars |^Byp |^Ch |^Cir |^Cl |^Clm |^Cmn |^Crcs |^Cres |^Crk |^Crst |^Crt |^Crts |^Ctr |^Cul |^Cv |^Del |^Dle |^Downs |^Dr |^Dune |^Dvn |^Elm |^End |^Ent |^Esp |^Est |^Fall |^Fare |^Fawy |^Fen |^Fern |^Flt |^Flts |^Frms |^Gdn |^Gdns |^Gld |^Gln |^Gly |^Grg |^Grn |^Grv |^Gte |^Head |^Hl |^Hts |^Hvn |^Hwy |^Is |^Jct |^Key |^Knob |^Ladr |^Lane |^Lea |^Ledr |^Lgh |^Line |^Link |^Lkt |^Lndg |^Loop |^Mall |^Mdws |^Mead |^Mews |^Mile |^Motu |^Mt |^Mwy |^Nvs |^Oaks |^Padk |^Paku |^Pass |^Pde |^Pk |^Pkwy |^Pl |^Priors |^Prom |^Psge |^Pt |^Pth |^Qdrt |^Qy |^Rd |^Rdge |^Rds |^Rdwy |^Reef |^Res |^Rest |^Rise |^Row |^Rte |^Rtr |^SH |^Slp |^Spa |^Spur |^Sq |^St |^Steep |^Stgt |^Stps |^Strd |^Svln |^Tce |^Tmwy |^Trk |^Trl |^Trs |^Twrs |^Vale |^Vis |^Vlg |^Vlls |^Vly |^Vnus |^Vue |^Vw |^Vws |^Waters |^Way |^Whrf |^Wlk |^Wynd "](area.a);
  nwr["addr:street"~" Accs | Accswy | Aly | Ancg | App | Arc | Arch | Ave | Bank | Bay | Bch | Belt | Blf | Blvd | Bnd | Brae | Brg | Briars | Byp | Ch | Cir | Cl | Clm | Cmn | Crcs | Cres | Crk | Crst | Crt | Crts | Ctr | Cul | Cv | Del | Dle | Downs | Dr | Dune | Dvn | Elm | End | Ent | Esp | Est | Fall | Fare | Fawy | Fen | Fern | Flt | Flts | Frms | Gdn | Gdns | Gld | Gln | Gly | Grg | Grn | Grv | Gte | Head | Hl | Hts | Hvn | Hwy | Is | Jct | Key | Knob | Ladr | Lane | Lea | Ledr | Lgh | Line | Link | Lkt | Lndg | Loop | Mall | Mdws | Mead | Mews | Mile | Motu | Mt | Mwy | Nvs | Oaks | Padk | Paku | Pass | Pde | Pk | Pkwy | Pl | Priors | Prom | Psge | Pt | Pth | Qdrt | Qy | Rd | Rdge | Rds | Rdwy | Reef | Res | Rest | Rise | Row | Rte | Rtr | SH | Slp | Spa | Spur | Sq | St | Steep | Stgt | Stps | Strd | Svln | Tce | Tmwy | Trk | Trl | Trs | Twrs | Vale | Vis | Vlg | Vlls | Vly | Vnus | Vue | Vw | Vws | Waters | Way | Whrf | Wlk | Wynd "](area.a);
);
out body;
>;
out skel qt;
*/

*["highway"]["name"]["highway"!="bus_stop"] {
    set highway_name;
}

*["addr:street"]["addr:street"=~/ Accs$/] {
assertNoMatch: "way \"addr:street\"=Main Access";
assertMatch: "way \"addr:street\"=Main Accs";
throwWarning: tr("addr:street={0} contains postfix Accs, should likely be expanded to Access","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Access");
group: tr("addr:street contains postfix Accs, should likely be expanded to Access");
}

*["addr:street"]["addr:street"=~/ Accswy$/] {
assertNoMatch: "way \"addr:street\"=Main Accessway";
assertMatch: "way \"addr:street\"=Main Accswy";
throwWarning: tr("addr:street={0} contains postfix Accswy, should likely be expanded to Accessway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-6), "Accessway");
group: tr("addr:street contains postfix Accswy, should likely be expanded to Accessway");
}

*["addr:street"]["addr:street"=~/ Aly$/] {
assertNoMatch: "way \"addr:street\"=Main Alley";
assertMatch: "way \"addr:street\"=Main Aly";
throwWarning: tr("addr:street={0} contains postfix Aly, should likely be expanded to Alley","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Alley");
group: tr("addr:street contains postfix Aly, should likely be expanded to Alley");
}

*["addr:street"]["addr:street"=~/ Ancg$/] {
assertNoMatch: "way \"addr:street\"=Main Anchorage";
assertMatch: "way \"addr:street\"=Main Ancg";
throwWarning: tr("addr:street={0} contains postfix Ancg, should likely be expanded to Anchorage","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Anchorage");
group: tr("addr:street contains postfix Ancg, should likely be expanded to Anchorage");
}

*["addr:street"]["addr:street"=~/ App$/] {
assertNoMatch: "way \"addr:street\"=Main Approach";
assertMatch: "way \"addr:street\"=Main App";
throwWarning: tr("addr:street={0} contains postfix App, should likely be expanded to Approach","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Approach");
group: tr("addr:street contains postfix App, should likely be expanded to Approach");
}

*["addr:street"]["addr:street"=~/ Arc$/] {
assertNoMatch: "way \"addr:street\"=Main Arcade";
assertMatch: "way \"addr:street\"=Main Arc";
throwWarning: tr("addr:street={0} contains postfix Arc, should likely be expanded to Arcade","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Arcade");
group: tr("addr:street contains postfix Arc, should likely be expanded to Arcade");
}

*["addr:street"]["addr:street"=~/ Arch$/] {
assertNoMatch: "way \"addr:street\"=Main Arch";
assertMatch: "way \"addr:street\"=Main Arch";
throwWarning: tr("addr:street={0} contains postfix Arch, should likely be expanded to Arch","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Arch");
group: tr("addr:street contains postfix Arch, should likely be expanded to Arch");
}

*["addr:street"]["addr:street"=~/ Ave$/] {
assertNoMatch: "way \"addr:street\"=Main Avenue";
assertMatch: "way \"addr:street\"=Main Ave";
throwWarning: tr("addr:street={0} contains postfix Ave, should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Avenue");
group: tr("addr:street contains postfix Ave, should likely be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/ Bank$/] {
assertNoMatch: "way \"addr:street\"=Main Bank";
assertMatch: "way \"addr:street\"=Main Bank";
throwWarning: tr("addr:street={0} contains postfix Bank, should likely be expanded to Bank","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Bank");
group: tr("addr:street contains postfix Bank, should likely be expanded to Bank");
}

*["addr:street"]["addr:street"=~/ Bay$/] {
assertNoMatch: "way \"addr:street\"=Main Bay";
assertMatch: "way \"addr:street\"=Main Bay";
throwWarning: tr("addr:street={0} contains postfix Bay, should likely be expanded to Bay","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Bay");
group: tr("addr:street contains postfix Bay, should likely be expanded to Bay");
}

*["addr:street"]["addr:street"=~/ Bch$/] {
assertNoMatch: "way \"addr:street\"=Main Beach";
assertMatch: "way \"addr:street\"=Main Bch";
throwWarning: tr("addr:street={0} contains postfix Bch, should likely be expanded to Beach","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Beach");
group: tr("addr:street contains postfix Bch, should likely be expanded to Beach");
}

*["addr:street"]["addr:street"=~/ Belt$/] {
assertNoMatch: "way \"addr:street\"=Main Belt";
assertMatch: "way \"addr:street\"=Main Belt";
throwWarning: tr("addr:street={0} contains postfix Belt, should likely be expanded to Belt","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Belt");
group: tr("addr:street contains postfix Belt, should likely be expanded to Belt");
}

*["addr:street"]["addr:street"=~/ Blf$/] {
assertNoMatch: "way \"addr:street\"=Main Bluff";
assertMatch: "way \"addr:street\"=Main Blf";
throwWarning: tr("addr:street={0} contains postfix Blf, should likely be expanded to Bluff","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Bluff");
group: tr("addr:street contains postfix Blf, should likely be expanded to Bluff");
}

*["addr:street"]["addr:street"=~/ Blvd$/] {
assertNoMatch: "way \"addr:street\"=Main Boulevard";
assertMatch: "way \"addr:street\"=Main Blvd";
throwWarning: tr("addr:street={0} contains postfix Blvd, should likely be expanded to Boulevard","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Boulevard");
group: tr("addr:street contains postfix Blvd, should likely be expanded to Boulevard");
}

*["addr:street"]["addr:street"=~/ Bnd$/] {
assertNoMatch: "way \"addr:street\"=Main Bend";
assertMatch: "way \"addr:street\"=Main Bnd";
throwWarning: tr("addr:street={0} contains postfix Bnd, should likely be expanded to Bend","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Bend");
group: tr("addr:street contains postfix Bnd, should likely be expanded to Bend");
}

*["addr:street"]["addr:street"=~/ Brae$/] {
assertNoMatch: "way \"addr:street\"=Main Brae";
assertMatch: "way \"addr:street\"=Main Brae";
throwWarning: tr("addr:street={0} contains postfix Brae, should likely be expanded to Brae","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Brae");
group: tr("addr:street contains postfix Brae, should likely be expanded to Brae");
}

*["addr:street"]["addr:street"=~/ Brg$/] {
assertNoMatch: "way \"addr:street\"=Main Bridge";
assertMatch: "way \"addr:street\"=Main Brg";
throwWarning: tr("addr:street={0} contains postfix Brg, should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Bridge");
group: tr("addr:street contains postfix Brg, should likely be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/ Briars$/] {
assertNoMatch: "way \"addr:street\"=Main Briars";
assertMatch: "way \"addr:street\"=Main Briars";
throwWarning: tr("addr:street={0} contains postfix Briars, should likely be expanded to Briars","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-6), "Briars");
group: tr("addr:street contains postfix Briars, should likely be expanded to Briars");
}

*["addr:street"]["addr:street"=~/ Byp$/] {
assertNoMatch: "way \"addr:street\"=Main Bypass";
assertMatch: "way \"addr:street\"=Main Byp";
throwWarning: tr("addr:street={0} contains postfix Byp, should likely be expanded to Bypass","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Bypass");
group: tr("addr:street contains postfix Byp, should likely be expanded to Bypass");
}

*["addr:street"]["addr:street"=~/ Ch$/] {
assertNoMatch: "way \"addr:street\"=Main Chase";
assertMatch: "way \"addr:street\"=Main Ch";
throwWarning: tr("addr:street={0} contains postfix Ch, should likely be expanded to Chase","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Chase");
group: tr("addr:street contains postfix Ch, should likely be expanded to Chase");
}

*["addr:street"]["addr:street"=~/ Cir$/] {
assertNoMatch: "way \"addr:street\"=Main Circle";
assertMatch: "way \"addr:street\"=Main Cir";
throwWarning: tr("addr:street={0} contains postfix Cir, should likely be expanded to Circle","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Circle");
group: tr("addr:street contains postfix Cir, should likely be expanded to Circle");
}

*["addr:street"]["addr:street"=~/ Cl$/] {
assertNoMatch: "way \"addr:street\"=Main Close";
assertMatch: "way \"addr:street\"=Main Cl";
throwWarning: tr("addr:street={0} contains postfix Cl, should likely be expanded to Close","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Close");
group: tr("addr:street contains postfix Cl, should likely be expanded to Close");
}

*["addr:street"]["addr:street"=~/ Clm$/] {
assertNoMatch: "way \"addr:street\"=Main Claim";
assertMatch: "way \"addr:street\"=Main Clm";
throwWarning: tr("addr:street={0} contains postfix Clm, should likely be expanded to Claim","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Claim");
group: tr("addr:street contains postfix Clm, should likely be expanded to Claim");
}

*["addr:street"]["addr:street"=~/ Cmn$/] {
assertNoMatch: "way \"addr:street\"=Main Common";
assertMatch: "way \"addr:street\"=Main Cmn";
throwWarning: tr("addr:street={0} contains postfix Cmn, should likely be expanded to Common","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Common");
group: tr("addr:street contains postfix Cmn, should likely be expanded to Common");
}

*["addr:street"]["addr:street"=~/ Crcs$/] {
assertNoMatch: "way \"addr:street\"=Main Circus";
assertMatch: "way \"addr:street\"=Main Crcs";
throwWarning: tr("addr:street={0} contains postfix Crcs, should likely be expanded to Circus","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Circus");
group: tr("addr:street contains postfix Crcs, should likely be expanded to Circus");
}

*["addr:street"]["addr:street"=~/ Cres$/] {
assertNoMatch: "way \"addr:street\"=Main Crescent";
assertMatch: "way \"addr:street\"=Main Cres";
throwWarning: tr("addr:street={0} contains postfix Cres, should likely be expanded to Crescent","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Crescent");
group: tr("addr:street contains postfix Cres, should likely be expanded to Crescent");
}

*["addr:street"]["addr:street"=~/ Crk$/] {
assertNoMatch: "way \"addr:street\"=Main Creek";
assertMatch: "way \"addr:street\"=Main Crk";
throwWarning: tr("addr:street={0} contains postfix Crk, should likely be expanded to Creek","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Creek");
group: tr("addr:street contains postfix Crk, should likely be expanded to Creek");
}

*["addr:street"]["addr:street"=~/ Crst$/] {
assertNoMatch: "way \"addr:street\"=Main Crest";
assertMatch: "way \"addr:street\"=Main Crst";
throwWarning: tr("addr:street={0} contains postfix Crst, should likely be expanded to Crest","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Crest");
group: tr("addr:street contains postfix Crst, should likely be expanded to Crest");
}

*["addr:street"]["addr:street"=~/ Crt$/] {
assertNoMatch: "way \"addr:street\"=Main Court";
assertMatch: "way \"addr:street\"=Main Crt";
throwWarning: tr("addr:street={0} contains postfix Crt, should likely be expanded to Court","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Court");
group: tr("addr:street contains postfix Crt, should likely be expanded to Court");
}

*["addr:street"]["addr:street"=~/ Crts$/] {
assertNoMatch: "way \"addr:street\"=Main Courts";
assertMatch: "way \"addr:street\"=Main Crts";
throwWarning: tr("addr:street={0} contains postfix Crts, should likely be expanded to Courts","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Courts");
group: tr("addr:street contains postfix Crts, should likely be expanded to Courts");
}

*["addr:street"]["addr:street"=~/ Ctr$/] {
assertNoMatch: "way \"addr:street\"=Main Centre";
assertMatch: "way \"addr:street\"=Main Ctr";
throwWarning: tr("addr:street={0} contains postfix Ctr, should likely be expanded to Centre","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Centre");
group: tr("addr:street contains postfix Ctr, should likely be expanded to Centre");
}

*["addr:street"]["addr:street"=~/ Cul$/] {
assertNoMatch: "way \"addr:street\"=Main Cul";
assertMatch: "way \"addr:street\"=Main Cul";
throwWarning: tr("addr:street={0} contains postfix Cul, should likely be expanded to Cul","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Cul");
group: tr("addr:street contains postfix Cul, should likely be expanded to Cul");
}

*["addr:street"]["addr:street"=~/ Cv$/] {
assertNoMatch: "way \"addr:street\"=Main Cove";
assertMatch: "way \"addr:street\"=Main Cv";
throwWarning: tr("addr:street={0} contains postfix Cv, should likely be expanded to Cove","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Cove");
group: tr("addr:street contains postfix Cv, should likely be expanded to Cove");
}

*["addr:street"]["addr:street"=~/ Del$/] {
assertNoMatch: "way \"addr:street\"=Main Dell";
assertMatch: "way \"addr:street\"=Main Del";
throwWarning: tr("addr:street={0} contains postfix Del, should likely be expanded to Dell","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Dell");
group: tr("addr:street contains postfix Del, should likely be expanded to Dell");
}

*["addr:street"]["addr:street"=~/ Dle$/] {
assertNoMatch: "way \"addr:street\"=Main Dale";
assertMatch: "way \"addr:street\"=Main Dle";
throwWarning: tr("addr:street={0} contains postfix Dle, should likely be expanded to Dale","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Dale");
group: tr("addr:street contains postfix Dle, should likely be expanded to Dale");
}

*["addr:street"]["addr:street"=~/ Downs$/] {
assertNoMatch: "way \"addr:street\"=Main Downs";
assertMatch: "way \"addr:street\"=Main Downs";
throwWarning: tr("addr:street={0} contains postfix Downs, should likely be expanded to Downs","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Downs");
group: tr("addr:street contains postfix Downs, should likely be expanded to Downs");
}

*["addr:street"]["addr:street"=~/ Dr$/] {
assertNoMatch: "way \"addr:street\"=Main Drive";
assertMatch: "way \"addr:street\"=Main Dr";
throwWarning: tr("addr:street={0} contains postfix Dr, should likely be expanded to Drive","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Drive");
group: tr("addr:street contains postfix Dr, should likely be expanded to Drive");
}

*["addr:street"]["addr:street"=~/ Dune$/] {
assertNoMatch: "way \"addr:street\"=Main Dune";
assertMatch: "way \"addr:street\"=Main Dune";
throwWarning: tr("addr:street={0} contains postfix Dune, should likely be expanded to Dune","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Dune");
group: tr("addr:street contains postfix Dune, should likely be expanded to Dune");
}

*["addr:street"]["addr:street"=~/ Dvn$/] {
assertNoMatch: "way \"addr:street\"=Main Deviation";
assertMatch: "way \"addr:street\"=Main Dvn";
throwWarning: tr("addr:street={0} contains postfix Dvn, should likely be expanded to Deviation","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Deviation");
group: tr("addr:street contains postfix Dvn, should likely be expanded to Deviation");
}

*["addr:street"]["addr:street"=~/ Elm$/] {
assertNoMatch: "way \"addr:street\"=Main Elm";
assertMatch: "way \"addr:street\"=Main Elm";
throwWarning: tr("addr:street={0} contains postfix Elm, should likely be expanded to Elm","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Elm");
group: tr("addr:street contains postfix Elm, should likely be expanded to Elm");
}

*["addr:street"]["addr:street"=~/ End$/] {
assertNoMatch: "way \"addr:street\"=Main End";
assertMatch: "way \"addr:street\"=Main End";
throwWarning: tr("addr:street={0} contains postfix End, should likely be expanded to End","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "End");
group: tr("addr:street contains postfix End, should likely be expanded to End");
}

*["addr:street"]["addr:street"=~/ Ent$/] {
assertNoMatch: "way \"addr:street\"=Main Entrance";
assertMatch: "way \"addr:street\"=Main Ent";
throwWarning: tr("addr:street={0} contains postfix Ent, should likely be expanded to Entrance","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Entrance");
group: tr("addr:street contains postfix Ent, should likely be expanded to Entrance");
}

*["addr:street"]["addr:street"=~/ Esp$/] {
assertNoMatch: "way \"addr:street\"=Main Esplanade";
assertMatch: "way \"addr:street\"=Main Esp";
throwWarning: tr("addr:street={0} contains postfix Esp, should likely be expanded to Esplanade","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Esplanade");
group: tr("addr:street contains postfix Esp, should likely be expanded to Esplanade");
}

*["addr:street"]["addr:street"=~/ Est$/] {
assertNoMatch: "way \"addr:street\"=Main Estate";
assertMatch: "way \"addr:street\"=Main Est";
throwWarning: tr("addr:street={0} contains postfix Est, should likely be expanded to Estate","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Estate");
group: tr("addr:street contains postfix Est, should likely be expanded to Estate");
}

*["addr:street"]["addr:street"=~/ Fall$/] {
assertNoMatch: "way \"addr:street\"=Main Fall";
assertMatch: "way \"addr:street\"=Main Fall";
throwWarning: tr("addr:street={0} contains postfix Fall, should likely be expanded to Fall","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Fall");
group: tr("addr:street contains postfix Fall, should likely be expanded to Fall");
}

*["addr:street"]["addr:street"=~/ Fare$/] {
assertNoMatch: "way \"addr:street\"=Main Fare";
assertMatch: "way \"addr:street\"=Main Fare";
throwWarning: tr("addr:street={0} contains postfix Fare, should likely be expanded to Fare","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Fare");
group: tr("addr:street contains postfix Fare, should likely be expanded to Fare");
}

*["addr:street"]["addr:street"=~/ Fawy$/] {
assertNoMatch: "way \"addr:street\"=Main Fairway";
assertMatch: "way \"addr:street\"=Main Fawy";
throwWarning: tr("addr:street={0} contains postfix Fawy, should likely be expanded to Fairway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Fairway");
group: tr("addr:street contains postfix Fawy, should likely be expanded to Fairway");
}

*["addr:street"]["addr:street"=~/ Fen$/] {
assertNoMatch: "way \"addr:street\"=Main Fen";
assertMatch: "way \"addr:street\"=Main Fen";
throwWarning: tr("addr:street={0} contains postfix Fen, should likely be expanded to Fen","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Fen");
group: tr("addr:street contains postfix Fen, should likely be expanded to Fen");
}

*["addr:street"]["addr:street"=~/ Fern$/] {
assertNoMatch: "way \"addr:street\"=Main Fern";
assertMatch: "way \"addr:street\"=Main Fern";
throwWarning: tr("addr:street={0} contains postfix Fern, should likely be expanded to Fern","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Fern");
group: tr("addr:street contains postfix Fern, should likely be expanded to Fern");
}

*["addr:street"]["addr:street"=~/ Flt$/] {
assertNoMatch: "way \"addr:street\"=Main Flat";
assertMatch: "way \"addr:street\"=Main Flt";
throwWarning: tr("addr:street={0} contains postfix Flt, should likely be expanded to Flat","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Flat");
group: tr("addr:street contains postfix Flt, should likely be expanded to Flat");
}

*["addr:street"]["addr:street"=~/ Flts$/] {
assertNoMatch: "way \"addr:street\"=Main Flats";
assertMatch: "way \"addr:street\"=Main Flts";
throwWarning: tr("addr:street={0} contains postfix Flts, should likely be expanded to Flats","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Flats");
group: tr("addr:street contains postfix Flts, should likely be expanded to Flats");
}

*["addr:street"]["addr:street"=~/ Frms$/] {
assertNoMatch: "way \"addr:street\"=Main Farms";
assertMatch: "way \"addr:street\"=Main Frms";
throwWarning: tr("addr:street={0} contains postfix Frms, should likely be expanded to Farms","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Farms");
group: tr("addr:street contains postfix Frms, should likely be expanded to Farms");
}

*["addr:street"]["addr:street"=~/ Gdn$/] {
assertNoMatch: "way \"addr:street\"=Main Garden";
assertMatch: "way \"addr:street\"=Main Gdn";
throwWarning: tr("addr:street={0} contains postfix Gdn, should likely be expanded to Garden","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Garden");
group: tr("addr:street contains postfix Gdn, should likely be expanded to Garden");
}

*["addr:street"]["addr:street"=~/ Gdns$/] {
assertNoMatch: "way \"addr:street\"=Main Gardens";
assertMatch: "way \"addr:street\"=Main Gdns";
throwWarning: tr("addr:street={0} contains postfix Gdns, should likely be expanded to Gardens","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Gardens");
group: tr("addr:street contains postfix Gdns, should likely be expanded to Gardens");
}

*["addr:street"]["addr:street"=~/ Gld$/] {
assertNoMatch: "way \"addr:street\"=Main Glade";
assertMatch: "way \"addr:street\"=Main Gld";
throwWarning: tr("addr:street={0} contains postfix Gld, should likely be expanded to Glade","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Glade");
group: tr("addr:street contains postfix Gld, should likely be expanded to Glade");
}

*["addr:street"]["addr:street"=~/ Gln$/] {
assertNoMatch: "way \"addr:street\"=Main Glen";
assertMatch: "way \"addr:street\"=Main Gln";
throwWarning: tr("addr:street={0} contains postfix Gln, should likely be expanded to Glen","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Glen");
group: tr("addr:street contains postfix Gln, should likely be expanded to Glen");
}

*["addr:street"]["addr:street"=~/ Gly$/] {
assertNoMatch: "way \"addr:street\"=Main Gully";
assertMatch: "way \"addr:street\"=Main Gly";
throwWarning: tr("addr:street={0} contains postfix Gly, should likely be expanded to Gully","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Gully");
group: tr("addr:street contains postfix Gly, should likely be expanded to Gully");
}

*["addr:street"]["addr:street"=~/ Grg$/] {
assertNoMatch: "way \"addr:street\"=Main Grange";
assertMatch: "way \"addr:street\"=Main Grg";
throwWarning: tr("addr:street={0} contains postfix Grg, should likely be expanded to Grange","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Grange");
group: tr("addr:street contains postfix Grg, should likely be expanded to Grange");
}

*["addr:street"]["addr:street"=~/ Grn$/] {
assertNoMatch: "way \"addr:street\"=Main Green";
assertMatch: "way \"addr:street\"=Main Grn";
throwWarning: tr("addr:street={0} contains postfix Grn, should likely be expanded to Green","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Green");
group: tr("addr:street contains postfix Grn, should likely be expanded to Green");
}

*["addr:street"]["addr:street"=~/ Grv$/] {
assertNoMatch: "way \"addr:street\"=Main Grove";
assertMatch: "way \"addr:street\"=Main Grv";
throwWarning: tr("addr:street={0} contains postfix Grv, should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Grove");
group: tr("addr:street contains postfix Grv, should likely be expanded to Grove");
}

*["addr:street"]["addr:street"=~/ Gte$/] {
assertNoMatch: "way \"addr:street\"=Main Gate";
assertMatch: "way \"addr:street\"=Main Gte";
throwWarning: tr("addr:street={0} contains postfix Gte, should likely be expanded to Gate","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Gate");
group: tr("addr:street contains postfix Gte, should likely be expanded to Gate");
}

*["addr:street"]["addr:street"=~/ Head$/] {
assertNoMatch: "way \"addr:street\"=Main Head";
assertMatch: "way \"addr:street\"=Main Head";
throwWarning: tr("addr:street={0} contains postfix Head, should likely be expanded to Head","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Head");
group: tr("addr:street contains postfix Head, should likely be expanded to Head");
}

*["addr:street"]["addr:street"=~/ Hl$/] {
assertNoMatch: "way \"addr:street\"=Main Hill";
assertMatch: "way \"addr:street\"=Main Hl";
throwWarning: tr("addr:street={0} contains postfix Hl, should likely be expanded to Hill","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Hill");
group: tr("addr:street contains postfix Hl, should likely be expanded to Hill");
}

*["addr:street"]["addr:street"=~/ Hts$/] {
assertNoMatch: "way \"addr:street\"=Main Heights";
assertMatch: "way \"addr:street\"=Main Hts";
throwWarning: tr("addr:street={0} contains postfix Hts, should likely be expanded to Heights","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Heights");
group: tr("addr:street contains postfix Hts, should likely be expanded to Heights");
}

*["addr:street"]["addr:street"=~/ Hvn$/] {
assertNoMatch: "way \"addr:street\"=Main Haven";
assertMatch: "way \"addr:street\"=Main Hvn";
throwWarning: tr("addr:street={0} contains postfix Hvn, should likely be expanded to Haven","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Haven");
group: tr("addr:street contains postfix Hvn, should likely be expanded to Haven");
}

*["addr:street"]["addr:street"=~/ Hwy$/] {
assertNoMatch: "way \"addr:street\"=Main Highway";
assertMatch: "way \"addr:street\"=Main Hwy";
throwWarning: tr("addr:street={0} contains postfix Hwy, should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Highway");
group: tr("addr:street contains postfix Hwy, should likely be expanded to Highway");
}

*["addr:street"]["addr:street"=~/ Is$/] {
assertNoMatch: "way \"addr:street\"=Main Island";
assertMatch: "way \"addr:street\"=Main Is";
throwWarning: tr("addr:street={0} contains postfix Is, should likely be expanded to Island","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Island");
group: tr("addr:street contains postfix Is, should likely be expanded to Island");
}

*["addr:street"]["addr:street"=~/ Jct$/] {
assertNoMatch: "way \"addr:street\"=Main Junction";
assertMatch: "way \"addr:street\"=Main Jct";
throwWarning: tr("addr:street={0} contains postfix Jct, should likely be expanded to Junction","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Junction");
group: tr("addr:street contains postfix Jct, should likely be expanded to Junction");
}

*["addr:street"]["addr:street"=~/ Key$/] {
assertNoMatch: "way \"addr:street\"=Main Key";
assertMatch: "way \"addr:street\"=Main Key";
throwWarning: tr("addr:street={0} contains postfix Key, should likely be expanded to Key","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Key");
group: tr("addr:street contains postfix Key, should likely be expanded to Key");
}

*["addr:street"]["addr:street"=~/ Knob$/] {
assertNoMatch: "way \"addr:street\"=Main Knob";
assertMatch: "way \"addr:street\"=Main Knob";
throwWarning: tr("addr:street={0} contains postfix Knob, should likely be expanded to Knob","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Knob");
group: tr("addr:street contains postfix Knob, should likely be expanded to Knob");
}

*["addr:street"]["addr:street"=~/ Ladr$/] {
assertNoMatch: "way \"addr:street\"=Main Ladder";
assertMatch: "way \"addr:street\"=Main Ladr";
throwWarning: tr("addr:street={0} contains postfix Ladr, should likely be expanded to Ladder","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Ladder");
group: tr("addr:street contains postfix Ladr, should likely be expanded to Ladder");
}

*["addr:street"]["addr:street"=~/ Lane$/] {
assertNoMatch: "way \"addr:street\"=Main Lane";
assertMatch: "way \"addr:street\"=Main Lane";
throwWarning: tr("addr:street={0} contains postfix Lane, should likely be expanded to Lane","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Lane");
group: tr("addr:street contains postfix Lane, should likely be expanded to Lane");
}

*["addr:street"]["addr:street"=~/ Lea$/] {
assertNoMatch: "way \"addr:street\"=Main Lea";
assertMatch: "way \"addr:street\"=Main Lea";
throwWarning: tr("addr:street={0} contains postfix Lea, should likely be expanded to Lea","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Lea");
group: tr("addr:street contains postfix Lea, should likely be expanded to Lea");
}

*["addr:street"]["addr:street"=~/ Ledr$/] {
assertNoMatch: "way \"addr:street\"=Main Leader";
assertMatch: "way \"addr:street\"=Main Ledr";
throwWarning: tr("addr:street={0} contains postfix Ledr, should likely be expanded to Leader","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Leader");
group: tr("addr:street contains postfix Ledr, should likely be expanded to Leader");
}

*["addr:street"]["addr:street"=~/ Lgh$/] {
assertNoMatch: "way \"addr:street\"=Main Leigh";
assertMatch: "way \"addr:street\"=Main Lgh";
throwWarning: tr("addr:street={0} contains postfix Lgh, should likely be expanded to Leigh","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Leigh");
group: tr("addr:street contains postfix Lgh, should likely be expanded to Leigh");
}

*["addr:street"]["addr:street"=~/ Line$/] {
assertNoMatch: "way \"addr:street\"=Main Line";
assertMatch: "way \"addr:street\"=Main Line";
throwWarning: tr("addr:street={0} contains postfix Line, should likely be expanded to Line","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Line");
group: tr("addr:street contains postfix Line, should likely be expanded to Line");
}

*["addr:street"]["addr:street"=~/ Link$/] {
assertNoMatch: "way \"addr:street\"=Main Link";
assertMatch: "way \"addr:street\"=Main Link";
throwWarning: tr("addr:street={0} contains postfix Link, should likely be expanded to Link","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Link");
group: tr("addr:street contains postfix Link, should likely be expanded to Link");
}

*["addr:street"]["addr:street"=~/ Lkt$/] {
assertNoMatch: "way \"addr:street\"=Main Lookout";
assertMatch: "way \"addr:street\"=Main Lkt";
throwWarning: tr("addr:street={0} contains postfix Lkt, should likely be expanded to Lookout","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Lookout");
group: tr("addr:street contains postfix Lkt, should likely be expanded to Lookout");
}

*["addr:street"]["addr:street"=~/ Lndg$/] {
assertNoMatch: "way \"addr:street\"=Main Landing";
assertMatch: "way \"addr:street\"=Main Lndg";
throwWarning: tr("addr:street={0} contains postfix Lndg, should likely be expanded to Landing","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Landing");
group: tr("addr:street contains postfix Lndg, should likely be expanded to Landing");
}

*["addr:street"]["addr:street"=~/ Loop$/] {
assertNoMatch: "way \"addr:street\"=Main Loop";
assertMatch: "way \"addr:street\"=Main Loop";
throwWarning: tr("addr:street={0} contains postfix Loop, should likely be expanded to Loop","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Loop");
group: tr("addr:street contains postfix Loop, should likely be expanded to Loop");
}

*["addr:street"]["addr:street"=~/ Mall$/] {
assertNoMatch: "way \"addr:street\"=Main Mall";
assertMatch: "way \"addr:street\"=Main Mall";
throwWarning: tr("addr:street={0} contains postfix Mall, should likely be expanded to Mall","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Mall");
group: tr("addr:street contains postfix Mall, should likely be expanded to Mall");
}

*["addr:street"]["addr:street"=~/ Mdws$/] {
assertNoMatch: "way \"addr:street\"=Main Meadows";
assertMatch: "way \"addr:street\"=Main Mdws";
throwWarning: tr("addr:street={0} contains postfix Mdws, should likely be expanded to Meadows","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Meadows");
group: tr("addr:street contains postfix Mdws, should likely be expanded to Meadows");
}

*["addr:street"]["addr:street"=~/ Mead$/] {
assertNoMatch: "way \"addr:street\"=Main Mead";
assertMatch: "way \"addr:street\"=Main Mead";
throwWarning: tr("addr:street={0} contains postfix Mead, should likely be expanded to Mead","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Mead");
group: tr("addr:street contains postfix Mead, should likely be expanded to Mead");
}

*["addr:street"]["addr:street"=~/ Mews$/] {
assertNoMatch: "way \"addr:street\"=Main Mews";
assertMatch: "way \"addr:street\"=Main Mews";
throwWarning: tr("addr:street={0} contains postfix Mews, should likely be expanded to Mews","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Mews");
group: tr("addr:street contains postfix Mews, should likely be expanded to Mews");
}

*["addr:street"]["addr:street"=~/ Mile$/] {
assertNoMatch: "way \"addr:street\"=Main Mile";
assertMatch: "way \"addr:street\"=Main Mile";
throwWarning: tr("addr:street={0} contains postfix Mile, should likely be expanded to Mile","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Mile");
group: tr("addr:street contains postfix Mile, should likely be expanded to Mile");
}

*["addr:street"]["addr:street"=~/ Motu$/] {
assertNoMatch: "way \"addr:street\"=Main Motu";
assertMatch: "way \"addr:street\"=Main Motu";
throwWarning: tr("addr:street={0} contains postfix Motu, should likely be expanded to Motu","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Motu");
group: tr("addr:street contains postfix Motu, should likely be expanded to Motu");
}

*["addr:street"]["addr:street"=~/ Mt$/] {
assertNoMatch: "way \"addr:street\"=Main Mount";
assertMatch: "way \"addr:street\"=Main Mt";
throwWarning: tr("addr:street={0} contains postfix Mt, should likely be expanded to Mount","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Mount");
group: tr("addr:street contains postfix Mt, should likely be expanded to Mount");
}

*["addr:street"]["addr:street"=~/ Mwy$/] {
assertNoMatch: "way \"addr:street\"=Main Motorway";
assertMatch: "way \"addr:street\"=Main Mwy";
throwWarning: tr("addr:street={0} contains postfix Mwy, should likely be expanded to Motorway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Motorway");
group: tr("addr:street contains postfix Mwy, should likely be expanded to Motorway");
}

*["addr:street"]["addr:street"=~/ Nvs$/] {
assertNoMatch: "way \"addr:street\"=Main Neaves";
assertMatch: "way \"addr:street\"=Main Nvs";
throwWarning: tr("addr:street={0} contains postfix Nvs, should likely be expanded to Neaves","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Neaves");
group: tr("addr:street contains postfix Nvs, should likely be expanded to Neaves");
}

*["addr:street"]["addr:street"=~/ Oaks$/] {
assertNoMatch: "way \"addr:street\"=Main Oaks";
assertMatch: "way \"addr:street\"=Main Oaks";
throwWarning: tr("addr:street={0} contains postfix Oaks, should likely be expanded to Oaks","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Oaks");
group: tr("addr:street contains postfix Oaks, should likely be expanded to Oaks");
}

*["addr:street"]["addr:street"=~/ Padk$/] {
assertNoMatch: "way \"addr:street\"=Main Paddock";
assertMatch: "way \"addr:street\"=Main Padk";
throwWarning: tr("addr:street={0} contains postfix Padk, should likely be expanded to Paddock","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Paddock");
group: tr("addr:street contains postfix Padk, should likely be expanded to Paddock");
}

*["addr:street"]["addr:street"=~/ Paku$/] {
assertNoMatch: "way \"addr:street\"=Main Paku";
assertMatch: "way \"addr:street\"=Main Paku";
throwWarning: tr("addr:street={0} contains postfix Paku, should likely be expanded to Paku","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Paku");
group: tr("addr:street contains postfix Paku, should likely be expanded to Paku");
}

*["addr:street"]["addr:street"=~/ Pass$/] {
assertNoMatch: "way \"addr:street\"=Main Pass";
assertMatch: "way \"addr:street\"=Main Pass";
throwWarning: tr("addr:street={0} contains postfix Pass, should likely be expanded to Pass","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Pass");
group: tr("addr:street contains postfix Pass, should likely be expanded to Pass");
}

*["addr:street"]["addr:street"=~/ Pde$/] {
assertNoMatch: "way \"addr:street\"=Main Parade";
assertMatch: "way \"addr:street\"=Main Pde";
throwWarning: tr("addr:street={0} contains postfix Pde, should likely be expanded to Parade","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Parade");
group: tr("addr:street contains postfix Pde, should likely be expanded to Parade");
}

*["addr:street"]["addr:street"=~/ Pk$/] {
assertNoMatch: "way \"addr:street\"=Main Park";
assertMatch: "way \"addr:street\"=Main Pk";
throwWarning: tr("addr:street={0} contains postfix Pk, should likely be expanded to Park","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Park");
group: tr("addr:street contains postfix Pk, should likely be expanded to Park");
}

*["addr:street"]["addr:street"=~/ Pkwy$/] {
assertNoMatch: "way \"addr:street\"=Main Parkway";
assertMatch: "way \"addr:street\"=Main Pkwy";
throwWarning: tr("addr:street={0} contains postfix Pkwy, should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Parkway");
group: tr("addr:street contains postfix Pkwy, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pl$/] {
assertNoMatch: "way \"addr:street\"=Main Place";
assertMatch: "way \"addr:street\"=Main Pl";
throwWarning: tr("addr:street={0} contains postfix Pl, should likely be expanded to Place","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Place");
group: tr("addr:street contains postfix Pl, should likely be expanded to Place");
}

*["addr:street"]["addr:street"=~/ Priors$/] {
assertNoMatch: "way \"addr:street\"=Main Priors";
assertMatch: "way \"addr:street\"=Main Priors";
throwWarning: tr("addr:street={0} contains postfix Priors, should likely be expanded to Priors","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-6), "Priors");
group: tr("addr:street contains postfix Priors, should likely be expanded to Priors");
}

*["addr:street"]["addr:street"=~/ Prom$/] {
assertNoMatch: "way \"addr:street\"=Main Promenade";
assertMatch: "way \"addr:street\"=Main Prom";
throwWarning: tr("addr:street={0} contains postfix Prom, should likely be expanded to Promenade","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Promenade");
group: tr("addr:street contains postfix Prom, should likely be expanded to Promenade");
}

*["addr:street"]["addr:street"=~/ Psge$/] {
assertNoMatch: "way \"addr:street\"=Main Passage";
assertMatch: "way \"addr:street\"=Main Psge";
throwWarning: tr("addr:street={0} contains postfix Psge, should likely be expanded to Passage","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Passage");
group: tr("addr:street contains postfix Psge, should likely be expanded to Passage");
}

*["addr:street"]["addr:street"=~/ Pt$/] {
assertNoMatch: "way \"addr:street\"=Main Point";
assertMatch: "way \"addr:street\"=Main Pt";
throwWarning: tr("addr:street={0} contains postfix Pt, should likely be expanded to Point","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Point");
group: tr("addr:street contains postfix Pt, should likely be expanded to Point");
}

*["addr:street"]["addr:street"=~/ Pth$/] {
assertNoMatch: "way \"addr:street\"=Main Path";
assertMatch: "way \"addr:street\"=Main Pth";
throwWarning: tr("addr:street={0} contains postfix Pth, should likely be expanded to Path","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Path");
group: tr("addr:street contains postfix Pth, should likely be expanded to Path");
}

*["addr:street"]["addr:street"=~/ Qdrt$/] {
assertNoMatch: "way \"addr:street\"=Main Quadrant";
assertMatch: "way \"addr:street\"=Main Qdrt";
throwWarning: tr("addr:street={0} contains postfix Qdrt, should likely be expanded to Quadrant","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Quadrant");
group: tr("addr:street contains postfix Qdrt, should likely be expanded to Quadrant");
}

*["addr:street"]["addr:street"=~/ Qy$/] {
assertNoMatch: "way \"addr:street\"=Main Quay";
assertMatch: "way \"addr:street\"=Main Qy";
throwWarning: tr("addr:street={0} contains postfix Qy, should likely be expanded to Quay","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Quay");
group: tr("addr:street contains postfix Qy, should likely be expanded to Quay");
}

*["addr:street"]["addr:street"=~/ Rd$/] {
assertNoMatch: "way \"addr:street\"=Main Road";
assertMatch: "way \"addr:street\"=Main Rd";
throwWarning: tr("addr:street={0} contains postfix Rd, should likely be expanded to Road","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Road");
group: tr("addr:street contains postfix Rd, should likely be expanded to Road");
}

*["addr:street"]["addr:street"=~/ Rdge$/] {
assertNoMatch: "way \"addr:street\"=Main Ridge";
assertMatch: "way \"addr:street\"=Main Rdge";
throwWarning: tr("addr:street={0} contains postfix Rdge, should likely be expanded to Ridge","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Ridge");
group: tr("addr:street contains postfix Rdge, should likely be expanded to Ridge");
}

*["addr:street"]["addr:street"=~/ Rds$/] {
assertNoMatch: "way \"addr:street\"=Main Roads";
assertMatch: "way \"addr:street\"=Main Rds";
throwWarning: tr("addr:street={0} contains postfix Rds, should likely be expanded to Roads","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Roads");
group: tr("addr:street contains postfix Rds, should likely be expanded to Roads");
}

*["addr:street"]["addr:street"=~/ Rdwy$/] {
assertNoMatch: "way \"addr:street\"=Main Roadway";
assertMatch: "way \"addr:street\"=Main Rdwy";
throwWarning: tr("addr:street={0} contains postfix Rdwy, should likely be expanded to Roadway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Roadway");
group: tr("addr:street contains postfix Rdwy, should likely be expanded to Roadway");
}

*["addr:street"]["addr:street"=~/ Reef$/] {
assertNoMatch: "way \"addr:street\"=Main Reef";
assertMatch: "way \"addr:street\"=Main Reef";
throwWarning: tr("addr:street={0} contains postfix Reef, should likely be expanded to Reef","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Reef");
group: tr("addr:street contains postfix Reef, should likely be expanded to Reef");
}

*["addr:street"]["addr:street"=~/ Res$/] {
assertNoMatch: "way \"addr:street\"=Main Reserve";
assertMatch: "way \"addr:street\"=Main Res";
throwWarning: tr("addr:street={0} contains postfix Res, should likely be expanded to Reserve","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Reserve");
group: tr("addr:street contains postfix Res, should likely be expanded to Reserve");
}

*["addr:street"]["addr:street"=~/ Rest$/] {
assertNoMatch: "way \"addr:street\"=Main Rest";
assertMatch: "way \"addr:street\"=Main Rest";
throwWarning: tr("addr:street={0} contains postfix Rest, should likely be expanded to Rest","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Rest");
group: tr("addr:street contains postfix Rest, should likely be expanded to Rest");
}

*["addr:street"]["addr:street"=~/ Rise$/] {
assertNoMatch: "way \"addr:street\"=Main Rise";
assertMatch: "way \"addr:street\"=Main Rise";
throwWarning: tr("addr:street={0} contains postfix Rise, should likely be expanded to Rise","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Rise");
group: tr("addr:street contains postfix Rise, should likely be expanded to Rise");
}

*["addr:street"]["addr:street"=~/ Row$/] {
assertNoMatch: "way \"addr:street\"=Main Row";
assertMatch: "way \"addr:street\"=Main Row";
throwWarning: tr("addr:street={0} contains postfix Row, should likely be expanded to Row","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Row");
group: tr("addr:street contains postfix Row, should likely be expanded to Row");
}

*["addr:street"]["addr:street"=~/ Rte$/] {
assertNoMatch: "way \"addr:street\"=Main Route";
assertMatch: "way \"addr:street\"=Main Rte";
throwWarning: tr("addr:street={0} contains postfix Rte, should likely be expanded to Route","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Route");
group: tr("addr:street contains postfix Rte, should likely be expanded to Route");
}

*["addr:street"]["addr:street"=~/ Rtr$/] {
assertNoMatch: "way \"addr:street\"=Main Retreat";
assertMatch: "way \"addr:street\"=Main Rtr";
throwWarning: tr("addr:street={0} contains postfix Rtr, should likely be expanded to Retreat","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Retreat");
group: tr("addr:street contains postfix Rtr, should likely be expanded to Retreat");
}

*["addr:street"]["addr:street"=~/ SH$/] {
assertNoMatch: "way \"addr:street\"=Main State Highway";
assertMatch: "way \"addr:street\"=Main SH";
throwWarning: tr("addr:street={0} contains postfix SH, should likely be expanded to State Highway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "State Highway");
group: tr("addr:street contains postfix SH, should likely be expanded to State Highway");
}

*["addr:street"]["addr:street"=~/ Slp$/] {
assertNoMatch: "way \"addr:street\"=Main Slope";
assertMatch: "way \"addr:street\"=Main Slp";
throwWarning: tr("addr:street={0} contains postfix Slp, should likely be expanded to Slope","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Slope");
group: tr("addr:street contains postfix Slp, should likely be expanded to Slope");
}

*["addr:street"]["addr:street"=~/ Spa$/] {
assertNoMatch: "way \"addr:street\"=Main Spa";
assertMatch: "way \"addr:street\"=Main Spa";
throwWarning: tr("addr:street={0} contains postfix Spa, should likely be expanded to Spa","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Spa");
group: tr("addr:street contains postfix Spa, should likely be expanded to Spa");
}

*["addr:street"]["addr:street"=~/ Spur$/] {
assertNoMatch: "way \"addr:street\"=Main Spur";
assertMatch: "way \"addr:street\"=Main Spur";
throwWarning: tr("addr:street={0} contains postfix Spur, should likely be expanded to Spur","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Spur");
group: tr("addr:street contains postfix Spur, should likely be expanded to Spur");
}

*["addr:street"]["addr:street"=~/ Sq$/] {
assertNoMatch: "way \"addr:street\"=Main Square";
assertMatch: "way \"addr:street\"=Main Sq";
throwWarning: tr("addr:street={0} contains postfix Sq, should likely be expanded to Square","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Square");
group: tr("addr:street contains postfix Sq, should likely be expanded to Square");
}

*["addr:street"]["addr:street"=~/ St$/] {
assertNoMatch: "way \"addr:street\"=Main Street";
assertMatch: "way \"addr:street\"=Main St";
throwWarning: tr("addr:street={0} contains postfix St, should likely be expanded to Street","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Street");
group: tr("addr:street contains postfix St, should likely be expanded to Street");
}

*["addr:street"]["addr:street"=~/ Steep$/] {
assertNoMatch: "way \"addr:street\"=Main Steep";
assertMatch: "way \"addr:street\"=Main Steep";
throwWarning: tr("addr:street={0} contains postfix Steep, should likely be expanded to Steep","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Steep");
group: tr("addr:street contains postfix Steep, should likely be expanded to Steep");
}

*["addr:street"]["addr:street"=~/ Stgt$/] {
assertNoMatch: "way \"addr:street\"=Main Straight";
assertMatch: "way \"addr:street\"=Main Stgt";
throwWarning: tr("addr:street={0} contains postfix Stgt, should likely be expanded to Straight","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Straight");
group: tr("addr:street contains postfix Stgt, should likely be expanded to Straight");
}

*["addr:street"]["addr:street"=~/ Stps$/] {
assertNoMatch: "way \"addr:street\"=Main Steps";
assertMatch: "way \"addr:street\"=Main Stps";
throwWarning: tr("addr:street={0} contains postfix Stps, should likely be expanded to Steps","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Steps");
group: tr("addr:street contains postfix Stps, should likely be expanded to Steps");
}

*["addr:street"]["addr:street"=~/ Strd$/] {
assertNoMatch: "way \"addr:street\"=Main Strand";
assertMatch: "way \"addr:street\"=Main Strd";
throwWarning: tr("addr:street={0} contains postfix Strd, should likely be expanded to Strand","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Strand");
group: tr("addr:street contains postfix Strd, should likely be expanded to Strand");
}

*["addr:street"]["addr:street"=~/ Svln$/] {
assertNoMatch: "way \"addr:street\"=Main Service Lane";
assertMatch: "way \"addr:street\"=Main Svln";
throwWarning: tr("addr:street={0} contains postfix Svln, should likely be expanded to Service Lane","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Service Lane");
group: tr("addr:street contains postfix Svln, should likely be expanded to Service Lane");
}

*["addr:street"]["addr:street"=~/ Tce$/] {
assertNoMatch: "way \"addr:street\"=Main Terrace";
assertMatch: "way \"addr:street\"=Main Tce";
throwWarning: tr("addr:street={0} contains postfix Tce, should likely be expanded to Terrace","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Terrace");
group: tr("addr:street contains postfix Tce, should likely be expanded to Terrace");
}

*["addr:street"]["addr:street"=~/ Tmwy$/] {
assertNoMatch: "way \"addr:street\"=Main Tramway";
assertMatch: "way \"addr:street\"=Main Tmwy";
throwWarning: tr("addr:street={0} contains postfix Tmwy, should likely be expanded to Tramway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Tramway");
group: tr("addr:street contains postfix Tmwy, should likely be expanded to Tramway");
}

*["addr:street"]["addr:street"=~/ Trk$/] {
assertNoMatch: "way \"addr:street\"=Main Track";
assertMatch: "way \"addr:street\"=Main Trk";
throwWarning: tr("addr:street={0} contains postfix Trk, should likely be expanded to Track","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Track");
group: tr("addr:street contains postfix Trk, should likely be expanded to Track");
}

*["addr:street"]["addr:street"=~/ Trl$/] {
assertNoMatch: "way \"addr:street\"=Main Trail";
assertMatch: "way \"addr:street\"=Main Trl";
throwWarning: tr("addr:street={0} contains postfix Trl, should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Trail");
group: tr("addr:street contains postfix Trl, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Trs$/] {
assertNoMatch: "way \"addr:street\"=Main Trees";
assertMatch: "way \"addr:street\"=Main Trs";
throwWarning: tr("addr:street={0} contains postfix Trs, should likely be expanded to Trees","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Trees");
group: tr("addr:street contains postfix Trs, should likely be expanded to Trees");
}

*["addr:street"]["addr:street"=~/ Twrs$/] {
assertNoMatch: "way \"addr:street\"=Main Towers";
assertMatch: "way \"addr:street\"=Main Twrs";
throwWarning: tr("addr:street={0} contains postfix Twrs, should likely be expanded to Towers","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Towers");
group: tr("addr:street contains postfix Twrs, should likely be expanded to Towers");
}

*["addr:street"]["addr:street"=~/ Vale$/] {
assertNoMatch: "way \"addr:street\"=Main Vale";
assertMatch: "way \"addr:street\"=Main Vale";
throwWarning: tr("addr:street={0} contains postfix Vale, should likely be expanded to Vale","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Vale");
group: tr("addr:street contains postfix Vale, should likely be expanded to Vale");
}

*["addr:street"]["addr:street"=~/ Vis$/] {
assertNoMatch: "way \"addr:street\"=Main Vista";
assertMatch: "way \"addr:street\"=Main Vis";
throwWarning: tr("addr:street={0} contains postfix Vis, should likely be expanded to Vista","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Vista");
group: tr("addr:street contains postfix Vis, should likely be expanded to Vista");
}

*["addr:street"]["addr:street"=~/ Vlg$/] {
assertNoMatch: "way \"addr:street\"=Main Village";
assertMatch: "way \"addr:street\"=Main Vlg";
throwWarning: tr("addr:street={0} contains postfix Vlg, should likely be expanded to Village","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Village");
group: tr("addr:street contains postfix Vlg, should likely be expanded to Village");
}

*["addr:street"]["addr:street"=~/ Vlls$/] {
assertNoMatch: "way \"addr:street\"=Main Villas";
assertMatch: "way \"addr:street\"=Main Vlls";
throwWarning: tr("addr:street={0} contains postfix Vlls, should likely be expanded to Villas","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Villas");
group: tr("addr:street contains postfix Vlls, should likely be expanded to Villas");
}

*["addr:street"]["addr:street"=~/ Vly$/] {
assertNoMatch: "way \"addr:street\"=Main Valley";
assertMatch: "way \"addr:street\"=Main Vly";
throwWarning: tr("addr:street={0} contains postfix Vly, should likely be expanded to Valley","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Valley");
group: tr("addr:street contains postfix Vly, should likely be expanded to Valley");
}

*["addr:street"]["addr:street"=~/ Vnus$/] {
assertNoMatch: "way \"addr:street\"=Main Venus";
assertMatch: "way \"addr:street\"=Main Vnus";
throwWarning: tr("addr:street={0} contains postfix Vnus, should likely be expanded to Venus","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Venus");
group: tr("addr:street contains postfix Vnus, should likely be expanded to Venus");
}

*["addr:street"]["addr:street"=~/ Vue$/] {
assertNoMatch: "way \"addr:street\"=Main Vue";
assertMatch: "way \"addr:street\"=Main Vue";
throwWarning: tr("addr:street={0} contains postfix Vue, should likely be expanded to Vue","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Vue");
group: tr("addr:street contains postfix Vue, should likely be expanded to Vue");
}

*["addr:street"]["addr:street"=~/ Vw$/] {
assertNoMatch: "way \"addr:street\"=Main View";
assertMatch: "way \"addr:street\"=Main Vw";
throwWarning: tr("addr:street={0} contains postfix Vw, should likely be expanded to View","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "View");
group: tr("addr:street contains postfix Vw, should likely be expanded to View");
}

*["addr:street"]["addr:street"=~/ Vws$/] {
assertNoMatch: "way \"addr:street\"=Main Views";
assertMatch: "way \"addr:street\"=Main Vws";
throwWarning: tr("addr:street={0} contains postfix Vws, should likely be expanded to Views","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Views");
group: tr("addr:street contains postfix Vws, should likely be expanded to Views");
}

*["addr:street"]["addr:street"=~/ Waters$/] {
assertNoMatch: "way \"addr:street\"=Main Waters";
assertMatch: "way \"addr:street\"=Main Waters";
throwWarning: tr("addr:street={0} contains postfix Waters, should likely be expanded to Waters","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-6), "Waters");
group: tr("addr:street contains postfix Waters, should likely be expanded to Waters");
}

*["addr:street"]["addr:street"=~/ Way$/] {
assertNoMatch: "way \"addr:street\"=Main Way";
assertMatch: "way \"addr:street\"=Main Way";
throwWarning: tr("addr:street={0} contains postfix Way, should likely be expanded to Way","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Way");
group: tr("addr:street contains postfix Way, should likely be expanded to Way");
}

*["addr:street"]["addr:street"=~/ Whrf$/] {
assertNoMatch: "way \"addr:street\"=Main Wharf";
assertMatch: "way \"addr:street\"=Main Whrf";
throwWarning: tr("addr:street={0} contains postfix Whrf, should likely be expanded to Wharf","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Wharf");
group: tr("addr:street contains postfix Whrf, should likely be expanded to Wharf");
}

*["addr:street"]["addr:street"=~/ Wlk$/] {
assertNoMatch: "way \"addr:street\"=Main Walk";
assertMatch: "way \"addr:street\"=Main Wlk";
throwWarning: tr("addr:street={0} contains postfix Wlk, should likely be expanded to Walk","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Walk");
group: tr("addr:street contains postfix Wlk, should likely be expanded to Walk");
}

*["addr:street"]["addr:street"=~/ Wynd$/] {
assertNoMatch: "way \"addr:street\"=Main Wynd";
assertMatch: "way \"addr:street\"=Main Wynd";
throwWarning: tr("addr:street={0} contains postfix Wynd, should likely be expanded to Wynd","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Wynd");
group: tr("addr:street contains postfix Wynd, should likely be expanded to Wynd");
}

*["name"=~/ Accs$/].highway_name {
assertNoMatch: "way \"name\"=Main Access";
assertMatch: "way \"name\"=Main Accs";
throwWarning: tr("Highway name contains postfix Accs, should likely be expanded to Access");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Access");
}

*["name"=~/ Accswy$/].highway_name {
assertNoMatch: "way \"name\"=Main Accessway";
assertMatch: "way \"name\"=Main Accswy";
throwWarning: tr("Highway name contains postfix Accswy, should likely be expanded to Accessway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-6), "Accessway");
}

*["name"=~/ Aly$/].highway_name {
assertNoMatch: "way \"name\"=Main Alley";
assertMatch: "way \"name\"=Main Aly";
throwWarning: tr("Highway name contains postfix Aly, should likely be expanded to Alley");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Alley");
}

*["name"=~/ Ancg$/].highway_name {
assertNoMatch: "way \"name\"=Main Anchorage";
assertMatch: "way \"name\"=Main Ancg";
throwWarning: tr("Highway name contains postfix Ancg, should likely be expanded to Anchorage");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Anchorage");
}

*["name"=~/ App$/].highway_name {
assertNoMatch: "way \"name\"=Main Approach";
assertMatch: "way \"name\"=Main App";
throwWarning: tr("Highway name contains postfix App, should likely be expanded to Approach");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Approach");
}

*["name"=~/ Arc$/].highway_name {
assertNoMatch: "way \"name\"=Main Arcade";
assertMatch: "way \"name\"=Main Arc";
throwWarning: tr("Highway name contains postfix Arc, should likely be expanded to Arcade");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Arcade");
}

*["name"=~/ Arch$/].highway_name {
assertNoMatch: "way \"name\"=Main Arch";
assertMatch: "way \"name\"=Main Arch";
throwWarning: tr("Highway name contains postfix Arch, should likely be expanded to Arch");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Arch");
}

*["name"=~/ Ave$/].highway_name {
assertNoMatch: "way \"name\"=Main Avenue";
assertMatch: "way \"name\"=Main Ave";
throwWarning: tr("Highway name contains postfix Ave, should likely be expanded to Avenue");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Avenue");
}

*["name"=~/ Bank$/].highway_name {
assertNoMatch: "way \"name\"=Main Bank";
assertMatch: "way \"name\"=Main Bank";
throwWarning: tr("Highway name contains postfix Bank, should likely be expanded to Bank");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Bank");
}

*["name"=~/ Bay$/].highway_name {
assertNoMatch: "way \"name\"=Main Bay";
assertMatch: "way \"name\"=Main Bay";
throwWarning: tr("Highway name contains postfix Bay, should likely be expanded to Bay");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Bay");
}

*["name"=~/ Bch$/].highway_name {
assertNoMatch: "way \"name\"=Main Beach";
assertMatch: "way \"name\"=Main Bch";
throwWarning: tr("Highway name contains postfix Bch, should likely be expanded to Beach");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Beach");
}

*["name"=~/ Belt$/].highway_name {
assertNoMatch: "way \"name\"=Main Belt";
assertMatch: "way \"name\"=Main Belt";
throwWarning: tr("Highway name contains postfix Belt, should likely be expanded to Belt");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Belt");
}

*["name"=~/ Blf$/].highway_name {
assertNoMatch: "way \"name\"=Main Bluff";
assertMatch: "way \"name\"=Main Blf";
throwWarning: tr("Highway name contains postfix Blf, should likely be expanded to Bluff");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Bluff");
}

*["name"=~/ Blvd$/].highway_name {
assertNoMatch: "way \"name\"=Main Boulevard";
assertMatch: "way \"name\"=Main Blvd";
throwWarning: tr("Highway name contains postfix Blvd, should likely be expanded to Boulevard");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Boulevard");
}

*["name"=~/ Bnd$/].highway_name {
assertNoMatch: "way \"name\"=Main Bend";
assertMatch: "way \"name\"=Main Bnd";
throwWarning: tr("Highway name contains postfix Bnd, should likely be expanded to Bend");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Bend");
}

*["name"=~/ Brae$/].highway_name {
assertNoMatch: "way \"name\"=Main Brae";
assertMatch: "way \"name\"=Main Brae";
throwWarning: tr("Highway name contains postfix Brae, should likely be expanded to Brae");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Brae");
}

*["name"=~/ Brg$/].highway_name {
assertNoMatch: "way \"name\"=Main Bridge";
assertMatch: "way \"name\"=Main Brg";
throwWarning: tr("Highway name contains postfix Brg, should likely be expanded to Bridge");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Bridge");
}

*["name"=~/ Briars$/].highway_name {
assertNoMatch: "way \"name\"=Main Briars";
assertMatch: "way \"name\"=Main Briars";
throwWarning: tr("Highway name contains postfix Briars, should likely be expanded to Briars");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-6), "Briars");
}

*["name"=~/ Byp$/].highway_name {
assertNoMatch: "way \"name\"=Main Bypass";
assertMatch: "way \"name\"=Main Byp";
throwWarning: tr("Highway name contains postfix Byp, should likely be expanded to Bypass");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Bypass");
}

*["name"=~/ Ch$/].highway_name {
assertNoMatch: "way \"name\"=Main Chase";
assertMatch: "way \"name\"=Main Ch";
throwWarning: tr("Highway name contains postfix Ch, should likely be expanded to Chase");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Chase");
}

*["name"=~/ Cir$/].highway_name {
assertNoMatch: "way \"name\"=Main Circle";
assertMatch: "way \"name\"=Main Cir";
throwWarning: tr("Highway name contains postfix Cir, should likely be expanded to Circle");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Circle");
}

*["name"=~/ Cl$/].highway_name {
assertNoMatch: "way \"name\"=Main Close";
assertMatch: "way \"name\"=Main Cl";
throwWarning: tr("Highway name contains postfix Cl, should likely be expanded to Close");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Close");
}

*["name"=~/ Clm$/].highway_name {
assertNoMatch: "way \"name\"=Main Claim";
assertMatch: "way \"name\"=Main Clm";
throwWarning: tr("Highway name contains postfix Clm, should likely be expanded to Claim");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Claim");
}

*["name"=~/ Cmn$/].highway_name {
assertNoMatch: "way \"name\"=Main Common";
assertMatch: "way \"name\"=Main Cmn";
throwWarning: tr("Highway name contains postfix Cmn, should likely be expanded to Common");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Common");
}

*["name"=~/ Crcs$/].highway_name {
assertNoMatch: "way \"name\"=Main Circus";
assertMatch: "way \"name\"=Main Crcs";
throwWarning: tr("Highway name contains postfix Crcs, should likely be expanded to Circus");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Circus");
}

*["name"=~/ Cres$/].highway_name {
assertNoMatch: "way \"name\"=Main Crescent";
assertMatch: "way \"name\"=Main Cres";
throwWarning: tr("Highway name contains postfix Cres, should likely be expanded to Crescent");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Crescent");
}

*["name"=~/ Crk$/].highway_name {
assertNoMatch: "way \"name\"=Main Creek";
assertMatch: "way \"name\"=Main Crk";
throwWarning: tr("Highway name contains postfix Crk, should likely be expanded to Creek");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Creek");
}

*["name"=~/ Crst$/].highway_name {
assertNoMatch: "way \"name\"=Main Crest";
assertMatch: "way \"name\"=Main Crst";
throwWarning: tr("Highway name contains postfix Crst, should likely be expanded to Crest");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Crest");
}

*["name"=~/ Crt$/].highway_name {
assertNoMatch: "way \"name\"=Main Court";
assertMatch: "way \"name\"=Main Crt";
throwWarning: tr("Highway name contains postfix Crt, should likely be expanded to Court");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Court");
}

*["name"=~/ Crts$/].highway_name {
assertNoMatch: "way \"name\"=Main Courts";
assertMatch: "way \"name\"=Main Crts";
throwWarning: tr("Highway name contains postfix Crts, should likely be expanded to Courts");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Courts");
}

*["name"=~/ Ctr$/].highway_name {
assertNoMatch: "way \"name\"=Main Centre";
assertMatch: "way \"name\"=Main Ctr";
throwWarning: tr("Highway name contains postfix Ctr, should likely be expanded to Centre");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Centre");
}

*["name"=~/ Cul$/].highway_name {
assertNoMatch: "way \"name\"=Main Cul";
assertMatch: "way \"name\"=Main Cul";
throwWarning: tr("Highway name contains postfix Cul, should likely be expanded to Cul");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Cul");
}

*["name"=~/ Cv$/].highway_name {
assertNoMatch: "way \"name\"=Main Cove";
assertMatch: "way \"name\"=Main Cv";
throwWarning: tr("Highway name contains postfix Cv, should likely be expanded to Cove");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Cove");
}

*["name"=~/ Del$/].highway_name {
assertNoMatch: "way \"name\"=Main Dell";
assertMatch: "way \"name\"=Main Del";
throwWarning: tr("Highway name contains postfix Del, should likely be expanded to Dell");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Dell");
}

*["name"=~/ Dle$/].highway_name {
assertNoMatch: "way \"name\"=Main Dale";
assertMatch: "way \"name\"=Main Dle";
throwWarning: tr("Highway name contains postfix Dle, should likely be expanded to Dale");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Dale");
}

*["name"=~/ Downs$/].highway_name {
assertNoMatch: "way \"name\"=Main Downs";
assertMatch: "way \"name\"=Main Downs";
throwWarning: tr("Highway name contains postfix Downs, should likely be expanded to Downs");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Downs");
}

*["name"=~/ Dr$/].highway_name {
assertNoMatch: "way \"name\"=Main Drive";
assertMatch: "way \"name\"=Main Dr";
throwWarning: tr("Highway name contains postfix Dr, should likely be expanded to Drive");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Drive");
}

*["name"=~/ Dune$/].highway_name {
assertNoMatch: "way \"name\"=Main Dune";
assertMatch: "way \"name\"=Main Dune";
throwWarning: tr("Highway name contains postfix Dune, should likely be expanded to Dune");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Dune");
}

*["name"=~/ Dvn$/].highway_name {
assertNoMatch: "way \"name\"=Main Deviation";
assertMatch: "way \"name\"=Main Dvn";
throwWarning: tr("Highway name contains postfix Dvn, should likely be expanded to Deviation");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Deviation");
}

*["name"=~/ Elm$/].highway_name {
assertNoMatch: "way \"name\"=Main Elm";
assertMatch: "way \"name\"=Main Elm";
throwWarning: tr("Highway name contains postfix Elm, should likely be expanded to Elm");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Elm");
}

*["name"=~/ End$/].highway_name {
assertNoMatch: "way \"name\"=Main End";
assertMatch: "way \"name\"=Main End";
throwWarning: tr("Highway name contains postfix End, should likely be expanded to End");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "End");
}

*["name"=~/ Ent$/].highway_name {
assertNoMatch: "way \"name\"=Main Entrance";
assertMatch: "way \"name\"=Main Ent";
throwWarning: tr("Highway name contains postfix Ent, should likely be expanded to Entrance");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Entrance");
}

*["name"=~/ Esp$/].highway_name {
assertNoMatch: "way \"name\"=Main Esplanade";
assertMatch: "way \"name\"=Main Esp";
throwWarning: tr("Highway name contains postfix Esp, should likely be expanded to Esplanade");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Esplanade");
}

*["name"=~/ Est$/].highway_name {
assertNoMatch: "way \"name\"=Main Estate";
assertMatch: "way \"name\"=Main Est";
throwWarning: tr("Highway name contains postfix Est, should likely be expanded to Estate");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Estate");
}

*["name"=~/ Fall$/].highway_name {
assertNoMatch: "way \"name\"=Main Fall";
assertMatch: "way \"name\"=Main Fall";
throwWarning: tr("Highway name contains postfix Fall, should likely be expanded to Fall");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Fall");
}

*["name"=~/ Fare$/].highway_name {
assertNoMatch: "way \"name\"=Main Fare";
assertMatch: "way \"name\"=Main Fare";
throwWarning: tr("Highway name contains postfix Fare, should likely be expanded to Fare");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Fare");
}

*["name"=~/ Fawy$/].highway_name {
assertNoMatch: "way \"name\"=Main Fairway";
assertMatch: "way \"name\"=Main Fawy";
throwWarning: tr("Highway name contains postfix Fawy, should likely be expanded to Fairway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Fairway");
}

*["name"=~/ Fen$/].highway_name {
assertNoMatch: "way \"name\"=Main Fen";
assertMatch: "way \"name\"=Main Fen";
throwWarning: tr("Highway name contains postfix Fen, should likely be expanded to Fen");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Fen");
}

*["name"=~/ Fern$/].highway_name {
assertNoMatch: "way \"name\"=Main Fern";
assertMatch: "way \"name\"=Main Fern";
throwWarning: tr("Highway name contains postfix Fern, should likely be expanded to Fern");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Fern");
}

*["name"=~/ Flt$/].highway_name {
assertNoMatch: "way \"name\"=Main Flat";
assertMatch: "way \"name\"=Main Flt";
throwWarning: tr("Highway name contains postfix Flt, should likely be expanded to Flat");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Flat");
}

*["name"=~/ Flts$/].highway_name {
assertNoMatch: "way \"name\"=Main Flats";
assertMatch: "way \"name\"=Main Flts";
throwWarning: tr("Highway name contains postfix Flts, should likely be expanded to Flats");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Flats");
}

*["name"=~/ Frms$/].highway_name {
assertNoMatch: "way \"name\"=Main Farms";
assertMatch: "way \"name\"=Main Frms";
throwWarning: tr("Highway name contains postfix Frms, should likely be expanded to Farms");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Farms");
}

*["name"=~/ Gdn$/].highway_name {
assertNoMatch: "way \"name\"=Main Garden";
assertMatch: "way \"name\"=Main Gdn";
throwWarning: tr("Highway name contains postfix Gdn, should likely be expanded to Garden");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Garden");
}

*["name"=~/ Gdns$/].highway_name {
assertNoMatch: "way \"name\"=Main Gardens";
assertMatch: "way \"name\"=Main Gdns";
throwWarning: tr("Highway name contains postfix Gdns, should likely be expanded to Gardens");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Gardens");
}

*["name"=~/ Gld$/].highway_name {
assertNoMatch: "way \"name\"=Main Glade";
assertMatch: "way \"name\"=Main Gld";
throwWarning: tr("Highway name contains postfix Gld, should likely be expanded to Glade");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Glade");
}

*["name"=~/ Gln$/].highway_name {
assertNoMatch: "way \"name\"=Main Glen";
assertMatch: "way \"name\"=Main Gln";
throwWarning: tr("Highway name contains postfix Gln, should likely be expanded to Glen");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Glen");
}

*["name"=~/ Gly$/].highway_name {
assertNoMatch: "way \"name\"=Main Gully";
assertMatch: "way \"name\"=Main Gly";
throwWarning: tr("Highway name contains postfix Gly, should likely be expanded to Gully");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Gully");
}

*["name"=~/ Grg$/].highway_name {
assertNoMatch: "way \"name\"=Main Grange";
assertMatch: "way \"name\"=Main Grg";
throwWarning: tr("Highway name contains postfix Grg, should likely be expanded to Grange");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Grange");
}

*["name"=~/ Grn$/].highway_name {
assertNoMatch: "way \"name\"=Main Green";
assertMatch: "way \"name\"=Main Grn";
throwWarning: tr("Highway name contains postfix Grn, should likely be expanded to Green");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Green");
}

*["name"=~/ Grv$/].highway_name {
assertNoMatch: "way \"name\"=Main Grove";
assertMatch: "way \"name\"=Main Grv";
throwWarning: tr("Highway name contains postfix Grv, should likely be expanded to Grove");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Grove");
}

*["name"=~/ Gte$/].highway_name {
assertNoMatch: "way \"name\"=Main Gate";
assertMatch: "way \"name\"=Main Gte";
throwWarning: tr("Highway name contains postfix Gte, should likely be expanded to Gate");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Gate");
}

*["name"=~/ Head$/].highway_name {
assertNoMatch: "way \"name\"=Main Head";
assertMatch: "way \"name\"=Main Head";
throwWarning: tr("Highway name contains postfix Head, should likely be expanded to Head");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Head");
}

*["name"=~/ Hl$/].highway_name {
assertNoMatch: "way \"name\"=Main Hill";
assertMatch: "way \"name\"=Main Hl";
throwWarning: tr("Highway name contains postfix Hl, should likely be expanded to Hill");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Hill");
}

*["name"=~/ Hts$/].highway_name {
assertNoMatch: "way \"name\"=Main Heights";
assertMatch: "way \"name\"=Main Hts";
throwWarning: tr("Highway name contains postfix Hts, should likely be expanded to Heights");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Heights");
}

*["name"=~/ Hvn$/].highway_name {
assertNoMatch: "way \"name\"=Main Haven";
assertMatch: "way \"name\"=Main Hvn";
throwWarning: tr("Highway name contains postfix Hvn, should likely be expanded to Haven");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Haven");
}

*["name"=~/ Hwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Highway";
assertMatch: "way \"name\"=Main Hwy";
throwWarning: tr("Highway name contains postfix Hwy, should likely be expanded to Highway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Highway");
}

*["name"=~/ Is$/].highway_name {
assertNoMatch: "way \"name\"=Main Island";
assertMatch: "way \"name\"=Main Is";
throwWarning: tr("Highway name contains postfix Is, should likely be expanded to Island");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Island");
}

*["name"=~/ Jct$/].highway_name {
assertNoMatch: "way \"name\"=Main Junction";
assertMatch: "way \"name\"=Main Jct";
throwWarning: tr("Highway name contains postfix Jct, should likely be expanded to Junction");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Junction");
}

*["name"=~/ Key$/].highway_name {
assertNoMatch: "way \"name\"=Main Key";
assertMatch: "way \"name\"=Main Key";
throwWarning: tr("Highway name contains postfix Key, should likely be expanded to Key");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Key");
}

*["name"=~/ Knob$/].highway_name {
assertNoMatch: "way \"name\"=Main Knob";
assertMatch: "way \"name\"=Main Knob";
throwWarning: tr("Highway name contains postfix Knob, should likely be expanded to Knob");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Knob");
}

*["name"=~/ Ladr$/].highway_name {
assertNoMatch: "way \"name\"=Main Ladder";
assertMatch: "way \"name\"=Main Ladr";
throwWarning: tr("Highway name contains postfix Ladr, should likely be expanded to Ladder");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Ladder");
}

*["name"=~/ Lane$/].highway_name {
assertNoMatch: "way \"name\"=Main Lane";
assertMatch: "way \"name\"=Main Lane";
throwWarning: tr("Highway name contains postfix Lane, should likely be expanded to Lane");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Lane");
}

*["name"=~/ Lea$/].highway_name {
assertNoMatch: "way \"name\"=Main Lea";
assertMatch: "way \"name\"=Main Lea";
throwWarning: tr("Highway name contains postfix Lea, should likely be expanded to Lea");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Lea");
}

*["name"=~/ Ledr$/].highway_name {
assertNoMatch: "way \"name\"=Main Leader";
assertMatch: "way \"name\"=Main Ledr";
throwWarning: tr("Highway name contains postfix Ledr, should likely be expanded to Leader");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Leader");
}

*["name"=~/ Lgh$/].highway_name {
assertNoMatch: "way \"name\"=Main Leigh";
assertMatch: "way \"name\"=Main Lgh";
throwWarning: tr("Highway name contains postfix Lgh, should likely be expanded to Leigh");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Leigh");
}

*["name"=~/ Line$/].highway_name {
assertNoMatch: "way \"name\"=Main Line";
assertMatch: "way \"name\"=Main Line";
throwWarning: tr("Highway name contains postfix Line, should likely be expanded to Line");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Line");
}

*["name"=~/ Link$/].highway_name {
assertNoMatch: "way \"name\"=Main Link";
assertMatch: "way \"name\"=Main Link";
throwWarning: tr("Highway name contains postfix Link, should likely be expanded to Link");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Link");
}

*["name"=~/ Lkt$/].highway_name {
assertNoMatch: "way \"name\"=Main Lookout";
assertMatch: "way \"name\"=Main Lkt";
throwWarning: tr("Highway name contains postfix Lkt, should likely be expanded to Lookout");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Lookout");
}

*["name"=~/ Lndg$/].highway_name {
assertNoMatch: "way \"name\"=Main Landing";
assertMatch: "way \"name\"=Main Lndg";
throwWarning: tr("Highway name contains postfix Lndg, should likely be expanded to Landing");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Landing");
}

*["name"=~/ Loop$/].highway_name {
assertNoMatch: "way \"name\"=Main Loop";
assertMatch: "way \"name\"=Main Loop";
throwWarning: tr("Highway name contains postfix Loop, should likely be expanded to Loop");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Loop");
}

*["name"=~/ Mall$/].highway_name {
assertNoMatch: "way \"name\"=Main Mall";
assertMatch: "way \"name\"=Main Mall";
throwWarning: tr("Highway name contains postfix Mall, should likely be expanded to Mall");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Mall");
}

*["name"=~/ Mdws$/].highway_name {
assertNoMatch: "way \"name\"=Main Meadows";
assertMatch: "way \"name\"=Main Mdws";
throwWarning: tr("Highway name contains postfix Mdws, should likely be expanded to Meadows");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Meadows");
}

*["name"=~/ Mead$/].highway_name {
assertNoMatch: "way \"name\"=Main Mead";
assertMatch: "way \"name\"=Main Mead";
throwWarning: tr("Highway name contains postfix Mead, should likely be expanded to Mead");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Mead");
}

*["name"=~/ Mews$/].highway_name {
assertNoMatch: "way \"name\"=Main Mews";
assertMatch: "way \"name\"=Main Mews";
throwWarning: tr("Highway name contains postfix Mews, should likely be expanded to Mews");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Mews");
}

*["name"=~/ Mile$/].highway_name {
assertNoMatch: "way \"name\"=Main Mile";
assertMatch: "way \"name\"=Main Mile";
throwWarning: tr("Highway name contains postfix Mile, should likely be expanded to Mile");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Mile");
}

*["name"=~/ Motu$/].highway_name {
assertNoMatch: "way \"name\"=Main Motu";
assertMatch: "way \"name\"=Main Motu";
throwWarning: tr("Highway name contains postfix Motu, should likely be expanded to Motu");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Motu");
}

*["name"=~/ Mt$/].highway_name {
assertNoMatch: "way \"name\"=Main Mount";
assertMatch: "way \"name\"=Main Mt";
throwWarning: tr("Highway name contains postfix Mt, should likely be expanded to Mount");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Mount");
}

*["name"=~/ Mwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Motorway";
assertMatch: "way \"name\"=Main Mwy";
throwWarning: tr("Highway name contains postfix Mwy, should likely be expanded to Motorway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Motorway");
}

*["name"=~/ Nvs$/].highway_name {
assertNoMatch: "way \"name\"=Main Neaves";
assertMatch: "way \"name\"=Main Nvs";
throwWarning: tr("Highway name contains postfix Nvs, should likely be expanded to Neaves");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Neaves");
}

*["name"=~/ Oaks$/].highway_name {
assertNoMatch: "way \"name\"=Main Oaks";
assertMatch: "way \"name\"=Main Oaks";
throwWarning: tr("Highway name contains postfix Oaks, should likely be expanded to Oaks");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Oaks");
}

*["name"=~/ Padk$/].highway_name {
assertNoMatch: "way \"name\"=Main Paddock";
assertMatch: "way \"name\"=Main Padk";
throwWarning: tr("Highway name contains postfix Padk, should likely be expanded to Paddock");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Paddock");
}

*["name"=~/ Paku$/].highway_name {
assertNoMatch: "way \"name\"=Main Paku";
assertMatch: "way \"name\"=Main Paku";
throwWarning: tr("Highway name contains postfix Paku, should likely be expanded to Paku");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Paku");
}

*["name"=~/ Pass$/].highway_name {
assertNoMatch: "way \"name\"=Main Pass";
assertMatch: "way \"name\"=Main Pass";
throwWarning: tr("Highway name contains postfix Pass, should likely be expanded to Pass");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Pass");
}

*["name"=~/ Pde$/].highway_name {
assertNoMatch: "way \"name\"=Main Parade";
assertMatch: "way \"name\"=Main Pde";
throwWarning: tr("Highway name contains postfix Pde, should likely be expanded to Parade");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Parade");
}

*["name"=~/ Pk$/].highway_name {
assertNoMatch: "way \"name\"=Main Park";
assertMatch: "way \"name\"=Main Pk";
throwWarning: tr("Highway name contains postfix Pk, should likely be expanded to Park");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Park");
}

*["name"=~/ Pkwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Parkway";
assertMatch: "way \"name\"=Main Pkwy";
throwWarning: tr("Highway name contains postfix Pkwy, should likely be expanded to Parkway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Parkway");
}

*["name"=~/ Pl$/].highway_name {
assertNoMatch: "way \"name\"=Main Place";
assertMatch: "way \"name\"=Main Pl";
throwWarning: tr("Highway name contains postfix Pl, should likely be expanded to Place");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Place");
}

*["name"=~/ Priors$/].highway_name {
assertNoMatch: "way \"name\"=Main Priors";
assertMatch: "way \"name\"=Main Priors";
throwWarning: tr("Highway name contains postfix Priors, should likely be expanded to Priors");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-6), "Priors");
}

*["name"=~/ Prom$/].highway_name {
assertNoMatch: "way \"name\"=Main Promenade";
assertMatch: "way \"name\"=Main Prom";
throwWarning: tr("Highway name contains postfix Prom, should likely be expanded to Promenade");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Promenade");
}

*["name"=~/ Psge$/].highway_name {
assertNoMatch: "way \"name\"=Main Passage";
assertMatch: "way \"name\"=Main Psge";
throwWarning: tr("Highway name contains postfix Psge, should likely be expanded to Passage");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Passage");
}

*["name"=~/ Pt$/].highway_name {
assertNoMatch: "way \"name\"=Main Point";
assertMatch: "way \"name\"=Main Pt";
throwWarning: tr("Highway name contains postfix Pt, should likely be expanded to Point");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Point");
}

*["name"=~/ Pth$/].highway_name {
assertNoMatch: "way \"name\"=Main Path";
assertMatch: "way \"name\"=Main Pth";
throwWarning: tr("Highway name contains postfix Pth, should likely be expanded to Path");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Path");
}

*["name"=~/ Qdrt$/].highway_name {
assertNoMatch: "way \"name\"=Main Quadrant";
assertMatch: "way \"name\"=Main Qdrt";
throwWarning: tr("Highway name contains postfix Qdrt, should likely be expanded to Quadrant");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Quadrant");
}

*["name"=~/ Qy$/].highway_name {
assertNoMatch: "way \"name\"=Main Quay";
assertMatch: "way \"name\"=Main Qy";
throwWarning: tr("Highway name contains postfix Qy, should likely be expanded to Quay");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Quay");
}

*["name"=~/ Rd$/].highway_name {
assertNoMatch: "way \"name\"=Main Road";
assertMatch: "way \"name\"=Main Rd";
throwWarning: tr("Highway name contains postfix Rd, should likely be expanded to Road");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Road");
}

*["name"=~/ Rdge$/].highway_name {
assertNoMatch: "way \"name\"=Main Ridge";
assertMatch: "way \"name\"=Main Rdge";
throwWarning: tr("Highway name contains postfix Rdge, should likely be expanded to Ridge");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Ridge");
}

*["name"=~/ Rds$/].highway_name {
assertNoMatch: "way \"name\"=Main Roads";
assertMatch: "way \"name\"=Main Rds";
throwWarning: tr("Highway name contains postfix Rds, should likely be expanded to Roads");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Roads");
}

*["name"=~/ Rdwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Roadway";
assertMatch: "way \"name\"=Main Rdwy";
throwWarning: tr("Highway name contains postfix Rdwy, should likely be expanded to Roadway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Roadway");
}

*["name"=~/ Reef$/].highway_name {
assertNoMatch: "way \"name\"=Main Reef";
assertMatch: "way \"name\"=Main Reef";
throwWarning: tr("Highway name contains postfix Reef, should likely be expanded to Reef");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Reef");
}

*["name"=~/ Res$/].highway_name {
assertNoMatch: "way \"name\"=Main Reserve";
assertMatch: "way \"name\"=Main Res";
throwWarning: tr("Highway name contains postfix Res, should likely be expanded to Reserve");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Reserve");
}

*["name"=~/ Rest$/].highway_name {
assertNoMatch: "way \"name\"=Main Rest";
assertMatch: "way \"name\"=Main Rest";
throwWarning: tr("Highway name contains postfix Rest, should likely be expanded to Rest");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Rest");
}

*["name"=~/ Rise$/].highway_name {
assertNoMatch: "way \"name\"=Main Rise";
assertMatch: "way \"name\"=Main Rise";
throwWarning: tr("Highway name contains postfix Rise, should likely be expanded to Rise");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Rise");
}

*["name"=~/ Row$/].highway_name {
assertNoMatch: "way \"name\"=Main Row";
assertMatch: "way \"name\"=Main Row";
throwWarning: tr("Highway name contains postfix Row, should likely be expanded to Row");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Row");
}

*["name"=~/ Rte$/].highway_name {
assertNoMatch: "way \"name\"=Main Route";
assertMatch: "way \"name\"=Main Rte";
throwWarning: tr("Highway name contains postfix Rte, should likely be expanded to Route");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Route");
}

*["name"=~/ Rtr$/].highway_name {
assertNoMatch: "way \"name\"=Main Retreat";
assertMatch: "way \"name\"=Main Rtr";
throwWarning: tr("Highway name contains postfix Rtr, should likely be expanded to Retreat");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Retreat");
}

*["name"=~/ SH$/].highway_name {
assertNoMatch: "way \"name\"=Main State Highway";
assertMatch: "way \"name\"=Main SH";
throwWarning: tr("Highway name contains postfix SH, should likely be expanded to State Highway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "State Highway");
}

*["name"=~/ Slp$/].highway_name {
assertNoMatch: "way \"name\"=Main Slope";
assertMatch: "way \"name\"=Main Slp";
throwWarning: tr("Highway name contains postfix Slp, should likely be expanded to Slope");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Slope");
}

*["name"=~/ Spa$/].highway_name {
assertNoMatch: "way \"name\"=Main Spa";
assertMatch: "way \"name\"=Main Spa";
throwWarning: tr("Highway name contains postfix Spa, should likely be expanded to Spa");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Spa");
}

*["name"=~/ Spur$/].highway_name {
assertNoMatch: "way \"name\"=Main Spur";
assertMatch: "way \"name\"=Main Spur";
throwWarning: tr("Highway name contains postfix Spur, should likely be expanded to Spur");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Spur");
}

*["name"=~/ Sq$/].highway_name {
assertNoMatch: "way \"name\"=Main Square";
assertMatch: "way \"name\"=Main Sq";
throwWarning: tr("Highway name contains postfix Sq, should likely be expanded to Square");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Square");
}

*["name"=~/ St$/].highway_name {
assertNoMatch: "way \"name\"=Main Street";
assertMatch: "way \"name\"=Main St";
throwWarning: tr("Highway name contains postfix St, should likely be expanded to Street");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Street");
}

*["name"=~/ Steep$/].highway_name {
assertNoMatch: "way \"name\"=Main Steep";
assertMatch: "way \"name\"=Main Steep";
throwWarning: tr("Highway name contains postfix Steep, should likely be expanded to Steep");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Steep");
}

*["name"=~/ Stgt$/].highway_name {
assertNoMatch: "way \"name\"=Main Straight";
assertMatch: "way \"name\"=Main Stgt";
throwWarning: tr("Highway name contains postfix Stgt, should likely be expanded to Straight");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Straight");
}

*["name"=~/ Stps$/].highway_name {
assertNoMatch: "way \"name\"=Main Steps";
assertMatch: "way \"name\"=Main Stps";
throwWarning: tr("Highway name contains postfix Stps, should likely be expanded to Steps");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Steps");
}

*["name"=~/ Strd$/].highway_name {
assertNoMatch: "way \"name\"=Main Strand";
assertMatch: "way \"name\"=Main Strd";
throwWarning: tr("Highway name contains postfix Strd, should likely be expanded to Strand");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Strand");
}

*["name"=~/ Svln$/].highway_name {
assertNoMatch: "way \"name\"=Main Service Lane";
assertMatch: "way \"name\"=Main Svln";
throwWarning: tr("Highway name contains postfix Svln, should likely be expanded to Service Lane");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Service Lane");
}

*["name"=~/ Tce$/].highway_name {
assertNoMatch: "way \"name\"=Main Terrace";
assertMatch: "way \"name\"=Main Tce";
throwWarning: tr("Highway name contains postfix Tce, should likely be expanded to Terrace");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Terrace");
}

*["name"=~/ Tmwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Tramway";
assertMatch: "way \"name\"=Main Tmwy";
throwWarning: tr("Highway name contains postfix Tmwy, should likely be expanded to Tramway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Tramway");
}

*["name"=~/ Trk$/].highway_name {
assertNoMatch: "way \"name\"=Main Track";
assertMatch: "way \"name\"=Main Trk";
throwWarning: tr("Highway name contains postfix Trk, should likely be expanded to Track");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Track");
}

*["name"=~/ Trl$/].highway_name {
assertNoMatch: "way \"name\"=Main Trail";
assertMatch: "way \"name\"=Main Trl";
throwWarning: tr("Highway name contains postfix Trl, should likely be expanded to Trail");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Trail");
}

*["name"=~/ Trs$/].highway_name {
assertNoMatch: "way \"name\"=Main Trees";
assertMatch: "way \"name\"=Main Trs";
throwWarning: tr("Highway name contains postfix Trs, should likely be expanded to Trees");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Trees");
}

*["name"=~/ Twrs$/].highway_name {
assertNoMatch: "way \"name\"=Main Towers";
assertMatch: "way \"name\"=Main Twrs";
throwWarning: tr("Highway name contains postfix Twrs, should likely be expanded to Towers");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Towers");
}

*["name"=~/ Vale$/].highway_name {
assertNoMatch: "way \"name\"=Main Vale";
assertMatch: "way \"name\"=Main Vale";
throwWarning: tr("Highway name contains postfix Vale, should likely be expanded to Vale");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Vale");
}

*["name"=~/ Vis$/].highway_name {
assertNoMatch: "way \"name\"=Main Vista";
assertMatch: "way \"name\"=Main Vis";
throwWarning: tr("Highway name contains postfix Vis, should likely be expanded to Vista");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Vista");
}

*["name"=~/ Vlg$/].highway_name {
assertNoMatch: "way \"name\"=Main Village";
assertMatch: "way \"name\"=Main Vlg";
throwWarning: tr("Highway name contains postfix Vlg, should likely be expanded to Village");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Village");
}

*["name"=~/ Vlls$/].highway_name {
assertNoMatch: "way \"name\"=Main Villas";
assertMatch: "way \"name\"=Main Vlls";
throwWarning: tr("Highway name contains postfix Vlls, should likely be expanded to Villas");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Villas");
}

*["name"=~/ Vly$/].highway_name {
assertNoMatch: "way \"name\"=Main Valley";
assertMatch: "way \"name\"=Main Vly";
throwWarning: tr("Highway name contains postfix Vly, should likely be expanded to Valley");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Valley");
}

*["name"=~/ Vnus$/].highway_name {
assertNoMatch: "way \"name\"=Main Venus";
assertMatch: "way \"name\"=Main Vnus";
throwWarning: tr("Highway name contains postfix Vnus, should likely be expanded to Venus");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Venus");
}

*["name"=~/ Vue$/].highway_name {
assertNoMatch: "way \"name\"=Main Vue";
assertMatch: "way \"name\"=Main Vue";
throwWarning: tr("Highway name contains postfix Vue, should likely be expanded to Vue");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Vue");
}

*["name"=~/ Vw$/].highway_name {
assertNoMatch: "way \"name\"=Main View";
assertMatch: "way \"name\"=Main Vw";
throwWarning: tr("Highway name contains postfix Vw, should likely be expanded to View");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "View");
}

*["name"=~/ Vws$/].highway_name {
assertNoMatch: "way \"name\"=Main Views";
assertMatch: "way \"name\"=Main Vws";
throwWarning: tr("Highway name contains postfix Vws, should likely be expanded to Views");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Views");
}

*["name"=~/ Waters$/].highway_name {
assertNoMatch: "way \"name\"=Main Waters";
assertMatch: "way \"name\"=Main Waters";
throwWarning: tr("Highway name contains postfix Waters, should likely be expanded to Waters");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-6), "Waters");
}

*["name"=~/ Way$/].highway_name {
assertNoMatch: "way \"name\"=Main Way";
assertMatch: "way \"name\"=Main Way";
throwWarning: tr("Highway name contains postfix Way, should likely be expanded to Way");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Way");
}

*["name"=~/ Whrf$/].highway_name {
assertNoMatch: "way \"name\"=Main Wharf";
assertMatch: "way \"name\"=Main Whrf";
throwWarning: tr("Highway name contains postfix Whrf, should likely be expanded to Wharf");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Wharf");
}

*["name"=~/ Wlk$/].highway_name {
assertNoMatch: "way \"name\"=Main Walk";
assertMatch: "way \"name\"=Main Wlk";
throwWarning: tr("Highway name contains postfix Wlk, should likely be expanded to Walk");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Walk");
}

*["name"=~/ Wynd$/].highway_name {
assertNoMatch: "way \"name\"=Main Wynd";
assertMatch: "way \"name\"=Main Wynd";
throwWarning: tr("Highway name contains postfix Wynd, should likely be expanded to Wynd");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Wynd");
}

*["addr:street"]["addr:street"=~/ Accs\.$/] {
assertNoMatch: "way \"addr:street\"=Main Access";
assertMatch: "way \"addr:street\"=Main Accs.";
throwWarning: tr("addr:street={0} contains prefix Accs., should likely be expanded to Access","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Access");
group: tr("addr:street contains postfix Accs, should likely be expanded to Access");
}

*["addr:street"]["addr:street"=~/ Accswy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Accessway";
assertMatch: "way \"addr:street\"=Main Accswy.";
throwWarning: tr("addr:street={0} contains prefix Accswy., should likely be expanded to Accessway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-7), "Accessway");
group: tr("addr:street contains postfix Accswy, should likely be expanded to Accessway");
}

*["addr:street"]["addr:street"=~/ Aly\.$/] {
assertNoMatch: "way \"addr:street\"=Main Alley";
assertMatch: "way \"addr:street\"=Main Aly.";
throwWarning: tr("addr:street={0} contains prefix Aly., should likely be expanded to Alley","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Alley");
group: tr("addr:street contains postfix Aly, should likely be expanded to Alley");
}

*["addr:street"]["addr:street"=~/ Ancg\.$/] {
assertNoMatch: "way \"addr:street\"=Main Anchorage";
assertMatch: "way \"addr:street\"=Main Ancg.";
throwWarning: tr("addr:street={0} contains prefix Ancg., should likely be expanded to Anchorage","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Anchorage");
group: tr("addr:street contains postfix Ancg, should likely be expanded to Anchorage");
}

*["addr:street"]["addr:street"=~/ App\.$/] {
assertNoMatch: "way \"addr:street\"=Main Approach";
assertMatch: "way \"addr:street\"=Main App.";
throwWarning: tr("addr:street={0} contains prefix App., should likely be expanded to Approach","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Approach");
group: tr("addr:street contains postfix App, should likely be expanded to Approach");
}

*["addr:street"]["addr:street"=~/ Arc\.$/] {
assertNoMatch: "way \"addr:street\"=Main Arcade";
assertMatch: "way \"addr:street\"=Main Arc.";
throwWarning: tr("addr:street={0} contains prefix Arc., should likely be expanded to Arcade","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Arcade");
group: tr("addr:street contains postfix Arc, should likely be expanded to Arcade");
}

*["addr:street"]["addr:street"=~/ Arch\.$/] {
assertNoMatch: "way \"addr:street\"=Main Arch";
assertMatch: "way \"addr:street\"=Main Arch.";
throwWarning: tr("addr:street={0} contains prefix Arch., should likely be expanded to Arch","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Arch");
group: tr("addr:street contains postfix Arch, should likely be expanded to Arch");
}

*["addr:street"]["addr:street"=~/ Ave\.$/] {
assertNoMatch: "way \"addr:street\"=Main Avenue";
assertMatch: "way \"addr:street\"=Main Ave.";
throwWarning: tr("addr:street={0} contains prefix Ave., should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Avenue");
group: tr("addr:street contains postfix Ave, should likely be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/ Bank\.$/] {
assertNoMatch: "way \"addr:street\"=Main Bank";
assertMatch: "way \"addr:street\"=Main Bank.";
throwWarning: tr("addr:street={0} contains prefix Bank., should likely be expanded to Bank","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Bank");
group: tr("addr:street contains postfix Bank, should likely be expanded to Bank");
}

*["addr:street"]["addr:street"=~/ Bay\.$/] {
assertNoMatch: "way \"addr:street\"=Main Bay";
assertMatch: "way \"addr:street\"=Main Bay.";
throwWarning: tr("addr:street={0} contains prefix Bay., should likely be expanded to Bay","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Bay");
group: tr("addr:street contains postfix Bay, should likely be expanded to Bay");
}

*["addr:street"]["addr:street"=~/ Bch\.$/] {
assertNoMatch: "way \"addr:street\"=Main Beach";
assertMatch: "way \"addr:street\"=Main Bch.";
throwWarning: tr("addr:street={0} contains prefix Bch., should likely be expanded to Beach","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Beach");
group: tr("addr:street contains postfix Bch, should likely be expanded to Beach");
}

*["addr:street"]["addr:street"=~/ Belt\.$/] {
assertNoMatch: "way \"addr:street\"=Main Belt";
assertMatch: "way \"addr:street\"=Main Belt.";
throwWarning: tr("addr:street={0} contains prefix Belt., should likely be expanded to Belt","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Belt");
group: tr("addr:street contains postfix Belt, should likely be expanded to Belt");
}

*["addr:street"]["addr:street"=~/ Blf\.$/] {
assertNoMatch: "way \"addr:street\"=Main Bluff";
assertMatch: "way \"addr:street\"=Main Blf.";
throwWarning: tr("addr:street={0} contains prefix Blf., should likely be expanded to Bluff","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Bluff");
group: tr("addr:street contains postfix Blf, should likely be expanded to Bluff");
}

*["addr:street"]["addr:street"=~/ Blvd\.$/] {
assertNoMatch: "way \"addr:street\"=Main Boulevard";
assertMatch: "way \"addr:street\"=Main Blvd.";
throwWarning: tr("addr:street={0} contains prefix Blvd., should likely be expanded to Boulevard","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Boulevard");
group: tr("addr:street contains postfix Blvd, should likely be expanded to Boulevard");
}

*["addr:street"]["addr:street"=~/ Bnd\.$/] {
assertNoMatch: "way \"addr:street\"=Main Bend";
assertMatch: "way \"addr:street\"=Main Bnd.";
throwWarning: tr("addr:street={0} contains prefix Bnd., should likely be expanded to Bend","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Bend");
group: tr("addr:street contains postfix Bnd, should likely be expanded to Bend");
}

*["addr:street"]["addr:street"=~/ Brae\.$/] {
assertNoMatch: "way \"addr:street\"=Main Brae";
assertMatch: "way \"addr:street\"=Main Brae.";
throwWarning: tr("addr:street={0} contains prefix Brae., should likely be expanded to Brae","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Brae");
group: tr("addr:street contains postfix Brae, should likely be expanded to Brae");
}

*["addr:street"]["addr:street"=~/ Brg\.$/] {
assertNoMatch: "way \"addr:street\"=Main Bridge";
assertMatch: "way \"addr:street\"=Main Brg.";
throwWarning: tr("addr:street={0} contains prefix Brg., should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Bridge");
group: tr("addr:street contains postfix Brg, should likely be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/ Briars\.$/] {
assertNoMatch: "way \"addr:street\"=Main Briars";
assertMatch: "way \"addr:street\"=Main Briars.";
throwWarning: tr("addr:street={0} contains prefix Briars., should likely be expanded to Briars","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-7), "Briars");
group: tr("addr:street contains postfix Briars, should likely be expanded to Briars");
}

*["addr:street"]["addr:street"=~/ Byp\.$/] {
assertNoMatch: "way \"addr:street\"=Main Bypass";
assertMatch: "way \"addr:street\"=Main Byp.";
throwWarning: tr("addr:street={0} contains prefix Byp., should likely be expanded to Bypass","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Bypass");
group: tr("addr:street contains postfix Byp, should likely be expanded to Bypass");
}

*["addr:street"]["addr:street"=~/ Ch\.$/] {
assertNoMatch: "way \"addr:street\"=Main Chase";
assertMatch: "way \"addr:street\"=Main Ch.";
throwWarning: tr("addr:street={0} contains prefix Ch., should likely be expanded to Chase","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Chase");
group: tr("addr:street contains postfix Ch, should likely be expanded to Chase");
}

*["addr:street"]["addr:street"=~/ Cir\.$/] {
assertNoMatch: "way \"addr:street\"=Main Circle";
assertMatch: "way \"addr:street\"=Main Cir.";
throwWarning: tr("addr:street={0} contains prefix Cir., should likely be expanded to Circle","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Circle");
group: tr("addr:street contains postfix Cir, should likely be expanded to Circle");
}

*["addr:street"]["addr:street"=~/ Cl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Close";
assertMatch: "way \"addr:street\"=Main Cl.";
throwWarning: tr("addr:street={0} contains prefix Cl., should likely be expanded to Close","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Close");
group: tr("addr:street contains postfix Cl, should likely be expanded to Close");
}

*["addr:street"]["addr:street"=~/ Clm\.$/] {
assertNoMatch: "way \"addr:street\"=Main Claim";
assertMatch: "way \"addr:street\"=Main Clm.";
throwWarning: tr("addr:street={0} contains prefix Clm., should likely be expanded to Claim","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Claim");
group: tr("addr:street contains postfix Clm, should likely be expanded to Claim");
}

*["addr:street"]["addr:street"=~/ Cmn\.$/] {
assertNoMatch: "way \"addr:street\"=Main Common";
assertMatch: "way \"addr:street\"=Main Cmn.";
throwWarning: tr("addr:street={0} contains prefix Cmn., should likely be expanded to Common","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Common");
group: tr("addr:street contains postfix Cmn, should likely be expanded to Common");
}

*["addr:street"]["addr:street"=~/ Crcs\.$/] {
assertNoMatch: "way \"addr:street\"=Main Circus";
assertMatch: "way \"addr:street\"=Main Crcs.";
throwWarning: tr("addr:street={0} contains prefix Crcs., should likely be expanded to Circus","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Circus");
group: tr("addr:street contains postfix Crcs, should likely be expanded to Circus");
}

*["addr:street"]["addr:street"=~/ Cres\.$/] {
assertNoMatch: "way \"addr:street\"=Main Crescent";
assertMatch: "way \"addr:street\"=Main Cres.";
throwWarning: tr("addr:street={0} contains prefix Cres., should likely be expanded to Crescent","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Crescent");
group: tr("addr:street contains postfix Cres, should likely be expanded to Crescent");
}

*["addr:street"]["addr:street"=~/ Crk\.$/] {
assertNoMatch: "way \"addr:street\"=Main Creek";
assertMatch: "way \"addr:street\"=Main Crk.";
throwWarning: tr("addr:street={0} contains prefix Crk., should likely be expanded to Creek","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Creek");
group: tr("addr:street contains postfix Crk, should likely be expanded to Creek");
}

*["addr:street"]["addr:street"=~/ Crst\.$/] {
assertNoMatch: "way \"addr:street\"=Main Crest";
assertMatch: "way \"addr:street\"=Main Crst.";
throwWarning: tr("addr:street={0} contains prefix Crst., should likely be expanded to Crest","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Crest");
group: tr("addr:street contains postfix Crst, should likely be expanded to Crest");
}

*["addr:street"]["addr:street"=~/ Crt\.$/] {
assertNoMatch: "way \"addr:street\"=Main Court";
assertMatch: "way \"addr:street\"=Main Crt.";
throwWarning: tr("addr:street={0} contains prefix Crt., should likely be expanded to Court","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Court");
group: tr("addr:street contains postfix Crt, should likely be expanded to Court");
}

*["addr:street"]["addr:street"=~/ Crts\.$/] {
assertNoMatch: "way \"addr:street\"=Main Courts";
assertMatch: "way \"addr:street\"=Main Crts.";
throwWarning: tr("addr:street={0} contains prefix Crts., should likely be expanded to Courts","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Courts");
group: tr("addr:street contains postfix Crts, should likely be expanded to Courts");
}

*["addr:street"]["addr:street"=~/ Ctr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Centre";
assertMatch: "way \"addr:street\"=Main Ctr.";
throwWarning: tr("addr:street={0} contains prefix Ctr., should likely be expanded to Centre","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Centre");
group: tr("addr:street contains postfix Ctr, should likely be expanded to Centre");
}

*["addr:street"]["addr:street"=~/ Cul\.$/] {
assertNoMatch: "way \"addr:street\"=Main Cul";
assertMatch: "way \"addr:street\"=Main Cul.";
throwWarning: tr("addr:street={0} contains prefix Cul., should likely be expanded to Cul","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Cul");
group: tr("addr:street contains postfix Cul, should likely be expanded to Cul");
}

*["addr:street"]["addr:street"=~/ Cv\.$/] {
assertNoMatch: "way \"addr:street\"=Main Cove";
assertMatch: "way \"addr:street\"=Main Cv.";
throwWarning: tr("addr:street={0} contains prefix Cv., should likely be expanded to Cove","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Cove");
group: tr("addr:street contains postfix Cv, should likely be expanded to Cove");
}

*["addr:street"]["addr:street"=~/ Del\.$/] {
assertNoMatch: "way \"addr:street\"=Main Dell";
assertMatch: "way \"addr:street\"=Main Del.";
throwWarning: tr("addr:street={0} contains prefix Del., should likely be expanded to Dell","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Dell");
group: tr("addr:street contains postfix Del, should likely be expanded to Dell");
}

*["addr:street"]["addr:street"=~/ Dle\.$/] {
assertNoMatch: "way \"addr:street\"=Main Dale";
assertMatch: "way \"addr:street\"=Main Dle.";
throwWarning: tr("addr:street={0} contains prefix Dle., should likely be expanded to Dale","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Dale");
group: tr("addr:street contains postfix Dle, should likely be expanded to Dale");
}

*["addr:street"]["addr:street"=~/ Downs\.$/] {
assertNoMatch: "way \"addr:street\"=Main Downs";
assertMatch: "way \"addr:street\"=Main Downs.";
throwWarning: tr("addr:street={0} contains prefix Downs., should likely be expanded to Downs","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-6), "Downs");
group: tr("addr:street contains postfix Downs, should likely be expanded to Downs");
}

*["addr:street"]["addr:street"=~/ Dr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Drive";
assertMatch: "way \"addr:street\"=Main Dr.";
throwWarning: tr("addr:street={0} contains prefix Dr., should likely be expanded to Drive","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Drive");
group: tr("addr:street contains postfix Dr, should likely be expanded to Drive");
}

*["addr:street"]["addr:street"=~/ Dune\.$/] {
assertNoMatch: "way \"addr:street\"=Main Dune";
assertMatch: "way \"addr:street\"=Main Dune.";
throwWarning: tr("addr:street={0} contains prefix Dune., should likely be expanded to Dune","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Dune");
group: tr("addr:street contains postfix Dune, should likely be expanded to Dune");
}

*["addr:street"]["addr:street"=~/ Dvn\.$/] {
assertNoMatch: "way \"addr:street\"=Main Deviation";
assertMatch: "way \"addr:street\"=Main Dvn.";
throwWarning: tr("addr:street={0} contains prefix Dvn., should likely be expanded to Deviation","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Deviation");
group: tr("addr:street contains postfix Dvn, should likely be expanded to Deviation");
}

*["addr:street"]["addr:street"=~/ Elm\.$/] {
assertNoMatch: "way \"addr:street\"=Main Elm";
assertMatch: "way \"addr:street\"=Main Elm.";
throwWarning: tr("addr:street={0} contains prefix Elm., should likely be expanded to Elm","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Elm");
group: tr("addr:street contains postfix Elm, should likely be expanded to Elm");
}

*["addr:street"]["addr:street"=~/ End\.$/] {
assertNoMatch: "way \"addr:street\"=Main End";
assertMatch: "way \"addr:street\"=Main End.";
throwWarning: tr("addr:street={0} contains prefix End., should likely be expanded to End","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "End");
group: tr("addr:street contains postfix End, should likely be expanded to End");
}

*["addr:street"]["addr:street"=~/ Ent\.$/] {
assertNoMatch: "way \"addr:street\"=Main Entrance";
assertMatch: "way \"addr:street\"=Main Ent.";
throwWarning: tr("addr:street={0} contains prefix Ent., should likely be expanded to Entrance","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Entrance");
group: tr("addr:street contains postfix Ent, should likely be expanded to Entrance");
}

*["addr:street"]["addr:street"=~/ Esp\.$/] {
assertNoMatch: "way \"addr:street\"=Main Esplanade";
assertMatch: "way \"addr:street\"=Main Esp.";
throwWarning: tr("addr:street={0} contains prefix Esp., should likely be expanded to Esplanade","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Esplanade");
group: tr("addr:street contains postfix Esp, should likely be expanded to Esplanade");
}

*["addr:street"]["addr:street"=~/ Est\.$/] {
assertNoMatch: "way \"addr:street\"=Main Estate";
assertMatch: "way \"addr:street\"=Main Est.";
throwWarning: tr("addr:street={0} contains prefix Est., should likely be expanded to Estate","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Estate");
group: tr("addr:street contains postfix Est, should likely be expanded to Estate");
}

*["addr:street"]["addr:street"=~/ Fall\.$/] {
assertNoMatch: "way \"addr:street\"=Main Fall";
assertMatch: "way \"addr:street\"=Main Fall.";
throwWarning: tr("addr:street={0} contains prefix Fall., should likely be expanded to Fall","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Fall");
group: tr("addr:street contains postfix Fall, should likely be expanded to Fall");
}

*["addr:street"]["addr:street"=~/ Fare\.$/] {
assertNoMatch: "way \"addr:street\"=Main Fare";
assertMatch: "way \"addr:street\"=Main Fare.";
throwWarning: tr("addr:street={0} contains prefix Fare., should likely be expanded to Fare","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Fare");
group: tr("addr:street contains postfix Fare, should likely be expanded to Fare");
}

*["addr:street"]["addr:street"=~/ Fawy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Fairway";
assertMatch: "way \"addr:street\"=Main Fawy.";
throwWarning: tr("addr:street={0} contains prefix Fawy., should likely be expanded to Fairway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Fairway");
group: tr("addr:street contains postfix Fawy, should likely be expanded to Fairway");
}

*["addr:street"]["addr:street"=~/ Fen\.$/] {
assertNoMatch: "way \"addr:street\"=Main Fen";
assertMatch: "way \"addr:street\"=Main Fen.";
throwWarning: tr("addr:street={0} contains prefix Fen., should likely be expanded to Fen","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Fen");
group: tr("addr:street contains postfix Fen, should likely be expanded to Fen");
}

*["addr:street"]["addr:street"=~/ Fern\.$/] {
assertNoMatch: "way \"addr:street\"=Main Fern";
assertMatch: "way \"addr:street\"=Main Fern.";
throwWarning: tr("addr:street={0} contains prefix Fern., should likely be expanded to Fern","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Fern");
group: tr("addr:street contains postfix Fern, should likely be expanded to Fern");
}

*["addr:street"]["addr:street"=~/ Flt\.$/] {
assertNoMatch: "way \"addr:street\"=Main Flat";
assertMatch: "way \"addr:street\"=Main Flt.";
throwWarning: tr("addr:street={0} contains prefix Flt., should likely be expanded to Flat","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Flat");
group: tr("addr:street contains postfix Flt, should likely be expanded to Flat");
}

*["addr:street"]["addr:street"=~/ Flts\.$/] {
assertNoMatch: "way \"addr:street\"=Main Flats";
assertMatch: "way \"addr:street\"=Main Flts.";
throwWarning: tr("addr:street={0} contains prefix Flts., should likely be expanded to Flats","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Flats");
group: tr("addr:street contains postfix Flts, should likely be expanded to Flats");
}

*["addr:street"]["addr:street"=~/ Frms\.$/] {
assertNoMatch: "way \"addr:street\"=Main Farms";
assertMatch: "way \"addr:street\"=Main Frms.";
throwWarning: tr("addr:street={0} contains prefix Frms., should likely be expanded to Farms","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Farms");
group: tr("addr:street contains postfix Frms, should likely be expanded to Farms");
}

*["addr:street"]["addr:street"=~/ Gdn\.$/] {
assertNoMatch: "way \"addr:street\"=Main Garden";
assertMatch: "way \"addr:street\"=Main Gdn.";
throwWarning: tr("addr:street={0} contains prefix Gdn., should likely be expanded to Garden","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Garden");
group: tr("addr:street contains postfix Gdn, should likely be expanded to Garden");
}

*["addr:street"]["addr:street"=~/ Gdns\.$/] {
assertNoMatch: "way \"addr:street\"=Main Gardens";
assertMatch: "way \"addr:street\"=Main Gdns.";
throwWarning: tr("addr:street={0} contains prefix Gdns., should likely be expanded to Gardens","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Gardens");
group: tr("addr:street contains postfix Gdns, should likely be expanded to Gardens");
}

*["addr:street"]["addr:street"=~/ Gld\.$/] {
assertNoMatch: "way \"addr:street\"=Main Glade";
assertMatch: "way \"addr:street\"=Main Gld.";
throwWarning: tr("addr:street={0} contains prefix Gld., should likely be expanded to Glade","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Glade");
group: tr("addr:street contains postfix Gld, should likely be expanded to Glade");
}

*["addr:street"]["addr:street"=~/ Gln\.$/] {
assertNoMatch: "way \"addr:street\"=Main Glen";
assertMatch: "way \"addr:street\"=Main Gln.";
throwWarning: tr("addr:street={0} contains prefix Gln., should likely be expanded to Glen","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Glen");
group: tr("addr:street contains postfix Gln, should likely be expanded to Glen");
}

*["addr:street"]["addr:street"=~/ Gly\.$/] {
assertNoMatch: "way \"addr:street\"=Main Gully";
assertMatch: "way \"addr:street\"=Main Gly.";
throwWarning: tr("addr:street={0} contains prefix Gly., should likely be expanded to Gully","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Gully");
group: tr("addr:street contains postfix Gly, should likely be expanded to Gully");
}

*["addr:street"]["addr:street"=~/ Grg\.$/] {
assertNoMatch: "way \"addr:street\"=Main Grange";
assertMatch: "way \"addr:street\"=Main Grg.";
throwWarning: tr("addr:street={0} contains prefix Grg., should likely be expanded to Grange","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Grange");
group: tr("addr:street contains postfix Grg, should likely be expanded to Grange");
}

*["addr:street"]["addr:street"=~/ Grn\.$/] {
assertNoMatch: "way \"addr:street\"=Main Green";
assertMatch: "way \"addr:street\"=Main Grn.";
throwWarning: tr("addr:street={0} contains prefix Grn., should likely be expanded to Green","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Green");
group: tr("addr:street contains postfix Grn, should likely be expanded to Green");
}

*["addr:street"]["addr:street"=~/ Grv\.$/] {
assertNoMatch: "way \"addr:street\"=Main Grove";
assertMatch: "way \"addr:street\"=Main Grv.";
throwWarning: tr("addr:street={0} contains prefix Grv., should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Grove");
group: tr("addr:street contains postfix Grv, should likely be expanded to Grove");
}

*["addr:street"]["addr:street"=~/ Gte\.$/] {
assertNoMatch: "way \"addr:street\"=Main Gate";
assertMatch: "way \"addr:street\"=Main Gte.";
throwWarning: tr("addr:street={0} contains prefix Gte., should likely be expanded to Gate","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Gate");
group: tr("addr:street contains postfix Gte, should likely be expanded to Gate");
}

*["addr:street"]["addr:street"=~/ Head\.$/] {
assertNoMatch: "way \"addr:street\"=Main Head";
assertMatch: "way \"addr:street\"=Main Head.";
throwWarning: tr("addr:street={0} contains prefix Head., should likely be expanded to Head","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Head");
group: tr("addr:street contains postfix Head, should likely be expanded to Head");
}

*["addr:street"]["addr:street"=~/ Hl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Hill";
assertMatch: "way \"addr:street\"=Main Hl.";
throwWarning: tr("addr:street={0} contains prefix Hl., should likely be expanded to Hill","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Hill");
group: tr("addr:street contains postfix Hl, should likely be expanded to Hill");
}

*["addr:street"]["addr:street"=~/ Hts\.$/] {
assertNoMatch: "way \"addr:street\"=Main Heights";
assertMatch: "way \"addr:street\"=Main Hts.";
throwWarning: tr("addr:street={0} contains prefix Hts., should likely be expanded to Heights","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Heights");
group: tr("addr:street contains postfix Hts, should likely be expanded to Heights");
}

*["addr:street"]["addr:street"=~/ Hvn\.$/] {
assertNoMatch: "way \"addr:street\"=Main Haven";
assertMatch: "way \"addr:street\"=Main Hvn.";
throwWarning: tr("addr:street={0} contains prefix Hvn., should likely be expanded to Haven","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Haven");
group: tr("addr:street contains postfix Hvn, should likely be expanded to Haven");
}

*["addr:street"]["addr:street"=~/ Hwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Highway";
assertMatch: "way \"addr:street\"=Main Hwy.";
throwWarning: tr("addr:street={0} contains prefix Hwy., should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Highway");
group: tr("addr:street contains postfix Hwy, should likely be expanded to Highway");
}

*["addr:street"]["addr:street"=~/ Is\.$/] {
assertNoMatch: "way \"addr:street\"=Main Island";
assertMatch: "way \"addr:street\"=Main Is.";
throwWarning: tr("addr:street={0} contains prefix Is., should likely be expanded to Island","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Island");
group: tr("addr:street contains postfix Is, should likely be expanded to Island");
}

*["addr:street"]["addr:street"=~/ Jct\.$/] {
assertNoMatch: "way \"addr:street\"=Main Junction";
assertMatch: "way \"addr:street\"=Main Jct.";
throwWarning: tr("addr:street={0} contains prefix Jct., should likely be expanded to Junction","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Junction");
group: tr("addr:street contains postfix Jct, should likely be expanded to Junction");
}

*["addr:street"]["addr:street"=~/ Key\.$/] {
assertNoMatch: "way \"addr:street\"=Main Key";
assertMatch: "way \"addr:street\"=Main Key.";
throwWarning: tr("addr:street={0} contains prefix Key., should likely be expanded to Key","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Key");
group: tr("addr:street contains postfix Key, should likely be expanded to Key");
}

*["addr:street"]["addr:street"=~/ Knob\.$/] {
assertNoMatch: "way \"addr:street\"=Main Knob";
assertMatch: "way \"addr:street\"=Main Knob.";
throwWarning: tr("addr:street={0} contains prefix Knob., should likely be expanded to Knob","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Knob");
group: tr("addr:street contains postfix Knob, should likely be expanded to Knob");
}

*["addr:street"]["addr:street"=~/ Ladr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Ladder";
assertMatch: "way \"addr:street\"=Main Ladr.";
throwWarning: tr("addr:street={0} contains prefix Ladr., should likely be expanded to Ladder","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Ladder");
group: tr("addr:street contains postfix Ladr, should likely be expanded to Ladder");
}

*["addr:street"]["addr:street"=~/ Lane\.$/] {
assertNoMatch: "way \"addr:street\"=Main Lane";
assertMatch: "way \"addr:street\"=Main Lane.";
throwWarning: tr("addr:street={0} contains prefix Lane., should likely be expanded to Lane","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Lane");
group: tr("addr:street contains postfix Lane, should likely be expanded to Lane");
}

*["addr:street"]["addr:street"=~/ Lea\.$/] {
assertNoMatch: "way \"addr:street\"=Main Lea";
assertMatch: "way \"addr:street\"=Main Lea.";
throwWarning: tr("addr:street={0} contains prefix Lea., should likely be expanded to Lea","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Lea");
group: tr("addr:street contains postfix Lea, should likely be expanded to Lea");
}

*["addr:street"]["addr:street"=~/ Ledr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Leader";
assertMatch: "way \"addr:street\"=Main Ledr.";
throwWarning: tr("addr:street={0} contains prefix Ledr., should likely be expanded to Leader","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Leader");
group: tr("addr:street contains postfix Ledr, should likely be expanded to Leader");
}

*["addr:street"]["addr:street"=~/ Lgh\.$/] {
assertNoMatch: "way \"addr:street\"=Main Leigh";
assertMatch: "way \"addr:street\"=Main Lgh.";
throwWarning: tr("addr:street={0} contains prefix Lgh., should likely be expanded to Leigh","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Leigh");
group: tr("addr:street contains postfix Lgh, should likely be expanded to Leigh");
}

*["addr:street"]["addr:street"=~/ Line\.$/] {
assertNoMatch: "way \"addr:street\"=Main Line";
assertMatch: "way \"addr:street\"=Main Line.";
throwWarning: tr("addr:street={0} contains prefix Line., should likely be expanded to Line","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Line");
group: tr("addr:street contains postfix Line, should likely be expanded to Line");
}

*["addr:street"]["addr:street"=~/ Link\.$/] {
assertNoMatch: "way \"addr:street\"=Main Link";
assertMatch: "way \"addr:street\"=Main Link.";
throwWarning: tr("addr:street={0} contains prefix Link., should likely be expanded to Link","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Link");
group: tr("addr:street contains postfix Link, should likely be expanded to Link");
}

*["addr:street"]["addr:street"=~/ Lkt\.$/] {
assertNoMatch: "way \"addr:street\"=Main Lookout";
assertMatch: "way \"addr:street\"=Main Lkt.";
throwWarning: tr("addr:street={0} contains prefix Lkt., should likely be expanded to Lookout","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Lookout");
group: tr("addr:street contains postfix Lkt, should likely be expanded to Lookout");
}

*["addr:street"]["addr:street"=~/ Lndg\.$/] {
assertNoMatch: "way \"addr:street\"=Main Landing";
assertMatch: "way \"addr:street\"=Main Lndg.";
throwWarning: tr("addr:street={0} contains prefix Lndg., should likely be expanded to Landing","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Landing");
group: tr("addr:street contains postfix Lndg, should likely be expanded to Landing");
}

*["addr:street"]["addr:street"=~/ Loop\.$/] {
assertNoMatch: "way \"addr:street\"=Main Loop";
assertMatch: "way \"addr:street\"=Main Loop.";
throwWarning: tr("addr:street={0} contains prefix Loop., should likely be expanded to Loop","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Loop");
group: tr("addr:street contains postfix Loop, should likely be expanded to Loop");
}

*["addr:street"]["addr:street"=~/ Mall\.$/] {
assertNoMatch: "way \"addr:street\"=Main Mall";
assertMatch: "way \"addr:street\"=Main Mall.";
throwWarning: tr("addr:street={0} contains prefix Mall., should likely be expanded to Mall","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Mall");
group: tr("addr:street contains postfix Mall, should likely be expanded to Mall");
}

*["addr:street"]["addr:street"=~/ Mdws\.$/] {
assertNoMatch: "way \"addr:street\"=Main Meadows";
assertMatch: "way \"addr:street\"=Main Mdws.";
throwWarning: tr("addr:street={0} contains prefix Mdws., should likely be expanded to Meadows","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Meadows");
group: tr("addr:street contains postfix Mdws, should likely be expanded to Meadows");
}

*["addr:street"]["addr:street"=~/ Mead\.$/] {
assertNoMatch: "way \"addr:street\"=Main Mead";
assertMatch: "way \"addr:street\"=Main Mead.";
throwWarning: tr("addr:street={0} contains prefix Mead., should likely be expanded to Mead","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Mead");
group: tr("addr:street contains postfix Mead, should likely be expanded to Mead");
}

*["addr:street"]["addr:street"=~/ Mews\.$/] {
assertNoMatch: "way \"addr:street\"=Main Mews";
assertMatch: "way \"addr:street\"=Main Mews.";
throwWarning: tr("addr:street={0} contains prefix Mews., should likely be expanded to Mews","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Mews");
group: tr("addr:street contains postfix Mews, should likely be expanded to Mews");
}

*["addr:street"]["addr:street"=~/ Mile\.$/] {
assertNoMatch: "way \"addr:street\"=Main Mile";
assertMatch: "way \"addr:street\"=Main Mile.";
throwWarning: tr("addr:street={0} contains prefix Mile., should likely be expanded to Mile","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Mile");
group: tr("addr:street contains postfix Mile, should likely be expanded to Mile");
}

*["addr:street"]["addr:street"=~/ Motu\.$/] {
assertNoMatch: "way \"addr:street\"=Main Motu";
assertMatch: "way \"addr:street\"=Main Motu.";
throwWarning: tr("addr:street={0} contains prefix Motu., should likely be expanded to Motu","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Motu");
group: tr("addr:street contains postfix Motu, should likely be expanded to Motu");
}

*["addr:street"]["addr:street"=~/ Mt\.$/] {
assertNoMatch: "way \"addr:street\"=Main Mount";
assertMatch: "way \"addr:street\"=Main Mt.";
throwWarning: tr("addr:street={0} contains prefix Mt., should likely be expanded to Mount","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Mount");
group: tr("addr:street contains postfix Mt, should likely be expanded to Mount");
}

*["addr:street"]["addr:street"=~/ Mwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Motorway";
assertMatch: "way \"addr:street\"=Main Mwy.";
throwWarning: tr("addr:street={0} contains prefix Mwy., should likely be expanded to Motorway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Motorway");
group: tr("addr:street contains postfix Mwy, should likely be expanded to Motorway");
}

*["addr:street"]["addr:street"=~/ Nvs\.$/] {
assertNoMatch: "way \"addr:street\"=Main Neaves";
assertMatch: "way \"addr:street\"=Main Nvs.";
throwWarning: tr("addr:street={0} contains prefix Nvs., should likely be expanded to Neaves","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Neaves");
group: tr("addr:street contains postfix Nvs, should likely be expanded to Neaves");
}

*["addr:street"]["addr:street"=~/ Oaks\.$/] {
assertNoMatch: "way \"addr:street\"=Main Oaks";
assertMatch: "way \"addr:street\"=Main Oaks.";
throwWarning: tr("addr:street={0} contains prefix Oaks., should likely be expanded to Oaks","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Oaks");
group: tr("addr:street contains postfix Oaks, should likely be expanded to Oaks");
}

*["addr:street"]["addr:street"=~/ Padk\.$/] {
assertNoMatch: "way \"addr:street\"=Main Paddock";
assertMatch: "way \"addr:street\"=Main Padk.";
throwWarning: tr("addr:street={0} contains prefix Padk., should likely be expanded to Paddock","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Paddock");
group: tr("addr:street contains postfix Padk, should likely be expanded to Paddock");
}

*["addr:street"]["addr:street"=~/ Paku\.$/] {
assertNoMatch: "way \"addr:street\"=Main Paku";
assertMatch: "way \"addr:street\"=Main Paku.";
throwWarning: tr("addr:street={0} contains prefix Paku., should likely be expanded to Paku","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Paku");
group: tr("addr:street contains postfix Paku, should likely be expanded to Paku");
}

*["addr:street"]["addr:street"=~/ Pass\.$/] {
assertNoMatch: "way \"addr:street\"=Main Pass";
assertMatch: "way \"addr:street\"=Main Pass.";
throwWarning: tr("addr:street={0} contains prefix Pass., should likely be expanded to Pass","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Pass");
group: tr("addr:street contains postfix Pass, should likely be expanded to Pass");
}

*["addr:street"]["addr:street"=~/ Pde\.$/] {
assertNoMatch: "way \"addr:street\"=Main Parade";
assertMatch: "way \"addr:street\"=Main Pde.";
throwWarning: tr("addr:street={0} contains prefix Pde., should likely be expanded to Parade","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Parade");
group: tr("addr:street contains postfix Pde, should likely be expanded to Parade");
}

*["addr:street"]["addr:street"=~/ Pk\.$/] {
assertNoMatch: "way \"addr:street\"=Main Park";
assertMatch: "way \"addr:street\"=Main Pk.";
throwWarning: tr("addr:street={0} contains prefix Pk., should likely be expanded to Park","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Park");
group: tr("addr:street contains postfix Pk, should likely be expanded to Park");
}

*["addr:street"]["addr:street"=~/ Pkwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Parkway";
assertMatch: "way \"addr:street\"=Main Pkwy.";
throwWarning: tr("addr:street={0} contains prefix Pkwy., should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Parkway");
group: tr("addr:street contains postfix Pkwy, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Place";
assertMatch: "way \"addr:street\"=Main Pl.";
throwWarning: tr("addr:street={0} contains prefix Pl., should likely be expanded to Place","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Place");
group: tr("addr:street contains postfix Pl, should likely be expanded to Place");
}

*["addr:street"]["addr:street"=~/ Priors\.$/] {
assertNoMatch: "way \"addr:street\"=Main Priors";
assertMatch: "way \"addr:street\"=Main Priors.";
throwWarning: tr("addr:street={0} contains prefix Priors., should likely be expanded to Priors","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-7), "Priors");
group: tr("addr:street contains postfix Priors, should likely be expanded to Priors");
}

*["addr:street"]["addr:street"=~/ Prom\.$/] {
assertNoMatch: "way \"addr:street\"=Main Promenade";
assertMatch: "way \"addr:street\"=Main Prom.";
throwWarning: tr("addr:street={0} contains prefix Prom., should likely be expanded to Promenade","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Promenade");
group: tr("addr:street contains postfix Prom, should likely be expanded to Promenade");
}

*["addr:street"]["addr:street"=~/ Psge\.$/] {
assertNoMatch: "way \"addr:street\"=Main Passage";
assertMatch: "way \"addr:street\"=Main Psge.";
throwWarning: tr("addr:street={0} contains prefix Psge., should likely be expanded to Passage","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Passage");
group: tr("addr:street contains postfix Psge, should likely be expanded to Passage");
}

*["addr:street"]["addr:street"=~/ Pt\.$/] {
assertNoMatch: "way \"addr:street\"=Main Point";
assertMatch: "way \"addr:street\"=Main Pt.";
throwWarning: tr("addr:street={0} contains prefix Pt., should likely be expanded to Point","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Point");
group: tr("addr:street contains postfix Pt, should likely be expanded to Point");
}

*["addr:street"]["addr:street"=~/ Pth\.$/] {
assertNoMatch: "way \"addr:street\"=Main Path";
assertMatch: "way \"addr:street\"=Main Pth.";
throwWarning: tr("addr:street={0} contains prefix Pth., should likely be expanded to Path","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Path");
group: tr("addr:street contains postfix Pth, should likely be expanded to Path");
}

*["addr:street"]["addr:street"=~/ Qdrt\.$/] {
assertNoMatch: "way \"addr:street\"=Main Quadrant";
assertMatch: "way \"addr:street\"=Main Qdrt.";
throwWarning: tr("addr:street={0} contains prefix Qdrt., should likely be expanded to Quadrant","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Quadrant");
group: tr("addr:street contains postfix Qdrt, should likely be expanded to Quadrant");
}

*["addr:street"]["addr:street"=~/ Qy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Quay";
assertMatch: "way \"addr:street\"=Main Qy.";
throwWarning: tr("addr:street={0} contains prefix Qy., should likely be expanded to Quay","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Quay");
group: tr("addr:street contains postfix Qy, should likely be expanded to Quay");
}

*["addr:street"]["addr:street"=~/ Rd\.$/] {
assertNoMatch: "way \"addr:street\"=Main Road";
assertMatch: "way \"addr:street\"=Main Rd.";
throwWarning: tr("addr:street={0} contains prefix Rd., should likely be expanded to Road","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Road");
group: tr("addr:street contains postfix Rd, should likely be expanded to Road");
}

*["addr:street"]["addr:street"=~/ Rdge\.$/] {
assertNoMatch: "way \"addr:street\"=Main Ridge";
assertMatch: "way \"addr:street\"=Main Rdge.";
throwWarning: tr("addr:street={0} contains prefix Rdge., should likely be expanded to Ridge","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Ridge");
group: tr("addr:street contains postfix Rdge, should likely be expanded to Ridge");
}

*["addr:street"]["addr:street"=~/ Rds\.$/] {
assertNoMatch: "way \"addr:street\"=Main Roads";
assertMatch: "way \"addr:street\"=Main Rds.";
throwWarning: tr("addr:street={0} contains prefix Rds., should likely be expanded to Roads","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Roads");
group: tr("addr:street contains postfix Rds, should likely be expanded to Roads");
}

*["addr:street"]["addr:street"=~/ Rdwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Roadway";
assertMatch: "way \"addr:street\"=Main Rdwy.";
throwWarning: tr("addr:street={0} contains prefix Rdwy., should likely be expanded to Roadway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Roadway");
group: tr("addr:street contains postfix Rdwy, should likely be expanded to Roadway");
}

*["addr:street"]["addr:street"=~/ Reef\.$/] {
assertNoMatch: "way \"addr:street\"=Main Reef";
assertMatch: "way \"addr:street\"=Main Reef.";
throwWarning: tr("addr:street={0} contains prefix Reef., should likely be expanded to Reef","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Reef");
group: tr("addr:street contains postfix Reef, should likely be expanded to Reef");
}

*["addr:street"]["addr:street"=~/ Res\.$/] {
assertNoMatch: "way \"addr:street\"=Main Reserve";
assertMatch: "way \"addr:street\"=Main Res.";
throwWarning: tr("addr:street={0} contains prefix Res., should likely be expanded to Reserve","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Reserve");
group: tr("addr:street contains postfix Res, should likely be expanded to Reserve");
}

*["addr:street"]["addr:street"=~/ Rest\.$/] {
assertNoMatch: "way \"addr:street\"=Main Rest";
assertMatch: "way \"addr:street\"=Main Rest.";
throwWarning: tr("addr:street={0} contains prefix Rest., should likely be expanded to Rest","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Rest");
group: tr("addr:street contains postfix Rest, should likely be expanded to Rest");
}

*["addr:street"]["addr:street"=~/ Rise\.$/] {
assertNoMatch: "way \"addr:street\"=Main Rise";
assertMatch: "way \"addr:street\"=Main Rise.";
throwWarning: tr("addr:street={0} contains prefix Rise., should likely be expanded to Rise","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Rise");
group: tr("addr:street contains postfix Rise, should likely be expanded to Rise");
}

*["addr:street"]["addr:street"=~/ Row\.$/] {
assertNoMatch: "way \"addr:street\"=Main Row";
assertMatch: "way \"addr:street\"=Main Row.";
throwWarning: tr("addr:street={0} contains prefix Row., should likely be expanded to Row","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Row");
group: tr("addr:street contains postfix Row, should likely be expanded to Row");
}

*["addr:street"]["addr:street"=~/ Rte\.$/] {
assertNoMatch: "way \"addr:street\"=Main Route";
assertMatch: "way \"addr:street\"=Main Rte.";
throwWarning: tr("addr:street={0} contains prefix Rte., should likely be expanded to Route","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Route");
group: tr("addr:street contains postfix Rte, should likely be expanded to Route");
}

*["addr:street"]["addr:street"=~/ Rtr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Retreat";
assertMatch: "way \"addr:street\"=Main Rtr.";
throwWarning: tr("addr:street={0} contains prefix Rtr., should likely be expanded to Retreat","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Retreat");
group: tr("addr:street contains postfix Rtr, should likely be expanded to Retreat");
}

*["addr:street"]["addr:street"=~/ SH\.$/] {
assertNoMatch: "way \"addr:street\"=Main State Highway";
assertMatch: "way \"addr:street\"=Main SH.";
throwWarning: tr("addr:street={0} contains prefix SH., should likely be expanded to State Highway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "State Highway");
group: tr("addr:street contains postfix SH, should likely be expanded to State Highway");
}

*["addr:street"]["addr:street"=~/ Slp\.$/] {
assertNoMatch: "way \"addr:street\"=Main Slope";
assertMatch: "way \"addr:street\"=Main Slp.";
throwWarning: tr("addr:street={0} contains prefix Slp., should likely be expanded to Slope","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Slope");
group: tr("addr:street contains postfix Slp, should likely be expanded to Slope");
}

*["addr:street"]["addr:street"=~/ Spa\.$/] {
assertNoMatch: "way \"addr:street\"=Main Spa";
assertMatch: "way \"addr:street\"=Main Spa.";
throwWarning: tr("addr:street={0} contains prefix Spa., should likely be expanded to Spa","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Spa");
group: tr("addr:street contains postfix Spa, should likely be expanded to Spa");
}

*["addr:street"]["addr:street"=~/ Spur\.$/] {
assertNoMatch: "way \"addr:street\"=Main Spur";
assertMatch: "way \"addr:street\"=Main Spur.";
throwWarning: tr("addr:street={0} contains prefix Spur., should likely be expanded to Spur","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Spur");
group: tr("addr:street contains postfix Spur, should likely be expanded to Spur");
}

*["addr:street"]["addr:street"=~/ Sq\.$/] {
assertNoMatch: "way \"addr:street\"=Main Square";
assertMatch: "way \"addr:street\"=Main Sq.";
throwWarning: tr("addr:street={0} contains prefix Sq., should likely be expanded to Square","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Square");
group: tr("addr:street contains postfix Sq, should likely be expanded to Square");
}

*["addr:street"]["addr:street"=~/ St\.$/] {
assertNoMatch: "way \"addr:street\"=Main Street";
assertMatch: "way \"addr:street\"=Main St.";
throwWarning: tr("addr:street={0} contains prefix St., should likely be expanded to Street","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Street");
group: tr("addr:street contains postfix St, should likely be expanded to Street");
}

*["addr:street"]["addr:street"=~/ Steep\.$/] {
assertNoMatch: "way \"addr:street\"=Main Steep";
assertMatch: "way \"addr:street\"=Main Steep.";
throwWarning: tr("addr:street={0} contains prefix Steep., should likely be expanded to Steep","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-6), "Steep");
group: tr("addr:street contains postfix Steep, should likely be expanded to Steep");
}

*["addr:street"]["addr:street"=~/ Stgt\.$/] {
assertNoMatch: "way \"addr:street\"=Main Straight";
assertMatch: "way \"addr:street\"=Main Stgt.";
throwWarning: tr("addr:street={0} contains prefix Stgt., should likely be expanded to Straight","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Straight");
group: tr("addr:street contains postfix Stgt, should likely be expanded to Straight");
}

*["addr:street"]["addr:street"=~/ Stps\.$/] {
assertNoMatch: "way \"addr:street\"=Main Steps";
assertMatch: "way \"addr:street\"=Main Stps.";
throwWarning: tr("addr:street={0} contains prefix Stps., should likely be expanded to Steps","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Steps");
group: tr("addr:street contains postfix Stps, should likely be expanded to Steps");
}

*["addr:street"]["addr:street"=~/ Strd\.$/] {
assertNoMatch: "way \"addr:street\"=Main Strand";
assertMatch: "way \"addr:street\"=Main Strd.";
throwWarning: tr("addr:street={0} contains prefix Strd., should likely be expanded to Strand","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Strand");
group: tr("addr:street contains postfix Strd, should likely be expanded to Strand");
}

*["addr:street"]["addr:street"=~/ Svln\.$/] {
assertNoMatch: "way \"addr:street\"=Main Service Lane";
assertMatch: "way \"addr:street\"=Main Svln.";
throwWarning: tr("addr:street={0} contains prefix Svln., should likely be expanded to Service Lane","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Service Lane");
group: tr("addr:street contains postfix Svln, should likely be expanded to Service Lane");
}

*["addr:street"]["addr:street"=~/ Tce\.$/] {
assertNoMatch: "way \"addr:street\"=Main Terrace";
assertMatch: "way \"addr:street\"=Main Tce.";
throwWarning: tr("addr:street={0} contains prefix Tce., should likely be expanded to Terrace","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Terrace");
group: tr("addr:street contains postfix Tce, should likely be expanded to Terrace");
}

*["addr:street"]["addr:street"=~/ Tmwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Tramway";
assertMatch: "way \"addr:street\"=Main Tmwy.";
throwWarning: tr("addr:street={0} contains prefix Tmwy., should likely be expanded to Tramway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Tramway");
group: tr("addr:street contains postfix Tmwy, should likely be expanded to Tramway");
}

*["addr:street"]["addr:street"=~/ Trk\.$/] {
assertNoMatch: "way \"addr:street\"=Main Track";
assertMatch: "way \"addr:street\"=Main Trk.";
throwWarning: tr("addr:street={0} contains prefix Trk., should likely be expanded to Track","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Track");
group: tr("addr:street contains postfix Trk, should likely be expanded to Track");
}

*["addr:street"]["addr:street"=~/ Trl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Trail";
assertMatch: "way \"addr:street\"=Main Trl.";
throwWarning: tr("addr:street={0} contains prefix Trl., should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Trail");
group: tr("addr:street contains postfix Trl, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Trs\.$/] {
assertNoMatch: "way \"addr:street\"=Main Trees";
assertMatch: "way \"addr:street\"=Main Trs.";
throwWarning: tr("addr:street={0} contains prefix Trs., should likely be expanded to Trees","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Trees");
group: tr("addr:street contains postfix Trs, should likely be expanded to Trees");
}

*["addr:street"]["addr:street"=~/ Twrs\.$/] {
assertNoMatch: "way \"addr:street\"=Main Towers";
assertMatch: "way \"addr:street\"=Main Twrs.";
throwWarning: tr("addr:street={0} contains prefix Twrs., should likely be expanded to Towers","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Towers");
group: tr("addr:street contains postfix Twrs, should likely be expanded to Towers");
}

*["addr:street"]["addr:street"=~/ Vale\.$/] {
assertNoMatch: "way \"addr:street\"=Main Vale";
assertMatch: "way \"addr:street\"=Main Vale.";
throwWarning: tr("addr:street={0} contains prefix Vale., should likely be expanded to Vale","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Vale");
group: tr("addr:street contains postfix Vale, should likely be expanded to Vale");
}

*["addr:street"]["addr:street"=~/ Vis\.$/] {
assertNoMatch: "way \"addr:street\"=Main Vista";
assertMatch: "way \"addr:street\"=Main Vis.";
throwWarning: tr("addr:street={0} contains prefix Vis., should likely be expanded to Vista","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Vista");
group: tr("addr:street contains postfix Vis, should likely be expanded to Vista");
}

*["addr:street"]["addr:street"=~/ Vlg\.$/] {
assertNoMatch: "way \"addr:street\"=Main Village";
assertMatch: "way \"addr:street\"=Main Vlg.";
throwWarning: tr("addr:street={0} contains prefix Vlg., should likely be expanded to Village","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Village");
group: tr("addr:street contains postfix Vlg, should likely be expanded to Village");
}

*["addr:street"]["addr:street"=~/ Vlls\.$/] {
assertNoMatch: "way \"addr:street\"=Main Villas";
assertMatch: "way \"addr:street\"=Main Vlls.";
throwWarning: tr("addr:street={0} contains prefix Vlls., should likely be expanded to Villas","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Villas");
group: tr("addr:street contains postfix Vlls, should likely be expanded to Villas");
}

*["addr:street"]["addr:street"=~/ Vly\.$/] {
assertNoMatch: "way \"addr:street\"=Main Valley";
assertMatch: "way \"addr:street\"=Main Vly.";
throwWarning: tr("addr:street={0} contains prefix Vly., should likely be expanded to Valley","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Valley");
group: tr("addr:street contains postfix Vly, should likely be expanded to Valley");
}

*["addr:street"]["addr:street"=~/ Vnus\.$/] {
assertNoMatch: "way \"addr:street\"=Main Venus";
assertMatch: "way \"addr:street\"=Main Vnus.";
throwWarning: tr("addr:street={0} contains prefix Vnus., should likely be expanded to Venus","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Venus");
group: tr("addr:street contains postfix Vnus, should likely be expanded to Venus");
}

*["addr:street"]["addr:street"=~/ Vue\.$/] {
assertNoMatch: "way \"addr:street\"=Main Vue";
assertMatch: "way \"addr:street\"=Main Vue.";
throwWarning: tr("addr:street={0} contains prefix Vue., should likely be expanded to Vue","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Vue");
group: tr("addr:street contains postfix Vue, should likely be expanded to Vue");
}

*["addr:street"]["addr:street"=~/ Vw\.$/] {
assertNoMatch: "way \"addr:street\"=Main View";
assertMatch: "way \"addr:street\"=Main Vw.";
throwWarning: tr("addr:street={0} contains prefix Vw., should likely be expanded to View","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "View");
group: tr("addr:street contains postfix Vw, should likely be expanded to View");
}

*["addr:street"]["addr:street"=~/ Vws\.$/] {
assertNoMatch: "way \"addr:street\"=Main Views";
assertMatch: "way \"addr:street\"=Main Vws.";
throwWarning: tr("addr:street={0} contains prefix Vws., should likely be expanded to Views","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Views");
group: tr("addr:street contains postfix Vws, should likely be expanded to Views");
}

*["addr:street"]["addr:street"=~/ Waters\.$/] {
assertNoMatch: "way \"addr:street\"=Main Waters";
assertMatch: "way \"addr:street\"=Main Waters.";
throwWarning: tr("addr:street={0} contains prefix Waters., should likely be expanded to Waters","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-7), "Waters");
group: tr("addr:street contains postfix Waters, should likely be expanded to Waters");
}

*["addr:street"]["addr:street"=~/ Way\.$/] {
assertNoMatch: "way \"addr:street\"=Main Way";
assertMatch: "way \"addr:street\"=Main Way.";
throwWarning: tr("addr:street={0} contains prefix Way., should likely be expanded to Way","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Way");
group: tr("addr:street contains postfix Way, should likely be expanded to Way");
}

*["addr:street"]["addr:street"=~/ Whrf\.$/] {
assertNoMatch: "way \"addr:street\"=Main Wharf";
assertMatch: "way \"addr:street\"=Main Whrf.";
throwWarning: tr("addr:street={0} contains prefix Whrf., should likely be expanded to Wharf","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Wharf");
group: tr("addr:street contains postfix Whrf, should likely be expanded to Wharf");
}

*["addr:street"]["addr:street"=~/ Wlk\.$/] {
assertNoMatch: "way \"addr:street\"=Main Walk";
assertMatch: "way \"addr:street\"=Main Wlk.";
throwWarning: tr("addr:street={0} contains prefix Wlk., should likely be expanded to Walk","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Walk");
group: tr("addr:street contains postfix Wlk, should likely be expanded to Walk");
}

*["addr:street"]["addr:street"=~/ Wynd\.$/] {
assertNoMatch: "way \"addr:street\"=Main Wynd";
assertMatch: "way \"addr:street\"=Main Wynd.";
throwWarning: tr("addr:street={0} contains prefix Wynd., should likely be expanded to Wynd","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Wynd");
group: tr("addr:street contains postfix Wynd, should likely be expanded to Wynd");
}

*["name"=~/ Accs\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Access";
assertMatch: "way \"name\"=Main Accs.";
throwWarning: tr("Highway name contains postfix Accs., should likely be expanded to Access");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Access");
}

*["name"=~/ Accswy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Accessway";
assertMatch: "way \"name\"=Main Accswy.";
throwWarning: tr("Highway name contains postfix Accswy., should likely be expanded to Accessway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-7), "Accessway");
}

*["name"=~/ Aly\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Alley";
assertMatch: "way \"name\"=Main Aly.";
throwWarning: tr("Highway name contains postfix Aly., should likely be expanded to Alley");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Alley");
}

*["name"=~/ Ancg\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Anchorage";
assertMatch: "way \"name\"=Main Ancg.";
throwWarning: tr("Highway name contains postfix Ancg., should likely be expanded to Anchorage");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Anchorage");
}

*["name"=~/ App\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Approach";
assertMatch: "way \"name\"=Main App.";
throwWarning: tr("Highway name contains postfix App., should likely be expanded to Approach");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Approach");
}

*["name"=~/ Arc\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Arcade";
assertMatch: "way \"name\"=Main Arc.";
throwWarning: tr("Highway name contains postfix Arc., should likely be expanded to Arcade");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Arcade");
}

*["name"=~/ Arch\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Arch";
assertMatch: "way \"name\"=Main Arch.";
throwWarning: tr("Highway name contains postfix Arch., should likely be expanded to Arch");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Arch");
}

*["name"=~/ Ave\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Avenue";
assertMatch: "way \"name\"=Main Ave.";
throwWarning: tr("Highway name contains postfix Ave., should likely be expanded to Avenue");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Avenue");
}

*["name"=~/ Bank\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Bank";
assertMatch: "way \"name\"=Main Bank.";
throwWarning: tr("Highway name contains postfix Bank., should likely be expanded to Bank");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Bank");
}

*["name"=~/ Bay\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Bay";
assertMatch: "way \"name\"=Main Bay.";
throwWarning: tr("Highway name contains postfix Bay., should likely be expanded to Bay");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Bay");
}

*["name"=~/ Bch\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Beach";
assertMatch: "way \"name\"=Main Bch.";
throwWarning: tr("Highway name contains postfix Bch., should likely be expanded to Beach");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Beach");
}

*["name"=~/ Belt\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Belt";
assertMatch: "way \"name\"=Main Belt.";
throwWarning: tr("Highway name contains postfix Belt., should likely be expanded to Belt");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Belt");
}

*["name"=~/ Blf\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Bluff";
assertMatch: "way \"name\"=Main Blf.";
throwWarning: tr("Highway name contains postfix Blf., should likely be expanded to Bluff");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Bluff");
}

*["name"=~/ Blvd\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Boulevard";
assertMatch: "way \"name\"=Main Blvd.";
throwWarning: tr("Highway name contains postfix Blvd., should likely be expanded to Boulevard");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Boulevard");
}

*["name"=~/ Bnd\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Bend";
assertMatch: "way \"name\"=Main Bnd.";
throwWarning: tr("Highway name contains postfix Bnd., should likely be expanded to Bend");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Bend");
}

*["name"=~/ Brae\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Brae";
assertMatch: "way \"name\"=Main Brae.";
throwWarning: tr("Highway name contains postfix Brae., should likely be expanded to Brae");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Brae");
}

*["name"=~/ Brg\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Bridge";
assertMatch: "way \"name\"=Main Brg.";
throwWarning: tr("Highway name contains postfix Brg., should likely be expanded to Bridge");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Bridge");
}

*["name"=~/ Briars\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Briars";
assertMatch: "way \"name\"=Main Briars.";
throwWarning: tr("Highway name contains postfix Briars., should likely be expanded to Briars");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-7), "Briars");
}

*["name"=~/ Byp\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Bypass";
assertMatch: "way \"name\"=Main Byp.";
throwWarning: tr("Highway name contains postfix Byp., should likely be expanded to Bypass");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Bypass");
}

*["name"=~/ Ch\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Chase";
assertMatch: "way \"name\"=Main Ch.";
throwWarning: tr("Highway name contains postfix Ch., should likely be expanded to Chase");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Chase");
}

*["name"=~/ Cir\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Circle";
assertMatch: "way \"name\"=Main Cir.";
throwWarning: tr("Highway name contains postfix Cir., should likely be expanded to Circle");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Circle");
}

*["name"=~/ Cl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Close";
assertMatch: "way \"name\"=Main Cl.";
throwWarning: tr("Highway name contains postfix Cl., should likely be expanded to Close");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Close");
}

*["name"=~/ Clm\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Claim";
assertMatch: "way \"name\"=Main Clm.";
throwWarning: tr("Highway name contains postfix Clm., should likely be expanded to Claim");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Claim");
}

*["name"=~/ Cmn\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Common";
assertMatch: "way \"name\"=Main Cmn.";
throwWarning: tr("Highway name contains postfix Cmn., should likely be expanded to Common");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Common");
}

*["name"=~/ Crcs\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Circus";
assertMatch: "way \"name\"=Main Crcs.";
throwWarning: tr("Highway name contains postfix Crcs., should likely be expanded to Circus");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Circus");
}

*["name"=~/ Cres\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Crescent";
assertMatch: "way \"name\"=Main Cres.";
throwWarning: tr("Highway name contains postfix Cres., should likely be expanded to Crescent");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Crescent");
}

*["name"=~/ Crk\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Creek";
assertMatch: "way \"name\"=Main Crk.";
throwWarning: tr("Highway name contains postfix Crk., should likely be expanded to Creek");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Creek");
}

*["name"=~/ Crst\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Crest";
assertMatch: "way \"name\"=Main Crst.";
throwWarning: tr("Highway name contains postfix Crst., should likely be expanded to Crest");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Crest");
}

*["name"=~/ Crt\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Court";
assertMatch: "way \"name\"=Main Crt.";
throwWarning: tr("Highway name contains postfix Crt., should likely be expanded to Court");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Court");
}

*["name"=~/ Crts\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Courts";
assertMatch: "way \"name\"=Main Crts.";
throwWarning: tr("Highway name contains postfix Crts., should likely be expanded to Courts");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Courts");
}

*["name"=~/ Ctr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Centre";
assertMatch: "way \"name\"=Main Ctr.";
throwWarning: tr("Highway name contains postfix Ctr., should likely be expanded to Centre");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Centre");
}

*["name"=~/ Cul\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Cul";
assertMatch: "way \"name\"=Main Cul.";
throwWarning: tr("Highway name contains postfix Cul., should likely be expanded to Cul");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Cul");
}

*["name"=~/ Cv\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Cove";
assertMatch: "way \"name\"=Main Cv.";
throwWarning: tr("Highway name contains postfix Cv., should likely be expanded to Cove");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Cove");
}

*["name"=~/ Del\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Dell";
assertMatch: "way \"name\"=Main Del.";
throwWarning: tr("Highway name contains postfix Del., should likely be expanded to Dell");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Dell");
}

*["name"=~/ Dle\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Dale";
assertMatch: "way \"name\"=Main Dle.";
throwWarning: tr("Highway name contains postfix Dle., should likely be expanded to Dale");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Dale");
}

*["name"=~/ Downs\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Downs";
assertMatch: "way \"name\"=Main Downs.";
throwWarning: tr("Highway name contains postfix Downs., should likely be expanded to Downs");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-6), "Downs");
}

*["name"=~/ Dr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Drive";
assertMatch: "way \"name\"=Main Dr.";
throwWarning: tr("Highway name contains postfix Dr., should likely be expanded to Drive");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Drive");
}

*["name"=~/ Dune\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Dune";
assertMatch: "way \"name\"=Main Dune.";
throwWarning: tr("Highway name contains postfix Dune., should likely be expanded to Dune");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Dune");
}

*["name"=~/ Dvn\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Deviation";
assertMatch: "way \"name\"=Main Dvn.";
throwWarning: tr("Highway name contains postfix Dvn., should likely be expanded to Deviation");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Deviation");
}

*["name"=~/ Elm\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Elm";
assertMatch: "way \"name\"=Main Elm.";
throwWarning: tr("Highway name contains postfix Elm., should likely be expanded to Elm");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Elm");
}

*["name"=~/ End\.$/].highway_name {
assertNoMatch: "way \"name\"=Main End";
assertMatch: "way \"name\"=Main End.";
throwWarning: tr("Highway name contains postfix End., should likely be expanded to End");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "End");
}

*["name"=~/ Ent\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Entrance";
assertMatch: "way \"name\"=Main Ent.";
throwWarning: tr("Highway name contains postfix Ent., should likely be expanded to Entrance");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Entrance");
}

*["name"=~/ Esp\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Esplanade";
assertMatch: "way \"name\"=Main Esp.";
throwWarning: tr("Highway name contains postfix Esp., should likely be expanded to Esplanade");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Esplanade");
}

*["name"=~/ Est\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Estate";
assertMatch: "way \"name\"=Main Est.";
throwWarning: tr("Highway name contains postfix Est., should likely be expanded to Estate");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Estate");
}

*["name"=~/ Fall\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Fall";
assertMatch: "way \"name\"=Main Fall.";
throwWarning: tr("Highway name contains postfix Fall., should likely be expanded to Fall");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Fall");
}

*["name"=~/ Fare\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Fare";
assertMatch: "way \"name\"=Main Fare.";
throwWarning: tr("Highway name contains postfix Fare., should likely be expanded to Fare");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Fare");
}

*["name"=~/ Fawy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Fairway";
assertMatch: "way \"name\"=Main Fawy.";
throwWarning: tr("Highway name contains postfix Fawy., should likely be expanded to Fairway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Fairway");
}

*["name"=~/ Fen\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Fen";
assertMatch: "way \"name\"=Main Fen.";
throwWarning: tr("Highway name contains postfix Fen., should likely be expanded to Fen");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Fen");
}

*["name"=~/ Fern\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Fern";
assertMatch: "way \"name\"=Main Fern.";
throwWarning: tr("Highway name contains postfix Fern., should likely be expanded to Fern");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Fern");
}

*["name"=~/ Flt\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Flat";
assertMatch: "way \"name\"=Main Flt.";
throwWarning: tr("Highway name contains postfix Flt., should likely be expanded to Flat");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Flat");
}

*["name"=~/ Flts\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Flats";
assertMatch: "way \"name\"=Main Flts.";
throwWarning: tr("Highway name contains postfix Flts., should likely be expanded to Flats");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Flats");
}

*["name"=~/ Frms\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Farms";
assertMatch: "way \"name\"=Main Frms.";
throwWarning: tr("Highway name contains postfix Frms., should likely be expanded to Farms");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Farms");
}

*["name"=~/ Gdn\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Garden";
assertMatch: "way \"name\"=Main Gdn.";
throwWarning: tr("Highway name contains postfix Gdn., should likely be expanded to Garden");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Garden");
}

*["name"=~/ Gdns\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Gardens";
assertMatch: "way \"name\"=Main Gdns.";
throwWarning: tr("Highway name contains postfix Gdns., should likely be expanded to Gardens");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Gardens");
}

*["name"=~/ Gld\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Glade";
assertMatch: "way \"name\"=Main Gld.";
throwWarning: tr("Highway name contains postfix Gld., should likely be expanded to Glade");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Glade");
}

*["name"=~/ Gln\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Glen";
assertMatch: "way \"name\"=Main Gln.";
throwWarning: tr("Highway name contains postfix Gln., should likely be expanded to Glen");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Glen");
}

*["name"=~/ Gly\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Gully";
assertMatch: "way \"name\"=Main Gly.";
throwWarning: tr("Highway name contains postfix Gly., should likely be expanded to Gully");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Gully");
}

*["name"=~/ Grg\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Grange";
assertMatch: "way \"name\"=Main Grg.";
throwWarning: tr("Highway name contains postfix Grg., should likely be expanded to Grange");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Grange");
}

*["name"=~/ Grn\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Green";
assertMatch: "way \"name\"=Main Grn.";
throwWarning: tr("Highway name contains postfix Grn., should likely be expanded to Green");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Green");
}

*["name"=~/ Grv\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Grove";
assertMatch: "way \"name\"=Main Grv.";
throwWarning: tr("Highway name contains postfix Grv., should likely be expanded to Grove");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Grove");
}

*["name"=~/ Gte\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Gate";
assertMatch: "way \"name\"=Main Gte.";
throwWarning: tr("Highway name contains postfix Gte., should likely be expanded to Gate");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Gate");
}

*["name"=~/ Head\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Head";
assertMatch: "way \"name\"=Main Head.";
throwWarning: tr("Highway name contains postfix Head., should likely be expanded to Head");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Head");
}

*["name"=~/ Hl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Hill";
assertMatch: "way \"name\"=Main Hl.";
throwWarning: tr("Highway name contains postfix Hl., should likely be expanded to Hill");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Hill");
}

*["name"=~/ Hts\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Heights";
assertMatch: "way \"name\"=Main Hts.";
throwWarning: tr("Highway name contains postfix Hts., should likely be expanded to Heights");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Heights");
}

*["name"=~/ Hvn\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Haven";
assertMatch: "way \"name\"=Main Hvn.";
throwWarning: tr("Highway name contains postfix Hvn., should likely be expanded to Haven");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Haven");
}

*["name"=~/ Hwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Highway";
assertMatch: "way \"name\"=Main Hwy.";
throwWarning: tr("Highway name contains postfix Hwy., should likely be expanded to Highway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Highway");
}

*["name"=~/ Is\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Island";
assertMatch: "way \"name\"=Main Is.";
throwWarning: tr("Highway name contains postfix Is., should likely be expanded to Island");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Island");
}

*["name"=~/ Jct\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Junction";
assertMatch: "way \"name\"=Main Jct.";
throwWarning: tr("Highway name contains postfix Jct., should likely be expanded to Junction");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Junction");
}

*["name"=~/ Key\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Key";
assertMatch: "way \"name\"=Main Key.";
throwWarning: tr("Highway name contains postfix Key., should likely be expanded to Key");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Key");
}

*["name"=~/ Knob\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Knob";
assertMatch: "way \"name\"=Main Knob.";
throwWarning: tr("Highway name contains postfix Knob., should likely be expanded to Knob");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Knob");
}

*["name"=~/ Ladr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Ladder";
assertMatch: "way \"name\"=Main Ladr.";
throwWarning: tr("Highway name contains postfix Ladr., should likely be expanded to Ladder");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Ladder");
}

*["name"=~/ Lane\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Lane";
assertMatch: "way \"name\"=Main Lane.";
throwWarning: tr("Highway name contains postfix Lane., should likely be expanded to Lane");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Lane");
}

*["name"=~/ Lea\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Lea";
assertMatch: "way \"name\"=Main Lea.";
throwWarning: tr("Highway name contains postfix Lea., should likely be expanded to Lea");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Lea");
}

*["name"=~/ Ledr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Leader";
assertMatch: "way \"name\"=Main Ledr.";
throwWarning: tr("Highway name contains postfix Ledr., should likely be expanded to Leader");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Leader");
}

*["name"=~/ Lgh\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Leigh";
assertMatch: "way \"name\"=Main Lgh.";
throwWarning: tr("Highway name contains postfix Lgh., should likely be expanded to Leigh");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Leigh");
}

*["name"=~/ Line\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Line";
assertMatch: "way \"name\"=Main Line.";
throwWarning: tr("Highway name contains postfix Line., should likely be expanded to Line");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Line");
}

*["name"=~/ Link\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Link";
assertMatch: "way \"name\"=Main Link.";
throwWarning: tr("Highway name contains postfix Link., should likely be expanded to Link");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Link");
}

*["name"=~/ Lkt\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Lookout";
assertMatch: "way \"name\"=Main Lkt.";
throwWarning: tr("Highway name contains postfix Lkt., should likely be expanded to Lookout");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Lookout");
}

*["name"=~/ Lndg\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Landing";
assertMatch: "way \"name\"=Main Lndg.";
throwWarning: tr("Highway name contains postfix Lndg., should likely be expanded to Landing");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Landing");
}

*["name"=~/ Loop\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Loop";
assertMatch: "way \"name\"=Main Loop.";
throwWarning: tr("Highway name contains postfix Loop., should likely be expanded to Loop");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Loop");
}

*["name"=~/ Mall\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Mall";
assertMatch: "way \"name\"=Main Mall.";
throwWarning: tr("Highway name contains postfix Mall., should likely be expanded to Mall");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Mall");
}

*["name"=~/ Mdws\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Meadows";
assertMatch: "way \"name\"=Main Mdws.";
throwWarning: tr("Highway name contains postfix Mdws., should likely be expanded to Meadows");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Meadows");
}

*["name"=~/ Mead\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Mead";
assertMatch: "way \"name\"=Main Mead.";
throwWarning: tr("Highway name contains postfix Mead., should likely be expanded to Mead");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Mead");
}

*["name"=~/ Mews\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Mews";
assertMatch: "way \"name\"=Main Mews.";
throwWarning: tr("Highway name contains postfix Mews., should likely be expanded to Mews");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Mews");
}

*["name"=~/ Mile\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Mile";
assertMatch: "way \"name\"=Main Mile.";
throwWarning: tr("Highway name contains postfix Mile., should likely be expanded to Mile");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Mile");
}

*["name"=~/ Motu\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Motu";
assertMatch: "way \"name\"=Main Motu.";
throwWarning: tr("Highway name contains postfix Motu., should likely be expanded to Motu");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Motu");
}

*["name"=~/ Mt\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Mount";
assertMatch: "way \"name\"=Main Mt.";
throwWarning: tr("Highway name contains postfix Mt., should likely be expanded to Mount");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Mount");
}

*["name"=~/ Mwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Motorway";
assertMatch: "way \"name\"=Main Mwy.";
throwWarning: tr("Highway name contains postfix Mwy., should likely be expanded to Motorway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Motorway");
}

*["name"=~/ Nvs\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Neaves";
assertMatch: "way \"name\"=Main Nvs.";
throwWarning: tr("Highway name contains postfix Nvs., should likely be expanded to Neaves");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Neaves");
}

*["name"=~/ Oaks\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Oaks";
assertMatch: "way \"name\"=Main Oaks.";
throwWarning: tr("Highway name contains postfix Oaks., should likely be expanded to Oaks");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Oaks");
}

*["name"=~/ Padk\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Paddock";
assertMatch: "way \"name\"=Main Padk.";
throwWarning: tr("Highway name contains postfix Padk., should likely be expanded to Paddock");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Paddock");
}

*["name"=~/ Paku\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Paku";
assertMatch: "way \"name\"=Main Paku.";
throwWarning: tr("Highway name contains postfix Paku., should likely be expanded to Paku");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Paku");
}

*["name"=~/ Pass\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Pass";
assertMatch: "way \"name\"=Main Pass.";
throwWarning: tr("Highway name contains postfix Pass., should likely be expanded to Pass");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Pass");
}

*["name"=~/ Pde\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Parade";
assertMatch: "way \"name\"=Main Pde.";
throwWarning: tr("Highway name contains postfix Pde., should likely be expanded to Parade");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Parade");
}

*["name"=~/ Pk\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Park";
assertMatch: "way \"name\"=Main Pk.";
throwWarning: tr("Highway name contains postfix Pk., should likely be expanded to Park");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Park");
}

*["name"=~/ Pkwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Parkway";
assertMatch: "way \"name\"=Main Pkwy.";
throwWarning: tr("Highway name contains postfix Pkwy., should likely be expanded to Parkway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Parkway");
}

*["name"=~/ Pl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Place";
assertMatch: "way \"name\"=Main Pl.";
throwWarning: tr("Highway name contains postfix Pl., should likely be expanded to Place");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Place");
}

*["name"=~/ Priors\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Priors";
assertMatch: "way \"name\"=Main Priors.";
throwWarning: tr("Highway name contains postfix Priors., should likely be expanded to Priors");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-7), "Priors");
}

*["name"=~/ Prom\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Promenade";
assertMatch: "way \"name\"=Main Prom.";
throwWarning: tr("Highway name contains postfix Prom., should likely be expanded to Promenade");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Promenade");
}

*["name"=~/ Psge\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Passage";
assertMatch: "way \"name\"=Main Psge.";
throwWarning: tr("Highway name contains postfix Psge., should likely be expanded to Passage");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Passage");
}

*["name"=~/ Pt\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Point";
assertMatch: "way \"name\"=Main Pt.";
throwWarning: tr("Highway name contains postfix Pt., should likely be expanded to Point");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Point");
}

*["name"=~/ Pth\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Path";
assertMatch: "way \"name\"=Main Pth.";
throwWarning: tr("Highway name contains postfix Pth., should likely be expanded to Path");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Path");
}

*["name"=~/ Qdrt\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Quadrant";
assertMatch: "way \"name\"=Main Qdrt.";
throwWarning: tr("Highway name contains postfix Qdrt., should likely be expanded to Quadrant");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Quadrant");
}

*["name"=~/ Qy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Quay";
assertMatch: "way \"name\"=Main Qy.";
throwWarning: tr("Highway name contains postfix Qy., should likely be expanded to Quay");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Quay");
}

*["name"=~/ Rd\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Road";
assertMatch: "way \"name\"=Main Rd.";
throwWarning: tr("Highway name contains postfix Rd., should likely be expanded to Road");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Road");
}

*["name"=~/ Rdge\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Ridge";
assertMatch: "way \"name\"=Main Rdge.";
throwWarning: tr("Highway name contains postfix Rdge., should likely be expanded to Ridge");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Ridge");
}

*["name"=~/ Rds\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Roads";
assertMatch: "way \"name\"=Main Rds.";
throwWarning: tr("Highway name contains postfix Rds., should likely be expanded to Roads");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Roads");
}

*["name"=~/ Rdwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Roadway";
assertMatch: "way \"name\"=Main Rdwy.";
throwWarning: tr("Highway name contains postfix Rdwy., should likely be expanded to Roadway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Roadway");
}

*["name"=~/ Reef\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Reef";
assertMatch: "way \"name\"=Main Reef.";
throwWarning: tr("Highway name contains postfix Reef., should likely be expanded to Reef");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Reef");
}

*["name"=~/ Res\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Reserve";
assertMatch: "way \"name\"=Main Res.";
throwWarning: tr("Highway name contains postfix Res., should likely be expanded to Reserve");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Reserve");
}

*["name"=~/ Rest\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Rest";
assertMatch: "way \"name\"=Main Rest.";
throwWarning: tr("Highway name contains postfix Rest., should likely be expanded to Rest");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Rest");
}

*["name"=~/ Rise\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Rise";
assertMatch: "way \"name\"=Main Rise.";
throwWarning: tr("Highway name contains postfix Rise., should likely be expanded to Rise");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Rise");
}

*["name"=~/ Row\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Row";
assertMatch: "way \"name\"=Main Row.";
throwWarning: tr("Highway name contains postfix Row., should likely be expanded to Row");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Row");
}

*["name"=~/ Rte\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Route";
assertMatch: "way \"name\"=Main Rte.";
throwWarning: tr("Highway name contains postfix Rte., should likely be expanded to Route");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Route");
}

*["name"=~/ Rtr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Retreat";
assertMatch: "way \"name\"=Main Rtr.";
throwWarning: tr("Highway name contains postfix Rtr., should likely be expanded to Retreat");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Retreat");
}

*["name"=~/ SH\.$/].highway_name {
assertNoMatch: "way \"name\"=Main State Highway";
assertMatch: "way \"name\"=Main SH.";
throwWarning: tr("Highway name contains postfix SH., should likely be expanded to State Highway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "State Highway");
}

*["name"=~/ Slp\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Slope";
assertMatch: "way \"name\"=Main Slp.";
throwWarning: tr("Highway name contains postfix Slp., should likely be expanded to Slope");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Slope");
}

*["name"=~/ Spa\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Spa";
assertMatch: "way \"name\"=Main Spa.";
throwWarning: tr("Highway name contains postfix Spa., should likely be expanded to Spa");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Spa");
}

*["name"=~/ Spur\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Spur";
assertMatch: "way \"name\"=Main Spur.";
throwWarning: tr("Highway name contains postfix Spur., should likely be expanded to Spur");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Spur");
}

*["name"=~/ Sq\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Square";
assertMatch: "way \"name\"=Main Sq.";
throwWarning: tr("Highway name contains postfix Sq., should likely be expanded to Square");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Square");
}

*["name"=~/ St\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Street";
assertMatch: "way \"name\"=Main St.";
throwWarning: tr("Highway name contains postfix St., should likely be expanded to Street");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Street");
}

*["name"=~/ Steep\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Steep";
assertMatch: "way \"name\"=Main Steep.";
throwWarning: tr("Highway name contains postfix Steep., should likely be expanded to Steep");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-6), "Steep");
}

*["name"=~/ Stgt\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Straight";
assertMatch: "way \"name\"=Main Stgt.";
throwWarning: tr("Highway name contains postfix Stgt., should likely be expanded to Straight");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Straight");
}

*["name"=~/ Stps\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Steps";
assertMatch: "way \"name\"=Main Stps.";
throwWarning: tr("Highway name contains postfix Stps., should likely be expanded to Steps");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Steps");
}

*["name"=~/ Strd\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Strand";
assertMatch: "way \"name\"=Main Strd.";
throwWarning: tr("Highway name contains postfix Strd., should likely be expanded to Strand");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Strand");
}

*["name"=~/ Svln\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Service Lane";
assertMatch: "way \"name\"=Main Svln.";
throwWarning: tr("Highway name contains postfix Svln., should likely be expanded to Service Lane");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Service Lane");
}

*["name"=~/ Tce\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Terrace";
assertMatch: "way \"name\"=Main Tce.";
throwWarning: tr("Highway name contains postfix Tce., should likely be expanded to Terrace");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Terrace");
}

*["name"=~/ Tmwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Tramway";
assertMatch: "way \"name\"=Main Tmwy.";
throwWarning: tr("Highway name contains postfix Tmwy., should likely be expanded to Tramway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Tramway");
}

*["name"=~/ Trk\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Track";
assertMatch: "way \"name\"=Main Trk.";
throwWarning: tr("Highway name contains postfix Trk., should likely be expanded to Track");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Track");
}

*["name"=~/ Trl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Trail";
assertMatch: "way \"name\"=Main Trl.";
throwWarning: tr("Highway name contains postfix Trl., should likely be expanded to Trail");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Trail");
}

*["name"=~/ Trs\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Trees";
assertMatch: "way \"name\"=Main Trs.";
throwWarning: tr("Highway name contains postfix Trs., should likely be expanded to Trees");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Trees");
}

*["name"=~/ Twrs\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Towers";
assertMatch: "way \"name\"=Main Twrs.";
throwWarning: tr("Highway name contains postfix Twrs., should likely be expanded to Towers");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Towers");
}

*["name"=~/ Vale\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Vale";
assertMatch: "way \"name\"=Main Vale.";
throwWarning: tr("Highway name contains postfix Vale., should likely be expanded to Vale");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Vale");
}

*["name"=~/ Vis\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Vista";
assertMatch: "way \"name\"=Main Vis.";
throwWarning: tr("Highway name contains postfix Vis., should likely be expanded to Vista");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Vista");
}

*["name"=~/ Vlg\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Village";
assertMatch: "way \"name\"=Main Vlg.";
throwWarning: tr("Highway name contains postfix Vlg., should likely be expanded to Village");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Village");
}

*["name"=~/ Vlls\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Villas";
assertMatch: "way \"name\"=Main Vlls.";
throwWarning: tr("Highway name contains postfix Vlls., should likely be expanded to Villas");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Villas");
}

*["name"=~/ Vly\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Valley";
assertMatch: "way \"name\"=Main Vly.";
throwWarning: tr("Highway name contains postfix Vly., should likely be expanded to Valley");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Valley");
}

*["name"=~/ Vnus\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Venus";
assertMatch: "way \"name\"=Main Vnus.";
throwWarning: tr("Highway name contains postfix Vnus., should likely be expanded to Venus");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Venus");
}

*["name"=~/ Vue\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Vue";
assertMatch: "way \"name\"=Main Vue.";
throwWarning: tr("Highway name contains postfix Vue., should likely be expanded to Vue");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Vue");
}

*["name"=~/ Vw\.$/].highway_name {
assertNoMatch: "way \"name\"=Main View";
assertMatch: "way \"name\"=Main Vw.";
throwWarning: tr("Highway name contains postfix Vw., should likely be expanded to View");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "View");
}

*["name"=~/ Vws\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Views";
assertMatch: "way \"name\"=Main Vws.";
throwWarning: tr("Highway name contains postfix Vws., should likely be expanded to Views");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Views");
}

*["name"=~/ Waters\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Waters";
assertMatch: "way \"name\"=Main Waters.";
throwWarning: tr("Highway name contains postfix Waters., should likely be expanded to Waters");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-7), "Waters");
}

*["name"=~/ Way\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Way";
assertMatch: "way \"name\"=Main Way.";
throwWarning: tr("Highway name contains postfix Way., should likely be expanded to Way");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Way");
}

*["name"=~/ Whrf\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Wharf";
assertMatch: "way \"name\"=Main Whrf.";
throwWarning: tr("Highway name contains postfix Whrf., should likely be expanded to Wharf");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Wharf");
}

*["name"=~/ Wlk\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Walk";
assertMatch: "way \"name\"=Main Wlk.";
throwWarning: tr("Highway name contains postfix Wlk., should likely be expanded to Walk");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Walk");
}

*["name"=~/ Wynd\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Wynd";
assertMatch: "way \"name\"=Main Wynd.";
throwWarning: tr("Highway name contains postfix Wynd., should likely be expanded to Wynd");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Wynd");
}

*["addr:street"]["addr:street"=~/ Accs /] {
assertNoMatch: "way \"addr:street\"=Main Access East";
assertMatch: "way \"addr:street\"=Main Accs East";
throwWarning: tr("addr:street={0} contains ' Accs ', should likely be expanded to Access","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Accs ", " Access "));
group: tr("addr:street contains Accs, should likely be expanded to Access");
}

*["addr:street"]["addr:street"=~/ Accswy /] {
assertNoMatch: "way \"addr:street\"=Main Accessway East";
assertMatch: "way \"addr:street\"=Main Accswy East";
throwWarning: tr("addr:street={0} contains ' Accswy ', should likely be expanded to Accessway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Accswy ", " Accessway "));
group: tr("addr:street contains Accswy, should likely be expanded to Accessway");
}

*["addr:street"]["addr:street"=~/ Aly /] {
assertNoMatch: "way \"addr:street\"=Main Alley East";
assertMatch: "way \"addr:street\"=Main Aly East";
throwWarning: tr("addr:street={0} contains ' Aly ', should likely be expanded to Alley","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Aly ", " Alley "));
group: tr("addr:street contains Aly, should likely be expanded to Alley");
}

*["addr:street"]["addr:street"=~/ Ancg /] {
assertNoMatch: "way \"addr:street\"=Main Anchorage East";
assertMatch: "way \"addr:street\"=Main Ancg East";
throwWarning: tr("addr:street={0} contains ' Ancg ', should likely be expanded to Anchorage","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ancg ", " Anchorage "));
group: tr("addr:street contains Ancg, should likely be expanded to Anchorage");
}

*["addr:street"]["addr:street"=~/ App /] {
assertNoMatch: "way \"addr:street\"=Main Approach East";
assertMatch: "way \"addr:street\"=Main App East";
throwWarning: tr("addr:street={0} contains ' App ', should likely be expanded to Approach","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," App ", " Approach "));
group: tr("addr:street contains App, should likely be expanded to Approach");
}

*["addr:street"]["addr:street"=~/ Arc /] {
assertNoMatch: "way \"addr:street\"=Main Arcade East";
assertMatch: "way \"addr:street\"=Main Arc East";
throwWarning: tr("addr:street={0} contains ' Arc ', should likely be expanded to Arcade","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Arc ", " Arcade "));
group: tr("addr:street contains Arc, should likely be expanded to Arcade");
}

*["addr:street"]["addr:street"=~/ Arch /] {
assertNoMatch: "way \"addr:street\"=Main Arch East";
assertMatch: "way \"addr:street\"=Main Arch East";
throwWarning: tr("addr:street={0} contains ' Arch ', should likely be expanded to Arch","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Arch ", " Arch "));
group: tr("addr:street contains Arch, should likely be expanded to Arch");
}

*["addr:street"]["addr:street"=~/ Ave /] {
assertNoMatch: "way \"addr:street\"=Main Avenue East";
assertMatch: "way \"addr:street\"=Main Ave East";
throwWarning: tr("addr:street={0} contains ' Ave ', should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ave ", " Avenue "));
group: tr("addr:street contains Ave, should likely be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/ Bank /] {
assertNoMatch: "way \"addr:street\"=Main Bank East";
assertMatch: "way \"addr:street\"=Main Bank East";
throwWarning: tr("addr:street={0} contains ' Bank ', should likely be expanded to Bank","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bank ", " Bank "));
group: tr("addr:street contains Bank, should likely be expanded to Bank");
}

*["addr:street"]["addr:street"=~/ Bay /] {
assertNoMatch: "way \"addr:street\"=Main Bay East";
assertMatch: "way \"addr:street\"=Main Bay East";
throwWarning: tr("addr:street={0} contains ' Bay ', should likely be expanded to Bay","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bay ", " Bay "));
group: tr("addr:street contains Bay, should likely be expanded to Bay");
}

*["addr:street"]["addr:street"=~/ Bch /] {
assertNoMatch: "way \"addr:street\"=Main Beach East";
assertMatch: "way \"addr:street\"=Main Bch East";
throwWarning: tr("addr:street={0} contains ' Bch ', should likely be expanded to Beach","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bch ", " Beach "));
group: tr("addr:street contains Bch, should likely be expanded to Beach");
}

*["addr:street"]["addr:street"=~/ Belt /] {
assertNoMatch: "way \"addr:street\"=Main Belt East";
assertMatch: "way \"addr:street\"=Main Belt East";
throwWarning: tr("addr:street={0} contains ' Belt ', should likely be expanded to Belt","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Belt ", " Belt "));
group: tr("addr:street contains Belt, should likely be expanded to Belt");
}

*["addr:street"]["addr:street"=~/ Blf /] {
assertNoMatch: "way \"addr:street\"=Main Bluff East";
assertMatch: "way \"addr:street\"=Main Blf East";
throwWarning: tr("addr:street={0} contains ' Blf ', should likely be expanded to Bluff","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Blf ", " Bluff "));
group: tr("addr:street contains Blf, should likely be expanded to Bluff");
}

*["addr:street"]["addr:street"=~/ Blvd /] {
assertNoMatch: "way \"addr:street\"=Main Boulevard East";
assertMatch: "way \"addr:street\"=Main Blvd East";
throwWarning: tr("addr:street={0} contains ' Blvd ', should likely be expanded to Boulevard","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Blvd ", " Boulevard "));
group: tr("addr:street contains Blvd, should likely be expanded to Boulevard");
}

*["addr:street"]["addr:street"=~/ Bnd /] {
assertNoMatch: "way \"addr:street\"=Main Bend East";
assertMatch: "way \"addr:street\"=Main Bnd East";
throwWarning: tr("addr:street={0} contains ' Bnd ', should likely be expanded to Bend","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bnd ", " Bend "));
group: tr("addr:street contains Bnd, should likely be expanded to Bend");
}

*["addr:street"]["addr:street"=~/ Brae /] {
assertNoMatch: "way \"addr:street\"=Main Brae East";
assertMatch: "way \"addr:street\"=Main Brae East";
throwWarning: tr("addr:street={0} contains ' Brae ', should likely be expanded to Brae","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Brae ", " Brae "));
group: tr("addr:street contains Brae, should likely be expanded to Brae");
}

*["addr:street"]["addr:street"=~/ Brg /] {
assertNoMatch: "way \"addr:street\"=Main Bridge East";
assertMatch: "way \"addr:street\"=Main Brg East";
throwWarning: tr("addr:street={0} contains ' Brg ', should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Brg ", " Bridge "));
group: tr("addr:street contains Brg, should likely be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/ Briars /] {
assertNoMatch: "way \"addr:street\"=Main Briars East";
assertMatch: "way \"addr:street\"=Main Briars East";
throwWarning: tr("addr:street={0} contains ' Briars ', should likely be expanded to Briars","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Briars ", " Briars "));
group: tr("addr:street contains Briars, should likely be expanded to Briars");
}

*["addr:street"]["addr:street"=~/ Byp /] {
assertNoMatch: "way \"addr:street\"=Main Bypass East";
assertMatch: "way \"addr:street\"=Main Byp East";
throwWarning: tr("addr:street={0} contains ' Byp ', should likely be expanded to Bypass","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Byp ", " Bypass "));
group: tr("addr:street contains Byp, should likely be expanded to Bypass");
}

*["addr:street"]["addr:street"=~/ Ch /] {
assertNoMatch: "way \"addr:street\"=Main Chase East";
assertMatch: "way \"addr:street\"=Main Ch East";
throwWarning: tr("addr:street={0} contains ' Ch ', should likely be expanded to Chase","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ch ", " Chase "));
group: tr("addr:street contains Ch, should likely be expanded to Chase");
}

*["addr:street"]["addr:street"=~/ Cir /] {
assertNoMatch: "way \"addr:street\"=Main Circle East";
assertMatch: "way \"addr:street\"=Main Cir East";
throwWarning: tr("addr:street={0} contains ' Cir ', should likely be expanded to Circle","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cir ", " Circle "));
group: tr("addr:street contains Cir, should likely be expanded to Circle");
}

*["addr:street"]["addr:street"=~/ Cl /] {
assertNoMatch: "way \"addr:street\"=Main Close East";
assertMatch: "way \"addr:street\"=Main Cl East";
throwWarning: tr("addr:street={0} contains ' Cl ', should likely be expanded to Close","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cl ", " Close "));
group: tr("addr:street contains Cl, should likely be expanded to Close");
}

*["addr:street"]["addr:street"=~/ Clm /] {
assertNoMatch: "way \"addr:street\"=Main Claim East";
assertMatch: "way \"addr:street\"=Main Clm East";
throwWarning: tr("addr:street={0} contains ' Clm ', should likely be expanded to Claim","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Clm ", " Claim "));
group: tr("addr:street contains Clm, should likely be expanded to Claim");
}

*["addr:street"]["addr:street"=~/ Cmn /] {
assertNoMatch: "way \"addr:street\"=Main Common East";
assertMatch: "way \"addr:street\"=Main Cmn East";
throwWarning: tr("addr:street={0} contains ' Cmn ', should likely be expanded to Common","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cmn ", " Common "));
group: tr("addr:street contains Cmn, should likely be expanded to Common");
}

*["addr:street"]["addr:street"=~/ Crcs /] {
assertNoMatch: "way \"addr:street\"=Main Circus East";
assertMatch: "way \"addr:street\"=Main Crcs East";
throwWarning: tr("addr:street={0} contains ' Crcs ', should likely be expanded to Circus","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Crcs ", " Circus "));
group: tr("addr:street contains Crcs, should likely be expanded to Circus");
}

*["addr:street"]["addr:street"=~/ Cres /] {
assertNoMatch: "way \"addr:street\"=Main Crescent East";
assertMatch: "way \"addr:street\"=Main Cres East";
throwWarning: tr("addr:street={0} contains ' Cres ', should likely be expanded to Crescent","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cres ", " Crescent "));
group: tr("addr:street contains Cres, should likely be expanded to Crescent");
}

*["addr:street"]["addr:street"=~/ Crk /] {
assertNoMatch: "way \"addr:street\"=Main Creek East";
assertMatch: "way \"addr:street\"=Main Crk East";
throwWarning: tr("addr:street={0} contains ' Crk ', should likely be expanded to Creek","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Crk ", " Creek "));
group: tr("addr:street contains Crk, should likely be expanded to Creek");
}

*["addr:street"]["addr:street"=~/ Crst /] {
assertNoMatch: "way \"addr:street\"=Main Crest East";
assertMatch: "way \"addr:street\"=Main Crst East";
throwWarning: tr("addr:street={0} contains ' Crst ', should likely be expanded to Crest","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Crst ", " Crest "));
group: tr("addr:street contains Crst, should likely be expanded to Crest");
}

*["addr:street"]["addr:street"=~/ Crt /] {
assertNoMatch: "way \"addr:street\"=Main Court East";
assertMatch: "way \"addr:street\"=Main Crt East";
throwWarning: tr("addr:street={0} contains ' Crt ', should likely be expanded to Court","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Crt ", " Court "));
group: tr("addr:street contains Crt, should likely be expanded to Court");
}

*["addr:street"]["addr:street"=~/ Crts /] {
assertNoMatch: "way \"addr:street\"=Main Courts East";
assertMatch: "way \"addr:street\"=Main Crts East";
throwWarning: tr("addr:street={0} contains ' Crts ', should likely be expanded to Courts","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Crts ", " Courts "));
group: tr("addr:street contains Crts, should likely be expanded to Courts");
}

*["addr:street"]["addr:street"=~/ Ctr /] {
assertNoMatch: "way \"addr:street\"=Main Centre East";
assertMatch: "way \"addr:street\"=Main Ctr East";
throwWarning: tr("addr:street={0} contains ' Ctr ', should likely be expanded to Centre","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ctr ", " Centre "));
group: tr("addr:street contains Ctr, should likely be expanded to Centre");
}

*["addr:street"]["addr:street"=~/ Cul /] {
assertNoMatch: "way \"addr:street\"=Main Cul East";
assertMatch: "way \"addr:street\"=Main Cul East";
throwWarning: tr("addr:street={0} contains ' Cul ', should likely be expanded to Cul","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cul ", " Cul "));
group: tr("addr:street contains Cul, should likely be expanded to Cul");
}

*["addr:street"]["addr:street"=~/ Cv /] {
assertNoMatch: "way \"addr:street\"=Main Cove East";
assertMatch: "way \"addr:street\"=Main Cv East";
throwWarning: tr("addr:street={0} contains ' Cv ', should likely be expanded to Cove","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cv ", " Cove "));
group: tr("addr:street contains Cv, should likely be expanded to Cove");
}

*["addr:street"]["addr:street"=~/ Del /] {
assertNoMatch: "way \"addr:street\"=Main Dell East";
assertMatch: "way \"addr:street\"=Main Del East";
throwWarning: tr("addr:street={0} contains ' Del ', should likely be expanded to Dell","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Del ", " Dell "));
group: tr("addr:street contains Del, should likely be expanded to Dell");
}

*["addr:street"]["addr:street"=~/ Dle /] {
assertNoMatch: "way \"addr:street\"=Main Dale East";
assertMatch: "way \"addr:street\"=Main Dle East";
throwWarning: tr("addr:street={0} contains ' Dle ', should likely be expanded to Dale","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Dle ", " Dale "));
group: tr("addr:street contains Dle, should likely be expanded to Dale");
}

*["addr:street"]["addr:street"=~/ Downs /] {
assertNoMatch: "way \"addr:street\"=Main Downs East";
assertMatch: "way \"addr:street\"=Main Downs East";
throwWarning: tr("addr:street={0} contains ' Downs ', should likely be expanded to Downs","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Downs ", " Downs "));
group: tr("addr:street contains Downs, should likely be expanded to Downs");
}

*["addr:street"]["addr:street"=~/ Dr /] {
assertNoMatch: "way \"addr:street\"=Main Drive East";
assertMatch: "way \"addr:street\"=Main Dr East";
throwWarning: tr("addr:street={0} contains ' Dr ', should likely be expanded to Drive","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Dr ", " Drive "));
group: tr("addr:street contains Dr, should likely be expanded to Drive");
}

*["addr:street"]["addr:street"=~/ Dune /] {
assertNoMatch: "way \"addr:street\"=Main Dune East";
assertMatch: "way \"addr:street\"=Main Dune East";
throwWarning: tr("addr:street={0} contains ' Dune ', should likely be expanded to Dune","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Dune ", " Dune "));
group: tr("addr:street contains Dune, should likely be expanded to Dune");
}

*["addr:street"]["addr:street"=~/ Dvn /] {
assertNoMatch: "way \"addr:street\"=Main Deviation East";
assertMatch: "way \"addr:street\"=Main Dvn East";
throwWarning: tr("addr:street={0} contains ' Dvn ', should likely be expanded to Deviation","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Dvn ", " Deviation "));
group: tr("addr:street contains Dvn, should likely be expanded to Deviation");
}

*["addr:street"]["addr:street"=~/ Elm /] {
assertNoMatch: "way \"addr:street\"=Main Elm East";
assertMatch: "way \"addr:street\"=Main Elm East";
throwWarning: tr("addr:street={0} contains ' Elm ', should likely be expanded to Elm","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Elm ", " Elm "));
group: tr("addr:street contains Elm, should likely be expanded to Elm");
}

*["addr:street"]["addr:street"=~/ End /] {
assertNoMatch: "way \"addr:street\"=Main End East";
assertMatch: "way \"addr:street\"=Main End East";
throwWarning: tr("addr:street={0} contains ' End ', should likely be expanded to End","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," End ", " End "));
group: tr("addr:street contains End, should likely be expanded to End");
}

*["addr:street"]["addr:street"=~/ Ent /] {
assertNoMatch: "way \"addr:street\"=Main Entrance East";
assertMatch: "way \"addr:street\"=Main Ent East";
throwWarning: tr("addr:street={0} contains ' Ent ', should likely be expanded to Entrance","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ent ", " Entrance "));
group: tr("addr:street contains Ent, should likely be expanded to Entrance");
}

*["addr:street"]["addr:street"=~/ Esp /] {
assertNoMatch: "way \"addr:street\"=Main Esplanade East";
assertMatch: "way \"addr:street\"=Main Esp East";
throwWarning: tr("addr:street={0} contains ' Esp ', should likely be expanded to Esplanade","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Esp ", " Esplanade "));
group: tr("addr:street contains Esp, should likely be expanded to Esplanade");
}

*["addr:street"]["addr:street"=~/ Est /] {
assertNoMatch: "way \"addr:street\"=Main Estate East";
assertMatch: "way \"addr:street\"=Main Est East";
throwWarning: tr("addr:street={0} contains ' Est ', should likely be expanded to Estate","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Est ", " Estate "));
group: tr("addr:street contains Est, should likely be expanded to Estate");
}

*["addr:street"]["addr:street"=~/ Fall /] {
assertNoMatch: "way \"addr:street\"=Main Fall East";
assertMatch: "way \"addr:street\"=Main Fall East";
throwWarning: tr("addr:street={0} contains ' Fall ', should likely be expanded to Fall","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fall ", " Fall "));
group: tr("addr:street contains Fall, should likely be expanded to Fall");
}

*["addr:street"]["addr:street"=~/ Fare /] {
assertNoMatch: "way \"addr:street\"=Main Fare East";
assertMatch: "way \"addr:street\"=Main Fare East";
throwWarning: tr("addr:street={0} contains ' Fare ', should likely be expanded to Fare","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fare ", " Fare "));
group: tr("addr:street contains Fare, should likely be expanded to Fare");
}

*["addr:street"]["addr:street"=~/ Fawy /] {
assertNoMatch: "way \"addr:street\"=Main Fairway East";
assertMatch: "way \"addr:street\"=Main Fawy East";
throwWarning: tr("addr:street={0} contains ' Fawy ', should likely be expanded to Fairway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fawy ", " Fairway "));
group: tr("addr:street contains Fawy, should likely be expanded to Fairway");
}

*["addr:street"]["addr:street"=~/ Fen /] {
assertNoMatch: "way \"addr:street\"=Main Fen East";
assertMatch: "way \"addr:street\"=Main Fen East";
throwWarning: tr("addr:street={0} contains ' Fen ', should likely be expanded to Fen","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fen ", " Fen "));
group: tr("addr:street contains Fen, should likely be expanded to Fen");
}

*["addr:street"]["addr:street"=~/ Fern /] {
assertNoMatch: "way \"addr:street\"=Main Fern East";
assertMatch: "way \"addr:street\"=Main Fern East";
throwWarning: tr("addr:street={0} contains ' Fern ', should likely be expanded to Fern","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fern ", " Fern "));
group: tr("addr:street contains Fern, should likely be expanded to Fern");
}

*["addr:street"]["addr:street"=~/ Flt /] {
assertNoMatch: "way \"addr:street\"=Main Flat East";
assertMatch: "way \"addr:street\"=Main Flt East";
throwWarning: tr("addr:street={0} contains ' Flt ', should likely be expanded to Flat","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Flt ", " Flat "));
group: tr("addr:street contains Flt, should likely be expanded to Flat");
}

*["addr:street"]["addr:street"=~/ Flts /] {
assertNoMatch: "way \"addr:street\"=Main Flats East";
assertMatch: "way \"addr:street\"=Main Flts East";
throwWarning: tr("addr:street={0} contains ' Flts ', should likely be expanded to Flats","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Flts ", " Flats "));
group: tr("addr:street contains Flts, should likely be expanded to Flats");
}

*["addr:street"]["addr:street"=~/ Frms /] {
assertNoMatch: "way \"addr:street\"=Main Farms East";
assertMatch: "way \"addr:street\"=Main Frms East";
throwWarning: tr("addr:street={0} contains ' Frms ', should likely be expanded to Farms","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Frms ", " Farms "));
group: tr("addr:street contains Frms, should likely be expanded to Farms");
}

*["addr:street"]["addr:street"=~/ Gdn /] {
assertNoMatch: "way \"addr:street\"=Main Garden East";
assertMatch: "way \"addr:street\"=Main Gdn East";
throwWarning: tr("addr:street={0} contains ' Gdn ', should likely be expanded to Garden","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gdn ", " Garden "));
group: tr("addr:street contains Gdn, should likely be expanded to Garden");
}

*["addr:street"]["addr:street"=~/ Gdns /] {
assertNoMatch: "way \"addr:street\"=Main Gardens East";
assertMatch: "way \"addr:street\"=Main Gdns East";
throwWarning: tr("addr:street={0} contains ' Gdns ', should likely be expanded to Gardens","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gdns ", " Gardens "));
group: tr("addr:street contains Gdns, should likely be expanded to Gardens");
}

*["addr:street"]["addr:street"=~/ Gld /] {
assertNoMatch: "way \"addr:street\"=Main Glade East";
assertMatch: "way \"addr:street\"=Main Gld East";
throwWarning: tr("addr:street={0} contains ' Gld ', should likely be expanded to Glade","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gld ", " Glade "));
group: tr("addr:street contains Gld, should likely be expanded to Glade");
}

*["addr:street"]["addr:street"=~/ Gln /] {
assertNoMatch: "way \"addr:street\"=Main Glen East";
assertMatch: "way \"addr:street\"=Main Gln East";
throwWarning: tr("addr:street={0} contains ' Gln ', should likely be expanded to Glen","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gln ", " Glen "));
group: tr("addr:street contains Gln, should likely be expanded to Glen");
}

*["addr:street"]["addr:street"=~/ Gly /] {
assertNoMatch: "way \"addr:street\"=Main Gully East";
assertMatch: "way \"addr:street\"=Main Gly East";
throwWarning: tr("addr:street={0} contains ' Gly ', should likely be expanded to Gully","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gly ", " Gully "));
group: tr("addr:street contains Gly, should likely be expanded to Gully");
}

*["addr:street"]["addr:street"=~/ Grg /] {
assertNoMatch: "way \"addr:street\"=Main Grange East";
assertMatch: "way \"addr:street\"=Main Grg East";
throwWarning: tr("addr:street={0} contains ' Grg ', should likely be expanded to Grange","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Grg ", " Grange "));
group: tr("addr:street contains Grg, should likely be expanded to Grange");
}

*["addr:street"]["addr:street"=~/ Grn /] {
assertNoMatch: "way \"addr:street\"=Main Green East";
assertMatch: "way \"addr:street\"=Main Grn East";
throwWarning: tr("addr:street={0} contains ' Grn ', should likely be expanded to Green","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Grn ", " Green "));
group: tr("addr:street contains Grn, should likely be expanded to Green");
}

*["addr:street"]["addr:street"=~/ Grv /] {
assertNoMatch: "way \"addr:street\"=Main Grove East";
assertMatch: "way \"addr:street\"=Main Grv East";
throwWarning: tr("addr:street={0} contains ' Grv ', should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Grv ", " Grove "));
group: tr("addr:street contains Grv, should likely be expanded to Grove");
}

*["addr:street"]["addr:street"=~/ Gte /] {
assertNoMatch: "way \"addr:street\"=Main Gate East";
assertMatch: "way \"addr:street\"=Main Gte East";
throwWarning: tr("addr:street={0} contains ' Gte ', should likely be expanded to Gate","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gte ", " Gate "));
group: tr("addr:street contains Gte, should likely be expanded to Gate");
}

*["addr:street"]["addr:street"=~/ Head /] {
assertNoMatch: "way \"addr:street\"=Main Head East";
assertMatch: "way \"addr:street\"=Main Head East";
throwWarning: tr("addr:street={0} contains ' Head ', should likely be expanded to Head","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Head ", " Head "));
group: tr("addr:street contains Head, should likely be expanded to Head");
}

*["addr:street"]["addr:street"=~/ Hl /] {
assertNoMatch: "way \"addr:street\"=Main Hill East";
assertMatch: "way \"addr:street\"=Main Hl East";
throwWarning: tr("addr:street={0} contains ' Hl ', should likely be expanded to Hill","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hl ", " Hill "));
group: tr("addr:street contains Hl, should likely be expanded to Hill");
}

*["addr:street"]["addr:street"=~/ Hts /] {
assertNoMatch: "way \"addr:street\"=Main Heights East";
assertMatch: "way \"addr:street\"=Main Hts East";
throwWarning: tr("addr:street={0} contains ' Hts ', should likely be expanded to Heights","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hts ", " Heights "));
group: tr("addr:street contains Hts, should likely be expanded to Heights");
}

*["addr:street"]["addr:street"=~/ Hvn /] {
assertNoMatch: "way \"addr:street\"=Main Haven East";
assertMatch: "way \"addr:street\"=Main Hvn East";
throwWarning: tr("addr:street={0} contains ' Hvn ', should likely be expanded to Haven","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hvn ", " Haven "));
group: tr("addr:street contains Hvn, should likely be expanded to Haven");
}

*["addr:street"]["addr:street"=~/ Hwy /] {
assertNoMatch: "way \"addr:street\"=Main Highway East";
assertMatch: "way \"addr:street\"=Main Hwy East";
throwWarning: tr("addr:street={0} contains ' Hwy ', should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hwy ", " Highway "));
group: tr("addr:street contains Hwy, should likely be expanded to Highway");
}

*["addr:street"]["addr:street"=~/ Is /] {
assertNoMatch: "way \"addr:street\"=Main Island East";
assertMatch: "way \"addr:street\"=Main Is East";
throwWarning: tr("addr:street={0} contains ' Is ', should likely be expanded to Island","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Is ", " Island "));
group: tr("addr:street contains Is, should likely be expanded to Island");
}

*["addr:street"]["addr:street"=~/ Jct /] {
assertNoMatch: "way \"addr:street\"=Main Junction East";
assertMatch: "way \"addr:street\"=Main Jct East";
throwWarning: tr("addr:street={0} contains ' Jct ', should likely be expanded to Junction","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Jct ", " Junction "));
group: tr("addr:street contains Jct, should likely be expanded to Junction");
}

*["addr:street"]["addr:street"=~/ Key /] {
assertNoMatch: "way \"addr:street\"=Main Key East";
assertMatch: "way \"addr:street\"=Main Key East";
throwWarning: tr("addr:street={0} contains ' Key ', should likely be expanded to Key","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Key ", " Key "));
group: tr("addr:street contains Key, should likely be expanded to Key");
}

*["addr:street"]["addr:street"=~/ Knob /] {
assertNoMatch: "way \"addr:street\"=Main Knob East";
assertMatch: "way \"addr:street\"=Main Knob East";
throwWarning: tr("addr:street={0} contains ' Knob ', should likely be expanded to Knob","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Knob ", " Knob "));
group: tr("addr:street contains Knob, should likely be expanded to Knob");
}

*["addr:street"]["addr:street"=~/ Ladr /] {
assertNoMatch: "way \"addr:street\"=Main Ladder East";
assertMatch: "way \"addr:street\"=Main Ladr East";
throwWarning: tr("addr:street={0} contains ' Ladr ', should likely be expanded to Ladder","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ladr ", " Ladder "));
group: tr("addr:street contains Ladr, should likely be expanded to Ladder");
}

*["addr:street"]["addr:street"=~/ Lane /] {
assertNoMatch: "way \"addr:street\"=Main Lane East";
assertMatch: "way \"addr:street\"=Main Lane East";
throwWarning: tr("addr:street={0} contains ' Lane ', should likely be expanded to Lane","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lane ", " Lane "));
group: tr("addr:street contains Lane, should likely be expanded to Lane");
}

*["addr:street"]["addr:street"=~/ Lea /] {
assertNoMatch: "way \"addr:street\"=Main Lea East";
assertMatch: "way \"addr:street\"=Main Lea East";
throwWarning: tr("addr:street={0} contains ' Lea ', should likely be expanded to Lea","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lea ", " Lea "));
group: tr("addr:street contains Lea, should likely be expanded to Lea");
}

*["addr:street"]["addr:street"=~/ Ledr /] {
assertNoMatch: "way \"addr:street\"=Main Leader East";
assertMatch: "way \"addr:street\"=Main Ledr East";
throwWarning: tr("addr:street={0} contains ' Ledr ', should likely be expanded to Leader","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ledr ", " Leader "));
group: tr("addr:street contains Ledr, should likely be expanded to Leader");
}

*["addr:street"]["addr:street"=~/ Lgh /] {
assertNoMatch: "way \"addr:street\"=Main Leigh East";
assertMatch: "way \"addr:street\"=Main Lgh East";
throwWarning: tr("addr:street={0} contains ' Lgh ', should likely be expanded to Leigh","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lgh ", " Leigh "));
group: tr("addr:street contains Lgh, should likely be expanded to Leigh");
}

*["addr:street"]["addr:street"=~/ Line /] {
assertNoMatch: "way \"addr:street\"=Main Line East";
assertMatch: "way \"addr:street\"=Main Line East";
throwWarning: tr("addr:street={0} contains ' Line ', should likely be expanded to Line","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Line ", " Line "));
group: tr("addr:street contains Line, should likely be expanded to Line");
}

*["addr:street"]["addr:street"=~/ Link /] {
assertNoMatch: "way \"addr:street\"=Main Link East";
assertMatch: "way \"addr:street\"=Main Link East";
throwWarning: tr("addr:street={0} contains ' Link ', should likely be expanded to Link","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Link ", " Link "));
group: tr("addr:street contains Link, should likely be expanded to Link");
}

*["addr:street"]["addr:street"=~/ Lkt /] {
assertNoMatch: "way \"addr:street\"=Main Lookout East";
assertMatch: "way \"addr:street\"=Main Lkt East";
throwWarning: tr("addr:street={0} contains ' Lkt ', should likely be expanded to Lookout","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lkt ", " Lookout "));
group: tr("addr:street contains Lkt, should likely be expanded to Lookout");
}

*["addr:street"]["addr:street"=~/ Lndg /] {
assertNoMatch: "way \"addr:street\"=Main Landing East";
assertMatch: "way \"addr:street\"=Main Lndg East";
throwWarning: tr("addr:street={0} contains ' Lndg ', should likely be expanded to Landing","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lndg ", " Landing "));
group: tr("addr:street contains Lndg, should likely be expanded to Landing");
}

*["addr:street"]["addr:street"=~/ Loop /] {
assertNoMatch: "way \"addr:street\"=Main Loop East";
assertMatch: "way \"addr:street\"=Main Loop East";
throwWarning: tr("addr:street={0} contains ' Loop ', should likely be expanded to Loop","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Loop ", " Loop "));
group: tr("addr:street contains Loop, should likely be expanded to Loop");
}

*["addr:street"]["addr:street"=~/ Mall /] {
assertNoMatch: "way \"addr:street\"=Main Mall East";
assertMatch: "way \"addr:street\"=Main Mall East";
throwWarning: tr("addr:street={0} contains ' Mall ', should likely be expanded to Mall","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mall ", " Mall "));
group: tr("addr:street contains Mall, should likely be expanded to Mall");
}

*["addr:street"]["addr:street"=~/ Mdws /] {
assertNoMatch: "way \"addr:street\"=Main Meadows East";
assertMatch: "way \"addr:street\"=Main Mdws East";
throwWarning: tr("addr:street={0} contains ' Mdws ', should likely be expanded to Meadows","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mdws ", " Meadows "));
group: tr("addr:street contains Mdws, should likely be expanded to Meadows");
}

*["addr:street"]["addr:street"=~/ Mead /] {
assertNoMatch: "way \"addr:street\"=Main Mead East";
assertMatch: "way \"addr:street\"=Main Mead East";
throwWarning: tr("addr:street={0} contains ' Mead ', should likely be expanded to Mead","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mead ", " Mead "));
group: tr("addr:street contains Mead, should likely be expanded to Mead");
}

*["addr:street"]["addr:street"=~/ Mews /] {
assertNoMatch: "way \"addr:street\"=Main Mews East";
assertMatch: "way \"addr:street\"=Main Mews East";
throwWarning: tr("addr:street={0} contains ' Mews ', should likely be expanded to Mews","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mews ", " Mews "));
group: tr("addr:street contains Mews, should likely be expanded to Mews");
}

*["addr:street"]["addr:street"=~/ Mile /] {
assertNoMatch: "way \"addr:street\"=Main Mile East";
assertMatch: "way \"addr:street\"=Main Mile East";
throwWarning: tr("addr:street={0} contains ' Mile ', should likely be expanded to Mile","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mile ", " Mile "));
group: tr("addr:street contains Mile, should likely be expanded to Mile");
}

*["addr:street"]["addr:street"=~/ Motu /] {
assertNoMatch: "way \"addr:street\"=Main Motu East";
assertMatch: "way \"addr:street\"=Main Motu East";
throwWarning: tr("addr:street={0} contains ' Motu ', should likely be expanded to Motu","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Motu ", " Motu "));
group: tr("addr:street contains Motu, should likely be expanded to Motu");
}

*["addr:street"]["addr:street"=~/ Mt /] {
assertNoMatch: "way \"addr:street\"=Main Mount East";
assertMatch: "way \"addr:street\"=Main Mt East";
throwWarning: tr("addr:street={0} contains ' Mt ', should likely be expanded to Mount","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mt ", " Mount "));
group: tr("addr:street contains Mt, should likely be expanded to Mount");
}

*["addr:street"]["addr:street"=~/ Mwy /] {
assertNoMatch: "way \"addr:street\"=Main Motorway East";
assertMatch: "way \"addr:street\"=Main Mwy East";
throwWarning: tr("addr:street={0} contains ' Mwy ', should likely be expanded to Motorway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mwy ", " Motorway "));
group: tr("addr:street contains Mwy, should likely be expanded to Motorway");
}

*["addr:street"]["addr:street"=~/ Nvs /] {
assertNoMatch: "way \"addr:street\"=Main Neaves East";
assertMatch: "way \"addr:street\"=Main Nvs East";
throwWarning: tr("addr:street={0} contains ' Nvs ', should likely be expanded to Neaves","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Nvs ", " Neaves "));
group: tr("addr:street contains Nvs, should likely be expanded to Neaves");
}

*["addr:street"]["addr:street"=~/ Oaks /] {
assertNoMatch: "way \"addr:street\"=Main Oaks East";
assertMatch: "way \"addr:street\"=Main Oaks East";
throwWarning: tr("addr:street={0} contains ' Oaks ', should likely be expanded to Oaks","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Oaks ", " Oaks "));
group: tr("addr:street contains Oaks, should likely be expanded to Oaks");
}

*["addr:street"]["addr:street"=~/ Padk /] {
assertNoMatch: "way \"addr:street\"=Main Paddock East";
assertMatch: "way \"addr:street\"=Main Padk East";
throwWarning: tr("addr:street={0} contains ' Padk ', should likely be expanded to Paddock","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Padk ", " Paddock "));
group: tr("addr:street contains Padk, should likely be expanded to Paddock");
}

*["addr:street"]["addr:street"=~/ Paku /] {
assertNoMatch: "way \"addr:street\"=Main Paku East";
assertMatch: "way \"addr:street\"=Main Paku East";
throwWarning: tr("addr:street={0} contains ' Paku ', should likely be expanded to Paku","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Paku ", " Paku "));
group: tr("addr:street contains Paku, should likely be expanded to Paku");
}

*["addr:street"]["addr:street"=~/ Pass /] {
assertNoMatch: "way \"addr:street\"=Main Pass East";
assertMatch: "way \"addr:street\"=Main Pass East";
throwWarning: tr("addr:street={0} contains ' Pass ', should likely be expanded to Pass","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pass ", " Pass "));
group: tr("addr:street contains Pass, should likely be expanded to Pass");
}

*["addr:street"]["addr:street"=~/ Pde /] {
assertNoMatch: "way \"addr:street\"=Main Parade East";
assertMatch: "way \"addr:street\"=Main Pde East";
throwWarning: tr("addr:street={0} contains ' Pde ', should likely be expanded to Parade","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pde ", " Parade "));
group: tr("addr:street contains Pde, should likely be expanded to Parade");
}

*["addr:street"]["addr:street"=~/ Pk /] {
assertNoMatch: "way \"addr:street\"=Main Park East";
assertMatch: "way \"addr:street\"=Main Pk East";
throwWarning: tr("addr:street={0} contains ' Pk ', should likely be expanded to Park","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pk ", " Park "));
group: tr("addr:street contains Pk, should likely be expanded to Park");
}

*["addr:street"]["addr:street"=~/ Pkwy /] {
assertNoMatch: "way \"addr:street\"=Main Parkway East";
assertMatch: "way \"addr:street\"=Main Pkwy East";
throwWarning: tr("addr:street={0} contains ' Pkwy ', should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pkwy ", " Parkway "));
group: tr("addr:street contains Pkwy, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pl /] {
assertNoMatch: "way \"addr:street\"=Main Place East";
assertMatch: "way \"addr:street\"=Main Pl East";
throwWarning: tr("addr:street={0} contains ' Pl ', should likely be expanded to Place","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pl ", " Place "));
group: tr("addr:street contains Pl, should likely be expanded to Place");
}

*["addr:street"]["addr:street"=~/ Priors /] {
assertNoMatch: "way \"addr:street\"=Main Priors East";
assertMatch: "way \"addr:street\"=Main Priors East";
throwWarning: tr("addr:street={0} contains ' Priors ', should likely be expanded to Priors","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Priors ", " Priors "));
group: tr("addr:street contains Priors, should likely be expanded to Priors");
}

*["addr:street"]["addr:street"=~/ Prom /] {
assertNoMatch: "way \"addr:street\"=Main Promenade East";
assertMatch: "way \"addr:street\"=Main Prom East";
throwWarning: tr("addr:street={0} contains ' Prom ', should likely be expanded to Promenade","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Prom ", " Promenade "));
group: tr("addr:street contains Prom, should likely be expanded to Promenade");
}

*["addr:street"]["addr:street"=~/ Psge /] {
assertNoMatch: "way \"addr:street\"=Main Passage East";
assertMatch: "way \"addr:street\"=Main Psge East";
throwWarning: tr("addr:street={0} contains ' Psge ', should likely be expanded to Passage","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Psge ", " Passage "));
group: tr("addr:street contains Psge, should likely be expanded to Passage");
}

*["addr:street"]["addr:street"=~/ Pt /] {
assertNoMatch: "way \"addr:street\"=Main Point East";
assertMatch: "way \"addr:street\"=Main Pt East";
throwWarning: tr("addr:street={0} contains ' Pt ', should likely be expanded to Point","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pt ", " Point "));
group: tr("addr:street contains Pt, should likely be expanded to Point");
}

*["addr:street"]["addr:street"=~/ Pth /] {
assertNoMatch: "way \"addr:street\"=Main Path East";
assertMatch: "way \"addr:street\"=Main Pth East";
throwWarning: tr("addr:street={0} contains ' Pth ', should likely be expanded to Path","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pth ", " Path "));
group: tr("addr:street contains Pth, should likely be expanded to Path");
}

*["addr:street"]["addr:street"=~/ Qdrt /] {
assertNoMatch: "way \"addr:street\"=Main Quadrant East";
assertMatch: "way \"addr:street\"=Main Qdrt East";
throwWarning: tr("addr:street={0} contains ' Qdrt ', should likely be expanded to Quadrant","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Qdrt ", " Quadrant "));
group: tr("addr:street contains Qdrt, should likely be expanded to Quadrant");
}

*["addr:street"]["addr:street"=~/ Qy /] {
assertNoMatch: "way \"addr:street\"=Main Quay East";
assertMatch: "way \"addr:street\"=Main Qy East";
throwWarning: tr("addr:street={0} contains ' Qy ', should likely be expanded to Quay","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Qy ", " Quay "));
group: tr("addr:street contains Qy, should likely be expanded to Quay");
}

*["addr:street"]["addr:street"=~/ Rd /] {
assertNoMatch: "way \"addr:street\"=Main Road East";
assertMatch: "way \"addr:street\"=Main Rd East";
throwWarning: tr("addr:street={0} contains ' Rd ', should likely be expanded to Road","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rd ", " Road "));
group: tr("addr:street contains Rd, should likely be expanded to Road");
}

*["addr:street"]["addr:street"=~/ Rdge /] {
assertNoMatch: "way \"addr:street\"=Main Ridge East";
assertMatch: "way \"addr:street\"=Main Rdge East";
throwWarning: tr("addr:street={0} contains ' Rdge ', should likely be expanded to Ridge","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rdge ", " Ridge "));
group: tr("addr:street contains Rdge, should likely be expanded to Ridge");
}

*["addr:street"]["addr:street"=~/ Rds /] {
assertNoMatch: "way \"addr:street\"=Main Roads East";
assertMatch: "way \"addr:street\"=Main Rds East";
throwWarning: tr("addr:street={0} contains ' Rds ', should likely be expanded to Roads","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rds ", " Roads "));
group: tr("addr:street contains Rds, should likely be expanded to Roads");
}

*["addr:street"]["addr:street"=~/ Rdwy /] {
assertNoMatch: "way \"addr:street\"=Main Roadway East";
assertMatch: "way \"addr:street\"=Main Rdwy East";
throwWarning: tr("addr:street={0} contains ' Rdwy ', should likely be expanded to Roadway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rdwy ", " Roadway "));
group: tr("addr:street contains Rdwy, should likely be expanded to Roadway");
}

*["addr:street"]["addr:street"=~/ Reef /] {
assertNoMatch: "way \"addr:street\"=Main Reef East";
assertMatch: "way \"addr:street\"=Main Reef East";
throwWarning: tr("addr:street={0} contains ' Reef ', should likely be expanded to Reef","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Reef ", " Reef "));
group: tr("addr:street contains Reef, should likely be expanded to Reef");
}

*["addr:street"]["addr:street"=~/ Res /] {
assertNoMatch: "way \"addr:street\"=Main Reserve East";
assertMatch: "way \"addr:street\"=Main Res East";
throwWarning: tr("addr:street={0} contains ' Res ', should likely be expanded to Reserve","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Res ", " Reserve "));
group: tr("addr:street contains Res, should likely be expanded to Reserve");
}

*["addr:street"]["addr:street"=~/ Rest /] {
assertNoMatch: "way \"addr:street\"=Main Rest East";
assertMatch: "way \"addr:street\"=Main Rest East";
throwWarning: tr("addr:street={0} contains ' Rest ', should likely be expanded to Rest","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rest ", " Rest "));
group: tr("addr:street contains Rest, should likely be expanded to Rest");
}

*["addr:street"]["addr:street"=~/ Rise /] {
assertNoMatch: "way \"addr:street\"=Main Rise East";
assertMatch: "way \"addr:street\"=Main Rise East";
throwWarning: tr("addr:street={0} contains ' Rise ', should likely be expanded to Rise","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rise ", " Rise "));
group: tr("addr:street contains Rise, should likely be expanded to Rise");
}

*["addr:street"]["addr:street"=~/ Row /] {
assertNoMatch: "way \"addr:street\"=Main Row East";
assertMatch: "way \"addr:street\"=Main Row East";
throwWarning: tr("addr:street={0} contains ' Row ', should likely be expanded to Row","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Row ", " Row "));
group: tr("addr:street contains Row, should likely be expanded to Row");
}

*["addr:street"]["addr:street"=~/ Rte /] {
assertNoMatch: "way \"addr:street\"=Main Route East";
assertMatch: "way \"addr:street\"=Main Rte East";
throwWarning: tr("addr:street={0} contains ' Rte ', should likely be expanded to Route","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rte ", " Route "));
group: tr("addr:street contains Rte, should likely be expanded to Route");
}

*["addr:street"]["addr:street"=~/ Rtr /] {
assertNoMatch: "way \"addr:street\"=Main Retreat East";
assertMatch: "way \"addr:street\"=Main Rtr East";
throwWarning: tr("addr:street={0} contains ' Rtr ', should likely be expanded to Retreat","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rtr ", " Retreat "));
group: tr("addr:street contains Rtr, should likely be expanded to Retreat");
}

*["addr:street"]["addr:street"=~/ SH /] {
assertNoMatch: "way \"addr:street\"=Main State Highway East";
assertMatch: "way \"addr:street\"=Main SH East";
throwWarning: tr("addr:street={0} contains ' SH ', should likely be expanded to State Highway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," SH ", " State Highway "));
group: tr("addr:street contains SH, should likely be expanded to State Highway");
}

*["addr:street"]["addr:street"=~/ Slp /] {
assertNoMatch: "way \"addr:street\"=Main Slope East";
assertMatch: "way \"addr:street\"=Main Slp East";
throwWarning: tr("addr:street={0} contains ' Slp ', should likely be expanded to Slope","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Slp ", " Slope "));
group: tr("addr:street contains Slp, should likely be expanded to Slope");
}

*["addr:street"]["addr:street"=~/ Spa /] {
assertNoMatch: "way \"addr:street\"=Main Spa East";
assertMatch: "way \"addr:street\"=Main Spa East";
throwWarning: tr("addr:street={0} contains ' Spa ', should likely be expanded to Spa","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Spa ", " Spa "));
group: tr("addr:street contains Spa, should likely be expanded to Spa");
}

*["addr:street"]["addr:street"=~/ Spur /] {
assertNoMatch: "way \"addr:street\"=Main Spur East";
assertMatch: "way \"addr:street\"=Main Spur East";
throwWarning: tr("addr:street={0} contains ' Spur ', should likely be expanded to Spur","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Spur ", " Spur "));
group: tr("addr:street contains Spur, should likely be expanded to Spur");
}

*["addr:street"]["addr:street"=~/ Sq /] {
assertNoMatch: "way \"addr:street\"=Main Square East";
assertMatch: "way \"addr:street\"=Main Sq East";
throwWarning: tr("addr:street={0} contains ' Sq ', should likely be expanded to Square","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Sq ", " Square "));
group: tr("addr:street contains Sq, should likely be expanded to Square");
}

*["addr:street"]["addr:street"=~/ St /] {
assertNoMatch: "way \"addr:street\"=Main Street East";
assertMatch: "way \"addr:street\"=Main St East";
throwWarning: tr("addr:street={0} contains ' St ', should likely be expanded to Street","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," St ", " Street "));
group: tr("addr:street contains St, should likely be expanded to Street");
}

*["addr:street"]["addr:street"=~/ Steep /] {
assertNoMatch: "way \"addr:street\"=Main Steep East";
assertMatch: "way \"addr:street\"=Main Steep East";
throwWarning: tr("addr:street={0} contains ' Steep ', should likely be expanded to Steep","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Steep ", " Steep "));
group: tr("addr:street contains Steep, should likely be expanded to Steep");
}

*["addr:street"]["addr:street"=~/ Stgt /] {
assertNoMatch: "way \"addr:street\"=Main Straight East";
assertMatch: "way \"addr:street\"=Main Stgt East";
throwWarning: tr("addr:street={0} contains ' Stgt ', should likely be expanded to Straight","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Stgt ", " Straight "));
group: tr("addr:street contains Stgt, should likely be expanded to Straight");
}

*["addr:street"]["addr:street"=~/ Stps /] {
assertNoMatch: "way \"addr:street\"=Main Steps East";
assertMatch: "way \"addr:street\"=Main Stps East";
throwWarning: tr("addr:street={0} contains ' Stps ', should likely be expanded to Steps","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Stps ", " Steps "));
group: tr("addr:street contains Stps, should likely be expanded to Steps");
}

*["addr:street"]["addr:street"=~/ Strd /] {
assertNoMatch: "way \"addr:street\"=Main Strand East";
assertMatch: "way \"addr:street\"=Main Strd East";
throwWarning: tr("addr:street={0} contains ' Strd ', should likely be expanded to Strand","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Strd ", " Strand "));
group: tr("addr:street contains Strd, should likely be expanded to Strand");
}

*["addr:street"]["addr:street"=~/ Svln /] {
assertNoMatch: "way \"addr:street\"=Main Service Lane East";
assertMatch: "way \"addr:street\"=Main Svln East";
throwWarning: tr("addr:street={0} contains ' Svln ', should likely be expanded to Service Lane","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Svln ", " Service Lane "));
group: tr("addr:street contains Svln, should likely be expanded to Service Lane");
}

*["addr:street"]["addr:street"=~/ Tce /] {
assertNoMatch: "way \"addr:street\"=Main Terrace East";
assertMatch: "way \"addr:street\"=Main Tce East";
throwWarning: tr("addr:street={0} contains ' Tce ', should likely be expanded to Terrace","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tce ", " Terrace "));
group: tr("addr:street contains Tce, should likely be expanded to Terrace");
}

*["addr:street"]["addr:street"=~/ Tmwy /] {
assertNoMatch: "way \"addr:street\"=Main Tramway East";
assertMatch: "way \"addr:street\"=Main Tmwy East";
throwWarning: tr("addr:street={0} contains ' Tmwy ', should likely be expanded to Tramway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tmwy ", " Tramway "));
group: tr("addr:street contains Tmwy, should likely be expanded to Tramway");
}

*["addr:street"]["addr:street"=~/ Trk /] {
assertNoMatch: "way \"addr:street\"=Main Track East";
assertMatch: "way \"addr:street\"=Main Trk East";
throwWarning: tr("addr:street={0} contains ' Trk ', should likely be expanded to Track","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Trk ", " Track "));
group: tr("addr:street contains Trk, should likely be expanded to Track");
}

*["addr:street"]["addr:street"=~/ Trl /] {
assertNoMatch: "way \"addr:street\"=Main Trail East";
assertMatch: "way \"addr:street\"=Main Trl East";
throwWarning: tr("addr:street={0} contains ' Trl ', should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Trl ", " Trail "));
group: tr("addr:street contains Trl, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Trs /] {
assertNoMatch: "way \"addr:street\"=Main Trees East";
assertMatch: "way \"addr:street\"=Main Trs East";
throwWarning: tr("addr:street={0} contains ' Trs ', should likely be expanded to Trees","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Trs ", " Trees "));
group: tr("addr:street contains Trs, should likely be expanded to Trees");
}

*["addr:street"]["addr:street"=~/ Twrs /] {
assertNoMatch: "way \"addr:street\"=Main Towers East";
assertMatch: "way \"addr:street\"=Main Twrs East";
throwWarning: tr("addr:street={0} contains ' Twrs ', should likely be expanded to Towers","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Twrs ", " Towers "));
group: tr("addr:street contains Twrs, should likely be expanded to Towers");
}

*["addr:street"]["addr:street"=~/ Vale /] {
assertNoMatch: "way \"addr:street\"=Main Vale East";
assertMatch: "way \"addr:street\"=Main Vale East";
throwWarning: tr("addr:street={0} contains ' Vale ', should likely be expanded to Vale","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vale ", " Vale "));
group: tr("addr:street contains Vale, should likely be expanded to Vale");
}

*["addr:street"]["addr:street"=~/ Vis /] {
assertNoMatch: "way \"addr:street\"=Main Vista East";
assertMatch: "way \"addr:street\"=Main Vis East";
throwWarning: tr("addr:street={0} contains ' Vis ', should likely be expanded to Vista","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vis ", " Vista "));
group: tr("addr:street contains Vis, should likely be expanded to Vista");
}

*["addr:street"]["addr:street"=~/ Vlg /] {
assertNoMatch: "way \"addr:street\"=Main Village East";
assertMatch: "way \"addr:street\"=Main Vlg East";
throwWarning: tr("addr:street={0} contains ' Vlg ', should likely be expanded to Village","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vlg ", " Village "));
group: tr("addr:street contains Vlg, should likely be expanded to Village");
}

*["addr:street"]["addr:street"=~/ Vlls /] {
assertNoMatch: "way \"addr:street\"=Main Villas East";
assertMatch: "way \"addr:street\"=Main Vlls East";
throwWarning: tr("addr:street={0} contains ' Vlls ', should likely be expanded to Villas","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vlls ", " Villas "));
group: tr("addr:street contains Vlls, should likely be expanded to Villas");
}

*["addr:street"]["addr:street"=~/ Vly /] {
assertNoMatch: "way \"addr:street\"=Main Valley East";
assertMatch: "way \"addr:street\"=Main Vly East";
throwWarning: tr("addr:street={0} contains ' Vly ', should likely be expanded to Valley","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vly ", " Valley "));
group: tr("addr:street contains Vly, should likely be expanded to Valley");
}

*["addr:street"]["addr:street"=~/ Vnus /] {
assertNoMatch: "way \"addr:street\"=Main Venus East";
assertMatch: "way \"addr:street\"=Main Vnus East";
throwWarning: tr("addr:street={0} contains ' Vnus ', should likely be expanded to Venus","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vnus ", " Venus "));
group: tr("addr:street contains Vnus, should likely be expanded to Venus");
}

*["addr:street"]["addr:street"=~/ Vue /] {
assertNoMatch: "way \"addr:street\"=Main Vue East";
assertMatch: "way \"addr:street\"=Main Vue East";
throwWarning: tr("addr:street={0} contains ' Vue ', should likely be expanded to Vue","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vue ", " Vue "));
group: tr("addr:street contains Vue, should likely be expanded to Vue");
}

*["addr:street"]["addr:street"=~/ Vw /] {
assertNoMatch: "way \"addr:street\"=Main View East";
assertMatch: "way \"addr:street\"=Main Vw East";
throwWarning: tr("addr:street={0} contains ' Vw ', should likely be expanded to View","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vw ", " View "));
group: tr("addr:street contains Vw, should likely be expanded to View");
}

*["addr:street"]["addr:street"=~/ Vws /] {
assertNoMatch: "way \"addr:street\"=Main Views East";
assertMatch: "way \"addr:street\"=Main Vws East";
throwWarning: tr("addr:street={0} contains ' Vws ', should likely be expanded to Views","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vws ", " Views "));
group: tr("addr:street contains Vws, should likely be expanded to Views");
}

*["addr:street"]["addr:street"=~/ Waters /] {
assertNoMatch: "way \"addr:street\"=Main Waters East";
assertMatch: "way \"addr:street\"=Main Waters East";
throwWarning: tr("addr:street={0} contains ' Waters ', should likely be expanded to Waters","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Waters ", " Waters "));
group: tr("addr:street contains Waters, should likely be expanded to Waters");
}

*["addr:street"]["addr:street"=~/ Way /] {
assertNoMatch: "way \"addr:street\"=Main Way East";
assertMatch: "way \"addr:street\"=Main Way East";
throwWarning: tr("addr:street={0} contains ' Way ', should likely be expanded to Way","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Way ", " Way "));
group: tr("addr:street contains Way, should likely be expanded to Way");
}

*["addr:street"]["addr:street"=~/ Whrf /] {
assertNoMatch: "way \"addr:street\"=Main Wharf East";
assertMatch: "way \"addr:street\"=Main Whrf East";
throwWarning: tr("addr:street={0} contains ' Whrf ', should likely be expanded to Wharf","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Whrf ", " Wharf "));
group: tr("addr:street contains Whrf, should likely be expanded to Wharf");
}

*["addr:street"]["addr:street"=~/ Wlk /] {
assertNoMatch: "way \"addr:street\"=Main Walk East";
assertMatch: "way \"addr:street\"=Main Wlk East";
throwWarning: tr("addr:street={0} contains ' Wlk ', should likely be expanded to Walk","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Wlk ", " Walk "));
group: tr("addr:street contains Wlk, should likely be expanded to Walk");
}

*["addr:street"]["addr:street"=~/ Wynd /] {
assertNoMatch: "way \"addr:street\"=Main Wynd East";
assertMatch: "way \"addr:street\"=Main Wynd East";
throwWarning: tr("addr:street={0} contains ' Wynd ', should likely be expanded to Wynd","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Wynd ", " Wynd "));
group: tr("addr:street contains Wynd, should likely be expanded to Wynd");
}

*["name"=~/ Accs /].highway_name {
assertNoMatch: "way \"name\"=Main Access East";
assertMatch: "way \"name\"=Main Accs East";
throwWarning: tr("Highway name contains Accs, may need to be expanded to Access");
fixAdd: concat("name=", replace(tag("name")," Accs ", " Access "));
}

*["name"=~/ Accswy /].highway_name {
assertNoMatch: "way \"name\"=Main Accessway East";
assertMatch: "way \"name\"=Main Accswy East";
throwWarning: tr("Highway name contains Accswy, may need to be expanded to Accessway");
fixAdd: concat("name=", replace(tag("name")," Accswy ", " Accessway "));
}

*["name"=~/ Aly /].highway_name {
assertNoMatch: "way \"name\"=Main Alley East";
assertMatch: "way \"name\"=Main Aly East";
throwWarning: tr("Highway name contains Aly, may need to be expanded to Alley");
fixAdd: concat("name=", replace(tag("name")," Aly ", " Alley "));
}

*["name"=~/ Ancg /].highway_name {
assertNoMatch: "way \"name\"=Main Anchorage East";
assertMatch: "way \"name\"=Main Ancg East";
throwWarning: tr("Highway name contains Ancg, may need to be expanded to Anchorage");
fixAdd: concat("name=", replace(tag("name")," Ancg ", " Anchorage "));
}

*["name"=~/ App /].highway_name {
assertNoMatch: "way \"name\"=Main Approach East";
assertMatch: "way \"name\"=Main App East";
throwWarning: tr("Highway name contains App, may need to be expanded to Approach");
fixAdd: concat("name=", replace(tag("name")," App ", " Approach "));
}

*["name"=~/ Arc /].highway_name {
assertNoMatch: "way \"name\"=Main Arcade East";
assertMatch: "way \"name\"=Main Arc East";
throwWarning: tr("Highway name contains Arc, may need to be expanded to Arcade");
fixAdd: concat("name=", replace(tag("name")," Arc ", " Arcade "));
}

*["name"=~/ Arch /].highway_name {
assertNoMatch: "way \"name\"=Main Arch East";
assertMatch: "way \"name\"=Main Arch East";
throwWarning: tr("Highway name contains Arch, may need to be expanded to Arch");
fixAdd: concat("name=", replace(tag("name")," Arch ", " Arch "));
}

*["name"=~/ Ave /].highway_name {
assertNoMatch: "way \"name\"=Main Avenue East";
assertMatch: "way \"name\"=Main Ave East";
throwWarning: tr("Highway name contains Ave, may need to be expanded to Avenue");
fixAdd: concat("name=", replace(tag("name")," Ave ", " Avenue "));
}

*["name"=~/ Bank /].highway_name {
assertNoMatch: "way \"name\"=Main Bank East";
assertMatch: "way \"name\"=Main Bank East";
throwWarning: tr("Highway name contains Bank, may need to be expanded to Bank");
fixAdd: concat("name=", replace(tag("name")," Bank ", " Bank "));
}

*["name"=~/ Bay /].highway_name {
assertNoMatch: "way \"name\"=Main Bay East";
assertMatch: "way \"name\"=Main Bay East";
throwWarning: tr("Highway name contains Bay, may need to be expanded to Bay");
fixAdd: concat("name=", replace(tag("name")," Bay ", " Bay "));
}

*["name"=~/ Bch /].highway_name {
assertNoMatch: "way \"name\"=Main Beach East";
assertMatch: "way \"name\"=Main Bch East";
throwWarning: tr("Highway name contains Bch, may need to be expanded to Beach");
fixAdd: concat("name=", replace(tag("name")," Bch ", " Beach "));
}

*["name"=~/ Belt /].highway_name {
assertNoMatch: "way \"name\"=Main Belt East";
assertMatch: "way \"name\"=Main Belt East";
throwWarning: tr("Highway name contains Belt, may need to be expanded to Belt");
fixAdd: concat("name=", replace(tag("name")," Belt ", " Belt "));
}

*["name"=~/ Blf /].highway_name {
assertNoMatch: "way \"name\"=Main Bluff East";
assertMatch: "way \"name\"=Main Blf East";
throwWarning: tr("Highway name contains Blf, may need to be expanded to Bluff");
fixAdd: concat("name=", replace(tag("name")," Blf ", " Bluff "));
}

*["name"=~/ Blvd /].highway_name {
assertNoMatch: "way \"name\"=Main Boulevard East";
assertMatch: "way \"name\"=Main Blvd East";
throwWarning: tr("Highway name contains Blvd, may need to be expanded to Boulevard");
fixAdd: concat("name=", replace(tag("name")," Blvd ", " Boulevard "));
}

*["name"=~/ Bnd /].highway_name {
assertNoMatch: "way \"name\"=Main Bend East";
assertMatch: "way \"name\"=Main Bnd East";
throwWarning: tr("Highway name contains Bnd, may need to be expanded to Bend");
fixAdd: concat("name=", replace(tag("name")," Bnd ", " Bend "));
}

*["name"=~/ Brae /].highway_name {
assertNoMatch: "way \"name\"=Main Brae East";
assertMatch: "way \"name\"=Main Brae East";
throwWarning: tr("Highway name contains Brae, may need to be expanded to Brae");
fixAdd: concat("name=", replace(tag("name")," Brae ", " Brae "));
}

*["name"=~/ Brg /].highway_name {
assertNoMatch: "way \"name\"=Main Bridge East";
assertMatch: "way \"name\"=Main Brg East";
throwWarning: tr("Highway name contains Brg, may need to be expanded to Bridge");
fixAdd: concat("name=", replace(tag("name")," Brg ", " Bridge "));
}

*["name"=~/ Briars /].highway_name {
assertNoMatch: "way \"name\"=Main Briars East";
assertMatch: "way \"name\"=Main Briars East";
throwWarning: tr("Highway name contains Briars, may need to be expanded to Briars");
fixAdd: concat("name=", replace(tag("name")," Briars ", " Briars "));
}

*["name"=~/ Byp /].highway_name {
assertNoMatch: "way \"name\"=Main Bypass East";
assertMatch: "way \"name\"=Main Byp East";
throwWarning: tr("Highway name contains Byp, may need to be expanded to Bypass");
fixAdd: concat("name=", replace(tag("name")," Byp ", " Bypass "));
}

*["name"=~/ Ch /].highway_name {
assertNoMatch: "way \"name\"=Main Chase East";
assertMatch: "way \"name\"=Main Ch East";
throwWarning: tr("Highway name contains Ch, may need to be expanded to Chase");
fixAdd: concat("name=", replace(tag("name")," Ch ", " Chase "));
}

*["name"=~/ Cir /].highway_name {
assertNoMatch: "way \"name\"=Main Circle East";
assertMatch: "way \"name\"=Main Cir East";
throwWarning: tr("Highway name contains Cir, may need to be expanded to Circle");
fixAdd: concat("name=", replace(tag("name")," Cir ", " Circle "));
}

*["name"=~/ Cl /].highway_name {
assertNoMatch: "way \"name\"=Main Close East";
assertMatch: "way \"name\"=Main Cl East";
throwWarning: tr("Highway name contains Cl, may need to be expanded to Close");
fixAdd: concat("name=", replace(tag("name")," Cl ", " Close "));
}

*["name"=~/ Clm /].highway_name {
assertNoMatch: "way \"name\"=Main Claim East";
assertMatch: "way \"name\"=Main Clm East";
throwWarning: tr("Highway name contains Clm, may need to be expanded to Claim");
fixAdd: concat("name=", replace(tag("name")," Clm ", " Claim "));
}

*["name"=~/ Cmn /].highway_name {
assertNoMatch: "way \"name\"=Main Common East";
assertMatch: "way \"name\"=Main Cmn East";
throwWarning: tr("Highway name contains Cmn, may need to be expanded to Common");
fixAdd: concat("name=", replace(tag("name")," Cmn ", " Common "));
}

*["name"=~/ Crcs /].highway_name {
assertNoMatch: "way \"name\"=Main Circus East";
assertMatch: "way \"name\"=Main Crcs East";
throwWarning: tr("Highway name contains Crcs, may need to be expanded to Circus");
fixAdd: concat("name=", replace(tag("name")," Crcs ", " Circus "));
}

*["name"=~/ Cres /].highway_name {
assertNoMatch: "way \"name\"=Main Crescent East";
assertMatch: "way \"name\"=Main Cres East";
throwWarning: tr("Highway name contains Cres, may need to be expanded to Crescent");
fixAdd: concat("name=", replace(tag("name")," Cres ", " Crescent "));
}

*["name"=~/ Crk /].highway_name {
assertNoMatch: "way \"name\"=Main Creek East";
assertMatch: "way \"name\"=Main Crk East";
throwWarning: tr("Highway name contains Crk, may need to be expanded to Creek");
fixAdd: concat("name=", replace(tag("name")," Crk ", " Creek "));
}

*["name"=~/ Crst /].highway_name {
assertNoMatch: "way \"name\"=Main Crest East";
assertMatch: "way \"name\"=Main Crst East";
throwWarning: tr("Highway name contains Crst, may need to be expanded to Crest");
fixAdd: concat("name=", replace(tag("name")," Crst ", " Crest "));
}

*["name"=~/ Crt /].highway_name {
assertNoMatch: "way \"name\"=Main Court East";
assertMatch: "way \"name\"=Main Crt East";
throwWarning: tr("Highway name contains Crt, may need to be expanded to Court");
fixAdd: concat("name=", replace(tag("name")," Crt ", " Court "));
}

*["name"=~/ Crts /].highway_name {
assertNoMatch: "way \"name\"=Main Courts East";
assertMatch: "way \"name\"=Main Crts East";
throwWarning: tr("Highway name contains Crts, may need to be expanded to Courts");
fixAdd: concat("name=", replace(tag("name")," Crts ", " Courts "));
}

*["name"=~/ Ctr /].highway_name {
assertNoMatch: "way \"name\"=Main Centre East";
assertMatch: "way \"name\"=Main Ctr East";
throwWarning: tr("Highway name contains Ctr, may need to be expanded to Centre");
fixAdd: concat("name=", replace(tag("name")," Ctr ", " Centre "));
}

*["name"=~/ Cul /].highway_name {
assertNoMatch: "way \"name\"=Main Cul East";
assertMatch: "way \"name\"=Main Cul East";
throwWarning: tr("Highway name contains Cul, may need to be expanded to Cul");
fixAdd: concat("name=", replace(tag("name")," Cul ", " Cul "));
}

*["name"=~/ Cv /].highway_name {
assertNoMatch: "way \"name\"=Main Cove East";
assertMatch: "way \"name\"=Main Cv East";
throwWarning: tr("Highway name contains Cv, may need to be expanded to Cove");
fixAdd: concat("name=", replace(tag("name")," Cv ", " Cove "));
}

*["name"=~/ Del /].highway_name {
assertNoMatch: "way \"name\"=Main Dell East";
assertMatch: "way \"name\"=Main Del East";
throwWarning: tr("Highway name contains Del, may need to be expanded to Dell");
fixAdd: concat("name=", replace(tag("name")," Del ", " Dell "));
}

*["name"=~/ Dle /].highway_name {
assertNoMatch: "way \"name\"=Main Dale East";
assertMatch: "way \"name\"=Main Dle East";
throwWarning: tr("Highway name contains Dle, may need to be expanded to Dale");
fixAdd: concat("name=", replace(tag("name")," Dle ", " Dale "));
}

*["name"=~/ Downs /].highway_name {
assertNoMatch: "way \"name\"=Main Downs East";
assertMatch: "way \"name\"=Main Downs East";
throwWarning: tr("Highway name contains Downs, may need to be expanded to Downs");
fixAdd: concat("name=", replace(tag("name")," Downs ", " Downs "));
}

*["name"=~/ Dr /].highway_name {
assertNoMatch: "way \"name\"=Main Drive East";
assertMatch: "way \"name\"=Main Dr East";
throwWarning: tr("Highway name contains Dr, may need to be expanded to Drive");
fixAdd: concat("name=", replace(tag("name")," Dr ", " Drive "));
}

*["name"=~/ Dune /].highway_name {
assertNoMatch: "way \"name\"=Main Dune East";
assertMatch: "way \"name\"=Main Dune East";
throwWarning: tr("Highway name contains Dune, may need to be expanded to Dune");
fixAdd: concat("name=", replace(tag("name")," Dune ", " Dune "));
}

*["name"=~/ Dvn /].highway_name {
assertNoMatch: "way \"name\"=Main Deviation East";
assertMatch: "way \"name\"=Main Dvn East";
throwWarning: tr("Highway name contains Dvn, may need to be expanded to Deviation");
fixAdd: concat("name=", replace(tag("name")," Dvn ", " Deviation "));
}

*["name"=~/ Elm /].highway_name {
assertNoMatch: "way \"name\"=Main Elm East";
assertMatch: "way \"name\"=Main Elm East";
throwWarning: tr("Highway name contains Elm, may need to be expanded to Elm");
fixAdd: concat("name=", replace(tag("name")," Elm ", " Elm "));
}

*["name"=~/ End /].highway_name {
assertNoMatch: "way \"name\"=Main End East";
assertMatch: "way \"name\"=Main End East";
throwWarning: tr("Highway name contains End, may need to be expanded to End");
fixAdd: concat("name=", replace(tag("name")," End ", " End "));
}

*["name"=~/ Ent /].highway_name {
assertNoMatch: "way \"name\"=Main Entrance East";
assertMatch: "way \"name\"=Main Ent East";
throwWarning: tr("Highway name contains Ent, may need to be expanded to Entrance");
fixAdd: concat("name=", replace(tag("name")," Ent ", " Entrance "));
}

*["name"=~/ Esp /].highway_name {
assertNoMatch: "way \"name\"=Main Esplanade East";
assertMatch: "way \"name\"=Main Esp East";
throwWarning: tr("Highway name contains Esp, may need to be expanded to Esplanade");
fixAdd: concat("name=", replace(tag("name")," Esp ", " Esplanade "));
}

*["name"=~/ Est /].highway_name {
assertNoMatch: "way \"name\"=Main Estate East";
assertMatch: "way \"name\"=Main Est East";
throwWarning: tr("Highway name contains Est, may need to be expanded to Estate");
fixAdd: concat("name=", replace(tag("name")," Est ", " Estate "));
}

*["name"=~/ Fall /].highway_name {
assertNoMatch: "way \"name\"=Main Fall East";
assertMatch: "way \"name\"=Main Fall East";
throwWarning: tr("Highway name contains Fall, may need to be expanded to Fall");
fixAdd: concat("name=", replace(tag("name")," Fall ", " Fall "));
}

*["name"=~/ Fare /].highway_name {
assertNoMatch: "way \"name\"=Main Fare East";
assertMatch: "way \"name\"=Main Fare East";
throwWarning: tr("Highway name contains Fare, may need to be expanded to Fare");
fixAdd: concat("name=", replace(tag("name")," Fare ", " Fare "));
}

*["name"=~/ Fawy /].highway_name {
assertNoMatch: "way \"name\"=Main Fairway East";
assertMatch: "way \"name\"=Main Fawy East";
throwWarning: tr("Highway name contains Fawy, may need to be expanded to Fairway");
fixAdd: concat("name=", replace(tag("name")," Fawy ", " Fairway "));
}

*["name"=~/ Fen /].highway_name {
assertNoMatch: "way \"name\"=Main Fen East";
assertMatch: "way \"name\"=Main Fen East";
throwWarning: tr("Highway name contains Fen, may need to be expanded to Fen");
fixAdd: concat("name=", replace(tag("name")," Fen ", " Fen "));
}

*["name"=~/ Fern /].highway_name {
assertNoMatch: "way \"name\"=Main Fern East";
assertMatch: "way \"name\"=Main Fern East";
throwWarning: tr("Highway name contains Fern, may need to be expanded to Fern");
fixAdd: concat("name=", replace(tag("name")," Fern ", " Fern "));
}

*["name"=~/ Flt /].highway_name {
assertNoMatch: "way \"name\"=Main Flat East";
assertMatch: "way \"name\"=Main Flt East";
throwWarning: tr("Highway name contains Flt, may need to be expanded to Flat");
fixAdd: concat("name=", replace(tag("name")," Flt ", " Flat "));
}

*["name"=~/ Flts /].highway_name {
assertNoMatch: "way \"name\"=Main Flats East";
assertMatch: "way \"name\"=Main Flts East";
throwWarning: tr("Highway name contains Flts, may need to be expanded to Flats");
fixAdd: concat("name=", replace(tag("name")," Flts ", " Flats "));
}

*["name"=~/ Frms /].highway_name {
assertNoMatch: "way \"name\"=Main Farms East";
assertMatch: "way \"name\"=Main Frms East";
throwWarning: tr("Highway name contains Frms, may need to be expanded to Farms");
fixAdd: concat("name=", replace(tag("name")," Frms ", " Farms "));
}

*["name"=~/ Gdn /].highway_name {
assertNoMatch: "way \"name\"=Main Garden East";
assertMatch: "way \"name\"=Main Gdn East";
throwWarning: tr("Highway name contains Gdn, may need to be expanded to Garden");
fixAdd: concat("name=", replace(tag("name")," Gdn ", " Garden "));
}

*["name"=~/ Gdns /].highway_name {
assertNoMatch: "way \"name\"=Main Gardens East";
assertMatch: "way \"name\"=Main Gdns East";
throwWarning: tr("Highway name contains Gdns, may need to be expanded to Gardens");
fixAdd: concat("name=", replace(tag("name")," Gdns ", " Gardens "));
}

*["name"=~/ Gld /].highway_name {
assertNoMatch: "way \"name\"=Main Glade East";
assertMatch: "way \"name\"=Main Gld East";
throwWarning: tr("Highway name contains Gld, may need to be expanded to Glade");
fixAdd: concat("name=", replace(tag("name")," Gld ", " Glade "));
}

*["name"=~/ Gln /].highway_name {
assertNoMatch: "way \"name\"=Main Glen East";
assertMatch: "way \"name\"=Main Gln East";
throwWarning: tr("Highway name contains Gln, may need to be expanded to Glen");
fixAdd: concat("name=", replace(tag("name")," Gln ", " Glen "));
}

*["name"=~/ Gly /].highway_name {
assertNoMatch: "way \"name\"=Main Gully East";
assertMatch: "way \"name\"=Main Gly East";
throwWarning: tr("Highway name contains Gly, may need to be expanded to Gully");
fixAdd: concat("name=", replace(tag("name")," Gly ", " Gully "));
}

*["name"=~/ Grg /].highway_name {
assertNoMatch: "way \"name\"=Main Grange East";
assertMatch: "way \"name\"=Main Grg East";
throwWarning: tr("Highway name contains Grg, may need to be expanded to Grange");
fixAdd: concat("name=", replace(tag("name")," Grg ", " Grange "));
}

*["name"=~/ Grn /].highway_name {
assertNoMatch: "way \"name\"=Main Green East";
assertMatch: "way \"name\"=Main Grn East";
throwWarning: tr("Highway name contains Grn, may need to be expanded to Green");
fixAdd: concat("name=", replace(tag("name")," Grn ", " Green "));
}

*["name"=~/ Grv /].highway_name {
assertNoMatch: "way \"name\"=Main Grove East";
assertMatch: "way \"name\"=Main Grv East";
throwWarning: tr("Highway name contains Grv, may need to be expanded to Grove");
fixAdd: concat("name=", replace(tag("name")," Grv ", " Grove "));
}

*["name"=~/ Gte /].highway_name {
assertNoMatch: "way \"name\"=Main Gate East";
assertMatch: "way \"name\"=Main Gte East";
throwWarning: tr("Highway name contains Gte, may need to be expanded to Gate");
fixAdd: concat("name=", replace(tag("name")," Gte ", " Gate "));
}

*["name"=~/ Head /].highway_name {
assertNoMatch: "way \"name\"=Main Head East";
assertMatch: "way \"name\"=Main Head East";
throwWarning: tr("Highway name contains Head, may need to be expanded to Head");
fixAdd: concat("name=", replace(tag("name")," Head ", " Head "));
}

*["name"=~/ Hl /].highway_name {
assertNoMatch: "way \"name\"=Main Hill East";
assertMatch: "way \"name\"=Main Hl East";
throwWarning: tr("Highway name contains Hl, may need to be expanded to Hill");
fixAdd: concat("name=", replace(tag("name")," Hl ", " Hill "));
}

*["name"=~/ Hts /].highway_name {
assertNoMatch: "way \"name\"=Main Heights East";
assertMatch: "way \"name\"=Main Hts East";
throwWarning: tr("Highway name contains Hts, may need to be expanded to Heights");
fixAdd: concat("name=", replace(tag("name")," Hts ", " Heights "));
}

*["name"=~/ Hvn /].highway_name {
assertNoMatch: "way \"name\"=Main Haven East";
assertMatch: "way \"name\"=Main Hvn East";
throwWarning: tr("Highway name contains Hvn, may need to be expanded to Haven");
fixAdd: concat("name=", replace(tag("name")," Hvn ", " Haven "));
}

*["name"=~/ Hwy /].highway_name {
assertNoMatch: "way \"name\"=Main Highway East";
assertMatch: "way \"name\"=Main Hwy East";
throwWarning: tr("Highway name contains Hwy, may need to be expanded to Highway");
fixAdd: concat("name=", replace(tag("name")," Hwy ", " Highway "));
}

*["name"=~/ Is /].highway_name {
assertNoMatch: "way \"name\"=Main Island East";
assertMatch: "way \"name\"=Main Is East";
throwWarning: tr("Highway name contains Is, may need to be expanded to Island");
fixAdd: concat("name=", replace(tag("name")," Is ", " Island "));
}

*["name"=~/ Jct /].highway_name {
assertNoMatch: "way \"name\"=Main Junction East";
assertMatch: "way \"name\"=Main Jct East";
throwWarning: tr("Highway name contains Jct, may need to be expanded to Junction");
fixAdd: concat("name=", replace(tag("name")," Jct ", " Junction "));
}

*["name"=~/ Key /].highway_name {
assertNoMatch: "way \"name\"=Main Key East";
assertMatch: "way \"name\"=Main Key East";
throwWarning: tr("Highway name contains Key, may need to be expanded to Key");
fixAdd: concat("name=", replace(tag("name")," Key ", " Key "));
}

*["name"=~/ Knob /].highway_name {
assertNoMatch: "way \"name\"=Main Knob East";
assertMatch: "way \"name\"=Main Knob East";
throwWarning: tr("Highway name contains Knob, may need to be expanded to Knob");
fixAdd: concat("name=", replace(tag("name")," Knob ", " Knob "));
}

*["name"=~/ Ladr /].highway_name {
assertNoMatch: "way \"name\"=Main Ladder East";
assertMatch: "way \"name\"=Main Ladr East";
throwWarning: tr("Highway name contains Ladr, may need to be expanded to Ladder");
fixAdd: concat("name=", replace(tag("name")," Ladr ", " Ladder "));
}

*["name"=~/ Lane /].highway_name {
assertNoMatch: "way \"name\"=Main Lane East";
assertMatch: "way \"name\"=Main Lane East";
throwWarning: tr("Highway name contains Lane, may need to be expanded to Lane");
fixAdd: concat("name=", replace(tag("name")," Lane ", " Lane "));
}

*["name"=~/ Lea /].highway_name {
assertNoMatch: "way \"name\"=Main Lea East";
assertMatch: "way \"name\"=Main Lea East";
throwWarning: tr("Highway name contains Lea, may need to be expanded to Lea");
fixAdd: concat("name=", replace(tag("name")," Lea ", " Lea "));
}

*["name"=~/ Ledr /].highway_name {
assertNoMatch: "way \"name\"=Main Leader East";
assertMatch: "way \"name\"=Main Ledr East";
throwWarning: tr("Highway name contains Ledr, may need to be expanded to Leader");
fixAdd: concat("name=", replace(tag("name")," Ledr ", " Leader "));
}

*["name"=~/ Lgh /].highway_name {
assertNoMatch: "way \"name\"=Main Leigh East";
assertMatch: "way \"name\"=Main Lgh East";
throwWarning: tr("Highway name contains Lgh, may need to be expanded to Leigh");
fixAdd: concat("name=", replace(tag("name")," Lgh ", " Leigh "));
}

*["name"=~/ Line /].highway_name {
assertNoMatch: "way \"name\"=Main Line East";
assertMatch: "way \"name\"=Main Line East";
throwWarning: tr("Highway name contains Line, may need to be expanded to Line");
fixAdd: concat("name=", replace(tag("name")," Line ", " Line "));
}

*["name"=~/ Link /].highway_name {
assertNoMatch: "way \"name\"=Main Link East";
assertMatch: "way \"name\"=Main Link East";
throwWarning: tr("Highway name contains Link, may need to be expanded to Link");
fixAdd: concat("name=", replace(tag("name")," Link ", " Link "));
}

*["name"=~/ Lkt /].highway_name {
assertNoMatch: "way \"name\"=Main Lookout East";
assertMatch: "way \"name\"=Main Lkt East";
throwWarning: tr("Highway name contains Lkt, may need to be expanded to Lookout");
fixAdd: concat("name=", replace(tag("name")," Lkt ", " Lookout "));
}

*["name"=~/ Lndg /].highway_name {
assertNoMatch: "way \"name\"=Main Landing East";
assertMatch: "way \"name\"=Main Lndg East";
throwWarning: tr("Highway name contains Lndg, may need to be expanded to Landing");
fixAdd: concat("name=", replace(tag("name")," Lndg ", " Landing "));
}

*["name"=~/ Loop /].highway_name {
assertNoMatch: "way \"name\"=Main Loop East";
assertMatch: "way \"name\"=Main Loop East";
throwWarning: tr("Highway name contains Loop, may need to be expanded to Loop");
fixAdd: concat("name=", replace(tag("name")," Loop ", " Loop "));
}

*["name"=~/ Mall /].highway_name {
assertNoMatch: "way \"name\"=Main Mall East";
assertMatch: "way \"name\"=Main Mall East";
throwWarning: tr("Highway name contains Mall, may need to be expanded to Mall");
fixAdd: concat("name=", replace(tag("name")," Mall ", " Mall "));
}

*["name"=~/ Mdws /].highway_name {
assertNoMatch: "way \"name\"=Main Meadows East";
assertMatch: "way \"name\"=Main Mdws East";
throwWarning: tr("Highway name contains Mdws, may need to be expanded to Meadows");
fixAdd: concat("name=", replace(tag("name")," Mdws ", " Meadows "));
}

*["name"=~/ Mead /].highway_name {
assertNoMatch: "way \"name\"=Main Mead East";
assertMatch: "way \"name\"=Main Mead East";
throwWarning: tr("Highway name contains Mead, may need to be expanded to Mead");
fixAdd: concat("name=", replace(tag("name")," Mead ", " Mead "));
}

*["name"=~/ Mews /].highway_name {
assertNoMatch: "way \"name\"=Main Mews East";
assertMatch: "way \"name\"=Main Mews East";
throwWarning: tr("Highway name contains Mews, may need to be expanded to Mews");
fixAdd: concat("name=", replace(tag("name")," Mews ", " Mews "));
}

*["name"=~/ Mile /].highway_name {
assertNoMatch: "way \"name\"=Main Mile East";
assertMatch: "way \"name\"=Main Mile East";
throwWarning: tr("Highway name contains Mile, may need to be expanded to Mile");
fixAdd: concat("name=", replace(tag("name")," Mile ", " Mile "));
}

*["name"=~/ Motu /].highway_name {
assertNoMatch: "way \"name\"=Main Motu East";
assertMatch: "way \"name\"=Main Motu East";
throwWarning: tr("Highway name contains Motu, may need to be expanded to Motu");
fixAdd: concat("name=", replace(tag("name")," Motu ", " Motu "));
}

*["name"=~/ Mt /].highway_name {
assertNoMatch: "way \"name\"=Main Mount East";
assertMatch: "way \"name\"=Main Mt East";
throwWarning: tr("Highway name contains Mt, may need to be expanded to Mount");
fixAdd: concat("name=", replace(tag("name")," Mt ", " Mount "));
}

*["name"=~/ Mwy /].highway_name {
assertNoMatch: "way \"name\"=Main Motorway East";
assertMatch: "way \"name\"=Main Mwy East";
throwWarning: tr("Highway name contains Mwy, may need to be expanded to Motorway");
fixAdd: concat("name=", replace(tag("name")," Mwy ", " Motorway "));
}

*["name"=~/ Nvs /].highway_name {
assertNoMatch: "way \"name\"=Main Neaves East";
assertMatch: "way \"name\"=Main Nvs East";
throwWarning: tr("Highway name contains Nvs, may need to be expanded to Neaves");
fixAdd: concat("name=", replace(tag("name")," Nvs ", " Neaves "));
}

*["name"=~/ Oaks /].highway_name {
assertNoMatch: "way \"name\"=Main Oaks East";
assertMatch: "way \"name\"=Main Oaks East";
throwWarning: tr("Highway name contains Oaks, may need to be expanded to Oaks");
fixAdd: concat("name=", replace(tag("name")," Oaks ", " Oaks "));
}

*["name"=~/ Padk /].highway_name {
assertNoMatch: "way \"name\"=Main Paddock East";
assertMatch: "way \"name\"=Main Padk East";
throwWarning: tr("Highway name contains Padk, may need to be expanded to Paddock");
fixAdd: concat("name=", replace(tag("name")," Padk ", " Paddock "));
}

*["name"=~/ Paku /].highway_name {
assertNoMatch: "way \"name\"=Main Paku East";
assertMatch: "way \"name\"=Main Paku East";
throwWarning: tr("Highway name contains Paku, may need to be expanded to Paku");
fixAdd: concat("name=", replace(tag("name")," Paku ", " Paku "));
}

*["name"=~/ Pass /].highway_name {
assertNoMatch: "way \"name\"=Main Pass East";
assertMatch: "way \"name\"=Main Pass East";
throwWarning: tr("Highway name contains Pass, may need to be expanded to Pass");
fixAdd: concat("name=", replace(tag("name")," Pass ", " Pass "));
}

*["name"=~/ Pde /].highway_name {
assertNoMatch: "way \"name\"=Main Parade East";
assertMatch: "way \"name\"=Main Pde East";
throwWarning: tr("Highway name contains Pde, may need to be expanded to Parade");
fixAdd: concat("name=", replace(tag("name")," Pde ", " Parade "));
}

*["name"=~/ Pk /].highway_name {
assertNoMatch: "way \"name\"=Main Park East";
assertMatch: "way \"name\"=Main Pk East";
throwWarning: tr("Highway name contains Pk, may need to be expanded to Park");
fixAdd: concat("name=", replace(tag("name")," Pk ", " Park "));
}

*["name"=~/ Pkwy /].highway_name {
assertNoMatch: "way \"name\"=Main Parkway East";
assertMatch: "way \"name\"=Main Pkwy East";
throwWarning: tr("Highway name contains Pkwy, may need to be expanded to Parkway");
fixAdd: concat("name=", replace(tag("name")," Pkwy ", " Parkway "));
}

*["name"=~/ Pl /].highway_name {
assertNoMatch: "way \"name\"=Main Place East";
assertMatch: "way \"name\"=Main Pl East";
throwWarning: tr("Highway name contains Pl, may need to be expanded to Place");
fixAdd: concat("name=", replace(tag("name")," Pl ", " Place "));
}

*["name"=~/ Priors /].highway_name {
assertNoMatch: "way \"name\"=Main Priors East";
assertMatch: "way \"name\"=Main Priors East";
throwWarning: tr("Highway name contains Priors, may need to be expanded to Priors");
fixAdd: concat("name=", replace(tag("name")," Priors ", " Priors "));
}

*["name"=~/ Prom /].highway_name {
assertNoMatch: "way \"name\"=Main Promenade East";
assertMatch: "way \"name\"=Main Prom East";
throwWarning: tr("Highway name contains Prom, may need to be expanded to Promenade");
fixAdd: concat("name=", replace(tag("name")," Prom ", " Promenade "));
}

*["name"=~/ Psge /].highway_name {
assertNoMatch: "way \"name\"=Main Passage East";
assertMatch: "way \"name\"=Main Psge East";
throwWarning: tr("Highway name contains Psge, may need to be expanded to Passage");
fixAdd: concat("name=", replace(tag("name")," Psge ", " Passage "));
}

*["name"=~/ Pt /].highway_name {
assertNoMatch: "way \"name\"=Main Point East";
assertMatch: "way \"name\"=Main Pt East";
throwWarning: tr("Highway name contains Pt, may need to be expanded to Point");
fixAdd: concat("name=", replace(tag("name")," Pt ", " Point "));
}

*["name"=~/ Pth /].highway_name {
assertNoMatch: "way \"name\"=Main Path East";
assertMatch: "way \"name\"=Main Pth East";
throwWarning: tr("Highway name contains Pth, may need to be expanded to Path");
fixAdd: concat("name=", replace(tag("name")," Pth ", " Path "));
}

*["name"=~/ Qdrt /].highway_name {
assertNoMatch: "way \"name\"=Main Quadrant East";
assertMatch: "way \"name\"=Main Qdrt East";
throwWarning: tr("Highway name contains Qdrt, may need to be expanded to Quadrant");
fixAdd: concat("name=", replace(tag("name")," Qdrt ", " Quadrant "));
}

*["name"=~/ Qy /].highway_name {
assertNoMatch: "way \"name\"=Main Quay East";
assertMatch: "way \"name\"=Main Qy East";
throwWarning: tr("Highway name contains Qy, may need to be expanded to Quay");
fixAdd: concat("name=", replace(tag("name")," Qy ", " Quay "));
}

*["name"=~/ Rd /].highway_name {
assertNoMatch: "way \"name\"=Main Road East";
assertMatch: "way \"name\"=Main Rd East";
throwWarning: tr("Highway name contains Rd, may need to be expanded to Road");
fixAdd: concat("name=", replace(tag("name")," Rd ", " Road "));
}

*["name"=~/ Rdge /].highway_name {
assertNoMatch: "way \"name\"=Main Ridge East";
assertMatch: "way \"name\"=Main Rdge East";
throwWarning: tr("Highway name contains Rdge, may need to be expanded to Ridge");
fixAdd: concat("name=", replace(tag("name")," Rdge ", " Ridge "));
}

*["name"=~/ Rds /].highway_name {
assertNoMatch: "way \"name\"=Main Roads East";
assertMatch: "way \"name\"=Main Rds East";
throwWarning: tr("Highway name contains Rds, may need to be expanded to Roads");
fixAdd: concat("name=", replace(tag("name")," Rds ", " Roads "));
}

*["name"=~/ Rdwy /].highway_name {
assertNoMatch: "way \"name\"=Main Roadway East";
assertMatch: "way \"name\"=Main Rdwy East";
throwWarning: tr("Highway name contains Rdwy, may need to be expanded to Roadway");
fixAdd: concat("name=", replace(tag("name")," Rdwy ", " Roadway "));
}

*["name"=~/ Reef /].highway_name {
assertNoMatch: "way \"name\"=Main Reef East";
assertMatch: "way \"name\"=Main Reef East";
throwWarning: tr("Highway name contains Reef, may need to be expanded to Reef");
fixAdd: concat("name=", replace(tag("name")," Reef ", " Reef "));
}

*["name"=~/ Res /].highway_name {
assertNoMatch: "way \"name\"=Main Reserve East";
assertMatch: "way \"name\"=Main Res East";
throwWarning: tr("Highway name contains Res, may need to be expanded to Reserve");
fixAdd: concat("name=", replace(tag("name")," Res ", " Reserve "));
}

*["name"=~/ Rest /].highway_name {
assertNoMatch: "way \"name\"=Main Rest East";
assertMatch: "way \"name\"=Main Rest East";
throwWarning: tr("Highway name contains Rest, may need to be expanded to Rest");
fixAdd: concat("name=", replace(tag("name")," Rest ", " Rest "));
}

*["name"=~/ Rise /].highway_name {
assertNoMatch: "way \"name\"=Main Rise East";
assertMatch: "way \"name\"=Main Rise East";
throwWarning: tr("Highway name contains Rise, may need to be expanded to Rise");
fixAdd: concat("name=", replace(tag("name")," Rise ", " Rise "));
}

*["name"=~/ Row /].highway_name {
assertNoMatch: "way \"name\"=Main Row East";
assertMatch: "way \"name\"=Main Row East";
throwWarning: tr("Highway name contains Row, may need to be expanded to Row");
fixAdd: concat("name=", replace(tag("name")," Row ", " Row "));
}

*["name"=~/ Rte /].highway_name {
assertNoMatch: "way \"name\"=Main Route East";
assertMatch: "way \"name\"=Main Rte East";
throwWarning: tr("Highway name contains Rte, may need to be expanded to Route");
fixAdd: concat("name=", replace(tag("name")," Rte ", " Route "));
}

*["name"=~/ Rtr /].highway_name {
assertNoMatch: "way \"name\"=Main Retreat East";
assertMatch: "way \"name\"=Main Rtr East";
throwWarning: tr("Highway name contains Rtr, may need to be expanded to Retreat");
fixAdd: concat("name=", replace(tag("name")," Rtr ", " Retreat "));
}

*["name"=~/ SH /].highway_name {
assertNoMatch: "way \"name\"=Main State Highway East";
assertMatch: "way \"name\"=Main SH East";
throwWarning: tr("Highway name contains SH, may need to be expanded to State Highway");
fixAdd: concat("name=", replace(tag("name")," SH ", " State Highway "));
}

*["name"=~/ Slp /].highway_name {
assertNoMatch: "way \"name\"=Main Slope East";
assertMatch: "way \"name\"=Main Slp East";
throwWarning: tr("Highway name contains Slp, may need to be expanded to Slope");
fixAdd: concat("name=", replace(tag("name")," Slp ", " Slope "));
}

*["name"=~/ Spa /].highway_name {
assertNoMatch: "way \"name\"=Main Spa East";
assertMatch: "way \"name\"=Main Spa East";
throwWarning: tr("Highway name contains Spa, may need to be expanded to Spa");
fixAdd: concat("name=", replace(tag("name")," Spa ", " Spa "));
}

*["name"=~/ Spur /].highway_name {
assertNoMatch: "way \"name\"=Main Spur East";
assertMatch: "way \"name\"=Main Spur East";
throwWarning: tr("Highway name contains Spur, may need to be expanded to Spur");
fixAdd: concat("name=", replace(tag("name")," Spur ", " Spur "));
}

*["name"=~/ Sq /].highway_name {
assertNoMatch: "way \"name\"=Main Square East";
assertMatch: "way \"name\"=Main Sq East";
throwWarning: tr("Highway name contains Sq, may need to be expanded to Square");
fixAdd: concat("name=", replace(tag("name")," Sq ", " Square "));
}

*["name"=~/ St /].highway_name {
assertNoMatch: "way \"name\"=Main Street East";
assertMatch: "way \"name\"=Main St East";
throwWarning: tr("Highway name contains St, may need to be expanded to Street");
fixAdd: concat("name=", replace(tag("name")," St ", " Street "));
}

*["name"=~/ Steep /].highway_name {
assertNoMatch: "way \"name\"=Main Steep East";
assertMatch: "way \"name\"=Main Steep East";
throwWarning: tr("Highway name contains Steep, may need to be expanded to Steep");
fixAdd: concat("name=", replace(tag("name")," Steep ", " Steep "));
}

*["name"=~/ Stgt /].highway_name {
assertNoMatch: "way \"name\"=Main Straight East";
assertMatch: "way \"name\"=Main Stgt East";
throwWarning: tr("Highway name contains Stgt, may need to be expanded to Straight");
fixAdd: concat("name=", replace(tag("name")," Stgt ", " Straight "));
}

*["name"=~/ Stps /].highway_name {
assertNoMatch: "way \"name\"=Main Steps East";
assertMatch: "way \"name\"=Main Stps East";
throwWarning: tr("Highway name contains Stps, may need to be expanded to Steps");
fixAdd: concat("name=", replace(tag("name")," Stps ", " Steps "));
}

*["name"=~/ Strd /].highway_name {
assertNoMatch: "way \"name\"=Main Strand East";
assertMatch: "way \"name\"=Main Strd East";
throwWarning: tr("Highway name contains Strd, may need to be expanded to Strand");
fixAdd: concat("name=", replace(tag("name")," Strd ", " Strand "));
}

*["name"=~/ Svln /].highway_name {
assertNoMatch: "way \"name\"=Main Service Lane East";
assertMatch: "way \"name\"=Main Svln East";
throwWarning: tr("Highway name contains Svln, may need to be expanded to Service Lane");
fixAdd: concat("name=", replace(tag("name")," Svln ", " Service Lane "));
}

*["name"=~/ Tce /].highway_name {
assertNoMatch: "way \"name\"=Main Terrace East";
assertMatch: "way \"name\"=Main Tce East";
throwWarning: tr("Highway name contains Tce, may need to be expanded to Terrace");
fixAdd: concat("name=", replace(tag("name")," Tce ", " Terrace "));
}

*["name"=~/ Tmwy /].highway_name {
assertNoMatch: "way \"name\"=Main Tramway East";
assertMatch: "way \"name\"=Main Tmwy East";
throwWarning: tr("Highway name contains Tmwy, may need to be expanded to Tramway");
fixAdd: concat("name=", replace(tag("name")," Tmwy ", " Tramway "));
}

*["name"=~/ Trk /].highway_name {
assertNoMatch: "way \"name\"=Main Track East";
assertMatch: "way \"name\"=Main Trk East";
throwWarning: tr("Highway name contains Trk, may need to be expanded to Track");
fixAdd: concat("name=", replace(tag("name")," Trk ", " Track "));
}

*["name"=~/ Trl /].highway_name {
assertNoMatch: "way \"name\"=Main Trail East";
assertMatch: "way \"name\"=Main Trl East";
throwWarning: tr("Highway name contains Trl, may need to be expanded to Trail");
fixAdd: concat("name=", replace(tag("name")," Trl ", " Trail "));
}

*["name"=~/ Trs /].highway_name {
assertNoMatch: "way \"name\"=Main Trees East";
assertMatch: "way \"name\"=Main Trs East";
throwWarning: tr("Highway name contains Trs, may need to be expanded to Trees");
fixAdd: concat("name=", replace(tag("name")," Trs ", " Trees "));
}

*["name"=~/ Twrs /].highway_name {
assertNoMatch: "way \"name\"=Main Towers East";
assertMatch: "way \"name\"=Main Twrs East";
throwWarning: tr("Highway name contains Twrs, may need to be expanded to Towers");
fixAdd: concat("name=", replace(tag("name")," Twrs ", " Towers "));
}

*["name"=~/ Vale /].highway_name {
assertNoMatch: "way \"name\"=Main Vale East";
assertMatch: "way \"name\"=Main Vale East";
throwWarning: tr("Highway name contains Vale, may need to be expanded to Vale");
fixAdd: concat("name=", replace(tag("name")," Vale ", " Vale "));
}

*["name"=~/ Vis /].highway_name {
assertNoMatch: "way \"name\"=Main Vista East";
assertMatch: "way \"name\"=Main Vis East";
throwWarning: tr("Highway name contains Vis, may need to be expanded to Vista");
fixAdd: concat("name=", replace(tag("name")," Vis ", " Vista "));
}

*["name"=~/ Vlg /].highway_name {
assertNoMatch: "way \"name\"=Main Village East";
assertMatch: "way \"name\"=Main Vlg East";
throwWarning: tr("Highway name contains Vlg, may need to be expanded to Village");
fixAdd: concat("name=", replace(tag("name")," Vlg ", " Village "));
}

*["name"=~/ Vlls /].highway_name {
assertNoMatch: "way \"name\"=Main Villas East";
assertMatch: "way \"name\"=Main Vlls East";
throwWarning: tr("Highway name contains Vlls, may need to be expanded to Villas");
fixAdd: concat("name=", replace(tag("name")," Vlls ", " Villas "));
}

*["name"=~/ Vly /].highway_name {
assertNoMatch: "way \"name\"=Main Valley East";
assertMatch: "way \"name\"=Main Vly East";
throwWarning: tr("Highway name contains Vly, may need to be expanded to Valley");
fixAdd: concat("name=", replace(tag("name")," Vly ", " Valley "));
}

*["name"=~/ Vnus /].highway_name {
assertNoMatch: "way \"name\"=Main Venus East";
assertMatch: "way \"name\"=Main Vnus East";
throwWarning: tr("Highway name contains Vnus, may need to be expanded to Venus");
fixAdd: concat("name=", replace(tag("name")," Vnus ", " Venus "));
}

*["name"=~/ Vue /].highway_name {
assertNoMatch: "way \"name\"=Main Vue East";
assertMatch: "way \"name\"=Main Vue East";
throwWarning: tr("Highway name contains Vue, may need to be expanded to Vue");
fixAdd: concat("name=", replace(tag("name")," Vue ", " Vue "));
}

*["name"=~/ Vw /].highway_name {
assertNoMatch: "way \"name\"=Main View East";
assertMatch: "way \"name\"=Main Vw East";
throwWarning: tr("Highway name contains Vw, may need to be expanded to View");
fixAdd: concat("name=", replace(tag("name")," Vw ", " View "));
}

*["name"=~/ Vws /].highway_name {
assertNoMatch: "way \"name\"=Main Views East";
assertMatch: "way \"name\"=Main Vws East";
throwWarning: tr("Highway name contains Vws, may need to be expanded to Views");
fixAdd: concat("name=", replace(tag("name")," Vws ", " Views "));
}

*["name"=~/ Waters /].highway_name {
assertNoMatch: "way \"name\"=Main Waters East";
assertMatch: "way \"name\"=Main Waters East";
throwWarning: tr("Highway name contains Waters, may need to be expanded to Waters");
fixAdd: concat("name=", replace(tag("name")," Waters ", " Waters "));
}

*["name"=~/ Way /].highway_name {
assertNoMatch: "way \"name\"=Main Way East";
assertMatch: "way \"name\"=Main Way East";
throwWarning: tr("Highway name contains Way, may need to be expanded to Way");
fixAdd: concat("name=", replace(tag("name")," Way ", " Way "));
}

*["name"=~/ Whrf /].highway_name {
assertNoMatch: "way \"name\"=Main Wharf East";
assertMatch: "way \"name\"=Main Whrf East";
throwWarning: tr("Highway name contains Whrf, may need to be expanded to Wharf");
fixAdd: concat("name=", replace(tag("name")," Whrf ", " Wharf "));
}

*["name"=~/ Wlk /].highway_name {
assertNoMatch: "way \"name\"=Main Walk East";
assertMatch: "way \"name\"=Main Wlk East";
throwWarning: tr("Highway name contains Wlk, may need to be expanded to Walk");
fixAdd: concat("name=", replace(tag("name")," Wlk ", " Walk "));
}

*["name"=~/ Wynd /].highway_name {
assertNoMatch: "way \"name\"=Main Wynd East";
assertMatch: "way \"name\"=Main Wynd East";
throwWarning: tr("Highway name contains Wynd, may need to be expanded to Wynd");
fixAdd: concat("name=", replace(tag("name")," Wynd ", " Wynd "));
}

*["addr:street"]["addr:street"=~/ Accs\. /] {
assertNoMatch: "way \"addr:street\"=Main Access East";
assertMatch: "way \"addr:street\"=Main Accs East";
throwWarning: tr("addr:street={0} contains ' Accs. ', should likely be expanded to Access","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Accs. ", " Access "));
group: tr("addr:street contains Accs, should likely be expanded to Access");
}

*["addr:street"]["addr:street"=~/ Accswy\. /] {
assertNoMatch: "way \"addr:street\"=Main Accessway East";
assertMatch: "way \"addr:street\"=Main Accswy East";
throwWarning: tr("addr:street={0} contains ' Accswy. ', should likely be expanded to Accessway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Accswy. ", " Accessway "));
group: tr("addr:street contains Accswy, should likely be expanded to Accessway");
}

*["addr:street"]["addr:street"=~/ Aly\. /] {
assertNoMatch: "way \"addr:street\"=Main Alley East";
assertMatch: "way \"addr:street\"=Main Aly East";
throwWarning: tr("addr:street={0} contains ' Aly. ', should likely be expanded to Alley","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Aly. ", " Alley "));
group: tr("addr:street contains Aly, should likely be expanded to Alley");
}

*["addr:street"]["addr:street"=~/ Ancg\. /] {
assertNoMatch: "way \"addr:street\"=Main Anchorage East";
assertMatch: "way \"addr:street\"=Main Ancg East";
throwWarning: tr("addr:street={0} contains ' Ancg. ', should likely be expanded to Anchorage","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ancg. ", " Anchorage "));
group: tr("addr:street contains Ancg, should likely be expanded to Anchorage");
}

*["addr:street"]["addr:street"=~/ App\. /] {
assertNoMatch: "way \"addr:street\"=Main Approach East";
assertMatch: "way \"addr:street\"=Main App East";
throwWarning: tr("addr:street={0} contains ' App. ', should likely be expanded to Approach","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," App. ", " Approach "));
group: tr("addr:street contains App, should likely be expanded to Approach");
}

*["addr:street"]["addr:street"=~/ Arc\. /] {
assertNoMatch: "way \"addr:street\"=Main Arcade East";
assertMatch: "way \"addr:street\"=Main Arc East";
throwWarning: tr("addr:street={0} contains ' Arc. ', should likely be expanded to Arcade","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Arc. ", " Arcade "));
group: tr("addr:street contains Arc, should likely be expanded to Arcade");
}

*["addr:street"]["addr:street"=~/ Arch\. /] {
assertNoMatch: "way \"addr:street\"=Main Arch East";
assertMatch: "way \"addr:street\"=Main Arch East";
throwWarning: tr("addr:street={0} contains ' Arch. ', should likely be expanded to Arch","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Arch. ", " Arch "));
group: tr("addr:street contains Arch, should likely be expanded to Arch");
}

*["addr:street"]["addr:street"=~/ Ave\. /] {
assertNoMatch: "way \"addr:street\"=Main Avenue East";
assertMatch: "way \"addr:street\"=Main Ave East";
throwWarning: tr("addr:street={0} contains ' Ave. ', should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ave. ", " Avenue "));
group: tr("addr:street contains Ave, should likely be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/ Bank\. /] {
assertNoMatch: "way \"addr:street\"=Main Bank East";
assertMatch: "way \"addr:street\"=Main Bank East";
throwWarning: tr("addr:street={0} contains ' Bank. ', should likely be expanded to Bank","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bank. ", " Bank "));
group: tr("addr:street contains Bank, should likely be expanded to Bank");
}

*["addr:street"]["addr:street"=~/ Bay\. /] {
assertNoMatch: "way \"addr:street\"=Main Bay East";
assertMatch: "way \"addr:street\"=Main Bay East";
throwWarning: tr("addr:street={0} contains ' Bay. ', should likely be expanded to Bay","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bay. ", " Bay "));
group: tr("addr:street contains Bay, should likely be expanded to Bay");
}

*["addr:street"]["addr:street"=~/ Bch\. /] {
assertNoMatch: "way \"addr:street\"=Main Beach East";
assertMatch: "way \"addr:street\"=Main Bch East";
throwWarning: tr("addr:street={0} contains ' Bch. ', should likely be expanded to Beach","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bch. ", " Beach "));
group: tr("addr:street contains Bch, should likely be expanded to Beach");
}

*["addr:street"]["addr:street"=~/ Belt\. /] {
assertNoMatch: "way \"addr:street\"=Main Belt East";
assertMatch: "way \"addr:street\"=Main Belt East";
throwWarning: tr("addr:street={0} contains ' Belt. ', should likely be expanded to Belt","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Belt. ", " Belt "));
group: tr("addr:street contains Belt, should likely be expanded to Belt");
}

*["addr:street"]["addr:street"=~/ Blf\. /] {
assertNoMatch: "way \"addr:street\"=Main Bluff East";
assertMatch: "way \"addr:street\"=Main Blf East";
throwWarning: tr("addr:street={0} contains ' Blf. ', should likely be expanded to Bluff","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Blf. ", " Bluff "));
group: tr("addr:street contains Blf, should likely be expanded to Bluff");
}

*["addr:street"]["addr:street"=~/ Blvd\. /] {
assertNoMatch: "way \"addr:street\"=Main Boulevard East";
assertMatch: "way \"addr:street\"=Main Blvd East";
throwWarning: tr("addr:street={0} contains ' Blvd. ', should likely be expanded to Boulevard","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Blvd. ", " Boulevard "));
group: tr("addr:street contains Blvd, should likely be expanded to Boulevard");
}

*["addr:street"]["addr:street"=~/ Bnd\. /] {
assertNoMatch: "way \"addr:street\"=Main Bend East";
assertMatch: "way \"addr:street\"=Main Bnd East";
throwWarning: tr("addr:street={0} contains ' Bnd. ', should likely be expanded to Bend","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bnd. ", " Bend "));
group: tr("addr:street contains Bnd, should likely be expanded to Bend");
}

*["addr:street"]["addr:street"=~/ Brae\. /] {
assertNoMatch: "way \"addr:street\"=Main Brae East";
assertMatch: "way \"addr:street\"=Main Brae East";
throwWarning: tr("addr:street={0} contains ' Brae. ', should likely be expanded to Brae","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Brae. ", " Brae "));
group: tr("addr:street contains Brae, should likely be expanded to Brae");
}

*["addr:street"]["addr:street"=~/ Brg\. /] {
assertNoMatch: "way \"addr:street\"=Main Bridge East";
assertMatch: "way \"addr:street\"=Main Brg East";
throwWarning: tr("addr:street={0} contains ' Brg. ', should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Brg. ", " Bridge "));
group: tr("addr:street contains Brg, should likely be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/ Briars\. /] {
assertNoMatch: "way \"addr:street\"=Main Briars East";
assertMatch: "way \"addr:street\"=Main Briars East";
throwWarning: tr("addr:street={0} contains ' Briars. ', should likely be expanded to Briars","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Briars. ", " Briars "));
group: tr("addr:street contains Briars, should likely be expanded to Briars");
}

*["addr:street"]["addr:street"=~/ Byp\. /] {
assertNoMatch: "way \"addr:street\"=Main Bypass East";
assertMatch: "way \"addr:street\"=Main Byp East";
throwWarning: tr("addr:street={0} contains ' Byp. ', should likely be expanded to Bypass","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Byp. ", " Bypass "));
group: tr("addr:street contains Byp, should likely be expanded to Bypass");
}

*["addr:street"]["addr:street"=~/ Ch\. /] {
assertNoMatch: "way \"addr:street\"=Main Chase East";
assertMatch: "way \"addr:street\"=Main Ch East";
throwWarning: tr("addr:street={0} contains ' Ch. ', should likely be expanded to Chase","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ch. ", " Chase "));
group: tr("addr:street contains Ch, should likely be expanded to Chase");
}

*["addr:street"]["addr:street"=~/ Cir\. /] {
assertNoMatch: "way \"addr:street\"=Main Circle East";
assertMatch: "way \"addr:street\"=Main Cir East";
throwWarning: tr("addr:street={0} contains ' Cir. ', should likely be expanded to Circle","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cir. ", " Circle "));
group: tr("addr:street contains Cir, should likely be expanded to Circle");
}

*["addr:street"]["addr:street"=~/ Cl\. /] {
assertNoMatch: "way \"addr:street\"=Main Close East";
assertMatch: "way \"addr:street\"=Main Cl East";
throwWarning: tr("addr:street={0} contains ' Cl. ', should likely be expanded to Close","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cl. ", " Close "));
group: tr("addr:street contains Cl, should likely be expanded to Close");
}

*["addr:street"]["addr:street"=~/ Clm\. /] {
assertNoMatch: "way \"addr:street\"=Main Claim East";
assertMatch: "way \"addr:street\"=Main Clm East";
throwWarning: tr("addr:street={0} contains ' Clm. ', should likely be expanded to Claim","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Clm. ", " Claim "));
group: tr("addr:street contains Clm, should likely be expanded to Claim");
}

*["addr:street"]["addr:street"=~/ Cmn\. /] {
assertNoMatch: "way \"addr:street\"=Main Common East";
assertMatch: "way \"addr:street\"=Main Cmn East";
throwWarning: tr("addr:street={0} contains ' Cmn. ', should likely be expanded to Common","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cmn. ", " Common "));
group: tr("addr:street contains Cmn, should likely be expanded to Common");
}

*["addr:street"]["addr:street"=~/ Crcs\. /] {
assertNoMatch: "way \"addr:street\"=Main Circus East";
assertMatch: "way \"addr:street\"=Main Crcs East";
throwWarning: tr("addr:street={0} contains ' Crcs. ', should likely be expanded to Circus","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Crcs. ", " Circus "));
group: tr("addr:street contains Crcs, should likely be expanded to Circus");
}

*["addr:street"]["addr:street"=~/ Cres\. /] {
assertNoMatch: "way \"addr:street\"=Main Crescent East";
assertMatch: "way \"addr:street\"=Main Cres East";
throwWarning: tr("addr:street={0} contains ' Cres. ', should likely be expanded to Crescent","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cres. ", " Crescent "));
group: tr("addr:street contains Cres, should likely be expanded to Crescent");
}

*["addr:street"]["addr:street"=~/ Crk\. /] {
assertNoMatch: "way \"addr:street\"=Main Creek East";
assertMatch: "way \"addr:street\"=Main Crk East";
throwWarning: tr("addr:street={0} contains ' Crk. ', should likely be expanded to Creek","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Crk. ", " Creek "));
group: tr("addr:street contains Crk, should likely be expanded to Creek");
}

*["addr:street"]["addr:street"=~/ Crst\. /] {
assertNoMatch: "way \"addr:street\"=Main Crest East";
assertMatch: "way \"addr:street\"=Main Crst East";
throwWarning: tr("addr:street={0} contains ' Crst. ', should likely be expanded to Crest","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Crst. ", " Crest "));
group: tr("addr:street contains Crst, should likely be expanded to Crest");
}

*["addr:street"]["addr:street"=~/ Crt\. /] {
assertNoMatch: "way \"addr:street\"=Main Court East";
assertMatch: "way \"addr:street\"=Main Crt East";
throwWarning: tr("addr:street={0} contains ' Crt. ', should likely be expanded to Court","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Crt. ", " Court "));
group: tr("addr:street contains Crt, should likely be expanded to Court");
}

*["addr:street"]["addr:street"=~/ Crts\. /] {
assertNoMatch: "way \"addr:street\"=Main Courts East";
assertMatch: "way \"addr:street\"=Main Crts East";
throwWarning: tr("addr:street={0} contains ' Crts. ', should likely be expanded to Courts","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Crts. ", " Courts "));
group: tr("addr:street contains Crts, should likely be expanded to Courts");
}

*["addr:street"]["addr:street"=~/ Ctr\. /] {
assertNoMatch: "way \"addr:street\"=Main Centre East";
assertMatch: "way \"addr:street\"=Main Ctr East";
throwWarning: tr("addr:street={0} contains ' Ctr. ', should likely be expanded to Centre","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ctr. ", " Centre "));
group: tr("addr:street contains Ctr, should likely be expanded to Centre");
}

*["addr:street"]["addr:street"=~/ Cul\. /] {
assertNoMatch: "way \"addr:street\"=Main Cul East";
assertMatch: "way \"addr:street\"=Main Cul East";
throwWarning: tr("addr:street={0} contains ' Cul. ', should likely be expanded to Cul","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cul. ", " Cul "));
group: tr("addr:street contains Cul, should likely be expanded to Cul");
}

*["addr:street"]["addr:street"=~/ Cv\. /] {
assertNoMatch: "way \"addr:street\"=Main Cove East";
assertMatch: "way \"addr:street\"=Main Cv East";
throwWarning: tr("addr:street={0} contains ' Cv. ', should likely be expanded to Cove","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cv. ", " Cove "));
group: tr("addr:street contains Cv, should likely be expanded to Cove");
}

*["addr:street"]["addr:street"=~/ Del\. /] {
assertNoMatch: "way \"addr:street\"=Main Dell East";
assertMatch: "way \"addr:street\"=Main Del East";
throwWarning: tr("addr:street={0} contains ' Del. ', should likely be expanded to Dell","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Del. ", " Dell "));
group: tr("addr:street contains Del, should likely be expanded to Dell");
}

*["addr:street"]["addr:street"=~/ Dle\. /] {
assertNoMatch: "way \"addr:street\"=Main Dale East";
assertMatch: "way \"addr:street\"=Main Dle East";
throwWarning: tr("addr:street={0} contains ' Dle. ', should likely be expanded to Dale","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Dle. ", " Dale "));
group: tr("addr:street contains Dle, should likely be expanded to Dale");
}

*["addr:street"]["addr:street"=~/ Downs\. /] {
assertNoMatch: "way \"addr:street\"=Main Downs East";
assertMatch: "way \"addr:street\"=Main Downs East";
throwWarning: tr("addr:street={0} contains ' Downs. ', should likely be expanded to Downs","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Downs. ", " Downs "));
group: tr("addr:street contains Downs, should likely be expanded to Downs");
}

*["addr:street"]["addr:street"=~/ Dr\. /] {
assertNoMatch: "way \"addr:street\"=Main Drive East";
assertMatch: "way \"addr:street\"=Main Dr East";
throwWarning: tr("addr:street={0} contains ' Dr. ', should likely be expanded to Drive","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Dr. ", " Drive "));
group: tr("addr:street contains Dr, should likely be expanded to Drive");
}

*["addr:street"]["addr:street"=~/ Dune\. /] {
assertNoMatch: "way \"addr:street\"=Main Dune East";
assertMatch: "way \"addr:street\"=Main Dune East";
throwWarning: tr("addr:street={0} contains ' Dune. ', should likely be expanded to Dune","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Dune. ", " Dune "));
group: tr("addr:street contains Dune, should likely be expanded to Dune");
}

*["addr:street"]["addr:street"=~/ Dvn\. /] {
assertNoMatch: "way \"addr:street\"=Main Deviation East";
assertMatch: "way \"addr:street\"=Main Dvn East";
throwWarning: tr("addr:street={0} contains ' Dvn. ', should likely be expanded to Deviation","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Dvn. ", " Deviation "));
group: tr("addr:street contains Dvn, should likely be expanded to Deviation");
}

*["addr:street"]["addr:street"=~/ Elm\. /] {
assertNoMatch: "way \"addr:street\"=Main Elm East";
assertMatch: "way \"addr:street\"=Main Elm East";
throwWarning: tr("addr:street={0} contains ' Elm. ', should likely be expanded to Elm","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Elm. ", " Elm "));
group: tr("addr:street contains Elm, should likely be expanded to Elm");
}

*["addr:street"]["addr:street"=~/ End\. /] {
assertNoMatch: "way \"addr:street\"=Main End East";
assertMatch: "way \"addr:street\"=Main End East";
throwWarning: tr("addr:street={0} contains ' End. ', should likely be expanded to End","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," End. ", " End "));
group: tr("addr:street contains End, should likely be expanded to End");
}

*["addr:street"]["addr:street"=~/ Ent\. /] {
assertNoMatch: "way \"addr:street\"=Main Entrance East";
assertMatch: "way \"addr:street\"=Main Ent East";
throwWarning: tr("addr:street={0} contains ' Ent. ', should likely be expanded to Entrance","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ent. ", " Entrance "));
group: tr("addr:street contains Ent, should likely be expanded to Entrance");
}

*["addr:street"]["addr:street"=~/ Esp\. /] {
assertNoMatch: "way \"addr:street\"=Main Esplanade East";
assertMatch: "way \"addr:street\"=Main Esp East";
throwWarning: tr("addr:street={0} contains ' Esp. ', should likely be expanded to Esplanade","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Esp. ", " Esplanade "));
group: tr("addr:street contains Esp, should likely be expanded to Esplanade");
}

*["addr:street"]["addr:street"=~/ Est\. /] {
assertNoMatch: "way \"addr:street\"=Main Estate East";
assertMatch: "way \"addr:street\"=Main Est East";
throwWarning: tr("addr:street={0} contains ' Est. ', should likely be expanded to Estate","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Est. ", " Estate "));
group: tr("addr:street contains Est, should likely be expanded to Estate");
}

*["addr:street"]["addr:street"=~/ Fall\. /] {
assertNoMatch: "way \"addr:street\"=Main Fall East";
assertMatch: "way \"addr:street\"=Main Fall East";
throwWarning: tr("addr:street={0} contains ' Fall. ', should likely be expanded to Fall","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fall. ", " Fall "));
group: tr("addr:street contains Fall, should likely be expanded to Fall");
}

*["addr:street"]["addr:street"=~/ Fare\. /] {
assertNoMatch: "way \"addr:street\"=Main Fare East";
assertMatch: "way \"addr:street\"=Main Fare East";
throwWarning: tr("addr:street={0} contains ' Fare. ', should likely be expanded to Fare","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fare. ", " Fare "));
group: tr("addr:street contains Fare, should likely be expanded to Fare");
}

*["addr:street"]["addr:street"=~/ Fawy\. /] {
assertNoMatch: "way \"addr:street\"=Main Fairway East";
assertMatch: "way \"addr:street\"=Main Fawy East";
throwWarning: tr("addr:street={0} contains ' Fawy. ', should likely be expanded to Fairway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fawy. ", " Fairway "));
group: tr("addr:street contains Fawy, should likely be expanded to Fairway");
}

*["addr:street"]["addr:street"=~/ Fen\. /] {
assertNoMatch: "way \"addr:street\"=Main Fen East";
assertMatch: "way \"addr:street\"=Main Fen East";
throwWarning: tr("addr:street={0} contains ' Fen. ', should likely be expanded to Fen","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fen. ", " Fen "));
group: tr("addr:street contains Fen, should likely be expanded to Fen");
}

*["addr:street"]["addr:street"=~/ Fern\. /] {
assertNoMatch: "way \"addr:street\"=Main Fern East";
assertMatch: "way \"addr:street\"=Main Fern East";
throwWarning: tr("addr:street={0} contains ' Fern. ', should likely be expanded to Fern","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fern. ", " Fern "));
group: tr("addr:street contains Fern, should likely be expanded to Fern");
}

*["addr:street"]["addr:street"=~/ Flt\. /] {
assertNoMatch: "way \"addr:street\"=Main Flat East";
assertMatch: "way \"addr:street\"=Main Flt East";
throwWarning: tr("addr:street={0} contains ' Flt. ', should likely be expanded to Flat","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Flt. ", " Flat "));
group: tr("addr:street contains Flt, should likely be expanded to Flat");
}

*["addr:street"]["addr:street"=~/ Flts\. /] {
assertNoMatch: "way \"addr:street\"=Main Flats East";
assertMatch: "way \"addr:street\"=Main Flts East";
throwWarning: tr("addr:street={0} contains ' Flts. ', should likely be expanded to Flats","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Flts. ", " Flats "));
group: tr("addr:street contains Flts, should likely be expanded to Flats");
}

*["addr:street"]["addr:street"=~/ Frms\. /] {
assertNoMatch: "way \"addr:street\"=Main Farms East";
assertMatch: "way \"addr:street\"=Main Frms East";
throwWarning: tr("addr:street={0} contains ' Frms. ', should likely be expanded to Farms","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Frms. ", " Farms "));
group: tr("addr:street contains Frms, should likely be expanded to Farms");
}

*["addr:street"]["addr:street"=~/ Gdn\. /] {
assertNoMatch: "way \"addr:street\"=Main Garden East";
assertMatch: "way \"addr:street\"=Main Gdn East";
throwWarning: tr("addr:street={0} contains ' Gdn. ', should likely be expanded to Garden","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gdn. ", " Garden "));
group: tr("addr:street contains Gdn, should likely be expanded to Garden");
}

*["addr:street"]["addr:street"=~/ Gdns\. /] {
assertNoMatch: "way \"addr:street\"=Main Gardens East";
assertMatch: "way \"addr:street\"=Main Gdns East";
throwWarning: tr("addr:street={0} contains ' Gdns. ', should likely be expanded to Gardens","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gdns. ", " Gardens "));
group: tr("addr:street contains Gdns, should likely be expanded to Gardens");
}

*["addr:street"]["addr:street"=~/ Gld\. /] {
assertNoMatch: "way \"addr:street\"=Main Glade East";
assertMatch: "way \"addr:street\"=Main Gld East";
throwWarning: tr("addr:street={0} contains ' Gld. ', should likely be expanded to Glade","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gld. ", " Glade "));
group: tr("addr:street contains Gld, should likely be expanded to Glade");
}

*["addr:street"]["addr:street"=~/ Gln\. /] {
assertNoMatch: "way \"addr:street\"=Main Glen East";
assertMatch: "way \"addr:street\"=Main Gln East";
throwWarning: tr("addr:street={0} contains ' Gln. ', should likely be expanded to Glen","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gln. ", " Glen "));
group: tr("addr:street contains Gln, should likely be expanded to Glen");
}

*["addr:street"]["addr:street"=~/ Gly\. /] {
assertNoMatch: "way \"addr:street\"=Main Gully East";
assertMatch: "way \"addr:street\"=Main Gly East";
throwWarning: tr("addr:street={0} contains ' Gly. ', should likely be expanded to Gully","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gly. ", " Gully "));
group: tr("addr:street contains Gly, should likely be expanded to Gully");
}

*["addr:street"]["addr:street"=~/ Grg\. /] {
assertNoMatch: "way \"addr:street\"=Main Grange East";
assertMatch: "way \"addr:street\"=Main Grg East";
throwWarning: tr("addr:street={0} contains ' Grg. ', should likely be expanded to Grange","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Grg. ", " Grange "));
group: tr("addr:street contains Grg, should likely be expanded to Grange");
}

*["addr:street"]["addr:street"=~/ Grn\. /] {
assertNoMatch: "way \"addr:street\"=Main Green East";
assertMatch: "way \"addr:street\"=Main Grn East";
throwWarning: tr("addr:street={0} contains ' Grn. ', should likely be expanded to Green","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Grn. ", " Green "));
group: tr("addr:street contains Grn, should likely be expanded to Green");
}

*["addr:street"]["addr:street"=~/ Grv\. /] {
assertNoMatch: "way \"addr:street\"=Main Grove East";
assertMatch: "way \"addr:street\"=Main Grv East";
throwWarning: tr("addr:street={0} contains ' Grv. ', should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Grv. ", " Grove "));
group: tr("addr:street contains Grv, should likely be expanded to Grove");
}

*["addr:street"]["addr:street"=~/ Gte\. /] {
assertNoMatch: "way \"addr:street\"=Main Gate East";
assertMatch: "way \"addr:street\"=Main Gte East";
throwWarning: tr("addr:street={0} contains ' Gte. ', should likely be expanded to Gate","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gte. ", " Gate "));
group: tr("addr:street contains Gte, should likely be expanded to Gate");
}

*["addr:street"]["addr:street"=~/ Head\. /] {
assertNoMatch: "way \"addr:street\"=Main Head East";
assertMatch: "way \"addr:street\"=Main Head East";
throwWarning: tr("addr:street={0} contains ' Head. ', should likely be expanded to Head","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Head. ", " Head "));
group: tr("addr:street contains Head, should likely be expanded to Head");
}

*["addr:street"]["addr:street"=~/ Hl\. /] {
assertNoMatch: "way \"addr:street\"=Main Hill East";
assertMatch: "way \"addr:street\"=Main Hl East";
throwWarning: tr("addr:street={0} contains ' Hl. ', should likely be expanded to Hill","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hl. ", " Hill "));
group: tr("addr:street contains Hl, should likely be expanded to Hill");
}

*["addr:street"]["addr:street"=~/ Hts\. /] {
assertNoMatch: "way \"addr:street\"=Main Heights East";
assertMatch: "way \"addr:street\"=Main Hts East";
throwWarning: tr("addr:street={0} contains ' Hts. ', should likely be expanded to Heights","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hts. ", " Heights "));
group: tr("addr:street contains Hts, should likely be expanded to Heights");
}

*["addr:street"]["addr:street"=~/ Hvn\. /] {
assertNoMatch: "way \"addr:street\"=Main Haven East";
assertMatch: "way \"addr:street\"=Main Hvn East";
throwWarning: tr("addr:street={0} contains ' Hvn. ', should likely be expanded to Haven","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hvn. ", " Haven "));
group: tr("addr:street contains Hvn, should likely be expanded to Haven");
}

*["addr:street"]["addr:street"=~/ Hwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Highway East";
assertMatch: "way \"addr:street\"=Main Hwy East";
throwWarning: tr("addr:street={0} contains ' Hwy. ', should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hwy. ", " Highway "));
group: tr("addr:street contains Hwy, should likely be expanded to Highway");
}

*["addr:street"]["addr:street"=~/ Is\. /] {
assertNoMatch: "way \"addr:street\"=Main Island East";
assertMatch: "way \"addr:street\"=Main Is East";
throwWarning: tr("addr:street={0} contains ' Is. ', should likely be expanded to Island","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Is. ", " Island "));
group: tr("addr:street contains Is, should likely be expanded to Island");
}

*["addr:street"]["addr:street"=~/ Jct\. /] {
assertNoMatch: "way \"addr:street\"=Main Junction East";
assertMatch: "way \"addr:street\"=Main Jct East";
throwWarning: tr("addr:street={0} contains ' Jct. ', should likely be expanded to Junction","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Jct. ", " Junction "));
group: tr("addr:street contains Jct, should likely be expanded to Junction");
}

*["addr:street"]["addr:street"=~/ Key\. /] {
assertNoMatch: "way \"addr:street\"=Main Key East";
assertMatch: "way \"addr:street\"=Main Key East";
throwWarning: tr("addr:street={0} contains ' Key. ', should likely be expanded to Key","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Key. ", " Key "));
group: tr("addr:street contains Key, should likely be expanded to Key");
}

*["addr:street"]["addr:street"=~/ Knob\. /] {
assertNoMatch: "way \"addr:street\"=Main Knob East";
assertMatch: "way \"addr:street\"=Main Knob East";
throwWarning: tr("addr:street={0} contains ' Knob. ', should likely be expanded to Knob","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Knob. ", " Knob "));
group: tr("addr:street contains Knob, should likely be expanded to Knob");
}

*["addr:street"]["addr:street"=~/ Ladr\. /] {
assertNoMatch: "way \"addr:street\"=Main Ladder East";
assertMatch: "way \"addr:street\"=Main Ladr East";
throwWarning: tr("addr:street={0} contains ' Ladr. ', should likely be expanded to Ladder","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ladr. ", " Ladder "));
group: tr("addr:street contains Ladr, should likely be expanded to Ladder");
}

*["addr:street"]["addr:street"=~/ Lane\. /] {
assertNoMatch: "way \"addr:street\"=Main Lane East";
assertMatch: "way \"addr:street\"=Main Lane East";
throwWarning: tr("addr:street={0} contains ' Lane. ', should likely be expanded to Lane","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lane. ", " Lane "));
group: tr("addr:street contains Lane, should likely be expanded to Lane");
}

*["addr:street"]["addr:street"=~/ Lea\. /] {
assertNoMatch: "way \"addr:street\"=Main Lea East";
assertMatch: "way \"addr:street\"=Main Lea East";
throwWarning: tr("addr:street={0} contains ' Lea. ', should likely be expanded to Lea","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lea. ", " Lea "));
group: tr("addr:street contains Lea, should likely be expanded to Lea");
}

*["addr:street"]["addr:street"=~/ Ledr\. /] {
assertNoMatch: "way \"addr:street\"=Main Leader East";
assertMatch: "way \"addr:street\"=Main Ledr East";
throwWarning: tr("addr:street={0} contains ' Ledr. ', should likely be expanded to Leader","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ledr. ", " Leader "));
group: tr("addr:street contains Ledr, should likely be expanded to Leader");
}

*["addr:street"]["addr:street"=~/ Lgh\. /] {
assertNoMatch: "way \"addr:street\"=Main Leigh East";
assertMatch: "way \"addr:street\"=Main Lgh East";
throwWarning: tr("addr:street={0} contains ' Lgh. ', should likely be expanded to Leigh","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lgh. ", " Leigh "));
group: tr("addr:street contains Lgh, should likely be expanded to Leigh");
}

*["addr:street"]["addr:street"=~/ Line\. /] {
assertNoMatch: "way \"addr:street\"=Main Line East";
assertMatch: "way \"addr:street\"=Main Line East";
throwWarning: tr("addr:street={0} contains ' Line. ', should likely be expanded to Line","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Line. ", " Line "));
group: tr("addr:street contains Line, should likely be expanded to Line");
}

*["addr:street"]["addr:street"=~/ Link\. /] {
assertNoMatch: "way \"addr:street\"=Main Link East";
assertMatch: "way \"addr:street\"=Main Link East";
throwWarning: tr("addr:street={0} contains ' Link. ', should likely be expanded to Link","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Link. ", " Link "));
group: tr("addr:street contains Link, should likely be expanded to Link");
}

*["addr:street"]["addr:street"=~/ Lkt\. /] {
assertNoMatch: "way \"addr:street\"=Main Lookout East";
assertMatch: "way \"addr:street\"=Main Lkt East";
throwWarning: tr("addr:street={0} contains ' Lkt. ', should likely be expanded to Lookout","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lkt. ", " Lookout "));
group: tr("addr:street contains Lkt, should likely be expanded to Lookout");
}

*["addr:street"]["addr:street"=~/ Lndg\. /] {
assertNoMatch: "way \"addr:street\"=Main Landing East";
assertMatch: "way \"addr:street\"=Main Lndg East";
throwWarning: tr("addr:street={0} contains ' Lndg. ', should likely be expanded to Landing","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lndg. ", " Landing "));
group: tr("addr:street contains Lndg, should likely be expanded to Landing");
}

*["addr:street"]["addr:street"=~/ Loop\. /] {
assertNoMatch: "way \"addr:street\"=Main Loop East";
assertMatch: "way \"addr:street\"=Main Loop East";
throwWarning: tr("addr:street={0} contains ' Loop. ', should likely be expanded to Loop","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Loop. ", " Loop "));
group: tr("addr:street contains Loop, should likely be expanded to Loop");
}

*["addr:street"]["addr:street"=~/ Mall\. /] {
assertNoMatch: "way \"addr:street\"=Main Mall East";
assertMatch: "way \"addr:street\"=Main Mall East";
throwWarning: tr("addr:street={0} contains ' Mall. ', should likely be expanded to Mall","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mall. ", " Mall "));
group: tr("addr:street contains Mall, should likely be expanded to Mall");
}

*["addr:street"]["addr:street"=~/ Mdws\. /] {
assertNoMatch: "way \"addr:street\"=Main Meadows East";
assertMatch: "way \"addr:street\"=Main Mdws East";
throwWarning: tr("addr:street={0} contains ' Mdws. ', should likely be expanded to Meadows","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mdws. ", " Meadows "));
group: tr("addr:street contains Mdws, should likely be expanded to Meadows");
}

*["addr:street"]["addr:street"=~/ Mead\. /] {
assertNoMatch: "way \"addr:street\"=Main Mead East";
assertMatch: "way \"addr:street\"=Main Mead East";
throwWarning: tr("addr:street={0} contains ' Mead. ', should likely be expanded to Mead","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mead. ", " Mead "));
group: tr("addr:street contains Mead, should likely be expanded to Mead");
}

*["addr:street"]["addr:street"=~/ Mews\. /] {
assertNoMatch: "way \"addr:street\"=Main Mews East";
assertMatch: "way \"addr:street\"=Main Mews East";
throwWarning: tr("addr:street={0} contains ' Mews. ', should likely be expanded to Mews","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mews. ", " Mews "));
group: tr("addr:street contains Mews, should likely be expanded to Mews");
}

*["addr:street"]["addr:street"=~/ Mile\. /] {
assertNoMatch: "way \"addr:street\"=Main Mile East";
assertMatch: "way \"addr:street\"=Main Mile East";
throwWarning: tr("addr:street={0} contains ' Mile. ', should likely be expanded to Mile","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mile. ", " Mile "));
group: tr("addr:street contains Mile, should likely be expanded to Mile");
}

*["addr:street"]["addr:street"=~/ Motu\. /] {
assertNoMatch: "way \"addr:street\"=Main Motu East";
assertMatch: "way \"addr:street\"=Main Motu East";
throwWarning: tr("addr:street={0} contains ' Motu. ', should likely be expanded to Motu","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Motu. ", " Motu "));
group: tr("addr:street contains Motu, should likely be expanded to Motu");
}

*["addr:street"]["addr:street"=~/ Mt\. /] {
assertNoMatch: "way \"addr:street\"=Main Mount East";
assertMatch: "way \"addr:street\"=Main Mt East";
throwWarning: tr("addr:street={0} contains ' Mt. ', should likely be expanded to Mount","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mt. ", " Mount "));
group: tr("addr:street contains Mt, should likely be expanded to Mount");
}

*["addr:street"]["addr:street"=~/ Mwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Motorway East";
assertMatch: "way \"addr:street\"=Main Mwy East";
throwWarning: tr("addr:street={0} contains ' Mwy. ', should likely be expanded to Motorway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mwy. ", " Motorway "));
group: tr("addr:street contains Mwy, should likely be expanded to Motorway");
}

*["addr:street"]["addr:street"=~/ Nvs\. /] {
assertNoMatch: "way \"addr:street\"=Main Neaves East";
assertMatch: "way \"addr:street\"=Main Nvs East";
throwWarning: tr("addr:street={0} contains ' Nvs. ', should likely be expanded to Neaves","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Nvs. ", " Neaves "));
group: tr("addr:street contains Nvs, should likely be expanded to Neaves");
}

*["addr:street"]["addr:street"=~/ Oaks\. /] {
assertNoMatch: "way \"addr:street\"=Main Oaks East";
assertMatch: "way \"addr:street\"=Main Oaks East";
throwWarning: tr("addr:street={0} contains ' Oaks. ', should likely be expanded to Oaks","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Oaks. ", " Oaks "));
group: tr("addr:street contains Oaks, should likely be expanded to Oaks");
}

*["addr:street"]["addr:street"=~/ Padk\. /] {
assertNoMatch: "way \"addr:street\"=Main Paddock East";
assertMatch: "way \"addr:street\"=Main Padk East";
throwWarning: tr("addr:street={0} contains ' Padk. ', should likely be expanded to Paddock","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Padk. ", " Paddock "));
group: tr("addr:street contains Padk, should likely be expanded to Paddock");
}

*["addr:street"]["addr:street"=~/ Paku\. /] {
assertNoMatch: "way \"addr:street\"=Main Paku East";
assertMatch: "way \"addr:street\"=Main Paku East";
throwWarning: tr("addr:street={0} contains ' Paku. ', should likely be expanded to Paku","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Paku. ", " Paku "));
group: tr("addr:street contains Paku, should likely be expanded to Paku");
}

*["addr:street"]["addr:street"=~/ Pass\. /] {
assertNoMatch: "way \"addr:street\"=Main Pass East";
assertMatch: "way \"addr:street\"=Main Pass East";
throwWarning: tr("addr:street={0} contains ' Pass. ', should likely be expanded to Pass","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pass. ", " Pass "));
group: tr("addr:street contains Pass, should likely be expanded to Pass");
}

*["addr:street"]["addr:street"=~/ Pde\. /] {
assertNoMatch: "way \"addr:street\"=Main Parade East";
assertMatch: "way \"addr:street\"=Main Pde East";
throwWarning: tr("addr:street={0} contains ' Pde. ', should likely be expanded to Parade","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pde. ", " Parade "));
group: tr("addr:street contains Pde, should likely be expanded to Parade");
}

*["addr:street"]["addr:street"=~/ Pk\. /] {
assertNoMatch: "way \"addr:street\"=Main Park East";
assertMatch: "way \"addr:street\"=Main Pk East";
throwWarning: tr("addr:street={0} contains ' Pk. ', should likely be expanded to Park","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pk. ", " Park "));
group: tr("addr:street contains Pk, should likely be expanded to Park");
}

*["addr:street"]["addr:street"=~/ Pkwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Parkway East";
assertMatch: "way \"addr:street\"=Main Pkwy East";
throwWarning: tr("addr:street={0} contains ' Pkwy. ', should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pkwy. ", " Parkway "));
group: tr("addr:street contains Pkwy, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pl\. /] {
assertNoMatch: "way \"addr:street\"=Main Place East";
assertMatch: "way \"addr:street\"=Main Pl East";
throwWarning: tr("addr:street={0} contains ' Pl. ', should likely be expanded to Place","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pl. ", " Place "));
group: tr("addr:street contains Pl, should likely be expanded to Place");
}

*["addr:street"]["addr:street"=~/ Priors\. /] {
assertNoMatch: "way \"addr:street\"=Main Priors East";
assertMatch: "way \"addr:street\"=Main Priors East";
throwWarning: tr("addr:street={0} contains ' Priors. ', should likely be expanded to Priors","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Priors. ", " Priors "));
group: tr("addr:street contains Priors, should likely be expanded to Priors");
}

*["addr:street"]["addr:street"=~/ Prom\. /] {
assertNoMatch: "way \"addr:street\"=Main Promenade East";
assertMatch: "way \"addr:street\"=Main Prom East";
throwWarning: tr("addr:street={0} contains ' Prom. ', should likely be expanded to Promenade","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Prom. ", " Promenade "));
group: tr("addr:street contains Prom, should likely be expanded to Promenade");
}

*["addr:street"]["addr:street"=~/ Psge\. /] {
assertNoMatch: "way \"addr:street\"=Main Passage East";
assertMatch: "way \"addr:street\"=Main Psge East";
throwWarning: tr("addr:street={0} contains ' Psge. ', should likely be expanded to Passage","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Psge. ", " Passage "));
group: tr("addr:street contains Psge, should likely be expanded to Passage");
}

*["addr:street"]["addr:street"=~/ Pt\. /] {
assertNoMatch: "way \"addr:street\"=Main Point East";
assertMatch: "way \"addr:street\"=Main Pt East";
throwWarning: tr("addr:street={0} contains ' Pt. ', should likely be expanded to Point","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pt. ", " Point "));
group: tr("addr:street contains Pt, should likely be expanded to Point");
}

*["addr:street"]["addr:street"=~/ Pth\. /] {
assertNoMatch: "way \"addr:street\"=Main Path East";
assertMatch: "way \"addr:street\"=Main Pth East";
throwWarning: tr("addr:street={0} contains ' Pth. ', should likely be expanded to Path","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pth. ", " Path "));
group: tr("addr:street contains Pth, should likely be expanded to Path");
}

*["addr:street"]["addr:street"=~/ Qdrt\. /] {
assertNoMatch: "way \"addr:street\"=Main Quadrant East";
assertMatch: "way \"addr:street\"=Main Qdrt East";
throwWarning: tr("addr:street={0} contains ' Qdrt. ', should likely be expanded to Quadrant","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Qdrt. ", " Quadrant "));
group: tr("addr:street contains Qdrt, should likely be expanded to Quadrant");
}

*["addr:street"]["addr:street"=~/ Qy\. /] {
assertNoMatch: "way \"addr:street\"=Main Quay East";
assertMatch: "way \"addr:street\"=Main Qy East";
throwWarning: tr("addr:street={0} contains ' Qy. ', should likely be expanded to Quay","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Qy. ", " Quay "));
group: tr("addr:street contains Qy, should likely be expanded to Quay");
}

*["addr:street"]["addr:street"=~/ Rd\. /] {
assertNoMatch: "way \"addr:street\"=Main Road East";
assertMatch: "way \"addr:street\"=Main Rd East";
throwWarning: tr("addr:street={0} contains ' Rd. ', should likely be expanded to Road","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rd. ", " Road "));
group: tr("addr:street contains Rd, should likely be expanded to Road");
}

*["addr:street"]["addr:street"=~/ Rdge\. /] {
assertNoMatch: "way \"addr:street\"=Main Ridge East";
assertMatch: "way \"addr:street\"=Main Rdge East";
throwWarning: tr("addr:street={0} contains ' Rdge. ', should likely be expanded to Ridge","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rdge. ", " Ridge "));
group: tr("addr:street contains Rdge, should likely be expanded to Ridge");
}

*["addr:street"]["addr:street"=~/ Rds\. /] {
assertNoMatch: "way \"addr:street\"=Main Roads East";
assertMatch: "way \"addr:street\"=Main Rds East";
throwWarning: tr("addr:street={0} contains ' Rds. ', should likely be expanded to Roads","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rds. ", " Roads "));
group: tr("addr:street contains Rds, should likely be expanded to Roads");
}

*["addr:street"]["addr:street"=~/ Rdwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Roadway East";
assertMatch: "way \"addr:street\"=Main Rdwy East";
throwWarning: tr("addr:street={0} contains ' Rdwy. ', should likely be expanded to Roadway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rdwy. ", " Roadway "));
group: tr("addr:street contains Rdwy, should likely be expanded to Roadway");
}

*["addr:street"]["addr:street"=~/ Reef\. /] {
assertNoMatch: "way \"addr:street\"=Main Reef East";
assertMatch: "way \"addr:street\"=Main Reef East";
throwWarning: tr("addr:street={0} contains ' Reef. ', should likely be expanded to Reef","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Reef. ", " Reef "));
group: tr("addr:street contains Reef, should likely be expanded to Reef");
}

*["addr:street"]["addr:street"=~/ Res\. /] {
assertNoMatch: "way \"addr:street\"=Main Reserve East";
assertMatch: "way \"addr:street\"=Main Res East";
throwWarning: tr("addr:street={0} contains ' Res. ', should likely be expanded to Reserve","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Res. ", " Reserve "));
group: tr("addr:street contains Res, should likely be expanded to Reserve");
}

*["addr:street"]["addr:street"=~/ Rest\. /] {
assertNoMatch: "way \"addr:street\"=Main Rest East";
assertMatch: "way \"addr:street\"=Main Rest East";
throwWarning: tr("addr:street={0} contains ' Rest. ', should likely be expanded to Rest","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rest. ", " Rest "));
group: tr("addr:street contains Rest, should likely be expanded to Rest");
}

*["addr:street"]["addr:street"=~/ Rise\. /] {
assertNoMatch: "way \"addr:street\"=Main Rise East";
assertMatch: "way \"addr:street\"=Main Rise East";
throwWarning: tr("addr:street={0} contains ' Rise. ', should likely be expanded to Rise","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rise. ", " Rise "));
group: tr("addr:street contains Rise, should likely be expanded to Rise");
}

*["addr:street"]["addr:street"=~/ Row\. /] {
assertNoMatch: "way \"addr:street\"=Main Row East";
assertMatch: "way \"addr:street\"=Main Row East";
throwWarning: tr("addr:street={0} contains ' Row. ', should likely be expanded to Row","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Row. ", " Row "));
group: tr("addr:street contains Row, should likely be expanded to Row");
}

*["addr:street"]["addr:street"=~/ Rte\. /] {
assertNoMatch: "way \"addr:street\"=Main Route East";
assertMatch: "way \"addr:street\"=Main Rte East";
throwWarning: tr("addr:street={0} contains ' Rte. ', should likely be expanded to Route","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rte. ", " Route "));
group: tr("addr:street contains Rte, should likely be expanded to Route");
}

*["addr:street"]["addr:street"=~/ Rtr\. /] {
assertNoMatch: "way \"addr:street\"=Main Retreat East";
assertMatch: "way \"addr:street\"=Main Rtr East";
throwWarning: tr("addr:street={0} contains ' Rtr. ', should likely be expanded to Retreat","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rtr. ", " Retreat "));
group: tr("addr:street contains Rtr, should likely be expanded to Retreat");
}

*["addr:street"]["addr:street"=~/ SH\. /] {
assertNoMatch: "way \"addr:street\"=Main State Highway East";
assertMatch: "way \"addr:street\"=Main SH East";
throwWarning: tr("addr:street={0} contains ' SH. ', should likely be expanded to State Highway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," SH. ", " State Highway "));
group: tr("addr:street contains SH, should likely be expanded to State Highway");
}

*["addr:street"]["addr:street"=~/ Slp\. /] {
assertNoMatch: "way \"addr:street\"=Main Slope East";
assertMatch: "way \"addr:street\"=Main Slp East";
throwWarning: tr("addr:street={0} contains ' Slp. ', should likely be expanded to Slope","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Slp. ", " Slope "));
group: tr("addr:street contains Slp, should likely be expanded to Slope");
}

*["addr:street"]["addr:street"=~/ Spa\. /] {
assertNoMatch: "way \"addr:street\"=Main Spa East";
assertMatch: "way \"addr:street\"=Main Spa East";
throwWarning: tr("addr:street={0} contains ' Spa. ', should likely be expanded to Spa","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Spa. ", " Spa "));
group: tr("addr:street contains Spa, should likely be expanded to Spa");
}

*["addr:street"]["addr:street"=~/ Spur\. /] {
assertNoMatch: "way \"addr:street\"=Main Spur East";
assertMatch: "way \"addr:street\"=Main Spur East";
throwWarning: tr("addr:street={0} contains ' Spur. ', should likely be expanded to Spur","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Spur. ", " Spur "));
group: tr("addr:street contains Spur, should likely be expanded to Spur");
}

*["addr:street"]["addr:street"=~/ Sq\. /] {
assertNoMatch: "way \"addr:street\"=Main Square East";
assertMatch: "way \"addr:street\"=Main Sq East";
throwWarning: tr("addr:street={0} contains ' Sq. ', should likely be expanded to Square","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Sq. ", " Square "));
group: tr("addr:street contains Sq, should likely be expanded to Square");
}

*["addr:street"]["addr:street"=~/ St\. /] {
assertNoMatch: "way \"addr:street\"=Main Street East";
assertMatch: "way \"addr:street\"=Main St East";
throwWarning: tr("addr:street={0} contains ' St. ', should likely be expanded to Street","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," St. ", " Street "));
group: tr("addr:street contains St, should likely be expanded to Street");
}

*["addr:street"]["addr:street"=~/ Steep\. /] {
assertNoMatch: "way \"addr:street\"=Main Steep East";
assertMatch: "way \"addr:street\"=Main Steep East";
throwWarning: tr("addr:street={0} contains ' Steep. ', should likely be expanded to Steep","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Steep. ", " Steep "));
group: tr("addr:street contains Steep, should likely be expanded to Steep");
}

*["addr:street"]["addr:street"=~/ Stgt\. /] {
assertNoMatch: "way \"addr:street\"=Main Straight East";
assertMatch: "way \"addr:street\"=Main Stgt East";
throwWarning: tr("addr:street={0} contains ' Stgt. ', should likely be expanded to Straight","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Stgt. ", " Straight "));
group: tr("addr:street contains Stgt, should likely be expanded to Straight");
}

*["addr:street"]["addr:street"=~/ Stps\. /] {
assertNoMatch: "way \"addr:street\"=Main Steps East";
assertMatch: "way \"addr:street\"=Main Stps East";
throwWarning: tr("addr:street={0} contains ' Stps. ', should likely be expanded to Steps","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Stps. ", " Steps "));
group: tr("addr:street contains Stps, should likely be expanded to Steps");
}

*["addr:street"]["addr:street"=~/ Strd\. /] {
assertNoMatch: "way \"addr:street\"=Main Strand East";
assertMatch: "way \"addr:street\"=Main Strd East";
throwWarning: tr("addr:street={0} contains ' Strd. ', should likely be expanded to Strand","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Strd. ", " Strand "));
group: tr("addr:street contains Strd, should likely be expanded to Strand");
}

*["addr:street"]["addr:street"=~/ Svln\. /] {
assertNoMatch: "way \"addr:street\"=Main Service Lane East";
assertMatch: "way \"addr:street\"=Main Svln East";
throwWarning: tr("addr:street={0} contains ' Svln. ', should likely be expanded to Service Lane","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Svln. ", " Service Lane "));
group: tr("addr:street contains Svln, should likely be expanded to Service Lane");
}

*["addr:street"]["addr:street"=~/ Tce\. /] {
assertNoMatch: "way \"addr:street\"=Main Terrace East";
assertMatch: "way \"addr:street\"=Main Tce East";
throwWarning: tr("addr:street={0} contains ' Tce. ', should likely be expanded to Terrace","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tce. ", " Terrace "));
group: tr("addr:street contains Tce, should likely be expanded to Terrace");
}

*["addr:street"]["addr:street"=~/ Tmwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Tramway East";
assertMatch: "way \"addr:street\"=Main Tmwy East";
throwWarning: tr("addr:street={0} contains ' Tmwy. ', should likely be expanded to Tramway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tmwy. ", " Tramway "));
group: tr("addr:street contains Tmwy, should likely be expanded to Tramway");
}

*["addr:street"]["addr:street"=~/ Trk\. /] {
assertNoMatch: "way \"addr:street\"=Main Track East";
assertMatch: "way \"addr:street\"=Main Trk East";
throwWarning: tr("addr:street={0} contains ' Trk. ', should likely be expanded to Track","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Trk. ", " Track "));
group: tr("addr:street contains Trk, should likely be expanded to Track");
}

*["addr:street"]["addr:street"=~/ Trl\. /] {
assertNoMatch: "way \"addr:street\"=Main Trail East";
assertMatch: "way \"addr:street\"=Main Trl East";
throwWarning: tr("addr:street={0} contains ' Trl. ', should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Trl. ", " Trail "));
group: tr("addr:street contains Trl, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Trs\. /] {
assertNoMatch: "way \"addr:street\"=Main Trees East";
assertMatch: "way \"addr:street\"=Main Trs East";
throwWarning: tr("addr:street={0} contains ' Trs. ', should likely be expanded to Trees","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Trs. ", " Trees "));
group: tr("addr:street contains Trs, should likely be expanded to Trees");
}

*["addr:street"]["addr:street"=~/ Twrs\. /] {
assertNoMatch: "way \"addr:street\"=Main Towers East";
assertMatch: "way \"addr:street\"=Main Twrs East";
throwWarning: tr("addr:street={0} contains ' Twrs. ', should likely be expanded to Towers","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Twrs. ", " Towers "));
group: tr("addr:street contains Twrs, should likely be expanded to Towers");
}

*["addr:street"]["addr:street"=~/ Vale\. /] {
assertNoMatch: "way \"addr:street\"=Main Vale East";
assertMatch: "way \"addr:street\"=Main Vale East";
throwWarning: tr("addr:street={0} contains ' Vale. ', should likely be expanded to Vale","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vale. ", " Vale "));
group: tr("addr:street contains Vale, should likely be expanded to Vale");
}

*["addr:street"]["addr:street"=~/ Vis\. /] {
assertNoMatch: "way \"addr:street\"=Main Vista East";
assertMatch: "way \"addr:street\"=Main Vis East";
throwWarning: tr("addr:street={0} contains ' Vis. ', should likely be expanded to Vista","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vis. ", " Vista "));
group: tr("addr:street contains Vis, should likely be expanded to Vista");
}

*["addr:street"]["addr:street"=~/ Vlg\. /] {
assertNoMatch: "way \"addr:street\"=Main Village East";
assertMatch: "way \"addr:street\"=Main Vlg East";
throwWarning: tr("addr:street={0} contains ' Vlg. ', should likely be expanded to Village","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vlg. ", " Village "));
group: tr("addr:street contains Vlg, should likely be expanded to Village");
}

*["addr:street"]["addr:street"=~/ Vlls\. /] {
assertNoMatch: "way \"addr:street\"=Main Villas East";
assertMatch: "way \"addr:street\"=Main Vlls East";
throwWarning: tr("addr:street={0} contains ' Vlls. ', should likely be expanded to Villas","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vlls. ", " Villas "));
group: tr("addr:street contains Vlls, should likely be expanded to Villas");
}

*["addr:street"]["addr:street"=~/ Vly\. /] {
assertNoMatch: "way \"addr:street\"=Main Valley East";
assertMatch: "way \"addr:street\"=Main Vly East";
throwWarning: tr("addr:street={0} contains ' Vly. ', should likely be expanded to Valley","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vly. ", " Valley "));
group: tr("addr:street contains Vly, should likely be expanded to Valley");
}

*["addr:street"]["addr:street"=~/ Vnus\. /] {
assertNoMatch: "way \"addr:street\"=Main Venus East";
assertMatch: "way \"addr:street\"=Main Vnus East";
throwWarning: tr("addr:street={0} contains ' Vnus. ', should likely be expanded to Venus","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vnus. ", " Venus "));
group: tr("addr:street contains Vnus, should likely be expanded to Venus");
}

*["addr:street"]["addr:street"=~/ Vue\. /] {
assertNoMatch: "way \"addr:street\"=Main Vue East";
assertMatch: "way \"addr:street\"=Main Vue East";
throwWarning: tr("addr:street={0} contains ' Vue. ', should likely be expanded to Vue","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vue. ", " Vue "));
group: tr("addr:street contains Vue, should likely be expanded to Vue");
}

*["addr:street"]["addr:street"=~/ Vw\. /] {
assertNoMatch: "way \"addr:street\"=Main View East";
assertMatch: "way \"addr:street\"=Main Vw East";
throwWarning: tr("addr:street={0} contains ' Vw. ', should likely be expanded to View","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vw. ", " View "));
group: tr("addr:street contains Vw, should likely be expanded to View");
}

*["addr:street"]["addr:street"=~/ Vws\. /] {
assertNoMatch: "way \"addr:street\"=Main Views East";
assertMatch: "way \"addr:street\"=Main Vws East";
throwWarning: tr("addr:street={0} contains ' Vws. ', should likely be expanded to Views","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vws. ", " Views "));
group: tr("addr:street contains Vws, should likely be expanded to Views");
}

*["addr:street"]["addr:street"=~/ Waters\. /] {
assertNoMatch: "way \"addr:street\"=Main Waters East";
assertMatch: "way \"addr:street\"=Main Waters East";
throwWarning: tr("addr:street={0} contains ' Waters. ', should likely be expanded to Waters","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Waters. ", " Waters "));
group: tr("addr:street contains Waters, should likely be expanded to Waters");
}

*["addr:street"]["addr:street"=~/ Way\. /] {
assertNoMatch: "way \"addr:street\"=Main Way East";
assertMatch: "way \"addr:street\"=Main Way East";
throwWarning: tr("addr:street={0} contains ' Way. ', should likely be expanded to Way","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Way. ", " Way "));
group: tr("addr:street contains Way, should likely be expanded to Way");
}

*["addr:street"]["addr:street"=~/ Whrf\. /] {
assertNoMatch: "way \"addr:street\"=Main Wharf East";
assertMatch: "way \"addr:street\"=Main Whrf East";
throwWarning: tr("addr:street={0} contains ' Whrf. ', should likely be expanded to Wharf","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Whrf. ", " Wharf "));
group: tr("addr:street contains Whrf, should likely be expanded to Wharf");
}

*["addr:street"]["addr:street"=~/ Wlk\. /] {
assertNoMatch: "way \"addr:street\"=Main Walk East";
assertMatch: "way \"addr:street\"=Main Wlk East";
throwWarning: tr("addr:street={0} contains ' Wlk. ', should likely be expanded to Walk","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Wlk. ", " Walk "));
group: tr("addr:street contains Wlk, should likely be expanded to Walk");
}

*["addr:street"]["addr:street"=~/ Wynd\. /] {
assertNoMatch: "way \"addr:street\"=Main Wynd East";
assertMatch: "way \"addr:street\"=Main Wynd East";
throwWarning: tr("addr:street={0} contains ' Wynd. ', should likely be expanded to Wynd","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Wynd. ", " Wynd "));
group: tr("addr:street contains Wynd, should likely be expanded to Wynd");
}

*["name"=~/ Accs\. /].highway_name {
assertNoMatch: "way \"name\"=Main Access East";
assertMatch: "way \"name\"=Main Accs East";
throwWarning: tr("Highway name contains Accs., may need to be expanded to Access");
fixAdd: concat("name=", replace(tag("name")," Accs. ", " Access "));
}

*["name"=~/ Accswy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Accessway East";
assertMatch: "way \"name\"=Main Accswy East";
throwWarning: tr("Highway name contains Accswy., may need to be expanded to Accessway");
fixAdd: concat("name=", replace(tag("name")," Accswy. ", " Accessway "));
}

*["name"=~/ Aly\. /].highway_name {
assertNoMatch: "way \"name\"=Main Alley East";
assertMatch: "way \"name\"=Main Aly East";
throwWarning: tr("Highway name contains Aly., may need to be expanded to Alley");
fixAdd: concat("name=", replace(tag("name")," Aly. ", " Alley "));
}

*["name"=~/ Ancg\. /].highway_name {
assertNoMatch: "way \"name\"=Main Anchorage East";
assertMatch: "way \"name\"=Main Ancg East";
throwWarning: tr("Highway name contains Ancg., may need to be expanded to Anchorage");
fixAdd: concat("name=", replace(tag("name")," Ancg. ", " Anchorage "));
}

*["name"=~/ App\. /].highway_name {
assertNoMatch: "way \"name\"=Main Approach East";
assertMatch: "way \"name\"=Main App East";
throwWarning: tr("Highway name contains App., may need to be expanded to Approach");
fixAdd: concat("name=", replace(tag("name")," App. ", " Approach "));
}

*["name"=~/ Arc\. /].highway_name {
assertNoMatch: "way \"name\"=Main Arcade East";
assertMatch: "way \"name\"=Main Arc East";
throwWarning: tr("Highway name contains Arc., may need to be expanded to Arcade");
fixAdd: concat("name=", replace(tag("name")," Arc. ", " Arcade "));
}

*["name"=~/ Arch\. /].highway_name {
assertNoMatch: "way \"name\"=Main Arch East";
assertMatch: "way \"name\"=Main Arch East";
throwWarning: tr("Highway name contains Arch., may need to be expanded to Arch");
fixAdd: concat("name=", replace(tag("name")," Arch. ", " Arch "));
}

*["name"=~/ Ave\. /].highway_name {
assertNoMatch: "way \"name\"=Main Avenue East";
assertMatch: "way \"name\"=Main Ave East";
throwWarning: tr("Highway name contains Ave., may need to be expanded to Avenue");
fixAdd: concat("name=", replace(tag("name")," Ave. ", " Avenue "));
}

*["name"=~/ Bank\. /].highway_name {
assertNoMatch: "way \"name\"=Main Bank East";
assertMatch: "way \"name\"=Main Bank East";
throwWarning: tr("Highway name contains Bank., may need to be expanded to Bank");
fixAdd: concat("name=", replace(tag("name")," Bank. ", " Bank "));
}

*["name"=~/ Bay\. /].highway_name {
assertNoMatch: "way \"name\"=Main Bay East";
assertMatch: "way \"name\"=Main Bay East";
throwWarning: tr("Highway name contains Bay., may need to be expanded to Bay");
fixAdd: concat("name=", replace(tag("name")," Bay. ", " Bay "));
}

*["name"=~/ Bch\. /].highway_name {
assertNoMatch: "way \"name\"=Main Beach East";
assertMatch: "way \"name\"=Main Bch East";
throwWarning: tr("Highway name contains Bch., may need to be expanded to Beach");
fixAdd: concat("name=", replace(tag("name")," Bch. ", " Beach "));
}

*["name"=~/ Belt\. /].highway_name {
assertNoMatch: "way \"name\"=Main Belt East";
assertMatch: "way \"name\"=Main Belt East";
throwWarning: tr("Highway name contains Belt., may need to be expanded to Belt");
fixAdd: concat("name=", replace(tag("name")," Belt. ", " Belt "));
}

*["name"=~/ Blf\. /].highway_name {
assertNoMatch: "way \"name\"=Main Bluff East";
assertMatch: "way \"name\"=Main Blf East";
throwWarning: tr("Highway name contains Blf., may need to be expanded to Bluff");
fixAdd: concat("name=", replace(tag("name")," Blf. ", " Bluff "));
}

*["name"=~/ Blvd\. /].highway_name {
assertNoMatch: "way \"name\"=Main Boulevard East";
assertMatch: "way \"name\"=Main Blvd East";
throwWarning: tr("Highway name contains Blvd., may need to be expanded to Boulevard");
fixAdd: concat("name=", replace(tag("name")," Blvd. ", " Boulevard "));
}

*["name"=~/ Bnd\. /].highway_name {
assertNoMatch: "way \"name\"=Main Bend East";
assertMatch: "way \"name\"=Main Bnd East";
throwWarning: tr("Highway name contains Bnd., may need to be expanded to Bend");
fixAdd: concat("name=", replace(tag("name")," Bnd. ", " Bend "));
}

*["name"=~/ Brae\. /].highway_name {
assertNoMatch: "way \"name\"=Main Brae East";
assertMatch: "way \"name\"=Main Brae East";
throwWarning: tr("Highway name contains Brae., may need to be expanded to Brae");
fixAdd: concat("name=", replace(tag("name")," Brae. ", " Brae "));
}

*["name"=~/ Brg\. /].highway_name {
assertNoMatch: "way \"name\"=Main Bridge East";
assertMatch: "way \"name\"=Main Brg East";
throwWarning: tr("Highway name contains Brg., may need to be expanded to Bridge");
fixAdd: concat("name=", replace(tag("name")," Brg. ", " Bridge "));
}

*["name"=~/ Briars\. /].highway_name {
assertNoMatch: "way \"name\"=Main Briars East";
assertMatch: "way \"name\"=Main Briars East";
throwWarning: tr("Highway name contains Briars., may need to be expanded to Briars");
fixAdd: concat("name=", replace(tag("name")," Briars. ", " Briars "));
}

*["name"=~/ Byp\. /].highway_name {
assertNoMatch: "way \"name\"=Main Bypass East";
assertMatch: "way \"name\"=Main Byp East";
throwWarning: tr("Highway name contains Byp., may need to be expanded to Bypass");
fixAdd: concat("name=", replace(tag("name")," Byp. ", " Bypass "));
}

*["name"=~/ Ch\. /].highway_name {
assertNoMatch: "way \"name\"=Main Chase East";
assertMatch: "way \"name\"=Main Ch East";
throwWarning: tr("Highway name contains Ch., may need to be expanded to Chase");
fixAdd: concat("name=", replace(tag("name")," Ch. ", " Chase "));
}

*["name"=~/ Cir\. /].highway_name {
assertNoMatch: "way \"name\"=Main Circle East";
assertMatch: "way \"name\"=Main Cir East";
throwWarning: tr("Highway name contains Cir., may need to be expanded to Circle");
fixAdd: concat("name=", replace(tag("name")," Cir. ", " Circle "));
}

*["name"=~/ Cl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Close East";
assertMatch: "way \"name\"=Main Cl East";
throwWarning: tr("Highway name contains Cl., may need to be expanded to Close");
fixAdd: concat("name=", replace(tag("name")," Cl. ", " Close "));
}

*["name"=~/ Clm\. /].highway_name {
assertNoMatch: "way \"name\"=Main Claim East";
assertMatch: "way \"name\"=Main Clm East";
throwWarning: tr("Highway name contains Clm., may need to be expanded to Claim");
fixAdd: concat("name=", replace(tag("name")," Clm. ", " Claim "));
}

*["name"=~/ Cmn\. /].highway_name {
assertNoMatch: "way \"name\"=Main Common East";
assertMatch: "way \"name\"=Main Cmn East";
throwWarning: tr("Highway name contains Cmn., may need to be expanded to Common");
fixAdd: concat("name=", replace(tag("name")," Cmn. ", " Common "));
}

*["name"=~/ Crcs\. /].highway_name {
assertNoMatch: "way \"name\"=Main Circus East";
assertMatch: "way \"name\"=Main Crcs East";
throwWarning: tr("Highway name contains Crcs., may need to be expanded to Circus");
fixAdd: concat("name=", replace(tag("name")," Crcs. ", " Circus "));
}

*["name"=~/ Cres\. /].highway_name {
assertNoMatch: "way \"name\"=Main Crescent East";
assertMatch: "way \"name\"=Main Cres East";
throwWarning: tr("Highway name contains Cres., may need to be expanded to Crescent");
fixAdd: concat("name=", replace(tag("name")," Cres. ", " Crescent "));
}

*["name"=~/ Crk\. /].highway_name {
assertNoMatch: "way \"name\"=Main Creek East";
assertMatch: "way \"name\"=Main Crk East";
throwWarning: tr("Highway name contains Crk., may need to be expanded to Creek");
fixAdd: concat("name=", replace(tag("name")," Crk. ", " Creek "));
}

*["name"=~/ Crst\. /].highway_name {
assertNoMatch: "way \"name\"=Main Crest East";
assertMatch: "way \"name\"=Main Crst East";
throwWarning: tr("Highway name contains Crst., may need to be expanded to Crest");
fixAdd: concat("name=", replace(tag("name")," Crst. ", " Crest "));
}

*["name"=~/ Crt\. /].highway_name {
assertNoMatch: "way \"name\"=Main Court East";
assertMatch: "way \"name\"=Main Crt East";
throwWarning: tr("Highway name contains Crt., may need to be expanded to Court");
fixAdd: concat("name=", replace(tag("name")," Crt. ", " Court "));
}

*["name"=~/ Crts\. /].highway_name {
assertNoMatch: "way \"name\"=Main Courts East";
assertMatch: "way \"name\"=Main Crts East";
throwWarning: tr("Highway name contains Crts., may need to be expanded to Courts");
fixAdd: concat("name=", replace(tag("name")," Crts. ", " Courts "));
}

*["name"=~/ Ctr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Centre East";
assertMatch: "way \"name\"=Main Ctr East";
throwWarning: tr("Highway name contains Ctr., may need to be expanded to Centre");
fixAdd: concat("name=", replace(tag("name")," Ctr. ", " Centre "));
}

*["name"=~/ Cul\. /].highway_name {
assertNoMatch: "way \"name\"=Main Cul East";
assertMatch: "way \"name\"=Main Cul East";
throwWarning: tr("Highway name contains Cul., may need to be expanded to Cul");
fixAdd: concat("name=", replace(tag("name")," Cul. ", " Cul "));
}

*["name"=~/ Cv\. /].highway_name {
assertNoMatch: "way \"name\"=Main Cove East";
assertMatch: "way \"name\"=Main Cv East";
throwWarning: tr("Highway name contains Cv., may need to be expanded to Cove");
fixAdd: concat("name=", replace(tag("name")," Cv. ", " Cove "));
}

*["name"=~/ Del\. /].highway_name {
assertNoMatch: "way \"name\"=Main Dell East";
assertMatch: "way \"name\"=Main Del East";
throwWarning: tr("Highway name contains Del., may need to be expanded to Dell");
fixAdd: concat("name=", replace(tag("name")," Del. ", " Dell "));
}

*["name"=~/ Dle\. /].highway_name {
assertNoMatch: "way \"name\"=Main Dale East";
assertMatch: "way \"name\"=Main Dle East";
throwWarning: tr("Highway name contains Dle., may need to be expanded to Dale");
fixAdd: concat("name=", replace(tag("name")," Dle. ", " Dale "));
}

*["name"=~/ Downs\. /].highway_name {
assertNoMatch: "way \"name\"=Main Downs East";
assertMatch: "way \"name\"=Main Downs East";
throwWarning: tr("Highway name contains Downs., may need to be expanded to Downs");
fixAdd: concat("name=", replace(tag("name")," Downs. ", " Downs "));
}

*["name"=~/ Dr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Drive East";
assertMatch: "way \"name\"=Main Dr East";
throwWarning: tr("Highway name contains Dr., may need to be expanded to Drive");
fixAdd: concat("name=", replace(tag("name")," Dr. ", " Drive "));
}

*["name"=~/ Dune\. /].highway_name {
assertNoMatch: "way \"name\"=Main Dune East";
assertMatch: "way \"name\"=Main Dune East";
throwWarning: tr("Highway name contains Dune., may need to be expanded to Dune");
fixAdd: concat("name=", replace(tag("name")," Dune. ", " Dune "));
}

*["name"=~/ Dvn\. /].highway_name {
assertNoMatch: "way \"name\"=Main Deviation East";
assertMatch: "way \"name\"=Main Dvn East";
throwWarning: tr("Highway name contains Dvn., may need to be expanded to Deviation");
fixAdd: concat("name=", replace(tag("name")," Dvn. ", " Deviation "));
}

*["name"=~/ Elm\. /].highway_name {
assertNoMatch: "way \"name\"=Main Elm East";
assertMatch: "way \"name\"=Main Elm East";
throwWarning: tr("Highway name contains Elm., may need to be expanded to Elm");
fixAdd: concat("name=", replace(tag("name")," Elm. ", " Elm "));
}

*["name"=~/ End\. /].highway_name {
assertNoMatch: "way \"name\"=Main End East";
assertMatch: "way \"name\"=Main End East";
throwWarning: tr("Highway name contains End., may need to be expanded to End");
fixAdd: concat("name=", replace(tag("name")," End. ", " End "));
}

*["name"=~/ Ent\. /].highway_name {
assertNoMatch: "way \"name\"=Main Entrance East";
assertMatch: "way \"name\"=Main Ent East";
throwWarning: tr("Highway name contains Ent., may need to be expanded to Entrance");
fixAdd: concat("name=", replace(tag("name")," Ent. ", " Entrance "));
}

*["name"=~/ Esp\. /].highway_name {
assertNoMatch: "way \"name\"=Main Esplanade East";
assertMatch: "way \"name\"=Main Esp East";
throwWarning: tr("Highway name contains Esp., may need to be expanded to Esplanade");
fixAdd: concat("name=", replace(tag("name")," Esp. ", " Esplanade "));
}

*["name"=~/ Est\. /].highway_name {
assertNoMatch: "way \"name\"=Main Estate East";
assertMatch: "way \"name\"=Main Est East";
throwWarning: tr("Highway name contains Est., may need to be expanded to Estate");
fixAdd: concat("name=", replace(tag("name")," Est. ", " Estate "));
}

*["name"=~/ Fall\. /].highway_name {
assertNoMatch: "way \"name\"=Main Fall East";
assertMatch: "way \"name\"=Main Fall East";
throwWarning: tr("Highway name contains Fall., may need to be expanded to Fall");
fixAdd: concat("name=", replace(tag("name")," Fall. ", " Fall "));
}

*["name"=~/ Fare\. /].highway_name {
assertNoMatch: "way \"name\"=Main Fare East";
assertMatch: "way \"name\"=Main Fare East";
throwWarning: tr("Highway name contains Fare., may need to be expanded to Fare");
fixAdd: concat("name=", replace(tag("name")," Fare. ", " Fare "));
}

*["name"=~/ Fawy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Fairway East";
assertMatch: "way \"name\"=Main Fawy East";
throwWarning: tr("Highway name contains Fawy., may need to be expanded to Fairway");
fixAdd: concat("name=", replace(tag("name")," Fawy. ", " Fairway "));
}

*["name"=~/ Fen\. /].highway_name {
assertNoMatch: "way \"name\"=Main Fen East";
assertMatch: "way \"name\"=Main Fen East";
throwWarning: tr("Highway name contains Fen., may need to be expanded to Fen");
fixAdd: concat("name=", replace(tag("name")," Fen. ", " Fen "));
}

*["name"=~/ Fern\. /].highway_name {
assertNoMatch: "way \"name\"=Main Fern East";
assertMatch: "way \"name\"=Main Fern East";
throwWarning: tr("Highway name contains Fern., may need to be expanded to Fern");
fixAdd: concat("name=", replace(tag("name")," Fern. ", " Fern "));
}

*["name"=~/ Flt\. /].highway_name {
assertNoMatch: "way \"name\"=Main Flat East";
assertMatch: "way \"name\"=Main Flt East";
throwWarning: tr("Highway name contains Flt., may need to be expanded to Flat");
fixAdd: concat("name=", replace(tag("name")," Flt. ", " Flat "));
}

*["name"=~/ Flts\. /].highway_name {
assertNoMatch: "way \"name\"=Main Flats East";
assertMatch: "way \"name\"=Main Flts East";
throwWarning: tr("Highway name contains Flts., may need to be expanded to Flats");
fixAdd: concat("name=", replace(tag("name")," Flts. ", " Flats "));
}

*["name"=~/ Frms\. /].highway_name {
assertNoMatch: "way \"name\"=Main Farms East";
assertMatch: "way \"name\"=Main Frms East";
throwWarning: tr("Highway name contains Frms., may need to be expanded to Farms");
fixAdd: concat("name=", replace(tag("name")," Frms. ", " Farms "));
}

*["name"=~/ Gdn\. /].highway_name {
assertNoMatch: "way \"name\"=Main Garden East";
assertMatch: "way \"name\"=Main Gdn East";
throwWarning: tr("Highway name contains Gdn., may need to be expanded to Garden");
fixAdd: concat("name=", replace(tag("name")," Gdn. ", " Garden "));
}

*["name"=~/ Gdns\. /].highway_name {
assertNoMatch: "way \"name\"=Main Gardens East";
assertMatch: "way \"name\"=Main Gdns East";
throwWarning: tr("Highway name contains Gdns., may need to be expanded to Gardens");
fixAdd: concat("name=", replace(tag("name")," Gdns. ", " Gardens "));
}

*["name"=~/ Gld\. /].highway_name {
assertNoMatch: "way \"name\"=Main Glade East";
assertMatch: "way \"name\"=Main Gld East";
throwWarning: tr("Highway name contains Gld., may need to be expanded to Glade");
fixAdd: concat("name=", replace(tag("name")," Gld. ", " Glade "));
}

*["name"=~/ Gln\. /].highway_name {
assertNoMatch: "way \"name\"=Main Glen East";
assertMatch: "way \"name\"=Main Gln East";
throwWarning: tr("Highway name contains Gln., may need to be expanded to Glen");
fixAdd: concat("name=", replace(tag("name")," Gln. ", " Glen "));
}

*["name"=~/ Gly\. /].highway_name {
assertNoMatch: "way \"name\"=Main Gully East";
assertMatch: "way \"name\"=Main Gly East";
throwWarning: tr("Highway name contains Gly., may need to be expanded to Gully");
fixAdd: concat("name=", replace(tag("name")," Gly. ", " Gully "));
}

*["name"=~/ Grg\. /].highway_name {
assertNoMatch: "way \"name\"=Main Grange East";
assertMatch: "way \"name\"=Main Grg East";
throwWarning: tr("Highway name contains Grg., may need to be expanded to Grange");
fixAdd: concat("name=", replace(tag("name")," Grg. ", " Grange "));
}

*["name"=~/ Grn\. /].highway_name {
assertNoMatch: "way \"name\"=Main Green East";
assertMatch: "way \"name\"=Main Grn East";
throwWarning: tr("Highway name contains Grn., may need to be expanded to Green");
fixAdd: concat("name=", replace(tag("name")," Grn. ", " Green "));
}

*["name"=~/ Grv\. /].highway_name {
assertNoMatch: "way \"name\"=Main Grove East";
assertMatch: "way \"name\"=Main Grv East";
throwWarning: tr("Highway name contains Grv., may need to be expanded to Grove");
fixAdd: concat("name=", replace(tag("name")," Grv. ", " Grove "));
}

*["name"=~/ Gte\. /].highway_name {
assertNoMatch: "way \"name\"=Main Gate East";
assertMatch: "way \"name\"=Main Gte East";
throwWarning: tr("Highway name contains Gte., may need to be expanded to Gate");
fixAdd: concat("name=", replace(tag("name")," Gte. ", " Gate "));
}

*["name"=~/ Head\. /].highway_name {
assertNoMatch: "way \"name\"=Main Head East";
assertMatch: "way \"name\"=Main Head East";
throwWarning: tr("Highway name contains Head., may need to be expanded to Head");
fixAdd: concat("name=", replace(tag("name")," Head. ", " Head "));
}

*["name"=~/ Hl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Hill East";
assertMatch: "way \"name\"=Main Hl East";
throwWarning: tr("Highway name contains Hl., may need to be expanded to Hill");
fixAdd: concat("name=", replace(tag("name")," Hl. ", " Hill "));
}

*["name"=~/ Hts\. /].highway_name {
assertNoMatch: "way \"name\"=Main Heights East";
assertMatch: "way \"name\"=Main Hts East";
throwWarning: tr("Highway name contains Hts., may need to be expanded to Heights");
fixAdd: concat("name=", replace(tag("name")," Hts. ", " Heights "));
}

*["name"=~/ Hvn\. /].highway_name {
assertNoMatch: "way \"name\"=Main Haven East";
assertMatch: "way \"name\"=Main Hvn East";
throwWarning: tr("Highway name contains Hvn., may need to be expanded to Haven");
fixAdd: concat("name=", replace(tag("name")," Hvn. ", " Haven "));
}

*["name"=~/ Hwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Highway East";
assertMatch: "way \"name\"=Main Hwy East";
throwWarning: tr("Highway name contains Hwy., may need to be expanded to Highway");
fixAdd: concat("name=", replace(tag("name")," Hwy. ", " Highway "));
}

*["name"=~/ Is\. /].highway_name {
assertNoMatch: "way \"name\"=Main Island East";
assertMatch: "way \"name\"=Main Is East";
throwWarning: tr("Highway name contains Is., may need to be expanded to Island");
fixAdd: concat("name=", replace(tag("name")," Is. ", " Island "));
}

*["name"=~/ Jct\. /].highway_name {
assertNoMatch: "way \"name\"=Main Junction East";
assertMatch: "way \"name\"=Main Jct East";
throwWarning: tr("Highway name contains Jct., may need to be expanded to Junction");
fixAdd: concat("name=", replace(tag("name")," Jct. ", " Junction "));
}

*["name"=~/ Key\. /].highway_name {
assertNoMatch: "way \"name\"=Main Key East";
assertMatch: "way \"name\"=Main Key East";
throwWarning: tr("Highway name contains Key., may need to be expanded to Key");
fixAdd: concat("name=", replace(tag("name")," Key. ", " Key "));
}

*["name"=~/ Knob\. /].highway_name {
assertNoMatch: "way \"name\"=Main Knob East";
assertMatch: "way \"name\"=Main Knob East";
throwWarning: tr("Highway name contains Knob., may need to be expanded to Knob");
fixAdd: concat("name=", replace(tag("name")," Knob. ", " Knob "));
}

*["name"=~/ Ladr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Ladder East";
assertMatch: "way \"name\"=Main Ladr East";
throwWarning: tr("Highway name contains Ladr., may need to be expanded to Ladder");
fixAdd: concat("name=", replace(tag("name")," Ladr. ", " Ladder "));
}

*["name"=~/ Lane\. /].highway_name {
assertNoMatch: "way \"name\"=Main Lane East";
assertMatch: "way \"name\"=Main Lane East";
throwWarning: tr("Highway name contains Lane., may need to be expanded to Lane");
fixAdd: concat("name=", replace(tag("name")," Lane. ", " Lane "));
}

*["name"=~/ Lea\. /].highway_name {
assertNoMatch: "way \"name\"=Main Lea East";
assertMatch: "way \"name\"=Main Lea East";
throwWarning: tr("Highway name contains Lea., may need to be expanded to Lea");
fixAdd: concat("name=", replace(tag("name")," Lea. ", " Lea "));
}

*["name"=~/ Ledr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Leader East";
assertMatch: "way \"name\"=Main Ledr East";
throwWarning: tr("Highway name contains Ledr., may need to be expanded to Leader");
fixAdd: concat("name=", replace(tag("name")," Ledr. ", " Leader "));
}

*["name"=~/ Lgh\. /].highway_name {
assertNoMatch: "way \"name\"=Main Leigh East";
assertMatch: "way \"name\"=Main Lgh East";
throwWarning: tr("Highway name contains Lgh., may need to be expanded to Leigh");
fixAdd: concat("name=", replace(tag("name")," Lgh. ", " Leigh "));
}

*["name"=~/ Line\. /].highway_name {
assertNoMatch: "way \"name\"=Main Line East";
assertMatch: "way \"name\"=Main Line East";
throwWarning: tr("Highway name contains Line., may need to be expanded to Line");
fixAdd: concat("name=", replace(tag("name")," Line. ", " Line "));
}

*["name"=~/ Link\. /].highway_name {
assertNoMatch: "way \"name\"=Main Link East";
assertMatch: "way \"name\"=Main Link East";
throwWarning: tr("Highway name contains Link., may need to be expanded to Link");
fixAdd: concat("name=", replace(tag("name")," Link. ", " Link "));
}

*["name"=~/ Lkt\. /].highway_name {
assertNoMatch: "way \"name\"=Main Lookout East";
assertMatch: "way \"name\"=Main Lkt East";
throwWarning: tr("Highway name contains Lkt., may need to be expanded to Lookout");
fixAdd: concat("name=", replace(tag("name")," Lkt. ", " Lookout "));
}

*["name"=~/ Lndg\. /].highway_name {
assertNoMatch: "way \"name\"=Main Landing East";
assertMatch: "way \"name\"=Main Lndg East";
throwWarning: tr("Highway name contains Lndg., may need to be expanded to Landing");
fixAdd: concat("name=", replace(tag("name")," Lndg. ", " Landing "));
}

*["name"=~/ Loop\. /].highway_name {
assertNoMatch: "way \"name\"=Main Loop East";
assertMatch: "way \"name\"=Main Loop East";
throwWarning: tr("Highway name contains Loop., may need to be expanded to Loop");
fixAdd: concat("name=", replace(tag("name")," Loop. ", " Loop "));
}

*["name"=~/ Mall\. /].highway_name {
assertNoMatch: "way \"name\"=Main Mall East";
assertMatch: "way \"name\"=Main Mall East";
throwWarning: tr("Highway name contains Mall., may need to be expanded to Mall");
fixAdd: concat("name=", replace(tag("name")," Mall. ", " Mall "));
}

*["name"=~/ Mdws\. /].highway_name {
assertNoMatch: "way \"name\"=Main Meadows East";
assertMatch: "way \"name\"=Main Mdws East";
throwWarning: tr("Highway name contains Mdws., may need to be expanded to Meadows");
fixAdd: concat("name=", replace(tag("name")," Mdws. ", " Meadows "));
}

*["name"=~/ Mead\. /].highway_name {
assertNoMatch: "way \"name\"=Main Mead East";
assertMatch: "way \"name\"=Main Mead East";
throwWarning: tr("Highway name contains Mead., may need to be expanded to Mead");
fixAdd: concat("name=", replace(tag("name")," Mead. ", " Mead "));
}

*["name"=~/ Mews\. /].highway_name {
assertNoMatch: "way \"name\"=Main Mews East";
assertMatch: "way \"name\"=Main Mews East";
throwWarning: tr("Highway name contains Mews., may need to be expanded to Mews");
fixAdd: concat("name=", replace(tag("name")," Mews. ", " Mews "));
}

*["name"=~/ Mile\. /].highway_name {
assertNoMatch: "way \"name\"=Main Mile East";
assertMatch: "way \"name\"=Main Mile East";
throwWarning: tr("Highway name contains Mile., may need to be expanded to Mile");
fixAdd: concat("name=", replace(tag("name")," Mile. ", " Mile "));
}

*["name"=~/ Motu\. /].highway_name {
assertNoMatch: "way \"name\"=Main Motu East";
assertMatch: "way \"name\"=Main Motu East";
throwWarning: tr("Highway name contains Motu., may need to be expanded to Motu");
fixAdd: concat("name=", replace(tag("name")," Motu. ", " Motu "));
}

*["name"=~/ Mt\. /].highway_name {
assertNoMatch: "way \"name\"=Main Mount East";
assertMatch: "way \"name\"=Main Mt East";
throwWarning: tr("Highway name contains Mt., may need to be expanded to Mount");
fixAdd: concat("name=", replace(tag("name")," Mt. ", " Mount "));
}

*["name"=~/ Mwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Motorway East";
assertMatch: "way \"name\"=Main Mwy East";
throwWarning: tr("Highway name contains Mwy., may need to be expanded to Motorway");
fixAdd: concat("name=", replace(tag("name")," Mwy. ", " Motorway "));
}

*["name"=~/ Nvs\. /].highway_name {
assertNoMatch: "way \"name\"=Main Neaves East";
assertMatch: "way \"name\"=Main Nvs East";
throwWarning: tr("Highway name contains Nvs., may need to be expanded to Neaves");
fixAdd: concat("name=", replace(tag("name")," Nvs. ", " Neaves "));
}

*["name"=~/ Oaks\. /].highway_name {
assertNoMatch: "way \"name\"=Main Oaks East";
assertMatch: "way \"name\"=Main Oaks East";
throwWarning: tr("Highway name contains Oaks., may need to be expanded to Oaks");
fixAdd: concat("name=", replace(tag("name")," Oaks. ", " Oaks "));
}

*["name"=~/ Padk\. /].highway_name {
assertNoMatch: "way \"name\"=Main Paddock East";
assertMatch: "way \"name\"=Main Padk East";
throwWarning: tr("Highway name contains Padk., may need to be expanded to Paddock");
fixAdd: concat("name=", replace(tag("name")," Padk. ", " Paddock "));
}

*["name"=~/ Paku\. /].highway_name {
assertNoMatch: "way \"name\"=Main Paku East";
assertMatch: "way \"name\"=Main Paku East";
throwWarning: tr("Highway name contains Paku., may need to be expanded to Paku");
fixAdd: concat("name=", replace(tag("name")," Paku. ", " Paku "));
}

*["name"=~/ Pass\. /].highway_name {
assertNoMatch: "way \"name\"=Main Pass East";
assertMatch: "way \"name\"=Main Pass East";
throwWarning: tr("Highway name contains Pass., may need to be expanded to Pass");
fixAdd: concat("name=", replace(tag("name")," Pass. ", " Pass "));
}

*["name"=~/ Pde\. /].highway_name {
assertNoMatch: "way \"name\"=Main Parade East";
assertMatch: "way \"name\"=Main Pde East";
throwWarning: tr("Highway name contains Pde., may need to be expanded to Parade");
fixAdd: concat("name=", replace(tag("name")," Pde. ", " Parade "));
}

*["name"=~/ Pk\. /].highway_name {
assertNoMatch: "way \"name\"=Main Park East";
assertMatch: "way \"name\"=Main Pk East";
throwWarning: tr("Highway name contains Pk., may need to be expanded to Park");
fixAdd: concat("name=", replace(tag("name")," Pk. ", " Park "));
}

*["name"=~/ Pkwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Parkway East";
assertMatch: "way \"name\"=Main Pkwy East";
throwWarning: tr("Highway name contains Pkwy., may need to be expanded to Parkway");
fixAdd: concat("name=", replace(tag("name")," Pkwy. ", " Parkway "));
}

*["name"=~/ Pl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Place East";
assertMatch: "way \"name\"=Main Pl East";
throwWarning: tr("Highway name contains Pl., may need to be expanded to Place");
fixAdd: concat("name=", replace(tag("name")," Pl. ", " Place "));
}

*["name"=~/ Priors\. /].highway_name {
assertNoMatch: "way \"name\"=Main Priors East";
assertMatch: "way \"name\"=Main Priors East";
throwWarning: tr("Highway name contains Priors., may need to be expanded to Priors");
fixAdd: concat("name=", replace(tag("name")," Priors. ", " Priors "));
}

*["name"=~/ Prom\. /].highway_name {
assertNoMatch: "way \"name\"=Main Promenade East";
assertMatch: "way \"name\"=Main Prom East";
throwWarning: tr("Highway name contains Prom., may need to be expanded to Promenade");
fixAdd: concat("name=", replace(tag("name")," Prom. ", " Promenade "));
}

*["name"=~/ Psge\. /].highway_name {
assertNoMatch: "way \"name\"=Main Passage East";
assertMatch: "way \"name\"=Main Psge East";
throwWarning: tr("Highway name contains Psge., may need to be expanded to Passage");
fixAdd: concat("name=", replace(tag("name")," Psge. ", " Passage "));
}

*["name"=~/ Pt\. /].highway_name {
assertNoMatch: "way \"name\"=Main Point East";
assertMatch: "way \"name\"=Main Pt East";
throwWarning: tr("Highway name contains Pt., may need to be expanded to Point");
fixAdd: concat("name=", replace(tag("name")," Pt. ", " Point "));
}

*["name"=~/ Pth\. /].highway_name {
assertNoMatch: "way \"name\"=Main Path East";
assertMatch: "way \"name\"=Main Pth East";
throwWarning: tr("Highway name contains Pth., may need to be expanded to Path");
fixAdd: concat("name=", replace(tag("name")," Pth. ", " Path "));
}

*["name"=~/ Qdrt\. /].highway_name {
assertNoMatch: "way \"name\"=Main Quadrant East";
assertMatch: "way \"name\"=Main Qdrt East";
throwWarning: tr("Highway name contains Qdrt., may need to be expanded to Quadrant");
fixAdd: concat("name=", replace(tag("name")," Qdrt. ", " Quadrant "));
}

*["name"=~/ Qy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Quay East";
assertMatch: "way \"name\"=Main Qy East";
throwWarning: tr("Highway name contains Qy., may need to be expanded to Quay");
fixAdd: concat("name=", replace(tag("name")," Qy. ", " Quay "));
}

*["name"=~/ Rd\. /].highway_name {
assertNoMatch: "way \"name\"=Main Road East";
assertMatch: "way \"name\"=Main Rd East";
throwWarning: tr("Highway name contains Rd., may need to be expanded to Road");
fixAdd: concat("name=", replace(tag("name")," Rd. ", " Road "));
}

*["name"=~/ Rdge\. /].highway_name {
assertNoMatch: "way \"name\"=Main Ridge East";
assertMatch: "way \"name\"=Main Rdge East";
throwWarning: tr("Highway name contains Rdge., may need to be expanded to Ridge");
fixAdd: concat("name=", replace(tag("name")," Rdge. ", " Ridge "));
}

*["name"=~/ Rds\. /].highway_name {
assertNoMatch: "way \"name\"=Main Roads East";
assertMatch: "way \"name\"=Main Rds East";
throwWarning: tr("Highway name contains Rds., may need to be expanded to Roads");
fixAdd: concat("name=", replace(tag("name")," Rds. ", " Roads "));
}

*["name"=~/ Rdwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Roadway East";
assertMatch: "way \"name\"=Main Rdwy East";
throwWarning: tr("Highway name contains Rdwy., may need to be expanded to Roadway");
fixAdd: concat("name=", replace(tag("name")," Rdwy. ", " Roadway "));
}

*["name"=~/ Reef\. /].highway_name {
assertNoMatch: "way \"name\"=Main Reef East";
assertMatch: "way \"name\"=Main Reef East";
throwWarning: tr("Highway name contains Reef., may need to be expanded to Reef");
fixAdd: concat("name=", replace(tag("name")," Reef. ", " Reef "));
}

*["name"=~/ Res\. /].highway_name {
assertNoMatch: "way \"name\"=Main Reserve East";
assertMatch: "way \"name\"=Main Res East";
throwWarning: tr("Highway name contains Res., may need to be expanded to Reserve");
fixAdd: concat("name=", replace(tag("name")," Res. ", " Reserve "));
}

*["name"=~/ Rest\. /].highway_name {
assertNoMatch: "way \"name\"=Main Rest East";
assertMatch: "way \"name\"=Main Rest East";
throwWarning: tr("Highway name contains Rest., may need to be expanded to Rest");
fixAdd: concat("name=", replace(tag("name")," Rest. ", " Rest "));
}

*["name"=~/ Rise\. /].highway_name {
assertNoMatch: "way \"name\"=Main Rise East";
assertMatch: "way \"name\"=Main Rise East";
throwWarning: tr("Highway name contains Rise., may need to be expanded to Rise");
fixAdd: concat("name=", replace(tag("name")," Rise. ", " Rise "));
}

*["name"=~/ Row\. /].highway_name {
assertNoMatch: "way \"name\"=Main Row East";
assertMatch: "way \"name\"=Main Row East";
throwWarning: tr("Highway name contains Row., may need to be expanded to Row");
fixAdd: concat("name=", replace(tag("name")," Row. ", " Row "));
}

*["name"=~/ Rte\. /].highway_name {
assertNoMatch: "way \"name\"=Main Route East";
assertMatch: "way \"name\"=Main Rte East";
throwWarning: tr("Highway name contains Rte., may need to be expanded to Route");
fixAdd: concat("name=", replace(tag("name")," Rte. ", " Route "));
}

*["name"=~/ Rtr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Retreat East";
assertMatch: "way \"name\"=Main Rtr East";
throwWarning: tr("Highway name contains Rtr., may need to be expanded to Retreat");
fixAdd: concat("name=", replace(tag("name")," Rtr. ", " Retreat "));
}

*["name"=~/ SH\. /].highway_name {
assertNoMatch: "way \"name\"=Main State Highway East";
assertMatch: "way \"name\"=Main SH East";
throwWarning: tr("Highway name contains SH., may need to be expanded to State Highway");
fixAdd: concat("name=", replace(tag("name")," SH. ", " State Highway "));
}

*["name"=~/ Slp\. /].highway_name {
assertNoMatch: "way \"name\"=Main Slope East";
assertMatch: "way \"name\"=Main Slp East";
throwWarning: tr("Highway name contains Slp., may need to be expanded to Slope");
fixAdd: concat("name=", replace(tag("name")," Slp. ", " Slope "));
}

*["name"=~/ Spa\. /].highway_name {
assertNoMatch: "way \"name\"=Main Spa East";
assertMatch: "way \"name\"=Main Spa East";
throwWarning: tr("Highway name contains Spa., may need to be expanded to Spa");
fixAdd: concat("name=", replace(tag("name")," Spa. ", " Spa "));
}

*["name"=~/ Spur\. /].highway_name {
assertNoMatch: "way \"name\"=Main Spur East";
assertMatch: "way \"name\"=Main Spur East";
throwWarning: tr("Highway name contains Spur., may need to be expanded to Spur");
fixAdd: concat("name=", replace(tag("name")," Spur. ", " Spur "));
}

*["name"=~/ Sq\. /].highway_name {
assertNoMatch: "way \"name\"=Main Square East";
assertMatch: "way \"name\"=Main Sq East";
throwWarning: tr("Highway name contains Sq., may need to be expanded to Square");
fixAdd: concat("name=", replace(tag("name")," Sq. ", " Square "));
}

*["name"=~/ St\. /].highway_name {
assertNoMatch: "way \"name\"=Main Street East";
assertMatch: "way \"name\"=Main St East";
throwWarning: tr("Highway name contains St., may need to be expanded to Street");
fixAdd: concat("name=", replace(tag("name")," St. ", " Street "));
}

*["name"=~/ Steep\. /].highway_name {
assertNoMatch: "way \"name\"=Main Steep East";
assertMatch: "way \"name\"=Main Steep East";
throwWarning: tr("Highway name contains Steep., may need to be expanded to Steep");
fixAdd: concat("name=", replace(tag("name")," Steep. ", " Steep "));
}

*["name"=~/ Stgt\. /].highway_name {
assertNoMatch: "way \"name\"=Main Straight East";
assertMatch: "way \"name\"=Main Stgt East";
throwWarning: tr("Highway name contains Stgt., may need to be expanded to Straight");
fixAdd: concat("name=", replace(tag("name")," Stgt. ", " Straight "));
}

*["name"=~/ Stps\. /].highway_name {
assertNoMatch: "way \"name\"=Main Steps East";
assertMatch: "way \"name\"=Main Stps East";
throwWarning: tr("Highway name contains Stps., may need to be expanded to Steps");
fixAdd: concat("name=", replace(tag("name")," Stps. ", " Steps "));
}

*["name"=~/ Strd\. /].highway_name {
assertNoMatch: "way \"name\"=Main Strand East";
assertMatch: "way \"name\"=Main Strd East";
throwWarning: tr("Highway name contains Strd., may need to be expanded to Strand");
fixAdd: concat("name=", replace(tag("name")," Strd. ", " Strand "));
}

*["name"=~/ Svln\. /].highway_name {
assertNoMatch: "way \"name\"=Main Service Lane East";
assertMatch: "way \"name\"=Main Svln East";
throwWarning: tr("Highway name contains Svln., may need to be expanded to Service Lane");
fixAdd: concat("name=", replace(tag("name")," Svln. ", " Service Lane "));
}

*["name"=~/ Tce\. /].highway_name {
assertNoMatch: "way \"name\"=Main Terrace East";
assertMatch: "way \"name\"=Main Tce East";
throwWarning: tr("Highway name contains Tce., may need to be expanded to Terrace");
fixAdd: concat("name=", replace(tag("name")," Tce. ", " Terrace "));
}

*["name"=~/ Tmwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Tramway East";
assertMatch: "way \"name\"=Main Tmwy East";
throwWarning: tr("Highway name contains Tmwy., may need to be expanded to Tramway");
fixAdd: concat("name=", replace(tag("name")," Tmwy. ", " Tramway "));
}

*["name"=~/ Trk\. /].highway_name {
assertNoMatch: "way \"name\"=Main Track East";
assertMatch: "way \"name\"=Main Trk East";
throwWarning: tr("Highway name contains Trk., may need to be expanded to Track");
fixAdd: concat("name=", replace(tag("name")," Trk. ", " Track "));
}

*["name"=~/ Trl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Trail East";
assertMatch: "way \"name\"=Main Trl East";
throwWarning: tr("Highway name contains Trl., may need to be expanded to Trail");
fixAdd: concat("name=", replace(tag("name")," Trl. ", " Trail "));
}

*["name"=~/ Trs\. /].highway_name {
assertNoMatch: "way \"name\"=Main Trees East";
assertMatch: "way \"name\"=Main Trs East";
throwWarning: tr("Highway name contains Trs., may need to be expanded to Trees");
fixAdd: concat("name=", replace(tag("name")," Trs. ", " Trees "));
}

*["name"=~/ Twrs\. /].highway_name {
assertNoMatch: "way \"name\"=Main Towers East";
assertMatch: "way \"name\"=Main Twrs East";
throwWarning: tr("Highway name contains Twrs., may need to be expanded to Towers");
fixAdd: concat("name=", replace(tag("name")," Twrs. ", " Towers "));
}

*["name"=~/ Vale\. /].highway_name {
assertNoMatch: "way \"name\"=Main Vale East";
assertMatch: "way \"name\"=Main Vale East";
throwWarning: tr("Highway name contains Vale., may need to be expanded to Vale");
fixAdd: concat("name=", replace(tag("name")," Vale. ", " Vale "));
}

*["name"=~/ Vis\. /].highway_name {
assertNoMatch: "way \"name\"=Main Vista East";
assertMatch: "way \"name\"=Main Vis East";
throwWarning: tr("Highway name contains Vis., may need to be expanded to Vista");
fixAdd: concat("name=", replace(tag("name")," Vis. ", " Vista "));
}

*["name"=~/ Vlg\. /].highway_name {
assertNoMatch: "way \"name\"=Main Village East";
assertMatch: "way \"name\"=Main Vlg East";
throwWarning: tr("Highway name contains Vlg., may need to be expanded to Village");
fixAdd: concat("name=", replace(tag("name")," Vlg. ", " Village "));
}

*["name"=~/ Vlls\. /].highway_name {
assertNoMatch: "way \"name\"=Main Villas East";
assertMatch: "way \"name\"=Main Vlls East";
throwWarning: tr("Highway name contains Vlls., may need to be expanded to Villas");
fixAdd: concat("name=", replace(tag("name")," Vlls. ", " Villas "));
}

*["name"=~/ Vly\. /].highway_name {
assertNoMatch: "way \"name\"=Main Valley East";
assertMatch: "way \"name\"=Main Vly East";
throwWarning: tr("Highway name contains Vly., may need to be expanded to Valley");
fixAdd: concat("name=", replace(tag("name")," Vly. ", " Valley "));
}

*["name"=~/ Vnus\. /].highway_name {
assertNoMatch: "way \"name\"=Main Venus East";
assertMatch: "way \"name\"=Main Vnus East";
throwWarning: tr("Highway name contains Vnus., may need to be expanded to Venus");
fixAdd: concat("name=", replace(tag("name")," Vnus. ", " Venus "));
}

*["name"=~/ Vue\. /].highway_name {
assertNoMatch: "way \"name\"=Main Vue East";
assertMatch: "way \"name\"=Main Vue East";
throwWarning: tr("Highway name contains Vue., may need to be expanded to Vue");
fixAdd: concat("name=", replace(tag("name")," Vue. ", " Vue "));
}

*["name"=~/ Vw\. /].highway_name {
assertNoMatch: "way \"name\"=Main View East";
assertMatch: "way \"name\"=Main Vw East";
throwWarning: tr("Highway name contains Vw., may need to be expanded to View");
fixAdd: concat("name=", replace(tag("name")," Vw. ", " View "));
}

*["name"=~/ Vws\. /].highway_name {
assertNoMatch: "way \"name\"=Main Views East";
assertMatch: "way \"name\"=Main Vws East";
throwWarning: tr("Highway name contains Vws., may need to be expanded to Views");
fixAdd: concat("name=", replace(tag("name")," Vws. ", " Views "));
}

*["name"=~/ Waters\. /].highway_name {
assertNoMatch: "way \"name\"=Main Waters East";
assertMatch: "way \"name\"=Main Waters East";
throwWarning: tr("Highway name contains Waters., may need to be expanded to Waters");
fixAdd: concat("name=", replace(tag("name")," Waters. ", " Waters "));
}

*["name"=~/ Way\. /].highway_name {
assertNoMatch: "way \"name\"=Main Way East";
assertMatch: "way \"name\"=Main Way East";
throwWarning: tr("Highway name contains Way., may need to be expanded to Way");
fixAdd: concat("name=", replace(tag("name")," Way. ", " Way "));
}

*["name"=~/ Whrf\. /].highway_name {
assertNoMatch: "way \"name\"=Main Wharf East";
assertMatch: "way \"name\"=Main Whrf East";
throwWarning: tr("Highway name contains Whrf., may need to be expanded to Wharf");
fixAdd: concat("name=", replace(tag("name")," Whrf. ", " Wharf "));
}

*["name"=~/ Wlk\. /].highway_name {
assertNoMatch: "way \"name\"=Main Walk East";
assertMatch: "way \"name\"=Main Wlk East";
throwWarning: tr("Highway name contains Wlk., may need to be expanded to Walk");
fixAdd: concat("name=", replace(tag("name")," Wlk. ", " Walk "));
}

*["name"=~/ Wynd\. /].highway_name {
assertNoMatch: "way \"name\"=Main Wynd East";
assertMatch: "way \"name\"=Main Wynd East";
throwWarning: tr("Highway name contains Wynd., may need to be expanded to Wynd");
fixAdd: concat("name=", replace(tag("name")," Wynd. ", " Wynd "));
}

*["addr:street"]["addr:street"=~/^Accs /] {
assertNoMatch: "way \"addr:street\"=Access Foo";
assertMatch: "way \"addr:street\"=Accs Foo";
throwWarning: tr("addr:street={0} begins with Accs, should likely be expanded to Access","{0.value}");
fixAdd: concat("addr:street=", "Access", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Accs, may need to be expanded to Access");
}

*["addr:street"]["addr:street"=~/^Accswy /] {
assertNoMatch: "way \"addr:street\"=Accessway Foo";
assertMatch: "way \"addr:street\"=Accswy Foo";
throwWarning: tr("addr:street={0} begins with Accswy, should likely be expanded to Accessway","{0.value}");
fixAdd: concat("addr:street=", "Accessway", substring(tag("addr:street"), 6));
group: tr("addr:street begins with Accswy, may need to be expanded to Accessway");
}

*["addr:street"]["addr:street"=~/^Aly /] {
assertNoMatch: "way \"addr:street\"=Alley Foo";
assertMatch: "way \"addr:street\"=Aly Foo";
throwWarning: tr("addr:street={0} begins with Aly, should likely be expanded to Alley","{0.value}");
fixAdd: concat("addr:street=", "Alley", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Aly, may need to be expanded to Alley");
}

*["addr:street"]["addr:street"=~/^Ancg /] {
assertNoMatch: "way \"addr:street\"=Anchorage Foo";
assertMatch: "way \"addr:street\"=Ancg Foo";
throwWarning: tr("addr:street={0} begins with Ancg, should likely be expanded to Anchorage","{0.value}");
fixAdd: concat("addr:street=", "Anchorage", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Ancg, may need to be expanded to Anchorage");
}

*["addr:street"]["addr:street"=~/^App /] {
assertNoMatch: "way \"addr:street\"=Approach Foo";
assertMatch: "way \"addr:street\"=App Foo";
throwWarning: tr("addr:street={0} begins with App, should likely be expanded to Approach","{0.value}");
fixAdd: concat("addr:street=", "Approach", substring(tag("addr:street"), 3));
group: tr("addr:street begins with App, may need to be expanded to Approach");
}

*["addr:street"]["addr:street"=~/^Arc /] {
assertNoMatch: "way \"addr:street\"=Arcade Foo";
assertMatch: "way \"addr:street\"=Arc Foo";
throwWarning: tr("addr:street={0} begins with Arc, should likely be expanded to Arcade","{0.value}");
fixAdd: concat("addr:street=", "Arcade", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Arc, may need to be expanded to Arcade");
}

*["addr:street"]["addr:street"=~/^Arch /] {
assertNoMatch: "way \"addr:street\"=Arch Foo";
assertMatch: "way \"addr:street\"=Arch Foo";
throwWarning: tr("addr:street={0} begins with Arch, should likely be expanded to Arch","{0.value}");
fixAdd: concat("addr:street=", "Arch", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Arch, may need to be expanded to Arch");
}

*["addr:street"]["addr:street"=~/^Ave /] {
assertNoMatch: "way \"addr:street\"=Avenue Foo";
assertMatch: "way \"addr:street\"=Ave Foo";
throwWarning: tr("addr:street={0} begins with Ave, should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", "Avenue", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Ave, may need to be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/^Bank /] {
assertNoMatch: "way \"addr:street\"=Bank Foo";
assertMatch: "way \"addr:street\"=Bank Foo";
throwWarning: tr("addr:street={0} begins with Bank, should likely be expanded to Bank","{0.value}");
fixAdd: concat("addr:street=", "Bank", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Bank, may need to be expanded to Bank");
}

*["addr:street"]["addr:street"=~/^Bay /] {
assertNoMatch: "way \"addr:street\"=Bay Foo";
assertMatch: "way \"addr:street\"=Bay Foo";
throwWarning: tr("addr:street={0} begins with Bay, should likely be expanded to Bay","{0.value}");
fixAdd: concat("addr:street=", "Bay", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Bay, may need to be expanded to Bay");
}

*["addr:street"]["addr:street"=~/^Bch /] {
assertNoMatch: "way \"addr:street\"=Beach Foo";
assertMatch: "way \"addr:street\"=Bch Foo";
throwWarning: tr("addr:street={0} begins with Bch, should likely be expanded to Beach","{0.value}");
fixAdd: concat("addr:street=", "Beach", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Bch, may need to be expanded to Beach");
}

*["addr:street"]["addr:street"=~/^Belt /] {
assertNoMatch: "way \"addr:street\"=Belt Foo";
assertMatch: "way \"addr:street\"=Belt Foo";
throwWarning: tr("addr:street={0} begins with Belt, should likely be expanded to Belt","{0.value}");
fixAdd: concat("addr:street=", "Belt", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Belt, may need to be expanded to Belt");
}

*["addr:street"]["addr:street"=~/^Blf /] {
assertNoMatch: "way \"addr:street\"=Bluff Foo";
assertMatch: "way \"addr:street\"=Blf Foo";
throwWarning: tr("addr:street={0} begins with Blf, should likely be expanded to Bluff","{0.value}");
fixAdd: concat("addr:street=", "Bluff", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Blf, may need to be expanded to Bluff");
}

*["addr:street"]["addr:street"=~/^Blvd /] {
assertNoMatch: "way \"addr:street\"=Boulevard Foo";
assertMatch: "way \"addr:street\"=Blvd Foo";
throwWarning: tr("addr:street={0} begins with Blvd, should likely be expanded to Boulevard","{0.value}");
fixAdd: concat("addr:street=", "Boulevard", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Blvd, may need to be expanded to Boulevard");
}

*["addr:street"]["addr:street"=~/^Bnd /] {
assertNoMatch: "way \"addr:street\"=Bend Foo";
assertMatch: "way \"addr:street\"=Bnd Foo";
throwWarning: tr("addr:street={0} begins with Bnd, should likely be expanded to Bend","{0.value}");
fixAdd: concat("addr:street=", "Bend", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Bnd, may need to be expanded to Bend");
}

*["addr:street"]["addr:street"=~/^Brae /] {
assertNoMatch: "way \"addr:street\"=Brae Foo";
assertMatch: "way \"addr:street\"=Brae Foo";
throwWarning: tr("addr:street={0} begins with Brae, should likely be expanded to Brae","{0.value}");
fixAdd: concat("addr:street=", "Brae", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Brae, may need to be expanded to Brae");
}

*["addr:street"]["addr:street"=~/^Brg /] {
assertNoMatch: "way \"addr:street\"=Bridge Foo";
assertMatch: "way \"addr:street\"=Brg Foo";
throwWarning: tr("addr:street={0} begins with Brg, should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", "Bridge", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Brg, may need to be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/^Briars /] {
assertNoMatch: "way \"addr:street\"=Briars Foo";
assertMatch: "way \"addr:street\"=Briars Foo";
throwWarning: tr("addr:street={0} begins with Briars, should likely be expanded to Briars","{0.value}");
fixAdd: concat("addr:street=", "Briars", substring(tag("addr:street"), 6));
group: tr("addr:street begins with Briars, may need to be expanded to Briars");
}

*["addr:street"]["addr:street"=~/^Byp /] {
assertNoMatch: "way \"addr:street\"=Bypass Foo";
assertMatch: "way \"addr:street\"=Byp Foo";
throwWarning: tr("addr:street={0} begins with Byp, should likely be expanded to Bypass","{0.value}");
fixAdd: concat("addr:street=", "Bypass", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Byp, may need to be expanded to Bypass");
}

*["addr:street"]["addr:street"=~/^Ch /] {
assertNoMatch: "way \"addr:street\"=Chase Foo";
assertMatch: "way \"addr:street\"=Ch Foo";
throwWarning: tr("addr:street={0} begins with Ch, should likely be expanded to Chase","{0.value}");
fixAdd: concat("addr:street=", "Chase", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Ch, may need to be expanded to Chase");
}

*["addr:street"]["addr:street"=~/^Cir /] {
assertNoMatch: "way \"addr:street\"=Circle Foo";
assertMatch: "way \"addr:street\"=Cir Foo";
throwWarning: tr("addr:street={0} begins with Cir, should likely be expanded to Circle","{0.value}");
fixAdd: concat("addr:street=", "Circle", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Cir, may need to be expanded to Circle");
}

*["addr:street"]["addr:street"=~/^Cl /] {
assertNoMatch: "way \"addr:street\"=Close Foo";
assertMatch: "way \"addr:street\"=Cl Foo";
throwWarning: tr("addr:street={0} begins with Cl, should likely be expanded to Close","{0.value}");
fixAdd: concat("addr:street=", "Close", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Cl, may need to be expanded to Close");
}

*["addr:street"]["addr:street"=~/^Clm /] {
assertNoMatch: "way \"addr:street\"=Claim Foo";
assertMatch: "way \"addr:street\"=Clm Foo";
throwWarning: tr("addr:street={0} begins with Clm, should likely be expanded to Claim","{0.value}");
fixAdd: concat("addr:street=", "Claim", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Clm, may need to be expanded to Claim");
}

*["addr:street"]["addr:street"=~/^Cmn /] {
assertNoMatch: "way \"addr:street\"=Common Foo";
assertMatch: "way \"addr:street\"=Cmn Foo";
throwWarning: tr("addr:street={0} begins with Cmn, should likely be expanded to Common","{0.value}");
fixAdd: concat("addr:street=", "Common", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Cmn, may need to be expanded to Common");
}

*["addr:street"]["addr:street"=~/^Crcs /] {
assertNoMatch: "way \"addr:street\"=Circus Foo";
assertMatch: "way \"addr:street\"=Crcs Foo";
throwWarning: tr("addr:street={0} begins with Crcs, should likely be expanded to Circus","{0.value}");
fixAdd: concat("addr:street=", "Circus", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Crcs, may need to be expanded to Circus");
}

*["addr:street"]["addr:street"=~/^Cres /] {
assertNoMatch: "way \"addr:street\"=Crescent Foo";
assertMatch: "way \"addr:street\"=Cres Foo";
throwWarning: tr("addr:street={0} begins with Cres, should likely be expanded to Crescent","{0.value}");
fixAdd: concat("addr:street=", "Crescent", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Cres, may need to be expanded to Crescent");
}

*["addr:street"]["addr:street"=~/^Crk /] {
assertNoMatch: "way \"addr:street\"=Creek Foo";
assertMatch: "way \"addr:street\"=Crk Foo";
throwWarning: tr("addr:street={0} begins with Crk, should likely be expanded to Creek","{0.value}");
fixAdd: concat("addr:street=", "Creek", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Crk, may need to be expanded to Creek");
}

*["addr:street"]["addr:street"=~/^Crst /] {
assertNoMatch: "way \"addr:street\"=Crest Foo";
assertMatch: "way \"addr:street\"=Crst Foo";
throwWarning: tr("addr:street={0} begins with Crst, should likely be expanded to Crest","{0.value}");
fixAdd: concat("addr:street=", "Crest", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Crst, may need to be expanded to Crest");
}

*["addr:street"]["addr:street"=~/^Crt /] {
assertNoMatch: "way \"addr:street\"=Court Foo";
assertMatch: "way \"addr:street\"=Crt Foo";
throwWarning: tr("addr:street={0} begins with Crt, should likely be expanded to Court","{0.value}");
fixAdd: concat("addr:street=", "Court", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Crt, may need to be expanded to Court");
}

*["addr:street"]["addr:street"=~/^Crts /] {
assertNoMatch: "way \"addr:street\"=Courts Foo";
assertMatch: "way \"addr:street\"=Crts Foo";
throwWarning: tr("addr:street={0} begins with Crts, should likely be expanded to Courts","{0.value}");
fixAdd: concat("addr:street=", "Courts", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Crts, may need to be expanded to Courts");
}

*["addr:street"]["addr:street"=~/^Ctr /] {
assertNoMatch: "way \"addr:street\"=Centre Foo";
assertMatch: "way \"addr:street\"=Ctr Foo";
throwWarning: tr("addr:street={0} begins with Ctr, should likely be expanded to Centre","{0.value}");
fixAdd: concat("addr:street=", "Centre", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Ctr, may need to be expanded to Centre");
}

*["addr:street"]["addr:street"=~/^Cul /] {
assertNoMatch: "way \"addr:street\"=Cul Foo";
assertMatch: "way \"addr:street\"=Cul Foo";
throwWarning: tr("addr:street={0} begins with Cul, should likely be expanded to Cul","{0.value}");
fixAdd: concat("addr:street=", "Cul", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Cul, may need to be expanded to Cul");
}

*["addr:street"]["addr:street"=~/^Cv /] {
assertNoMatch: "way \"addr:street\"=Cove Foo";
assertMatch: "way \"addr:street\"=Cv Foo";
throwWarning: tr("addr:street={0} begins with Cv, should likely be expanded to Cove","{0.value}");
fixAdd: concat("addr:street=", "Cove", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Cv, may need to be expanded to Cove");
}

*["addr:street"]["addr:street"=~/^Del /] {
assertNoMatch: "way \"addr:street\"=Dell Foo";
assertMatch: "way \"addr:street\"=Del Foo";
throwWarning: tr("addr:street={0} begins with Del, should likely be expanded to Dell","{0.value}");
fixAdd: concat("addr:street=", "Dell", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Del, may need to be expanded to Dell");
}

*["addr:street"]["addr:street"=~/^Dle /] {
assertNoMatch: "way \"addr:street\"=Dale Foo";
assertMatch: "way \"addr:street\"=Dle Foo";
throwWarning: tr("addr:street={0} begins with Dle, should likely be expanded to Dale","{0.value}");
fixAdd: concat("addr:street=", "Dale", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Dle, may need to be expanded to Dale");
}

*["addr:street"]["addr:street"=~/^Downs /] {
assertNoMatch: "way \"addr:street\"=Downs Foo";
assertMatch: "way \"addr:street\"=Downs Foo";
throwWarning: tr("addr:street={0} begins with Downs, should likely be expanded to Downs","{0.value}");
fixAdd: concat("addr:street=", "Downs", substring(tag("addr:street"), 5));
group: tr("addr:street begins with Downs, may need to be expanded to Downs");
}

*["addr:street"]["addr:street"=~/^Dr /] {
assertNoMatch: "way \"addr:street\"=Drive Foo";
assertMatch: "way \"addr:street\"=Dr Foo";
throwWarning: tr("addr:street={0} begins with Dr, should likely be expanded to Drive","{0.value}");
fixAdd: concat("addr:street=", "Drive", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Dr, may need to be expanded to Drive");
}

*["addr:street"]["addr:street"=~/^Dune /] {
assertNoMatch: "way \"addr:street\"=Dune Foo";
assertMatch: "way \"addr:street\"=Dune Foo";
throwWarning: tr("addr:street={0} begins with Dune, should likely be expanded to Dune","{0.value}");
fixAdd: concat("addr:street=", "Dune", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Dune, may need to be expanded to Dune");
}

*["addr:street"]["addr:street"=~/^Dvn /] {
assertNoMatch: "way \"addr:street\"=Deviation Foo";
assertMatch: "way \"addr:street\"=Dvn Foo";
throwWarning: tr("addr:street={0} begins with Dvn, should likely be expanded to Deviation","{0.value}");
fixAdd: concat("addr:street=", "Deviation", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Dvn, may need to be expanded to Deviation");
}

*["addr:street"]["addr:street"=~/^Elm /] {
assertNoMatch: "way \"addr:street\"=Elm Foo";
assertMatch: "way \"addr:street\"=Elm Foo";
throwWarning: tr("addr:street={0} begins with Elm, should likely be expanded to Elm","{0.value}");
fixAdd: concat("addr:street=", "Elm", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Elm, may need to be expanded to Elm");
}

*["addr:street"]["addr:street"=~/^End /] {
assertNoMatch: "way \"addr:street\"=End Foo";
assertMatch: "way \"addr:street\"=End Foo";
throwWarning: tr("addr:street={0} begins with End, should likely be expanded to End","{0.value}");
fixAdd: concat("addr:street=", "End", substring(tag("addr:street"), 3));
group: tr("addr:street begins with End, may need to be expanded to End");
}

*["addr:street"]["addr:street"=~/^Ent /] {
assertNoMatch: "way \"addr:street\"=Entrance Foo";
assertMatch: "way \"addr:street\"=Ent Foo";
throwWarning: tr("addr:street={0} begins with Ent, should likely be expanded to Entrance","{0.value}");
fixAdd: concat("addr:street=", "Entrance", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Ent, may need to be expanded to Entrance");
}

*["addr:street"]["addr:street"=~/^Esp /] {
assertNoMatch: "way \"addr:street\"=Esplanade Foo";
assertMatch: "way \"addr:street\"=Esp Foo";
throwWarning: tr("addr:street={0} begins with Esp, should likely be expanded to Esplanade","{0.value}");
fixAdd: concat("addr:street=", "Esplanade", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Esp, may need to be expanded to Esplanade");
}

*["addr:street"]["addr:street"=~/^Est /] {
assertNoMatch: "way \"addr:street\"=Estate Foo";
assertMatch: "way \"addr:street\"=Est Foo";
throwWarning: tr("addr:street={0} begins with Est, should likely be expanded to Estate","{0.value}");
fixAdd: concat("addr:street=", "Estate", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Est, may need to be expanded to Estate");
}

*["addr:street"]["addr:street"=~/^Fall /] {
assertNoMatch: "way \"addr:street\"=Fall Foo";
assertMatch: "way \"addr:street\"=Fall Foo";
throwWarning: tr("addr:street={0} begins with Fall, should likely be expanded to Fall","{0.value}");
fixAdd: concat("addr:street=", "Fall", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Fall, may need to be expanded to Fall");
}

*["addr:street"]["addr:street"=~/^Fare /] {
assertNoMatch: "way \"addr:street\"=Fare Foo";
assertMatch: "way \"addr:street\"=Fare Foo";
throwWarning: tr("addr:street={0} begins with Fare, should likely be expanded to Fare","{0.value}");
fixAdd: concat("addr:street=", "Fare", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Fare, may need to be expanded to Fare");
}

*["addr:street"]["addr:street"=~/^Fawy /] {
assertNoMatch: "way \"addr:street\"=Fairway Foo";
assertMatch: "way \"addr:street\"=Fawy Foo";
throwWarning: tr("addr:street={0} begins with Fawy, should likely be expanded to Fairway","{0.value}");
fixAdd: concat("addr:street=", "Fairway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Fawy, may need to be expanded to Fairway");
}

*["addr:street"]["addr:street"=~/^Fen /] {
assertNoMatch: "way \"addr:street\"=Fen Foo";
assertMatch: "way \"addr:street\"=Fen Foo";
throwWarning: tr("addr:street={0} begins with Fen, should likely be expanded to Fen","{0.value}");
fixAdd: concat("addr:street=", "Fen", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Fen, may need to be expanded to Fen");
}

*["addr:street"]["addr:street"=~/^Fern /] {
assertNoMatch: "way \"addr:street\"=Fern Foo";
assertMatch: "way \"addr:street\"=Fern Foo";
throwWarning: tr("addr:street={0} begins with Fern, should likely be expanded to Fern","{0.value}");
fixAdd: concat("addr:street=", "Fern", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Fern, may need to be expanded to Fern");
}

*["addr:street"]["addr:street"=~/^Flt /] {
assertNoMatch: "way \"addr:street\"=Flat Foo";
assertMatch: "way \"addr:street\"=Flt Foo";
throwWarning: tr("addr:street={0} begins with Flt, should likely be expanded to Flat","{0.value}");
fixAdd: concat("addr:street=", "Flat", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Flt, may need to be expanded to Flat");
}

*["addr:street"]["addr:street"=~/^Flts /] {
assertNoMatch: "way \"addr:street\"=Flats Foo";
assertMatch: "way \"addr:street\"=Flts Foo";
throwWarning: tr("addr:street={0} begins with Flts, should likely be expanded to Flats","{0.value}");
fixAdd: concat("addr:street=", "Flats", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Flts, may need to be expanded to Flats");
}

*["addr:street"]["addr:street"=~/^Frms /] {
assertNoMatch: "way \"addr:street\"=Farms Foo";
assertMatch: "way \"addr:street\"=Frms Foo";
throwWarning: tr("addr:street={0} begins with Frms, should likely be expanded to Farms","{0.value}");
fixAdd: concat("addr:street=", "Farms", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Frms, may need to be expanded to Farms");
}

*["addr:street"]["addr:street"=~/^Gdn /] {
assertNoMatch: "way \"addr:street\"=Garden Foo";
assertMatch: "way \"addr:street\"=Gdn Foo";
throwWarning: tr("addr:street={0} begins with Gdn, should likely be expanded to Garden","{0.value}");
fixAdd: concat("addr:street=", "Garden", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Gdn, may need to be expanded to Garden");
}

*["addr:street"]["addr:street"=~/^Gdns /] {
assertNoMatch: "way \"addr:street\"=Gardens Foo";
assertMatch: "way \"addr:street\"=Gdns Foo";
throwWarning: tr("addr:street={0} begins with Gdns, should likely be expanded to Gardens","{0.value}");
fixAdd: concat("addr:street=", "Gardens", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Gdns, may need to be expanded to Gardens");
}

*["addr:street"]["addr:street"=~/^Gld /] {
assertNoMatch: "way \"addr:street\"=Glade Foo";
assertMatch: "way \"addr:street\"=Gld Foo";
throwWarning: tr("addr:street={0} begins with Gld, should likely be expanded to Glade","{0.value}");
fixAdd: concat("addr:street=", "Glade", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Gld, may need to be expanded to Glade");
}

*["addr:street"]["addr:street"=~/^Gln /] {
assertNoMatch: "way \"addr:street\"=Glen Foo";
assertMatch: "way \"addr:street\"=Gln Foo";
throwWarning: tr("addr:street={0} begins with Gln, should likely be expanded to Glen","{0.value}");
fixAdd: concat("addr:street=", "Glen", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Gln, may need to be expanded to Glen");
}

*["addr:street"]["addr:street"=~/^Gly /] {
assertNoMatch: "way \"addr:street\"=Gully Foo";
assertMatch: "way \"addr:street\"=Gly Foo";
throwWarning: tr("addr:street={0} begins with Gly, should likely be expanded to Gully","{0.value}");
fixAdd: concat("addr:street=", "Gully", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Gly, may need to be expanded to Gully");
}

*["addr:street"]["addr:street"=~/^Grg /] {
assertNoMatch: "way \"addr:street\"=Grange Foo";
assertMatch: "way \"addr:street\"=Grg Foo";
throwWarning: tr("addr:street={0} begins with Grg, should likely be expanded to Grange","{0.value}");
fixAdd: concat("addr:street=", "Grange", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Grg, may need to be expanded to Grange");
}

*["addr:street"]["addr:street"=~/^Grn /] {
assertNoMatch: "way \"addr:street\"=Green Foo";
assertMatch: "way \"addr:street\"=Grn Foo";
throwWarning: tr("addr:street={0} begins with Grn, should likely be expanded to Green","{0.value}");
fixAdd: concat("addr:street=", "Green", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Grn, may need to be expanded to Green");
}

*["addr:street"]["addr:street"=~/^Grv /] {
assertNoMatch: "way \"addr:street\"=Grove Foo";
assertMatch: "way \"addr:street\"=Grv Foo";
throwWarning: tr("addr:street={0} begins with Grv, should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", "Grove", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Grv, may need to be expanded to Grove");
}

*["addr:street"]["addr:street"=~/^Gte /] {
assertNoMatch: "way \"addr:street\"=Gate Foo";
assertMatch: "way \"addr:street\"=Gte Foo";
throwWarning: tr("addr:street={0} begins with Gte, should likely be expanded to Gate","{0.value}");
fixAdd: concat("addr:street=", "Gate", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Gte, may need to be expanded to Gate");
}

*["addr:street"]["addr:street"=~/^Head /] {
assertNoMatch: "way \"addr:street\"=Head Foo";
assertMatch: "way \"addr:street\"=Head Foo";
throwWarning: tr("addr:street={0} begins with Head, should likely be expanded to Head","{0.value}");
fixAdd: concat("addr:street=", "Head", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Head, may need to be expanded to Head");
}

*["addr:street"]["addr:street"=~/^Hl /] {
assertNoMatch: "way \"addr:street\"=Hill Foo";
assertMatch: "way \"addr:street\"=Hl Foo";
throwWarning: tr("addr:street={0} begins with Hl, should likely be expanded to Hill","{0.value}");
fixAdd: concat("addr:street=", "Hill", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Hl, may need to be expanded to Hill");
}

*["addr:street"]["addr:street"=~/^Hts /] {
assertNoMatch: "way \"addr:street\"=Heights Foo";
assertMatch: "way \"addr:street\"=Hts Foo";
throwWarning: tr("addr:street={0} begins with Hts, should likely be expanded to Heights","{0.value}");
fixAdd: concat("addr:street=", "Heights", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Hts, may need to be expanded to Heights");
}

*["addr:street"]["addr:street"=~/^Hvn /] {
assertNoMatch: "way \"addr:street\"=Haven Foo";
assertMatch: "way \"addr:street\"=Hvn Foo";
throwWarning: tr("addr:street={0} begins with Hvn, should likely be expanded to Haven","{0.value}");
fixAdd: concat("addr:street=", "Haven", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Hvn, may need to be expanded to Haven");
}

*["addr:street"]["addr:street"=~/^Hwy /] {
assertNoMatch: "way \"addr:street\"=Highway Foo";
assertMatch: "way \"addr:street\"=Hwy Foo";
throwWarning: tr("addr:street={0} begins with Hwy, should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", "Highway", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Hwy, may need to be expanded to Highway");
}

*["addr:street"]["addr:street"=~/^Is /] {
assertNoMatch: "way \"addr:street\"=Island Foo";
assertMatch: "way \"addr:street\"=Is Foo";
throwWarning: tr("addr:street={0} begins with Is, should likely be expanded to Island","{0.value}");
fixAdd: concat("addr:street=", "Island", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Is, may need to be expanded to Island");
}

*["addr:street"]["addr:street"=~/^Jct /] {
assertNoMatch: "way \"addr:street\"=Junction Foo";
assertMatch: "way \"addr:street\"=Jct Foo";
throwWarning: tr("addr:street={0} begins with Jct, should likely be expanded to Junction","{0.value}");
fixAdd: concat("addr:street=", "Junction", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Jct, may need to be expanded to Junction");
}

*["addr:street"]["addr:street"=~/^Key /] {
assertNoMatch: "way \"addr:street\"=Key Foo";
assertMatch: "way \"addr:street\"=Key Foo";
throwWarning: tr("addr:street={0} begins with Key, should likely be expanded to Key","{0.value}");
fixAdd: concat("addr:street=", "Key", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Key, may need to be expanded to Key");
}

*["addr:street"]["addr:street"=~/^Knob /] {
assertNoMatch: "way \"addr:street\"=Knob Foo";
assertMatch: "way \"addr:street\"=Knob Foo";
throwWarning: tr("addr:street={0} begins with Knob, should likely be expanded to Knob","{0.value}");
fixAdd: concat("addr:street=", "Knob", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Knob, may need to be expanded to Knob");
}

*["addr:street"]["addr:street"=~/^Ladr /] {
assertNoMatch: "way \"addr:street\"=Ladder Foo";
assertMatch: "way \"addr:street\"=Ladr Foo";
throwWarning: tr("addr:street={0} begins with Ladr, should likely be expanded to Ladder","{0.value}");
fixAdd: concat("addr:street=", "Ladder", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Ladr, may need to be expanded to Ladder");
}

*["addr:street"]["addr:street"=~/^Lane /] {
assertNoMatch: "way \"addr:street\"=Lane Foo";
assertMatch: "way \"addr:street\"=Lane Foo";
throwWarning: tr("addr:street={0} begins with Lane, should likely be expanded to Lane","{0.value}");
fixAdd: concat("addr:street=", "Lane", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Lane, may need to be expanded to Lane");
}

*["addr:street"]["addr:street"=~/^Lea /] {
assertNoMatch: "way \"addr:street\"=Lea Foo";
assertMatch: "way \"addr:street\"=Lea Foo";
throwWarning: tr("addr:street={0} begins with Lea, should likely be expanded to Lea","{0.value}");
fixAdd: concat("addr:street=", "Lea", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Lea, may need to be expanded to Lea");
}

*["addr:street"]["addr:street"=~/^Ledr /] {
assertNoMatch: "way \"addr:street\"=Leader Foo";
assertMatch: "way \"addr:street\"=Ledr Foo";
throwWarning: tr("addr:street={0} begins with Ledr, should likely be expanded to Leader","{0.value}");
fixAdd: concat("addr:street=", "Leader", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Ledr, may need to be expanded to Leader");
}

*["addr:street"]["addr:street"=~/^Lgh /] {
assertNoMatch: "way \"addr:street\"=Leigh Foo";
assertMatch: "way \"addr:street\"=Lgh Foo";
throwWarning: tr("addr:street={0} begins with Lgh, should likely be expanded to Leigh","{0.value}");
fixAdd: concat("addr:street=", "Leigh", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Lgh, may need to be expanded to Leigh");
}

*["addr:street"]["addr:street"=~/^Line /] {
assertNoMatch: "way \"addr:street\"=Line Foo";
assertMatch: "way \"addr:street\"=Line Foo";
throwWarning: tr("addr:street={0} begins with Line, should likely be expanded to Line","{0.value}");
fixAdd: concat("addr:street=", "Line", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Line, may need to be expanded to Line");
}

*["addr:street"]["addr:street"=~/^Link /] {
assertNoMatch: "way \"addr:street\"=Link Foo";
assertMatch: "way \"addr:street\"=Link Foo";
throwWarning: tr("addr:street={0} begins with Link, should likely be expanded to Link","{0.value}");
fixAdd: concat("addr:street=", "Link", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Link, may need to be expanded to Link");
}

*["addr:street"]["addr:street"=~/^Lkt /] {
assertNoMatch: "way \"addr:street\"=Lookout Foo";
assertMatch: "way \"addr:street\"=Lkt Foo";
throwWarning: tr("addr:street={0} begins with Lkt, should likely be expanded to Lookout","{0.value}");
fixAdd: concat("addr:street=", "Lookout", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Lkt, may need to be expanded to Lookout");
}

*["addr:street"]["addr:street"=~/^Lndg /] {
assertNoMatch: "way \"addr:street\"=Landing Foo";
assertMatch: "way \"addr:street\"=Lndg Foo";
throwWarning: tr("addr:street={0} begins with Lndg, should likely be expanded to Landing","{0.value}");
fixAdd: concat("addr:street=", "Landing", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Lndg, may need to be expanded to Landing");
}

*["addr:street"]["addr:street"=~/^Loop /] {
assertNoMatch: "way \"addr:street\"=Loop Foo";
assertMatch: "way \"addr:street\"=Loop Foo";
throwWarning: tr("addr:street={0} begins with Loop, should likely be expanded to Loop","{0.value}");
fixAdd: concat("addr:street=", "Loop", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Loop, may need to be expanded to Loop");
}

*["addr:street"]["addr:street"=~/^Mall /] {
assertNoMatch: "way \"addr:street\"=Mall Foo";
assertMatch: "way \"addr:street\"=Mall Foo";
throwWarning: tr("addr:street={0} begins with Mall, should likely be expanded to Mall","{0.value}");
fixAdd: concat("addr:street=", "Mall", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Mall, may need to be expanded to Mall");
}

*["addr:street"]["addr:street"=~/^Mdws /] {
assertNoMatch: "way \"addr:street\"=Meadows Foo";
assertMatch: "way \"addr:street\"=Mdws Foo";
throwWarning: tr("addr:street={0} begins with Mdws, should likely be expanded to Meadows","{0.value}");
fixAdd: concat("addr:street=", "Meadows", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Mdws, may need to be expanded to Meadows");
}

*["addr:street"]["addr:street"=~/^Mead /] {
assertNoMatch: "way \"addr:street\"=Mead Foo";
assertMatch: "way \"addr:street\"=Mead Foo";
throwWarning: tr("addr:street={0} begins with Mead, should likely be expanded to Mead","{0.value}");
fixAdd: concat("addr:street=", "Mead", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Mead, may need to be expanded to Mead");
}

*["addr:street"]["addr:street"=~/^Mews /] {
assertNoMatch: "way \"addr:street\"=Mews Foo";
assertMatch: "way \"addr:street\"=Mews Foo";
throwWarning: tr("addr:street={0} begins with Mews, should likely be expanded to Mews","{0.value}");
fixAdd: concat("addr:street=", "Mews", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Mews, may need to be expanded to Mews");
}

*["addr:street"]["addr:street"=~/^Mile /] {
assertNoMatch: "way \"addr:street\"=Mile Foo";
assertMatch: "way \"addr:street\"=Mile Foo";
throwWarning: tr("addr:street={0} begins with Mile, should likely be expanded to Mile","{0.value}");
fixAdd: concat("addr:street=", "Mile", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Mile, may need to be expanded to Mile");
}

*["addr:street"]["addr:street"=~/^Motu /] {
assertNoMatch: "way \"addr:street\"=Motu Foo";
assertMatch: "way \"addr:street\"=Motu Foo";
throwWarning: tr("addr:street={0} begins with Motu, should likely be expanded to Motu","{0.value}");
fixAdd: concat("addr:street=", "Motu", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Motu, may need to be expanded to Motu");
}

*["addr:street"]["addr:street"=~/^Mt /] {
assertNoMatch: "way \"addr:street\"=Mount Foo";
assertMatch: "way \"addr:street\"=Mt Foo";
throwWarning: tr("addr:street={0} begins with Mt, should likely be expanded to Mount","{0.value}");
fixAdd: concat("addr:street=", "Mount", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Mt, may need to be expanded to Mount");
}

*["addr:street"]["addr:street"=~/^Mwy /] {
assertNoMatch: "way \"addr:street\"=Motorway Foo";
assertMatch: "way \"addr:street\"=Mwy Foo";
throwWarning: tr("addr:street={0} begins with Mwy, should likely be expanded to Motorway","{0.value}");
fixAdd: concat("addr:street=", "Motorway", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Mwy, may need to be expanded to Motorway");
}

*["addr:street"]["addr:street"=~/^Nvs /] {
assertNoMatch: "way \"addr:street\"=Neaves Foo";
assertMatch: "way \"addr:street\"=Nvs Foo";
throwWarning: tr("addr:street={0} begins with Nvs, should likely be expanded to Neaves","{0.value}");
fixAdd: concat("addr:street=", "Neaves", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Nvs, may need to be expanded to Neaves");
}

*["addr:street"]["addr:street"=~/^Oaks /] {
assertNoMatch: "way \"addr:street\"=Oaks Foo";
assertMatch: "way \"addr:street\"=Oaks Foo";
throwWarning: tr("addr:street={0} begins with Oaks, should likely be expanded to Oaks","{0.value}");
fixAdd: concat("addr:street=", "Oaks", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Oaks, may need to be expanded to Oaks");
}

*["addr:street"]["addr:street"=~/^Padk /] {
assertNoMatch: "way \"addr:street\"=Paddock Foo";
assertMatch: "way \"addr:street\"=Padk Foo";
throwWarning: tr("addr:street={0} begins with Padk, should likely be expanded to Paddock","{0.value}");
fixAdd: concat("addr:street=", "Paddock", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Padk, may need to be expanded to Paddock");
}

*["addr:street"]["addr:street"=~/^Paku /] {
assertNoMatch: "way \"addr:street\"=Paku Foo";
assertMatch: "way \"addr:street\"=Paku Foo";
throwWarning: tr("addr:street={0} begins with Paku, should likely be expanded to Paku","{0.value}");
fixAdd: concat("addr:street=", "Paku", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Paku, may need to be expanded to Paku");
}

*["addr:street"]["addr:street"=~/^Pass /] {
assertNoMatch: "way \"addr:street\"=Pass Foo";
assertMatch: "way \"addr:street\"=Pass Foo";
throwWarning: tr("addr:street={0} begins with Pass, should likely be expanded to Pass","{0.value}");
fixAdd: concat("addr:street=", "Pass", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Pass, may need to be expanded to Pass");
}

*["addr:street"]["addr:street"=~/^Pde /] {
assertNoMatch: "way \"addr:street\"=Parade Foo";
assertMatch: "way \"addr:street\"=Pde Foo";
throwWarning: tr("addr:street={0} begins with Pde, should likely be expanded to Parade","{0.value}");
fixAdd: concat("addr:street=", "Parade", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Pde, may need to be expanded to Parade");
}

*["addr:street"]["addr:street"=~/^Pk /] {
assertNoMatch: "way \"addr:street\"=Park Foo";
assertMatch: "way \"addr:street\"=Pk Foo";
throwWarning: tr("addr:street={0} begins with Pk, should likely be expanded to Park","{0.value}");
fixAdd: concat("addr:street=", "Park", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Pk, may need to be expanded to Park");
}

*["addr:street"]["addr:street"=~/^Pkwy /] {
assertNoMatch: "way \"addr:street\"=Parkway Foo";
assertMatch: "way \"addr:street\"=Pkwy Foo";
throwWarning: tr("addr:street={0} begins with Pkwy, should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", "Parkway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Pkwy, may need to be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/^Pl /] {
assertNoMatch: "way \"addr:street\"=Place Foo";
assertMatch: "way \"addr:street\"=Pl Foo";
throwWarning: tr("addr:street={0} begins with Pl, should likely be expanded to Place","{0.value}");
fixAdd: concat("addr:street=", "Place", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Pl, may need to be expanded to Place");
}

*["addr:street"]["addr:street"=~/^Priors /] {
assertNoMatch: "way \"addr:street\"=Priors Foo";
assertMatch: "way \"addr:street\"=Priors Foo";
throwWarning: tr("addr:street={0} begins with Priors, should likely be expanded to Priors","{0.value}");
fixAdd: concat("addr:street=", "Priors", substring(tag("addr:street"), 6));
group: tr("addr:street begins with Priors, may need to be expanded to Priors");
}

*["addr:street"]["addr:street"=~/^Prom /] {
assertNoMatch: "way \"addr:street\"=Promenade Foo";
assertMatch: "way \"addr:street\"=Prom Foo";
throwWarning: tr("addr:street={0} begins with Prom, should likely be expanded to Promenade","{0.value}");
fixAdd: concat("addr:street=", "Promenade", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Prom, may need to be expanded to Promenade");
}

*["addr:street"]["addr:street"=~/^Psge /] {
assertNoMatch: "way \"addr:street\"=Passage Foo";
assertMatch: "way \"addr:street\"=Psge Foo";
throwWarning: tr("addr:street={0} begins with Psge, should likely be expanded to Passage","{0.value}");
fixAdd: concat("addr:street=", "Passage", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Psge, may need to be expanded to Passage");
}

*["addr:street"]["addr:street"=~/^Pt /] {
assertNoMatch: "way \"addr:street\"=Point Foo";
assertMatch: "way \"addr:street\"=Pt Foo";
throwWarning: tr("addr:street={0} begins with Pt, should likely be expanded to Point","{0.value}");
fixAdd: concat("addr:street=", "Point", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Pt, may need to be expanded to Point");
}

*["addr:street"]["addr:street"=~/^Pth /] {
assertNoMatch: "way \"addr:street\"=Path Foo";
assertMatch: "way \"addr:street\"=Pth Foo";
throwWarning: tr("addr:street={0} begins with Pth, should likely be expanded to Path","{0.value}");
fixAdd: concat("addr:street=", "Path", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Pth, may need to be expanded to Path");
}

*["addr:street"]["addr:street"=~/^Qdrt /] {
assertNoMatch: "way \"addr:street\"=Quadrant Foo";
assertMatch: "way \"addr:street\"=Qdrt Foo";
throwWarning: tr("addr:street={0} begins with Qdrt, should likely be expanded to Quadrant","{0.value}");
fixAdd: concat("addr:street=", "Quadrant", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Qdrt, may need to be expanded to Quadrant");
}

*["addr:street"]["addr:street"=~/^Qy /] {
assertNoMatch: "way \"addr:street\"=Quay Foo";
assertMatch: "way \"addr:street\"=Qy Foo";
throwWarning: tr("addr:street={0} begins with Qy, should likely be expanded to Quay","{0.value}");
fixAdd: concat("addr:street=", "Quay", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Qy, may need to be expanded to Quay");
}

*["addr:street"]["addr:street"=~/^Rd /] {
assertNoMatch: "way \"addr:street\"=Road Foo";
assertMatch: "way \"addr:street\"=Rd Foo";
throwWarning: tr("addr:street={0} begins with Rd, should likely be expanded to Road","{0.value}");
fixAdd: concat("addr:street=", "Road", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Rd, may need to be expanded to Road");
}

*["addr:street"]["addr:street"=~/^Rdge /] {
assertNoMatch: "way \"addr:street\"=Ridge Foo";
assertMatch: "way \"addr:street\"=Rdge Foo";
throwWarning: tr("addr:street={0} begins with Rdge, should likely be expanded to Ridge","{0.value}");
fixAdd: concat("addr:street=", "Ridge", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Rdge, may need to be expanded to Ridge");
}

*["addr:street"]["addr:street"=~/^Rds /] {
assertNoMatch: "way \"addr:street\"=Roads Foo";
assertMatch: "way \"addr:street\"=Rds Foo";
throwWarning: tr("addr:street={0} begins with Rds, should likely be expanded to Roads","{0.value}");
fixAdd: concat("addr:street=", "Roads", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Rds, may need to be expanded to Roads");
}

*["addr:street"]["addr:street"=~/^Rdwy /] {
assertNoMatch: "way \"addr:street\"=Roadway Foo";
assertMatch: "way \"addr:street\"=Rdwy Foo";
throwWarning: tr("addr:street={0} begins with Rdwy, should likely be expanded to Roadway","{0.value}");
fixAdd: concat("addr:street=", "Roadway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Rdwy, may need to be expanded to Roadway");
}

*["addr:street"]["addr:street"=~/^Reef /] {
assertNoMatch: "way \"addr:street\"=Reef Foo";
assertMatch: "way \"addr:street\"=Reef Foo";
throwWarning: tr("addr:street={0} begins with Reef, should likely be expanded to Reef","{0.value}");
fixAdd: concat("addr:street=", "Reef", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Reef, may need to be expanded to Reef");
}

*["addr:street"]["addr:street"=~/^Res /] {
assertNoMatch: "way \"addr:street\"=Reserve Foo";
assertMatch: "way \"addr:street\"=Res Foo";
throwWarning: tr("addr:street={0} begins with Res, should likely be expanded to Reserve","{0.value}");
fixAdd: concat("addr:street=", "Reserve", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Res, may need to be expanded to Reserve");
}

*["addr:street"]["addr:street"=~/^Rest /] {
assertNoMatch: "way \"addr:street\"=Rest Foo";
assertMatch: "way \"addr:street\"=Rest Foo";
throwWarning: tr("addr:street={0} begins with Rest, should likely be expanded to Rest","{0.value}");
fixAdd: concat("addr:street=", "Rest", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Rest, may need to be expanded to Rest");
}

*["addr:street"]["addr:street"=~/^Rise /] {
assertNoMatch: "way \"addr:street\"=Rise Foo";
assertMatch: "way \"addr:street\"=Rise Foo";
throwWarning: tr("addr:street={0} begins with Rise, should likely be expanded to Rise","{0.value}");
fixAdd: concat("addr:street=", "Rise", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Rise, may need to be expanded to Rise");
}

*["addr:street"]["addr:street"=~/^Row /] {
assertNoMatch: "way \"addr:street\"=Row Foo";
assertMatch: "way \"addr:street\"=Row Foo";
throwWarning: tr("addr:street={0} begins with Row, should likely be expanded to Row","{0.value}");
fixAdd: concat("addr:street=", "Row", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Row, may need to be expanded to Row");
}

*["addr:street"]["addr:street"=~/^Rte /] {
assertNoMatch: "way \"addr:street\"=Route Foo";
assertMatch: "way \"addr:street\"=Rte Foo";
throwWarning: tr("addr:street={0} begins with Rte, should likely be expanded to Route","{0.value}");
fixAdd: concat("addr:street=", "Route", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Rte, may need to be expanded to Route");
}

*["addr:street"]["addr:street"=~/^Rtr /] {
assertNoMatch: "way \"addr:street\"=Retreat Foo";
assertMatch: "way \"addr:street\"=Rtr Foo";
throwWarning: tr("addr:street={0} begins with Rtr, should likely be expanded to Retreat","{0.value}");
fixAdd: concat("addr:street=", "Retreat", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Rtr, may need to be expanded to Retreat");
}

*["addr:street"]["addr:street"=~/^SH /] {
assertNoMatch: "way \"addr:street\"=State Highway Foo";
assertMatch: "way \"addr:street\"=SH Foo";
throwWarning: tr("addr:street={0} begins with SH, should likely be expanded to State Highway","{0.value}");
fixAdd: concat("addr:street=", "State Highway", substring(tag("addr:street"), 2));
group: tr("addr:street begins with SH, may need to be expanded to State Highway");
}

*["addr:street"]["addr:street"=~/^Slp /] {
assertNoMatch: "way \"addr:street\"=Slope Foo";
assertMatch: "way \"addr:street\"=Slp Foo";
throwWarning: tr("addr:street={0} begins with Slp, should likely be expanded to Slope","{0.value}");
fixAdd: concat("addr:street=", "Slope", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Slp, may need to be expanded to Slope");
}

*["addr:street"]["addr:street"=~/^Spa /] {
assertNoMatch: "way \"addr:street\"=Spa Foo";
assertMatch: "way \"addr:street\"=Spa Foo";
throwWarning: tr("addr:street={0} begins with Spa, should likely be expanded to Spa","{0.value}");
fixAdd: concat("addr:street=", "Spa", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Spa, may need to be expanded to Spa");
}

*["addr:street"]["addr:street"=~/^Spur /] {
assertNoMatch: "way \"addr:street\"=Spur Foo";
assertMatch: "way \"addr:street\"=Spur Foo";
throwWarning: tr("addr:street={0} begins with Spur, should likely be expanded to Spur","{0.value}");
fixAdd: concat("addr:street=", "Spur", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Spur, may need to be expanded to Spur");
}

*["addr:street"]["addr:street"=~/^Sq /] {
assertNoMatch: "way \"addr:street\"=Square Foo";
assertMatch: "way \"addr:street\"=Sq Foo";
throwWarning: tr("addr:street={0} begins with Sq, should likely be expanded to Square","{0.value}");
fixAdd: concat("addr:street=", "Square", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Sq, may need to be expanded to Square");
}

*["addr:street"]["addr:street"=~/^St /] {
assertNoMatch: "way \"addr:street\"=Street Foo";
assertMatch: "way \"addr:street\"=St Foo";
throwWarning: tr("addr:street={0} begins with St, should likely be expanded to Street","{0.value}");
fixAdd: concat("addr:street=", "Street", substring(tag("addr:street"), 2));
group: tr("addr:street begins with St, may need to be expanded to Street");
}

*["addr:street"]["addr:street"=~/^Steep /] {
assertNoMatch: "way \"addr:street\"=Steep Foo";
assertMatch: "way \"addr:street\"=Steep Foo";
throwWarning: tr("addr:street={0} begins with Steep, should likely be expanded to Steep","{0.value}");
fixAdd: concat("addr:street=", "Steep", substring(tag("addr:street"), 5));
group: tr("addr:street begins with Steep, may need to be expanded to Steep");
}

*["addr:street"]["addr:street"=~/^Stgt /] {
assertNoMatch: "way \"addr:street\"=Straight Foo";
assertMatch: "way \"addr:street\"=Stgt Foo";
throwWarning: tr("addr:street={0} begins with Stgt, should likely be expanded to Straight","{0.value}");
fixAdd: concat("addr:street=", "Straight", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Stgt, may need to be expanded to Straight");
}

*["addr:street"]["addr:street"=~/^Stps /] {
assertNoMatch: "way \"addr:street\"=Steps Foo";
assertMatch: "way \"addr:street\"=Stps Foo";
throwWarning: tr("addr:street={0} begins with Stps, should likely be expanded to Steps","{0.value}");
fixAdd: concat("addr:street=", "Steps", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Stps, may need to be expanded to Steps");
}

*["addr:street"]["addr:street"=~/^Strd /] {
assertNoMatch: "way \"addr:street\"=Strand Foo";
assertMatch: "way \"addr:street\"=Strd Foo";
throwWarning: tr("addr:street={0} begins with Strd, should likely be expanded to Strand","{0.value}");
fixAdd: concat("addr:street=", "Strand", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Strd, may need to be expanded to Strand");
}

*["addr:street"]["addr:street"=~/^Svln /] {
assertNoMatch: "way \"addr:street\"=Service Lane Foo";
assertMatch: "way \"addr:street\"=Svln Foo";
throwWarning: tr("addr:street={0} begins with Svln, should likely be expanded to Service Lane","{0.value}");
fixAdd: concat("addr:street=", "Service Lane", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Svln, may need to be expanded to Service Lane");
}

*["addr:street"]["addr:street"=~/^Tce /] {
assertNoMatch: "way \"addr:street\"=Terrace Foo";
assertMatch: "way \"addr:street\"=Tce Foo";
throwWarning: tr("addr:street={0} begins with Tce, should likely be expanded to Terrace","{0.value}");
fixAdd: concat("addr:street=", "Terrace", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Tce, may need to be expanded to Terrace");
}

*["addr:street"]["addr:street"=~/^Tmwy /] {
assertNoMatch: "way \"addr:street\"=Tramway Foo";
assertMatch: "way \"addr:street\"=Tmwy Foo";
throwWarning: tr("addr:street={0} begins with Tmwy, should likely be expanded to Tramway","{0.value}");
fixAdd: concat("addr:street=", "Tramway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Tmwy, may need to be expanded to Tramway");
}

*["addr:street"]["addr:street"=~/^Trk /] {
assertNoMatch: "way \"addr:street\"=Track Foo";
assertMatch: "way \"addr:street\"=Trk Foo";
throwWarning: tr("addr:street={0} begins with Trk, should likely be expanded to Track","{0.value}");
fixAdd: concat("addr:street=", "Track", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Trk, may need to be expanded to Track");
}

*["addr:street"]["addr:street"=~/^Trl /] {
assertNoMatch: "way \"addr:street\"=Trail Foo";
assertMatch: "way \"addr:street\"=Trl Foo";
throwWarning: tr("addr:street={0} begins with Trl, should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", "Trail", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Trl, may need to be expanded to Trail");
}

*["addr:street"]["addr:street"=~/^Trs /] {
assertNoMatch: "way \"addr:street\"=Trees Foo";
assertMatch: "way \"addr:street\"=Trs Foo";
throwWarning: tr("addr:street={0} begins with Trs, should likely be expanded to Trees","{0.value}");
fixAdd: concat("addr:street=", "Trees", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Trs, may need to be expanded to Trees");
}

*["addr:street"]["addr:street"=~/^Twrs /] {
assertNoMatch: "way \"addr:street\"=Towers Foo";
assertMatch: "way \"addr:street\"=Twrs Foo";
throwWarning: tr("addr:street={0} begins with Twrs, should likely be expanded to Towers","{0.value}");
fixAdd: concat("addr:street=", "Towers", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Twrs, may need to be expanded to Towers");
}

*["addr:street"]["addr:street"=~/^Vale /] {
assertNoMatch: "way \"addr:street\"=Vale Foo";
assertMatch: "way \"addr:street\"=Vale Foo";
throwWarning: tr("addr:street={0} begins with Vale, should likely be expanded to Vale","{0.value}");
fixAdd: concat("addr:street=", "Vale", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Vale, may need to be expanded to Vale");
}

*["addr:street"]["addr:street"=~/^Vis /] {
assertNoMatch: "way \"addr:street\"=Vista Foo";
assertMatch: "way \"addr:street\"=Vis Foo";
throwWarning: tr("addr:street={0} begins with Vis, should likely be expanded to Vista","{0.value}");
fixAdd: concat("addr:street=", "Vista", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Vis, may need to be expanded to Vista");
}

*["addr:street"]["addr:street"=~/^Vlg /] {
assertNoMatch: "way \"addr:street\"=Village Foo";
assertMatch: "way \"addr:street\"=Vlg Foo";
throwWarning: tr("addr:street={0} begins with Vlg, should likely be expanded to Village","{0.value}");
fixAdd: concat("addr:street=", "Village", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Vlg, may need to be expanded to Village");
}

*["addr:street"]["addr:street"=~/^Vlls /] {
assertNoMatch: "way \"addr:street\"=Villas Foo";
assertMatch: "way \"addr:street\"=Vlls Foo";
throwWarning: tr("addr:street={0} begins with Vlls, should likely be expanded to Villas","{0.value}");
fixAdd: concat("addr:street=", "Villas", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Vlls, may need to be expanded to Villas");
}

*["addr:street"]["addr:street"=~/^Vly /] {
assertNoMatch: "way \"addr:street\"=Valley Foo";
assertMatch: "way \"addr:street\"=Vly Foo";
throwWarning: tr("addr:street={0} begins with Vly, should likely be expanded to Valley","{0.value}");
fixAdd: concat("addr:street=", "Valley", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Vly, may need to be expanded to Valley");
}

*["addr:street"]["addr:street"=~/^Vnus /] {
assertNoMatch: "way \"addr:street\"=Venus Foo";
assertMatch: "way \"addr:street\"=Vnus Foo";
throwWarning: tr("addr:street={0} begins with Vnus, should likely be expanded to Venus","{0.value}");
fixAdd: concat("addr:street=", "Venus", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Vnus, may need to be expanded to Venus");
}

*["addr:street"]["addr:street"=~/^Vue /] {
assertNoMatch: "way \"addr:street\"=Vue Foo";
assertMatch: "way \"addr:street\"=Vue Foo";
throwWarning: tr("addr:street={0} begins with Vue, should likely be expanded to Vue","{0.value}");
fixAdd: concat("addr:street=", "Vue", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Vue, may need to be expanded to Vue");
}

*["addr:street"]["addr:street"=~/^Vw /] {
assertNoMatch: "way \"addr:street\"=View Foo";
assertMatch: "way \"addr:street\"=Vw Foo";
throwWarning: tr("addr:street={0} begins with Vw, should likely be expanded to View","{0.value}");
fixAdd: concat("addr:street=", "View", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Vw, may need to be expanded to View");
}

*["addr:street"]["addr:street"=~/^Vws /] {
assertNoMatch: "way \"addr:street\"=Views Foo";
assertMatch: "way \"addr:street\"=Vws Foo";
throwWarning: tr("addr:street={0} begins with Vws, should likely be expanded to Views","{0.value}");
fixAdd: concat("addr:street=", "Views", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Vws, may need to be expanded to Views");
}

*["addr:street"]["addr:street"=~/^Waters /] {
assertNoMatch: "way \"addr:street\"=Waters Foo";
assertMatch: "way \"addr:street\"=Waters Foo";
throwWarning: tr("addr:street={0} begins with Waters, should likely be expanded to Waters","{0.value}");
fixAdd: concat("addr:street=", "Waters", substring(tag("addr:street"), 6));
group: tr("addr:street begins with Waters, may need to be expanded to Waters");
}

*["addr:street"]["addr:street"=~/^Way /] {
assertNoMatch: "way \"addr:street\"=Way Foo";
assertMatch: "way \"addr:street\"=Way Foo";
throwWarning: tr("addr:street={0} begins with Way, should likely be expanded to Way","{0.value}");
fixAdd: concat("addr:street=", "Way", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Way, may need to be expanded to Way");
}

*["addr:street"]["addr:street"=~/^Whrf /] {
assertNoMatch: "way \"addr:street\"=Wharf Foo";
assertMatch: "way \"addr:street\"=Whrf Foo";
throwWarning: tr("addr:street={0} begins with Whrf, should likely be expanded to Wharf","{0.value}");
fixAdd: concat("addr:street=", "Wharf", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Whrf, may need to be expanded to Wharf");
}

*["addr:street"]["addr:street"=~/^Wlk /] {
assertNoMatch: "way \"addr:street\"=Walk Foo";
assertMatch: "way \"addr:street\"=Wlk Foo";
throwWarning: tr("addr:street={0} begins with Wlk, should likely be expanded to Walk","{0.value}");
fixAdd: concat("addr:street=", "Walk", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Wlk, may need to be expanded to Walk");
}

*["addr:street"]["addr:street"=~/^Wynd /] {
assertNoMatch: "way \"addr:street\"=Wynd Foo";
assertMatch: "way \"addr:street\"=Wynd Foo";
throwWarning: tr("addr:street={0} begins with Wynd, should likely be expanded to Wynd","{0.value}");
fixAdd: concat("addr:street=", "Wynd", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Wynd, may need to be expanded to Wynd");
}

*["name"=~/^Accs /].highway_name {
assertNoMatch: "way \"name\"=Access Foo";
assertMatch: "way \"name\"=Accs Foo";
throwWarning: tr("Highway name begins with Accs, may need to be expanded to Access");
fixAdd: concat("name=", "Access", substring(tag("name"), 4));
}

*["name"=~/^Accswy /].highway_name {
assertNoMatch: "way \"name\"=Accessway Foo";
assertMatch: "way \"name\"=Accswy Foo";
throwWarning: tr("Highway name begins with Accswy, may need to be expanded to Accessway");
fixAdd: concat("name=", "Accessway", substring(tag("name"), 6));
}

*["name"=~/^Aly /].highway_name {
assertNoMatch: "way \"name\"=Alley Foo";
assertMatch: "way \"name\"=Aly Foo";
throwWarning: tr("Highway name begins with Aly, may need to be expanded to Alley");
fixAdd: concat("name=", "Alley", substring(tag("name"), 3));
}

*["name"=~/^Ancg /].highway_name {
assertNoMatch: "way \"name\"=Anchorage Foo";
assertMatch: "way \"name\"=Ancg Foo";
throwWarning: tr("Highway name begins with Ancg, may need to be expanded to Anchorage");
fixAdd: concat("name=", "Anchorage", substring(tag("name"), 4));
}

*["name"=~/^App /].highway_name {
assertNoMatch: "way \"name\"=Approach Foo";
assertMatch: "way \"name\"=App Foo";
throwWarning: tr("Highway name begins with App, may need to be expanded to Approach");
fixAdd: concat("name=", "Approach", substring(tag("name"), 3));
}

*["name"=~/^Arc /].highway_name {
assertNoMatch: "way \"name\"=Arcade Foo";
assertMatch: "way \"name\"=Arc Foo";
throwWarning: tr("Highway name begins with Arc, may need to be expanded to Arcade");
fixAdd: concat("name=", "Arcade", substring(tag("name"), 3));
}

*["name"=~/^Arch /].highway_name {
assertNoMatch: "way \"name\"=Arch Foo";
assertMatch: "way \"name\"=Arch Foo";
throwWarning: tr("Highway name begins with Arch, may need to be expanded to Arch");
fixAdd: concat("name=", "Arch", substring(tag("name"), 4));
}

*["name"=~/^Ave /].highway_name {
assertNoMatch: "way \"name\"=Avenue Foo";
assertMatch: "way \"name\"=Ave Foo";
throwWarning: tr("Highway name begins with Ave, may need to be expanded to Avenue");
fixAdd: concat("name=", "Avenue", substring(tag("name"), 3));
}

*["name"=~/^Bank /].highway_name {
assertNoMatch: "way \"name\"=Bank Foo";
assertMatch: "way \"name\"=Bank Foo";
throwWarning: tr("Highway name begins with Bank, may need to be expanded to Bank");
fixAdd: concat("name=", "Bank", substring(tag("name"), 4));
}

*["name"=~/^Bay /].highway_name {
assertNoMatch: "way \"name\"=Bay Foo";
assertMatch: "way \"name\"=Bay Foo";
throwWarning: tr("Highway name begins with Bay, may need to be expanded to Bay");
fixAdd: concat("name=", "Bay", substring(tag("name"), 3));
}

*["name"=~/^Bch /].highway_name {
assertNoMatch: "way \"name\"=Beach Foo";
assertMatch: "way \"name\"=Bch Foo";
throwWarning: tr("Highway name begins with Bch, may need to be expanded to Beach");
fixAdd: concat("name=", "Beach", substring(tag("name"), 3));
}

*["name"=~/^Belt /].highway_name {
assertNoMatch: "way \"name\"=Belt Foo";
assertMatch: "way \"name\"=Belt Foo";
throwWarning: tr("Highway name begins with Belt, may need to be expanded to Belt");
fixAdd: concat("name=", "Belt", substring(tag("name"), 4));
}

*["name"=~/^Blf /].highway_name {
assertNoMatch: "way \"name\"=Bluff Foo";
assertMatch: "way \"name\"=Blf Foo";
throwWarning: tr("Highway name begins with Blf, may need to be expanded to Bluff");
fixAdd: concat("name=", "Bluff", substring(tag("name"), 3));
}

*["name"=~/^Blvd /].highway_name {
assertNoMatch: "way \"name\"=Boulevard Foo";
assertMatch: "way \"name\"=Blvd Foo";
throwWarning: tr("Highway name begins with Blvd, may need to be expanded to Boulevard");
fixAdd: concat("name=", "Boulevard", substring(tag("name"), 4));
}

*["name"=~/^Bnd /].highway_name {
assertNoMatch: "way \"name\"=Bend Foo";
assertMatch: "way \"name\"=Bnd Foo";
throwWarning: tr("Highway name begins with Bnd, may need to be expanded to Bend");
fixAdd: concat("name=", "Bend", substring(tag("name"), 3));
}

*["name"=~/^Brae /].highway_name {
assertNoMatch: "way \"name\"=Brae Foo";
assertMatch: "way \"name\"=Brae Foo";
throwWarning: tr("Highway name begins with Brae, may need to be expanded to Brae");
fixAdd: concat("name=", "Brae", substring(tag("name"), 4));
}

*["name"=~/^Brg /].highway_name {
assertNoMatch: "way \"name\"=Bridge Foo";
assertMatch: "way \"name\"=Brg Foo";
throwWarning: tr("Highway name begins with Brg, may need to be expanded to Bridge");
fixAdd: concat("name=", "Bridge", substring(tag("name"), 3));
}

*["name"=~/^Briars /].highway_name {
assertNoMatch: "way \"name\"=Briars Foo";
assertMatch: "way \"name\"=Briars Foo";
throwWarning: tr("Highway name begins with Briars, may need to be expanded to Briars");
fixAdd: concat("name=", "Briars", substring(tag("name"), 6));
}

*["name"=~/^Byp /].highway_name {
assertNoMatch: "way \"name\"=Bypass Foo";
assertMatch: "way \"name\"=Byp Foo";
throwWarning: tr("Highway name begins with Byp, may need to be expanded to Bypass");
fixAdd: concat("name=", "Bypass", substring(tag("name"), 3));
}

*["name"=~/^Ch /].highway_name {
assertNoMatch: "way \"name\"=Chase Foo";
assertMatch: "way \"name\"=Ch Foo";
throwWarning: tr("Highway name begins with Ch, may need to be expanded to Chase");
fixAdd: concat("name=", "Chase", substring(tag("name"), 2));
}

*["name"=~/^Cir /].highway_name {
assertNoMatch: "way \"name\"=Circle Foo";
assertMatch: "way \"name\"=Cir Foo";
throwWarning: tr("Highway name begins with Cir, may need to be expanded to Circle");
fixAdd: concat("name=", "Circle", substring(tag("name"), 3));
}

*["name"=~/^Cl /].highway_name {
assertNoMatch: "way \"name\"=Close Foo";
assertMatch: "way \"name\"=Cl Foo";
throwWarning: tr("Highway name begins with Cl, may need to be expanded to Close");
fixAdd: concat("name=", "Close", substring(tag("name"), 2));
}

*["name"=~/^Clm /].highway_name {
assertNoMatch: "way \"name\"=Claim Foo";
assertMatch: "way \"name\"=Clm Foo";
throwWarning: tr("Highway name begins with Clm, may need to be expanded to Claim");
fixAdd: concat("name=", "Claim", substring(tag("name"), 3));
}

*["name"=~/^Cmn /].highway_name {
assertNoMatch: "way \"name\"=Common Foo";
assertMatch: "way \"name\"=Cmn Foo";
throwWarning: tr("Highway name begins with Cmn, may need to be expanded to Common");
fixAdd: concat("name=", "Common", substring(tag("name"), 3));
}

*["name"=~/^Crcs /].highway_name {
assertNoMatch: "way \"name\"=Circus Foo";
assertMatch: "way \"name\"=Crcs Foo";
throwWarning: tr("Highway name begins with Crcs, may need to be expanded to Circus");
fixAdd: concat("name=", "Circus", substring(tag("name"), 4));
}

*["name"=~/^Cres /].highway_name {
assertNoMatch: "way \"name\"=Crescent Foo";
assertMatch: "way \"name\"=Cres Foo";
throwWarning: tr("Highway name begins with Cres, may need to be expanded to Crescent");
fixAdd: concat("name=", "Crescent", substring(tag("name"), 4));
}

*["name"=~/^Crk /].highway_name {
assertNoMatch: "way \"name\"=Creek Foo";
assertMatch: "way \"name\"=Crk Foo";
throwWarning: tr("Highway name begins with Crk, may need to be expanded to Creek");
fixAdd: concat("name=", "Creek", substring(tag("name"), 3));
}

*["name"=~/^Crst /].highway_name {
assertNoMatch: "way \"name\"=Crest Foo";
assertMatch: "way \"name\"=Crst Foo";
throwWarning: tr("Highway name begins with Crst, may need to be expanded to Crest");
fixAdd: concat("name=", "Crest", substring(tag("name"), 4));
}

*["name"=~/^Crt /].highway_name {
assertNoMatch: "way \"name\"=Court Foo";
assertMatch: "way \"name\"=Crt Foo";
throwWarning: tr("Highway name begins with Crt, may need to be expanded to Court");
fixAdd: concat("name=", "Court", substring(tag("name"), 3));
}

*["name"=~/^Crts /].highway_name {
assertNoMatch: "way \"name\"=Courts Foo";
assertMatch: "way \"name\"=Crts Foo";
throwWarning: tr("Highway name begins with Crts, may need to be expanded to Courts");
fixAdd: concat("name=", "Courts", substring(tag("name"), 4));
}

*["name"=~/^Ctr /].highway_name {
assertNoMatch: "way \"name\"=Centre Foo";
assertMatch: "way \"name\"=Ctr Foo";
throwWarning: tr("Highway name begins with Ctr, may need to be expanded to Centre");
fixAdd: concat("name=", "Centre", substring(tag("name"), 3));
}

*["name"=~/^Cul /].highway_name {
assertNoMatch: "way \"name\"=Cul Foo";
assertMatch: "way \"name\"=Cul Foo";
throwWarning: tr("Highway name begins with Cul, may need to be expanded to Cul");
fixAdd: concat("name=", "Cul", substring(tag("name"), 3));
}

*["name"=~/^Cv /].highway_name {
assertNoMatch: "way \"name\"=Cove Foo";
assertMatch: "way \"name\"=Cv Foo";
throwWarning: tr("Highway name begins with Cv, may need to be expanded to Cove");
fixAdd: concat("name=", "Cove", substring(tag("name"), 2));
}

*["name"=~/^Del /].highway_name {
assertNoMatch: "way \"name\"=Dell Foo";
assertMatch: "way \"name\"=Del Foo";
throwWarning: tr("Highway name begins with Del, may need to be expanded to Dell");
fixAdd: concat("name=", "Dell", substring(tag("name"), 3));
}

*["name"=~/^Dle /].highway_name {
assertNoMatch: "way \"name\"=Dale Foo";
assertMatch: "way \"name\"=Dle Foo";
throwWarning: tr("Highway name begins with Dle, may need to be expanded to Dale");
fixAdd: concat("name=", "Dale", substring(tag("name"), 3));
}

*["name"=~/^Downs /].highway_name {
assertNoMatch: "way \"name\"=Downs Foo";
assertMatch: "way \"name\"=Downs Foo";
throwWarning: tr("Highway name begins with Downs, may need to be expanded to Downs");
fixAdd: concat("name=", "Downs", substring(tag("name"), 5));
}

*["name"=~/^Dr /].highway_name {
assertNoMatch: "way \"name\"=Drive Foo";
assertMatch: "way \"name\"=Dr Foo";
throwWarning: tr("Highway name begins with Dr, may need to be expanded to Drive");
fixAdd: concat("name=", "Drive", substring(tag("name"), 2));
}

*["name"=~/^Dune /].highway_name {
assertNoMatch: "way \"name\"=Dune Foo";
assertMatch: "way \"name\"=Dune Foo";
throwWarning: tr("Highway name begins with Dune, may need to be expanded to Dune");
fixAdd: concat("name=", "Dune", substring(tag("name"), 4));
}

*["name"=~/^Dvn /].highway_name {
assertNoMatch: "way \"name\"=Deviation Foo";
assertMatch: "way \"name\"=Dvn Foo";
throwWarning: tr("Highway name begins with Dvn, may need to be expanded to Deviation");
fixAdd: concat("name=", "Deviation", substring(tag("name"), 3));
}

*["name"=~/^Elm /].highway_name {
assertNoMatch: "way \"name\"=Elm Foo";
assertMatch: "way \"name\"=Elm Foo";
throwWarning: tr("Highway name begins with Elm, may need to be expanded to Elm");
fixAdd: concat("name=", "Elm", substring(tag("name"), 3));
}

*["name"=~/^End /].highway_name {
assertNoMatch: "way \"name\"=End Foo";
assertMatch: "way \"name\"=End Foo";
throwWarning: tr("Highway name begins with End, may need to be expanded to End");
fixAdd: concat("name=", "End", substring(tag("name"), 3));
}

*["name"=~/^Ent /].highway_name {
assertNoMatch: "way \"name\"=Entrance Foo";
assertMatch: "way \"name\"=Ent Foo";
throwWarning: tr("Highway name begins with Ent, may need to be expanded to Entrance");
fixAdd: concat("name=", "Entrance", substring(tag("name"), 3));
}

*["name"=~/^Esp /].highway_name {
assertNoMatch: "way \"name\"=Esplanade Foo";
assertMatch: "way \"name\"=Esp Foo";
throwWarning: tr("Highway name begins with Esp, may need to be expanded to Esplanade");
fixAdd: concat("name=", "Esplanade", substring(tag("name"), 3));
}

*["name"=~/^Est /].highway_name {
assertNoMatch: "way \"name\"=Estate Foo";
assertMatch: "way \"name\"=Est Foo";
throwWarning: tr("Highway name begins with Est, may need to be expanded to Estate");
fixAdd: concat("name=", "Estate", substring(tag("name"), 3));
}

*["name"=~/^Fall /].highway_name {
assertNoMatch: "way \"name\"=Fall Foo";
assertMatch: "way \"name\"=Fall Foo";
throwWarning: tr("Highway name begins with Fall, may need to be expanded to Fall");
fixAdd: concat("name=", "Fall", substring(tag("name"), 4));
}

*["name"=~/^Fare /].highway_name {
assertNoMatch: "way \"name\"=Fare Foo";
assertMatch: "way \"name\"=Fare Foo";
throwWarning: tr("Highway name begins with Fare, may need to be expanded to Fare");
fixAdd: concat("name=", "Fare", substring(tag("name"), 4));
}

*["name"=~/^Fawy /].highway_name {
assertNoMatch: "way \"name\"=Fairway Foo";
assertMatch: "way \"name\"=Fawy Foo";
throwWarning: tr("Highway name begins with Fawy, may need to be expanded to Fairway");
fixAdd: concat("name=", "Fairway", substring(tag("name"), 4));
}

*["name"=~/^Fen /].highway_name {
assertNoMatch: "way \"name\"=Fen Foo";
assertMatch: "way \"name\"=Fen Foo";
throwWarning: tr("Highway name begins with Fen, may need to be expanded to Fen");
fixAdd: concat("name=", "Fen", substring(tag("name"), 3));
}

*["name"=~/^Fern /].highway_name {
assertNoMatch: "way \"name\"=Fern Foo";
assertMatch: "way \"name\"=Fern Foo";
throwWarning: tr("Highway name begins with Fern, may need to be expanded to Fern");
fixAdd: concat("name=", "Fern", substring(tag("name"), 4));
}

*["name"=~/^Flt /].highway_name {
assertNoMatch: "way \"name\"=Flat Foo";
assertMatch: "way \"name\"=Flt Foo";
throwWarning: tr("Highway name begins with Flt, may need to be expanded to Flat");
fixAdd: concat("name=", "Flat", substring(tag("name"), 3));
}

*["name"=~/^Flts /].highway_name {
assertNoMatch: "way \"name\"=Flats Foo";
assertMatch: "way \"name\"=Flts Foo";
throwWarning: tr("Highway name begins with Flts, may need to be expanded to Flats");
fixAdd: concat("name=", "Flats", substring(tag("name"), 4));
}

*["name"=~/^Frms /].highway_name {
assertNoMatch: "way \"name\"=Farms Foo";
assertMatch: "way \"name\"=Frms Foo";
throwWarning: tr("Highway name begins with Frms, may need to be expanded to Farms");
fixAdd: concat("name=", "Farms", substring(tag("name"), 4));
}

*["name"=~/^Gdn /].highway_name {
assertNoMatch: "way \"name\"=Garden Foo";
assertMatch: "way \"name\"=Gdn Foo";
throwWarning: tr("Highway name begins with Gdn, may need to be expanded to Garden");
fixAdd: concat("name=", "Garden", substring(tag("name"), 3));
}

*["name"=~/^Gdns /].highway_name {
assertNoMatch: "way \"name\"=Gardens Foo";
assertMatch: "way \"name\"=Gdns Foo";
throwWarning: tr("Highway name begins with Gdns, may need to be expanded to Gardens");
fixAdd: concat("name=", "Gardens", substring(tag("name"), 4));
}

*["name"=~/^Gld /].highway_name {
assertNoMatch: "way \"name\"=Glade Foo";
assertMatch: "way \"name\"=Gld Foo";
throwWarning: tr("Highway name begins with Gld, may need to be expanded to Glade");
fixAdd: concat("name=", "Glade", substring(tag("name"), 3));
}

*["name"=~/^Gln /].highway_name {
assertNoMatch: "way \"name\"=Glen Foo";
assertMatch: "way \"name\"=Gln Foo";
throwWarning: tr("Highway name begins with Gln, may need to be expanded to Glen");
fixAdd: concat("name=", "Glen", substring(tag("name"), 3));
}

*["name"=~/^Gly /].highway_name {
assertNoMatch: "way \"name\"=Gully Foo";
assertMatch: "way \"name\"=Gly Foo";
throwWarning: tr("Highway name begins with Gly, may need to be expanded to Gully");
fixAdd: concat("name=", "Gully", substring(tag("name"), 3));
}

*["name"=~/^Grg /].highway_name {
assertNoMatch: "way \"name\"=Grange Foo";
assertMatch: "way \"name\"=Grg Foo";
throwWarning: tr("Highway name begins with Grg, may need to be expanded to Grange");
fixAdd: concat("name=", "Grange", substring(tag("name"), 3));
}

*["name"=~/^Grn /].highway_name {
assertNoMatch: "way \"name\"=Green Foo";
assertMatch: "way \"name\"=Grn Foo";
throwWarning: tr("Highway name begins with Grn, may need to be expanded to Green");
fixAdd: concat("name=", "Green", substring(tag("name"), 3));
}

*["name"=~/^Grv /].highway_name {
assertNoMatch: "way \"name\"=Grove Foo";
assertMatch: "way \"name\"=Grv Foo";
throwWarning: tr("Highway name begins with Grv, may need to be expanded to Grove");
fixAdd: concat("name=", "Grove", substring(tag("name"), 3));
}

*["name"=~/^Gte /].highway_name {
assertNoMatch: "way \"name\"=Gate Foo";
assertMatch: "way \"name\"=Gte Foo";
throwWarning: tr("Highway name begins with Gte, may need to be expanded to Gate");
fixAdd: concat("name=", "Gate", substring(tag("name"), 3));
}

*["name"=~/^Head /].highway_name {
assertNoMatch: "way \"name\"=Head Foo";
assertMatch: "way \"name\"=Head Foo";
throwWarning: tr("Highway name begins with Head, may need to be expanded to Head");
fixAdd: concat("name=", "Head", substring(tag("name"), 4));
}

*["name"=~/^Hl /].highway_name {
assertNoMatch: "way \"name\"=Hill Foo";
assertMatch: "way \"name\"=Hl Foo";
throwWarning: tr("Highway name begins with Hl, may need to be expanded to Hill");
fixAdd: concat("name=", "Hill", substring(tag("name"), 2));
}

*["name"=~/^Hts /].highway_name {
assertNoMatch: "way \"name\"=Heights Foo";
assertMatch: "way \"name\"=Hts Foo";
throwWarning: tr("Highway name begins with Hts, may need to be expanded to Heights");
fixAdd: concat("name=", "Heights", substring(tag("name"), 3));
}

*["name"=~/^Hvn /].highway_name {
assertNoMatch: "way \"name\"=Haven Foo";
assertMatch: "way \"name\"=Hvn Foo";
throwWarning: tr("Highway name begins with Hvn, may need to be expanded to Haven");
fixAdd: concat("name=", "Haven", substring(tag("name"), 3));
}

*["name"=~/^Hwy /].highway_name {
assertNoMatch: "way \"name\"=Highway Foo";
assertMatch: "way \"name\"=Hwy Foo";
throwWarning: tr("Highway name begins with Hwy, may need to be expanded to Highway");
fixAdd: concat("name=", "Highway", substring(tag("name"), 3));
}

*["name"=~/^Is /].highway_name {
assertNoMatch: "way \"name\"=Island Foo";
assertMatch: "way \"name\"=Is Foo";
throwWarning: tr("Highway name begins with Is, may need to be expanded to Island");
fixAdd: concat("name=", "Island", substring(tag("name"), 2));
}

*["name"=~/^Jct /].highway_name {
assertNoMatch: "way \"name\"=Junction Foo";
assertMatch: "way \"name\"=Jct Foo";
throwWarning: tr("Highway name begins with Jct, may need to be expanded to Junction");
fixAdd: concat("name=", "Junction", substring(tag("name"), 3));
}

*["name"=~/^Key /].highway_name {
assertNoMatch: "way \"name\"=Key Foo";
assertMatch: "way \"name\"=Key Foo";
throwWarning: tr("Highway name begins with Key, may need to be expanded to Key");
fixAdd: concat("name=", "Key", substring(tag("name"), 3));
}

*["name"=~/^Knob /].highway_name {
assertNoMatch: "way \"name\"=Knob Foo";
assertMatch: "way \"name\"=Knob Foo";
throwWarning: tr("Highway name begins with Knob, may need to be expanded to Knob");
fixAdd: concat("name=", "Knob", substring(tag("name"), 4));
}

*["name"=~/^Ladr /].highway_name {
assertNoMatch: "way \"name\"=Ladder Foo";
assertMatch: "way \"name\"=Ladr Foo";
throwWarning: tr("Highway name begins with Ladr, may need to be expanded to Ladder");
fixAdd: concat("name=", "Ladder", substring(tag("name"), 4));
}

*["name"=~/^Lane /].highway_name {
assertNoMatch: "way \"name\"=Lane Foo";
assertMatch: "way \"name\"=Lane Foo";
throwWarning: tr("Highway name begins with Lane, may need to be expanded to Lane");
fixAdd: concat("name=", "Lane", substring(tag("name"), 4));
}

*["name"=~/^Lea /].highway_name {
assertNoMatch: "way \"name\"=Lea Foo";
assertMatch: "way \"name\"=Lea Foo";
throwWarning: tr("Highway name begins with Lea, may need to be expanded to Lea");
fixAdd: concat("name=", "Lea", substring(tag("name"), 3));
}

*["name"=~/^Ledr /].highway_name {
assertNoMatch: "way \"name\"=Leader Foo";
assertMatch: "way \"name\"=Ledr Foo";
throwWarning: tr("Highway name begins with Ledr, may need to be expanded to Leader");
fixAdd: concat("name=", "Leader", substring(tag("name"), 4));
}

*["name"=~/^Lgh /].highway_name {
assertNoMatch: "way \"name\"=Leigh Foo";
assertMatch: "way \"name\"=Lgh Foo";
throwWarning: tr("Highway name begins with Lgh, may need to be expanded to Leigh");
fixAdd: concat("name=", "Leigh", substring(tag("name"), 3));
}

*["name"=~/^Line /].highway_name {
assertNoMatch: "way \"name\"=Line Foo";
assertMatch: "way \"name\"=Line Foo";
throwWarning: tr("Highway name begins with Line, may need to be expanded to Line");
fixAdd: concat("name=", "Line", substring(tag("name"), 4));
}

*["name"=~/^Link /].highway_name {
assertNoMatch: "way \"name\"=Link Foo";
assertMatch: "way \"name\"=Link Foo";
throwWarning: tr("Highway name begins with Link, may need to be expanded to Link");
fixAdd: concat("name=", "Link", substring(tag("name"), 4));
}

*["name"=~/^Lkt /].highway_name {
assertNoMatch: "way \"name\"=Lookout Foo";
assertMatch: "way \"name\"=Lkt Foo";
throwWarning: tr("Highway name begins with Lkt, may need to be expanded to Lookout");
fixAdd: concat("name=", "Lookout", substring(tag("name"), 3));
}

*["name"=~/^Lndg /].highway_name {
assertNoMatch: "way \"name\"=Landing Foo";
assertMatch: "way \"name\"=Lndg Foo";
throwWarning: tr("Highway name begins with Lndg, may need to be expanded to Landing");
fixAdd: concat("name=", "Landing", substring(tag("name"), 4));
}

*["name"=~/^Loop /].highway_name {
assertNoMatch: "way \"name\"=Loop Foo";
assertMatch: "way \"name\"=Loop Foo";
throwWarning: tr("Highway name begins with Loop, may need to be expanded to Loop");
fixAdd: concat("name=", "Loop", substring(tag("name"), 4));
}

*["name"=~/^Mall /].highway_name {
assertNoMatch: "way \"name\"=Mall Foo";
assertMatch: "way \"name\"=Mall Foo";
throwWarning: tr("Highway name begins with Mall, may need to be expanded to Mall");
fixAdd: concat("name=", "Mall", substring(tag("name"), 4));
}

*["name"=~/^Mdws /].highway_name {
assertNoMatch: "way \"name\"=Meadows Foo";
assertMatch: "way \"name\"=Mdws Foo";
throwWarning: tr("Highway name begins with Mdws, may need to be expanded to Meadows");
fixAdd: concat("name=", "Meadows", substring(tag("name"), 4));
}

*["name"=~/^Mead /].highway_name {
assertNoMatch: "way \"name\"=Mead Foo";
assertMatch: "way \"name\"=Mead Foo";
throwWarning: tr("Highway name begins with Mead, may need to be expanded to Mead");
fixAdd: concat("name=", "Mead", substring(tag("name"), 4));
}

*["name"=~/^Mews /].highway_name {
assertNoMatch: "way \"name\"=Mews Foo";
assertMatch: "way \"name\"=Mews Foo";
throwWarning: tr("Highway name begins with Mews, may need to be expanded to Mews");
fixAdd: concat("name=", "Mews", substring(tag("name"), 4));
}

*["name"=~/^Mile /].highway_name {
assertNoMatch: "way \"name\"=Mile Foo";
assertMatch: "way \"name\"=Mile Foo";
throwWarning: tr("Highway name begins with Mile, may need to be expanded to Mile");
fixAdd: concat("name=", "Mile", substring(tag("name"), 4));
}

*["name"=~/^Motu /].highway_name {
assertNoMatch: "way \"name\"=Motu Foo";
assertMatch: "way \"name\"=Motu Foo";
throwWarning: tr("Highway name begins with Motu, may need to be expanded to Motu");
fixAdd: concat("name=", "Motu", substring(tag("name"), 4));
}

*["name"=~/^Mt /].highway_name {
assertNoMatch: "way \"name\"=Mount Foo";
assertMatch: "way \"name\"=Mt Foo";
throwWarning: tr("Highway name begins with Mt, may need to be expanded to Mount");
fixAdd: concat("name=", "Mount", substring(tag("name"), 2));
}

*["name"=~/^Mwy /].highway_name {
assertNoMatch: "way \"name\"=Motorway Foo";
assertMatch: "way \"name\"=Mwy Foo";
throwWarning: tr("Highway name begins with Mwy, may need to be expanded to Motorway");
fixAdd: concat("name=", "Motorway", substring(tag("name"), 3));
}

*["name"=~/^Nvs /].highway_name {
assertNoMatch: "way \"name\"=Neaves Foo";
assertMatch: "way \"name\"=Nvs Foo";
throwWarning: tr("Highway name begins with Nvs, may need to be expanded to Neaves");
fixAdd: concat("name=", "Neaves", substring(tag("name"), 3));
}

*["name"=~/^Oaks /].highway_name {
assertNoMatch: "way \"name\"=Oaks Foo";
assertMatch: "way \"name\"=Oaks Foo";
throwWarning: tr("Highway name begins with Oaks, may need to be expanded to Oaks");
fixAdd: concat("name=", "Oaks", substring(tag("name"), 4));
}

*["name"=~/^Padk /].highway_name {
assertNoMatch: "way \"name\"=Paddock Foo";
assertMatch: "way \"name\"=Padk Foo";
throwWarning: tr("Highway name begins with Padk, may need to be expanded to Paddock");
fixAdd: concat("name=", "Paddock", substring(tag("name"), 4));
}

*["name"=~/^Paku /].highway_name {
assertNoMatch: "way \"name\"=Paku Foo";
assertMatch: "way \"name\"=Paku Foo";
throwWarning: tr("Highway name begins with Paku, may need to be expanded to Paku");
fixAdd: concat("name=", "Paku", substring(tag("name"), 4));
}

*["name"=~/^Pass /].highway_name {
assertNoMatch: "way \"name\"=Pass Foo";
assertMatch: "way \"name\"=Pass Foo";
throwWarning: tr("Highway name begins with Pass, may need to be expanded to Pass");
fixAdd: concat("name=", "Pass", substring(tag("name"), 4));
}

*["name"=~/^Pde /].highway_name {
assertNoMatch: "way \"name\"=Parade Foo";
assertMatch: "way \"name\"=Pde Foo";
throwWarning: tr("Highway name begins with Pde, may need to be expanded to Parade");
fixAdd: concat("name=", "Parade", substring(tag("name"), 3));
}

*["name"=~/^Pk /].highway_name {
assertNoMatch: "way \"name\"=Park Foo";
assertMatch: "way \"name\"=Pk Foo";
throwWarning: tr("Highway name begins with Pk, may need to be expanded to Park");
fixAdd: concat("name=", "Park", substring(tag("name"), 2));
}

*["name"=~/^Pkwy /].highway_name {
assertNoMatch: "way \"name\"=Parkway Foo";
assertMatch: "way \"name\"=Pkwy Foo";
throwWarning: tr("Highway name begins with Pkwy, may need to be expanded to Parkway");
fixAdd: concat("name=", "Parkway", substring(tag("name"), 4));
}

*["name"=~/^Pl /].highway_name {
assertNoMatch: "way \"name\"=Place Foo";
assertMatch: "way \"name\"=Pl Foo";
throwWarning: tr("Highway name begins with Pl, may need to be expanded to Place");
fixAdd: concat("name=", "Place", substring(tag("name"), 2));
}

*["name"=~/^Priors /].highway_name {
assertNoMatch: "way \"name\"=Priors Foo";
assertMatch: "way \"name\"=Priors Foo";
throwWarning: tr("Highway name begins with Priors, may need to be expanded to Priors");
fixAdd: concat("name=", "Priors", substring(tag("name"), 6));
}

*["name"=~/^Prom /].highway_name {
assertNoMatch: "way \"name\"=Promenade Foo";
assertMatch: "way \"name\"=Prom Foo";
throwWarning: tr("Highway name begins with Prom, may need to be expanded to Promenade");
fixAdd: concat("name=", "Promenade", substring(tag("name"), 4));
}

*["name"=~/^Psge /].highway_name {
assertNoMatch: "way \"name\"=Passage Foo";
assertMatch: "way \"name\"=Psge Foo";
throwWarning: tr("Highway name begins with Psge, may need to be expanded to Passage");
fixAdd: concat("name=", "Passage", substring(tag("name"), 4));
}

*["name"=~/^Pt /].highway_name {
assertNoMatch: "way \"name\"=Point Foo";
assertMatch: "way \"name\"=Pt Foo";
throwWarning: tr("Highway name begins with Pt, may need to be expanded to Point");
fixAdd: concat("name=", "Point", substring(tag("name"), 2));
}

*["name"=~/^Pth /].highway_name {
assertNoMatch: "way \"name\"=Path Foo";
assertMatch: "way \"name\"=Pth Foo";
throwWarning: tr("Highway name begins with Pth, may need to be expanded to Path");
fixAdd: concat("name=", "Path", substring(tag("name"), 3));
}

*["name"=~/^Qdrt /].highway_name {
assertNoMatch: "way \"name\"=Quadrant Foo";
assertMatch: "way \"name\"=Qdrt Foo";
throwWarning: tr("Highway name begins with Qdrt, may need to be expanded to Quadrant");
fixAdd: concat("name=", "Quadrant", substring(tag("name"), 4));
}

*["name"=~/^Qy /].highway_name {
assertNoMatch: "way \"name\"=Quay Foo";
assertMatch: "way \"name\"=Qy Foo";
throwWarning: tr("Highway name begins with Qy, may need to be expanded to Quay");
fixAdd: concat("name=", "Quay", substring(tag("name"), 2));
}

*["name"=~/^Rd /].highway_name {
assertNoMatch: "way \"name\"=Road Foo";
assertMatch: "way \"name\"=Rd Foo";
throwWarning: tr("Highway name begins with Rd, may need to be expanded to Road");
fixAdd: concat("name=", "Road", substring(tag("name"), 2));
}

*["name"=~/^Rdge /].highway_name {
assertNoMatch: "way \"name\"=Ridge Foo";
assertMatch: "way \"name\"=Rdge Foo";
throwWarning: tr("Highway name begins with Rdge, may need to be expanded to Ridge");
fixAdd: concat("name=", "Ridge", substring(tag("name"), 4));
}

*["name"=~/^Rds /].highway_name {
assertNoMatch: "way \"name\"=Roads Foo";
assertMatch: "way \"name\"=Rds Foo";
throwWarning: tr("Highway name begins with Rds, may need to be expanded to Roads");
fixAdd: concat("name=", "Roads", substring(tag("name"), 3));
}

*["name"=~/^Rdwy /].highway_name {
assertNoMatch: "way \"name\"=Roadway Foo";
assertMatch: "way \"name\"=Rdwy Foo";
throwWarning: tr("Highway name begins with Rdwy, may need to be expanded to Roadway");
fixAdd: concat("name=", "Roadway", substring(tag("name"), 4));
}

*["name"=~/^Reef /].highway_name {
assertNoMatch: "way \"name\"=Reef Foo";
assertMatch: "way \"name\"=Reef Foo";
throwWarning: tr("Highway name begins with Reef, may need to be expanded to Reef");
fixAdd: concat("name=", "Reef", substring(tag("name"), 4));
}

*["name"=~/^Res /].highway_name {
assertNoMatch: "way \"name\"=Reserve Foo";
assertMatch: "way \"name\"=Res Foo";
throwWarning: tr("Highway name begins with Res, may need to be expanded to Reserve");
fixAdd: concat("name=", "Reserve", substring(tag("name"), 3));
}

*["name"=~/^Rest /].highway_name {
assertNoMatch: "way \"name\"=Rest Foo";
assertMatch: "way \"name\"=Rest Foo";
throwWarning: tr("Highway name begins with Rest, may need to be expanded to Rest");
fixAdd: concat("name=", "Rest", substring(tag("name"), 4));
}

*["name"=~/^Rise /].highway_name {
assertNoMatch: "way \"name\"=Rise Foo";
assertMatch: "way \"name\"=Rise Foo";
throwWarning: tr("Highway name begins with Rise, may need to be expanded to Rise");
fixAdd: concat("name=", "Rise", substring(tag("name"), 4));
}

*["name"=~/^Row /].highway_name {
assertNoMatch: "way \"name\"=Row Foo";
assertMatch: "way \"name\"=Row Foo";
throwWarning: tr("Highway name begins with Row, may need to be expanded to Row");
fixAdd: concat("name=", "Row", substring(tag("name"), 3));
}

*["name"=~/^Rte /].highway_name {
assertNoMatch: "way \"name\"=Route Foo";
assertMatch: "way \"name\"=Rte Foo";
throwWarning: tr("Highway name begins with Rte, may need to be expanded to Route");
fixAdd: concat("name=", "Route", substring(tag("name"), 3));
}

*["name"=~/^Rtr /].highway_name {
assertNoMatch: "way \"name\"=Retreat Foo";
assertMatch: "way \"name\"=Rtr Foo";
throwWarning: tr("Highway name begins with Rtr, may need to be expanded to Retreat");
fixAdd: concat("name=", "Retreat", substring(tag("name"), 3));
}

*["name"=~/^SH /].highway_name {
assertNoMatch: "way \"name\"=State Highway Foo";
assertMatch: "way \"name\"=SH Foo";
throwWarning: tr("Highway name begins with SH, may need to be expanded to State Highway");
fixAdd: concat("name=", "State Highway", substring(tag("name"), 2));
}

*["name"=~/^Slp /].highway_name {
assertNoMatch: "way \"name\"=Slope Foo";
assertMatch: "way \"name\"=Slp Foo";
throwWarning: tr("Highway name begins with Slp, may need to be expanded to Slope");
fixAdd: concat("name=", "Slope", substring(tag("name"), 3));
}

*["name"=~/^Spa /].highway_name {
assertNoMatch: "way \"name\"=Spa Foo";
assertMatch: "way \"name\"=Spa Foo";
throwWarning: tr("Highway name begins with Spa, may need to be expanded to Spa");
fixAdd: concat("name=", "Spa", substring(tag("name"), 3));
}

*["name"=~/^Spur /].highway_name {
assertNoMatch: "way \"name\"=Spur Foo";
assertMatch: "way \"name\"=Spur Foo";
throwWarning: tr("Highway name begins with Spur, may need to be expanded to Spur");
fixAdd: concat("name=", "Spur", substring(tag("name"), 4));
}

*["name"=~/^Sq /].highway_name {
assertNoMatch: "way \"name\"=Square Foo";
assertMatch: "way \"name\"=Sq Foo";
throwWarning: tr("Highway name begins with Sq, may need to be expanded to Square");
fixAdd: concat("name=", "Square", substring(tag("name"), 2));
}

*["name"=~/^St /].highway_name {
assertNoMatch: "way \"name\"=Street Foo";
assertMatch: "way \"name\"=St Foo";
throwWarning: tr("Highway name begins with St, may need to be expanded to Street");
fixAdd: concat("name=", "Street", substring(tag("name"), 2));
}

*["name"=~/^Steep /].highway_name {
assertNoMatch: "way \"name\"=Steep Foo";
assertMatch: "way \"name\"=Steep Foo";
throwWarning: tr("Highway name begins with Steep, may need to be expanded to Steep");
fixAdd: concat("name=", "Steep", substring(tag("name"), 5));
}

*["name"=~/^Stgt /].highway_name {
assertNoMatch: "way \"name\"=Straight Foo";
assertMatch: "way \"name\"=Stgt Foo";
throwWarning: tr("Highway name begins with Stgt, may need to be expanded to Straight");
fixAdd: concat("name=", "Straight", substring(tag("name"), 4));
}

*["name"=~/^Stps /].highway_name {
assertNoMatch: "way \"name\"=Steps Foo";
assertMatch: "way \"name\"=Stps Foo";
throwWarning: tr("Highway name begins with Stps, may need to be expanded to Steps");
fixAdd: concat("name=", "Steps", substring(tag("name"), 4));
}

*["name"=~/^Strd /].highway_name {
assertNoMatch: "way \"name\"=Strand Foo";
assertMatch: "way \"name\"=Strd Foo";
throwWarning: tr("Highway name begins with Strd, may need to be expanded to Strand");
fixAdd: concat("name=", "Strand", substring(tag("name"), 4));
}

*["name"=~/^Svln /].highway_name {
assertNoMatch: "way \"name\"=Service Lane Foo";
assertMatch: "way \"name\"=Svln Foo";
throwWarning: tr("Highway name begins with Svln, may need to be expanded to Service Lane");
fixAdd: concat("name=", "Service Lane", substring(tag("name"), 4));
}

*["name"=~/^Tce /].highway_name {
assertNoMatch: "way \"name\"=Terrace Foo";
assertMatch: "way \"name\"=Tce Foo";
throwWarning: tr("Highway name begins with Tce, may need to be expanded to Terrace");
fixAdd: concat("name=", "Terrace", substring(tag("name"), 3));
}

*["name"=~/^Tmwy /].highway_name {
assertNoMatch: "way \"name\"=Tramway Foo";
assertMatch: "way \"name\"=Tmwy Foo";
throwWarning: tr("Highway name begins with Tmwy, may need to be expanded to Tramway");
fixAdd: concat("name=", "Tramway", substring(tag("name"), 4));
}

*["name"=~/^Trk /].highway_name {
assertNoMatch: "way \"name\"=Track Foo";
assertMatch: "way \"name\"=Trk Foo";
throwWarning: tr("Highway name begins with Trk, may need to be expanded to Track");
fixAdd: concat("name=", "Track", substring(tag("name"), 3));
}

*["name"=~/^Trl /].highway_name {
assertNoMatch: "way \"name\"=Trail Foo";
assertMatch: "way \"name\"=Trl Foo";
throwWarning: tr("Highway name begins with Trl, may need to be expanded to Trail");
fixAdd: concat("name=", "Trail", substring(tag("name"), 3));
}

*["name"=~/^Trs /].highway_name {
assertNoMatch: "way \"name\"=Trees Foo";
assertMatch: "way \"name\"=Trs Foo";
throwWarning: tr("Highway name begins with Trs, may need to be expanded to Trees");
fixAdd: concat("name=", "Trees", substring(tag("name"), 3));
}

*["name"=~/^Twrs /].highway_name {
assertNoMatch: "way \"name\"=Towers Foo";
assertMatch: "way \"name\"=Twrs Foo";
throwWarning: tr("Highway name begins with Twrs, may need to be expanded to Towers");
fixAdd: concat("name=", "Towers", substring(tag("name"), 4));
}

*["name"=~/^Vale /].highway_name {
assertNoMatch: "way \"name\"=Vale Foo";
assertMatch: "way \"name\"=Vale Foo";
throwWarning: tr("Highway name begins with Vale, may need to be expanded to Vale");
fixAdd: concat("name=", "Vale", substring(tag("name"), 4));
}

*["name"=~/^Vis /].highway_name {
assertNoMatch: "way \"name\"=Vista Foo";
assertMatch: "way \"name\"=Vis Foo";
throwWarning: tr("Highway name begins with Vis, may need to be expanded to Vista");
fixAdd: concat("name=", "Vista", substring(tag("name"), 3));
}

*["name"=~/^Vlg /].highway_name {
assertNoMatch: "way \"name\"=Village Foo";
assertMatch: "way \"name\"=Vlg Foo";
throwWarning: tr("Highway name begins with Vlg, may need to be expanded to Village");
fixAdd: concat("name=", "Village", substring(tag("name"), 3));
}

*["name"=~/^Vlls /].highway_name {
assertNoMatch: "way \"name\"=Villas Foo";
assertMatch: "way \"name\"=Vlls Foo";
throwWarning: tr("Highway name begins with Vlls, may need to be expanded to Villas");
fixAdd: concat("name=", "Villas", substring(tag("name"), 4));
}

*["name"=~/^Vly /].highway_name {
assertNoMatch: "way \"name\"=Valley Foo";
assertMatch: "way \"name\"=Vly Foo";
throwWarning: tr("Highway name begins with Vly, may need to be expanded to Valley");
fixAdd: concat("name=", "Valley", substring(tag("name"), 3));
}

*["name"=~/^Vnus /].highway_name {
assertNoMatch: "way \"name\"=Venus Foo";
assertMatch: "way \"name\"=Vnus Foo";
throwWarning: tr("Highway name begins with Vnus, may need to be expanded to Venus");
fixAdd: concat("name=", "Venus", substring(tag("name"), 4));
}

*["name"=~/^Vue /].highway_name {
assertNoMatch: "way \"name\"=Vue Foo";
assertMatch: "way \"name\"=Vue Foo";
throwWarning: tr("Highway name begins with Vue, may need to be expanded to Vue");
fixAdd: concat("name=", "Vue", substring(tag("name"), 3));
}

*["name"=~/^Vw /].highway_name {
assertNoMatch: "way \"name\"=View Foo";
assertMatch: "way \"name\"=Vw Foo";
throwWarning: tr("Highway name begins with Vw, may need to be expanded to View");
fixAdd: concat("name=", "View", substring(tag("name"), 2));
}

*["name"=~/^Vws /].highway_name {
assertNoMatch: "way \"name\"=Views Foo";
assertMatch: "way \"name\"=Vws Foo";
throwWarning: tr("Highway name begins with Vws, may need to be expanded to Views");
fixAdd: concat("name=", "Views", substring(tag("name"), 3));
}

*["name"=~/^Waters /].highway_name {
assertNoMatch: "way \"name\"=Waters Foo";
assertMatch: "way \"name\"=Waters Foo";
throwWarning: tr("Highway name begins with Waters, may need to be expanded to Waters");
fixAdd: concat("name=", "Waters", substring(tag("name"), 6));
}

*["name"=~/^Way /].highway_name {
assertNoMatch: "way \"name\"=Way Foo";
assertMatch: "way \"name\"=Way Foo";
throwWarning: tr("Highway name begins with Way, may need to be expanded to Way");
fixAdd: concat("name=", "Way", substring(tag("name"), 3));
}

*["name"=~/^Whrf /].highway_name {
assertNoMatch: "way \"name\"=Wharf Foo";
assertMatch: "way \"name\"=Whrf Foo";
throwWarning: tr("Highway name begins with Whrf, may need to be expanded to Wharf");
fixAdd: concat("name=", "Wharf", substring(tag("name"), 4));
}

*["name"=~/^Wlk /].highway_name {
assertNoMatch: "way \"name\"=Walk Foo";
assertMatch: "way \"name\"=Wlk Foo";
throwWarning: tr("Highway name begins with Wlk, may need to be expanded to Walk");
fixAdd: concat("name=", "Walk", substring(tag("name"), 3));
}

*["name"=~/^Wynd /].highway_name {
assertNoMatch: "way \"name\"=Wynd Foo";
assertMatch: "way \"name\"=Wynd Foo";
throwWarning: tr("Highway name begins with Wynd, may need to be expanded to Wynd");
fixAdd: concat("name=", "Wynd", substring(tag("name"), 4));
}


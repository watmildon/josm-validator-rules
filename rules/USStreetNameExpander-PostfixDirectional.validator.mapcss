meta
{
    title: "(US) Abbreviated Streetname Fixup, Postfix Directionals";
    version: "0,1_2024-01-04";
    description: "Expands common street name directional postfixes in the US";
    author: "watmildon";
    link: "https://github.com/watmildon/josm-validator-rules/blob/main/rules/USStreetNameExpander-PostfixDirectional.validator.mapcss";
    baselanguage: "en";
    min-josm-version: 14481;
}

/*
[out:json][timeout:300];
{{geocodeArea:"Oregon,United States of America"}}->.a;
(
  wr[highway][highway!=platform][amenity=shelter][!bus][name~" N$| S$| E$| W$| NE$| SE$| NW$| SW$"](area.a);
  nwr["addr:street"~" N$| S$| E$| W$| NE$| SE$| NW$| SW$"](area.a);
);
out body;
>;
out skel qt;
*/

*["highway"]["name"]["highway"!="bus_stop"] {
  set highway_name;
}

*["name"=~/ N$/].highway_name {
assertNoMatch: "way \"name\"=Main North";
assertMatch: "way \"name\"=Main N";
throwWarning: tr("Highway name postfix N, may need to be expanded to North");
fixAdd: concat("name=", substring(tag("name"), 0,length(tag("name"))-1),"North");
}

*["name"=~/ S$/].highway_name {
assertNoMatch: "way \"name\"=Main South";
assertMatch: "way \"name\"=Main Street S";
throwWarning: tr("Highway name postfix S, may need to be expanded to South");
fixAdd: concat("name=", substring(tag("name"), 0,length(tag("name"))-1),"South");
}

*["name"=~/ E$/].highway_name {
assertNoMatch: "way \"name\"=Main East";
assertMatch: "way \"name\"=Main Street E";
throwWarning: tr("Highway name postfix E, may need to be expanded to East");
fixAdd: concat("name=", substring(tag("name"), 0,length(tag("name"))-1),"East");
}

*["name"=~/ W$/].highway_name {
assertNoMatch: "way \"name\"=Main West";
assertMatch: "way \"name\"=Main Street W";
throwWarning: tr("Highway name postfix W, may need to be expanded to West");
fixAdd: concat("name=", substring(tag("name"), 0,length(tag("name"))-1),"West");
}

*["addr:street"]["addr:street"=~/ N$/] {
assertNoMatch: "way \"addr:street\"=Main North";
assertMatch: "way \"addr:street\"=Main Street N";
throwWarning: tr("addr:street={0} contains postfix N, may need to be expanded to North","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0,length(tag("addr:street"))-1),"North");
group: tr("addr:street postfix N, may need to be expanded to North");
}

*["addr:street"]["addr:street"=~/ S$/] {
assertNoMatch: "way \"addr:street\"=Main South";
assertMatch: "way \"addr:street\"=Main Street S";
throwWarning: tr("addr:street={0} contains postfix S, may need to be expanded to South","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0,length(tag("addr:street"))-1),"South");
group: tr("addr:street postfix S, may need to be expanded to South");
}

*["addr:street"]["addr:street"=~/ E$/] {
assertNoMatch: "way \"addr:street\"=Main East";
assertMatch: "way \"addr:street\"=Main Street E";
throwWarning: tr("addr:street={0} contains postfix E, may need to be expanded to East","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0,length(tag("addr:street"))-1),"East");
group: tr("addr:street postfix E, may need to be expanded to East");
}

*["addr:street"]["addr:street"=~/ W$/] {
assertNoMatch: "way \"addr:street\"=Main West";
assertMatch: "way \"addr:street\"=Main Street W";
throwWarning: tr("addr:street={0} contains postfix W, may need to be expanded to West","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0,length(tag("addr:street"))-1),"West");
group: tr("addr:street postfix W, may need to be expanded to West");
}

*["name"=~/ NE$/].highway_name {
assertNoMatch: "way \"name\"=Main Street Northeast";
assertMatch: "way \"name\"=Main Street NE";
throwWarning: tr("Highway name postfix NE, may need to be expanded to Northeast");
fixAdd: concat("name=", substring(tag("name"), 0,length(tag("name"))-2),"Northeast");
}

*["name"=~/ SE$/].highway_name {
assertNoMatch: "way \"name\"=Main Street Southeast";
assertMatch: "way \"name\"=Main Street SE";
throwWarning: tr("Highway name postfix SE, may need to be expanded to Southeast");
fixAdd: concat("name=", substring(tag("name"), 0,length(tag("name"))-2),"Southeast");
}

*["name"=~/ SW$/].highway_name {
assertNoMatch: "way \"name\"=Main Street Southwest";
assertMatch: "way \"name\"=Main Street SW";
throwWarning: tr("Highway name postfix SW, may need to be expanded to Southwest");
fixAdd: concat("name=", substring(tag("name"), 0,length(tag("name"))-2),"Southwest");
}

*["name"=~/ NW$/].highway_name {
assertNoMatch: "way \"name\"=Main Street Northwest";
assertMatch: "way \"name\"=Main Street NW";
throwWarning: tr("Highway name postfix NW, may need to be expanded to Northwest");
fixAdd: concat("name=", substring(tag("name"), 0,length(tag("name"))-2),"Northwest");
}

*["addr:street"]["addr:street"=~/ NE$/] {
assertNoMatch: "way \"addr:street\"=Main Street Northeast";
assertMatch: "way \"addr:street\"=Main Street NE";
throwWarning: tr("addr:street={0} contains postfix NE, may need to be expanded to Northeast","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0,length(tag("addr:street"))-2),"Northeast");
group: tr("addr:street postfix NE, may need to be expanded to Northeast");
}

*["addr:street"]["addr:street"=~/ SE$/] {
assertNoMatch: "way \"addr:street\"=Main Street Southeast";
assertMatch: "way \"addr:street\"=Main Street SE";
throwWarning: tr("addr:street={0} contains postfix SE, may need to be expanded to Southeast","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0,length(tag("addr:street"))-2),"Southeast");
group: tr("addr:street postfix SE, may need to be expanded to Southeast");
}

*["addr:street"]["addr:street"=~/ SW$/] {
assertNoMatch: "way \"addr:street\"=Main Street Southwest";
assertMatch: "way \"addr:street\"=Main Street SW";
throwWarning: tr("addr:street={0} contains postfix SW, may need to be expanded to Southwest","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0,length(tag("addr:street"))-2),"Southwest");
group: tr("addr:street postfix SW, may need to be expanded to Southwest");
}

*["addr:street"]["addr:street"=~/ NW$/] {
assertNoMatch: "way \"addr:street\"=Main Street Northwest";
assertMatch: "way \"addr:street\"=Main Street NW";
throwWarning: tr("addr:street={0} contains postfix NW, may need to be expanded to Northwest","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0,length(tag("addr:street"))-2),"Northwest");
group: tr("addr:street postfix NW, may need to be expanded to Northwest");
}

/* Mixed casing directional, useful after Title Casing an ALL CAPS field */

*["name"=~/ Ne$/].highway_name {
assertNoMatch: "way \"name\"=Main Street Northeast";
assertMatch: "way \"name\"=Main Street Ne";
throwWarning: tr("Highway name postfix Ne, may need to be expanded to Northeast");
fixAdd: concat("name=", substring(tag("name"), 0,length(tag("name"))-2),"Northeast");
}

*["name"=~/ Se$/].highway_name {
assertNoMatch: "way \"name\"=Main Street Southeast";
assertMatch: "way \"name\"=Main Street Se";
throwWarning: tr("Highway name postfix Se, may need to be expanded to Southeast");
fixAdd: concat("name=", substring(tag("name"), 0,length(tag("name"))-2),"Southeast");
}

*["name"=~/ Sw$/].highway_name {
assertNoMatch: "way \"name\"=Main Street Southwest";
assertMatch: "way \"name\"=Main Street Sw";
throwWarning: tr("Highway name postfix Sw, may need to be expanded to Southwest");
fixAdd: concat("name=", substring(tag("name"), 0,length(tag("name"))-2),"Southwest");
}

*["name"=~/ Nw$/].highway_name {
assertNoMatch: "way \"name\"=Main Street Northwest";
assertMatch: "way \"name\"=Main Street Nw";
throwWarning: tr("Highway name postfix Nw, may need to be expanded to Northwest");
fixAdd: concat("name=", substring(tag("name"), 0,length(tag("name"))-2),"Northwest");
}

*["addr:street"]["addr:street"=~/ Ne$/] {
assertNoMatch: "way \"addr:street\"=Main Street Northeast";
assertMatch: "way \"addr:street\"=Main Street Ne";
throwWarning: tr("addr:street={0} contains postfix Ne, may need to be expanded to Northeast","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0,length(tag("addr:street"))-2),"Northeast");
group: tr("addr:street postfix NE, may need to be expanded to Northeast");
}

*["addr:street"]["addr:street"=~/ Se$/] {
assertNoMatch: "way \"addr:street\"=Main Street Southeast";
assertMatch: "way \"addr:street\"=Main Street Se";
throwWarning: tr("addr:street={0} contains postfix Se, may need to be expanded to Southeast","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0,length(tag("addr:street"))-2),"Southeast");
group: tr("addr:street postfix SE, may need to be expanded to Southeast");
}

*["addr:street"]["addr:street"=~/ Sw$/] {
assertNoMatch: "way \"addr:street\"=Main Street Southwest";
assertMatch: "way \"addr:street\"=Main Street Sw";
throwWarning: tr("addr:street={0} contains postfix Sw, may need to be expanded to Southwest","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0,length(tag("addr:street"))-2),"Southwest");
group: tr("addr:street postfix SW, may need to be expanded to Southwest");
}

*["addr:street"]["addr:street"=~/ Nw$/] {
assertNoMatch: "way \"addr:street\"=Main Street Northwest";
assertMatch: "way \"addr:street\"=Main Street Nw";
throwWarning: tr("addr:street={0} contains postfix Nw, may need to be expanded to Northwest","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0,length(tag("addr:street"))-2),"Northwest");
group: tr("addr:street postfix NW, may need to be expanded to Northwest");
}
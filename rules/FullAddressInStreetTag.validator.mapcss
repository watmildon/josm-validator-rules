meta
{
    title: "addr:street contains full address";
    version: "0,1_2023-09-18";
    description: "Tries to detect if addr:street has a full street address in it";
    author: "watmildon";
    link: "https://github.com/watmildon/josm-validator-rules/blob/main/rules/FullAddressInStreetTag.validator.mapcss";
    baselanguage: "en";
    min-josm-version: 14481;
}

/*
[out:json][timeout:500];
// gather results
{{geocodeArea:"Ohio, United States"}}->.searchArea;
(
  nwr["addr:street"~"^[0-9]{1,6} .+"](area.searchArea);
);
// print results
out body;
>;
out skel qt;
*/

/* Leading digits (housenumbers) */

*["addr:street"]["addr:street"=~/^[0-9] .+/] {
    assertNoMatch: "way \"addr:street\"=1st Street";
    assertMatch: "way \"addr:street\"=1 Main Street";
    throwWarning: tr("addr:street={0}","{0.value}");
    fixAdd: concat("addr:street=", substring(tag("addr:street"),2));
    fixAdd: concat("addr:housenumber=", substring(tag("addr:street"),0,1));
    group: tr("addr:street starts with a digit, possibly needs to be moved to addr:housenumber");
}

*["addr:street"]["addr:street"=~/^[0-9]{2} .+/] {
    assertNoMatch: "way \"addr:street\"=1st Street";
    assertMatch: "way \"addr:street\"=12 Main Street";
    throwWarning: tr("addr:street={0}","{0.value}");
    fixAdd: concat("addr:street=", substring(tag("addr:street"),3));
    fixAdd: concat("addr:housenumber=", substring(tag("addr:street"),0,2));
    group: tr("addr:street starts with 2 digits, possibly needs to be moved to addr:housenumber");
}

*["addr:street"]["addr:street"=~/^[0-9]{3} .+/] {
    assertNoMatch: "way \"addr:street\"=1st Street";
    assertMatch: "way \"addr:street\"=123 Main Street";
    throwWarning: tr("addr:street={0}","{0.value}");
    fixAdd: concat("addr:street=", substring(tag("addr:street"),4));
    fixAdd: concat("addr:housenumber=", substring(tag("addr:street"),0,3));
    group: tr("addr:street starts with 3 digits, likely needs to be moved to addr:housenumber");
}

*["addr:street"]["addr:street"=~/^[0-9]{4} .+/] {
    assertNoMatch: "way \"addr:street\"=1st Street";
    assertMatch: "way \"addr:street\"=1234 Main Street";
    throwWarning: tr("addr:street={0}","{0.value}");
    fixAdd: concat("addr:street=", substring(tag("addr:street"),5));
    fixAdd: concat("addr:housenumber=", substring(tag("addr:street"),0,4));
    group: tr("addr:street starts with 4 digits, likely needs to be moved to addr:housenumber");
}

*["addr:street"]["addr:street"=~/^[0-9]{5} .+/] {
    assertNoMatch: "way \"addr:street\"=1st Street";
    assertMatch: "way \"addr:street\"=12345 Main Street";
    throwWarning: tr("addr:street={0}","{0.value}");
    fixAdd: concat("addr:street=", substring(tag("addr:street"),6));
    fixAdd: concat("addr:housenumber=", substring(tag("addr:street"),0,5));
    group: tr("addr:street starts with 5 digits, likely needs to be moved to addr:housenumber");
}

*["addr:street"]["addr:street"=~/^[0-9]{6} .+/] {
    assertNoMatch: "way \"addr:street\"=1st Street";
    assertMatch: "way \"addr:street\"=123456 Main Street";
    throwWarning: tr("addr:street={0}","{0.value}");
    fixAdd: concat("addr:street=", substring(tag("addr:street"),7));
    fixAdd: concat("addr:housenumber=", substring(tag("addr:street"),0,6));
    group: tr("addr:street starts with 6 digits, likely needs to be moved to addr:housenumber");
}

/* Trailing digits (zip codes) */

*["addr:street"]["addr:street"=~/ [0-9]{5}$/] {
    assertNoMatch: "way \"addr:street\"=1st Street";
    assertMatch: "way \"addr:street\"=123 Main Street Seattle WA 99999";
    throwWarning: tr("addr:street={0}","{0.value}");
    fixAdd: concat("addr:street=", substring(tag("addr:street"),0,length(tag("addr:street"))-6));
    fixAdd: concat("addr:postcode=", trim(substring(tag("addr:street"),length(tag("addr:street"))-6)));
    group: tr("addr:street ends with 5 digits, likely needs to be moved to addr:postcode");
}

*["addr:street"]["addr:street"=~/ [0-9]{5}-[0-9]{4}$/] {
    assertNoMatch: "way \"addr:street\"=1st Street";
    assertMatch: "way \"addr:street\"=123 Main Street Seattle WA 99999-8888";
    throwWarning: tr("addr:street={0}","{0.value}");
    fixAdd: concat("addr:street=", substring(tag("addr:street"),0,length(tag("addr:street"))-11));
    fixAdd: concat("addr:postcode=", trim(substring(tag("addr:street"),length(tag("addr:street"))-11)));
    group: tr("addr:street ends with NNNNN-NNNN digits, likely needs to be moved to addr:postcode");
}

/* Trailing unit numbers */

*["addr:street"]["addr:street"=~/,? (?:[Ss][Tt][Ee]|[sS]uite|[aA]pt|#|[uU]nit) ?([0-9]{1,4}|[A-Z]{1,2})$/] {
    assertNoMatch: "way \"addr:street\"=1st Street";
    assertMatch: "way \"addr:street\"=123 Main Street Ste 123";
    assertMatch: "way \"addr:street\"=123 Main Street Ste123";
    assertMatch: "way \"addr:street\"=123 Main Street STE 123";
    assertMatch: "way \"addr:street\"=123 Main Street STE123";
    assertMatch: "way \"addr:street\"=123 Main Street STE123";
    assertMatch: "way \"addr:street\"=123 Main Street Ste A";
    assertMatch: "way \"addr:street\"=123 Main Street SteOO";
    assertMatch: "way \"addr:street\"=123 Main Street Suite 123";
    assertMatch: "way \"addr:street\"=123 Main Street Suite123";
    assertMatch: "way \"addr:street\"=123 Main Street Apt 123";
    assertMatch: "way \"addr:street\"=123 Main Street Apt123";
    assertMatch: "way \"addr:street\"=123 Main Street # AA";
    assertMatch: "way \"addr:street\"=123 Main Street #AA";
    assertMatch: "way \"addr:street\"=123 Main Street Unit 123";
    assertMatch: "way \"addr:street\"=123 Main Street Unit123";
    assertMatch: "way \"addr:street\"=123 Main Street, Ste 123";
    assertMatch: "way \"addr:street\"=123 Main Street, Ste123";
    assertMatch: "way \"addr:street\"=123 Main Street, STE 123";
    assertMatch: "way \"addr:street\"=123 Main Street, STE123";
    assertMatch: "way \"addr:street\"=123 Main Street, STE123";
    assertMatch: "way \"addr:street\"=123 Main Street, Ste A";
    assertMatch: "way \"addr:street\"=123 Main Street, SteOO";
    assertMatch: "way \"addr:street\"=123 Main Street, Suite 123";
    assertMatch: "way \"addr:street\"=123 Main Street, Suite123";
    assertMatch: "way \"addr:street\"=123 Main Street, Apt 123";
    assertMatch: "way \"addr:street\"=123 Main Street, Apt123";
    assertMatch: "way \"addr:street\"=123 Main Street, # AA";
    assertMatch: "way \"addr:street\"=123 Main Street, #AA";
    assertMatch: "way \"addr:street\"=123 Main Street, Unit 123";
    assertMatch: "way \"addr:street\"=123 Main Street, Unit123";

    throwWarning: tr("addr:street={0}","{0.value}");
    group: tr("addr:street likely ends with a unit number");
    fixAdd: concat("addr:unit=", get(regexp_match("(.+?),? (?:[Ss][Tt][Ee]|[sS]uite|[aA]pt|#|[uU]nit) ?([0-9]{1,4}|[A-Z]{1,2})$",tag("addr:street")),2));
    fixAdd: concat("addr:street=", get(regexp_match("(.+?),? (?:[Ss][Tt][Ee]|[sS]uite|[aA]pt|#|[uU]nit) ?([0-9]{1,4}|[A-Z]{1,2})$",tag("addr:street")),1));
}
meta
{
    title: "(US) Abbreviated Streetname Fixup, Prefix Directionals";
    version: "0,1_2023-08-28";
    description: "Expands common street name directional prefixes in the US";
    author: "watmildon";
    link: "TODOMAKELINK";
    baselanguage: "en";
    min-josm-version: 14481;
}

/*
[out:json][timeout:300];
{{geocodeArea:"Oregon,United States of America"}}->.a;
(
  wr[highway][highway!=platform][amenity=shelter][!bus][name~"^N |^S |^E |^W |^NE |^SW |^NW |^SW "](area.a);
  nwr["addr:street"~"^N |^S |^E |^W |^NE |^SW |^NW |^SW "](area.a);
);
out body;
>;
out skel qt;
*/

*[highway]["name"]["name"=~/^N /] {
assertNoMatch: "way \"name\"=North Main";
assertMatch: "way \"name\"=N Main";
throwWarning: tr("Highway name prefix N, may need to be expanded to North");
fixAdd: concat("name=", "North", substring(tag("name"), 1,length(tag("name"))));
}

*[highway]["name"]["name"=~/^S /] {
assertNoMatch: "way \"name\"=South Main";
assertMatch: "way \"name\"=S Main";
throwWarning: tr("Highway name prefix S, may need to be expanded to South");
fixAdd: concat("name=", "South", substring(tag("name"), 1,length(tag("name"))));
}

*[highway]["name"]["name"=~/^E /] {
assertNoMatch: "way \"name\"=East Main";
assertMatch: "way \"name\"=E Main";
throwWarning: tr("Highway name prefix E, may need to be expanded to East");
fixAdd: concat("name=", "East", substring(tag("name"), 1,length(tag("name"))));
}

*[highway]["name"]["name"=~/^W /] {
assertNoMatch: "way \"name\"=West Main";
assertMatch: "way \"name\"=W Main";
throwWarning: tr("Highway name prefix W, may need to be expanded to West");
fixAdd: concat("name=", "West", substring(tag("name"), 1,length(tag("name"))));
}

*["addr:street"]["addr:street"=~/^N /] {
assertNoMatch: "way \"addr:street\"=North Main";
assertMatch: "way \"addr:street\"=N Main";
throwWarning: tr("addr:street={0}, may need to be expanded to North","{0.value}");
fixAdd: concat("addr:street=", "North", substring(tag("addr:street"), 1,length(tag("addr:street"))));
group: tr("addr:street prefix N, may need to be expanded to North");
}

*["addr:street"]["addr:street"=~/^S /] {
assertNoMatch: "way \"addr:street\"=South Main";
assertMatch: "way \"addr:street\"=S Main";
throwWarning: tr("addr:street={0}, may need to be expanded to South","{0.value}");
fixAdd: concat("addr:street=", "South", substring(tag("addr:street"), 1,length(tag("addr:street"))));
group: tr("addr:street prefix S, may need to be expanded to South");
}

*["addr:street"]["addr:street"=~/^E /] {
assertNoMatch: "way \"addr:street\"=East Main";
assertMatch: "way \"addr:street\"=E Main";
throwWarning: tr("addr:street={0}, may need to be expanded to East","{0.value}");
fixAdd: concat("addr:street=", "East", substring(tag("addr:street"), 1,length(tag("addr:street"))));
group: tr("addr:street prefix E, may need to be expanded to East");
}

*["addr:street"]["addr:street"=~/^W /] {
assertNoMatch: "way \"addr:street\"=West Main";
assertMatch: "way \"addr:street\"=W Main";
throwWarning: tr("addr:street={0}, may need to be expanded to West","{0.value}");
fixAdd: concat("addr:street=", "West", substring(tag("addr:street"), 1,length(tag("addr:street"))));
group: tr("addr:street prefix W, may need to be expanded to West");
}

*[highway]["name"]["name"=~/^NE /] {
assertNoMatch: "way \"name\"=Northeast Main";
assertMatch: "way \"name\"=NE Main";
throwWarning: tr("Highway name prefix NE, may need to be expanded to Northeast");
fixAdd: concat("name=", "Northeast", substring(tag("name"), 2,length(tag("name"))));
}

*[highway]["name"]["name"=~/^Ne /] {
assertNoMatch: "way \"name\"=Northeast Main";
assertMatch: "way \"name\"=Ne Main";
throwWarning: tr("Highway name prefix Ne, may need to be expanded to Northeast");
fixAdd: concat("name=", "Northeast", substring(tag("name"), 2,length(tag("name"))));
}

*[highway]["name"]["name"=~/^SE /] {
assertNoMatch: "way \"name\"= Southeast Main";
assertMatch: "way \"name\"=SE Main";
throwWarning: tr("Highway name prefix SE, may need to be expanded to Southeast");
fixAdd: concat("name=", "Southeast", substring(tag("name"), 2,length(tag("name"))));
}

*[highway]["name"]["name"=~/^Se /] {
assertNoMatch: "way \"name\"= Southeast Main";
assertMatch: "way \"name\"=Se Main";
throwWarning: tr("Highway name prefix Se, may need to be expanded to Southeast");
fixAdd: concat("name=", "Southeast", substring(tag("name"), 2,length(tag("name"))));
}

*[highway]["name"]["name"=~/^SW /] {
assertNoMatch: "way \"name\"=Southwest Main";
assertMatch: "way \"name\"=SW Main";
throwWarning: tr("Highway name prefix SW, may need to be expanded to Southwest");
fixAdd: concat("name=", "Southwest", substring(tag("name"), 2,length(tag("name"))));
}

*[highway]["name"]["name"=~/^Sw /] {
assertNoMatch: "way \"name\"=Southwest Main";
assertMatch: "way \"name\"=Sw Main";
throwWarning: tr("Highway name prefix Sw, may need to be expanded to Southwest");
fixAdd: concat("name=", "Southwest", substring(tag("name"), 2,length(tag("name"))));
}

*[highway]["name"]["name"=~/^NW /] {
assertNoMatch: "way \"name\"=Northwest Main";
assertMatch: "way \"name\"=NW Main";
throwWarning: tr("Highway name prefix NW, may need to be expanded to Northwest");
fixAdd: concat("name=", "Northwest", substring(tag("name"), 2,length(tag("name"))));
}

*[highway]["name"]["name"=~/^Nw /] {
assertNoMatch: "way \"name\"=Northwest Main";
assertMatch: "way \"name\"=Nw Main";
throwWarning: tr("Highway name prefix Nw, may need to be expanded to Northwest");
fixAdd: concat("name=", "Northwest", substring(tag("name"), 2,length(tag("name"))));
}

*["addr:street"]["addr:street"=~/^NE /] {
assertNoMatch: "way \"addr:street\"=Northeast Main";
assertMatch: "way \"addr:street\"=NE Main";
throwWarning: tr("addr:street={0}, may need to be expanded to Northeast","{0.value}");
fixAdd: concat("addr:street=", "Northeast", substring(tag("addr:street"), 2,length(tag("addr:street"))));
group: tr("addr:street prefix NE, may need to be expanded to Northeast");
}

*["addr:street"]["addr:street"=~/^Ne /] {
assertNoMatch: "way \"addr:street\"=Northeast Main";
assertMatch: "way \"addr:street\"=Ne Main";
throwWarning: tr("addr:street={0}, may need to be expanded to Northeast","{0.value}");
fixAdd: concat("addr:street=", "Northeast", substring(tag("addr:street"), 2,length(tag("addr:street"))));
group: tr("addr:street prefix Ne, may need to be expanded to Northeast");
}

*["addr:street"]["addr:street"=~/^SE /] {
assertNoMatch: "way \"addr:street\"= Southeast Main";
assertMatch: "way \"addr:street\"=SE Main";
throwWarning: tr("addr:street={0}, may need to be expanded to Southeast","{0.value}");
fixAdd: concat("addr:street=", "Southeast", substring(tag("addr:street"), 2,length(tag("addr:street"))));
group: tr("addr:street prefix SE, may need to be expanded to Southeast");
}

*["addr:street"]["addr:street"=~/^Se /] {
assertNoMatch: "way \"addr:street\"= Southeast Main";
assertMatch: "way \"addr:street\"=Se Main";
throwWarning: tr("addr:street={0}, may need to be expanded to Southeast","{0.value}");
fixAdd: concat("addr:street=", "Southeast", substring(tag("addr:street"), 2,length(tag("addr:street"))));
group: tr("addr:street prefix Se, may need to be expanded to Southeast");
}

*["addr:street"]["addr:street"=~/^SW /] {
assertNoMatch: "way \"addr:street\"=Southwest Main";
assertMatch: "way \"addr:street\"=SW Main";
throwWarning: tr("addr:street={0}, may need to be expanded to Southwest","{0.value}");
fixAdd: concat("addr:street=", "Southwest", substring(tag("addr:street"), 2,length(tag("addr:street"))));
group: tr("addr:street prefix SW, may need to be expanded to Southwest");
}

*["addr:street"]["addr:street"=~/^Sw /] {
assertNoMatch: "way \"addr:street\"=Southwest Main";
assertMatch: "way \"addr:street\"=Sw Main";
throwWarning: tr("addr:street={0}, may need to be expanded to Southwest","{0.value}");
fixAdd: concat("addr:street=", "Southwest", substring(tag("addr:street"), 2,length(tag("addr:street"))));
group: tr("addr:street prefix Sw, may need to be expanded to Southwest");
}

*["addr:street"]["addr:street"=~/^NW /] {
assertNoMatch: "way \"addr:street\"=Northwest Main";
assertMatch: "way \"addr:street\"=NW Main";
throwWarning: tr("addr:street={0}, may need to be expanded to Northwest","{0.value}");
fixAdd: concat("addr:street=", "Northwest", substring(tag("addr:street"), 2,length(tag("addr:street"))));
group: tr("addr:street prefix NW, may need to be expanded to Northwest");
}

*["addr:street"]["addr:street"=~/^Nw /] {
assertNoMatch: "way \"addr:street\"=Northwest Main";
assertMatch: "way \"addr:street\"=Nw Main";
throwWarning: tr("addr:street={0}, may need to be expanded to Northwest","{0.value}");
fixAdd: concat("addr:street=", "Northwest", substring(tag("addr:street"), 2,length(tag("addr:street"))));
group: tr("addr:street prefix Nw, may need to be expanded to Northwest");
}

meta
{
    title: "name= capitalization warnings";
    version: "0,1_2023-09-14";
    description: "Flags common capitalization issues";
    author: "watmildon";
    link: "https://github.com/watmildon/josm-validator-rules/blob/main/rules/NameTagCapitalization.validator.mapcss";
    baselanguage: "en";
    min-josm-version: 14481;
}

/*
[out:json][timeout:300];
{{geocodeArea:"United States of America"}}->.a;
(
  // 2134567890
  nwr[name](area.a);
);
out body;
>;
out skel qt;
*/

*["name"=~/\bMc[a-z]/]{
    assertNoMatch: "way \"name\"=McDonalds";
    assertMatch: "way \"name\"=Mcdonalds";
    assertMatch: "way \"name\"=\"Old Mcdonald\"";
    throwWarning: tr("A word in name= begins with Mc. This commonly has a capital letter next.");
    fixAdd: concat("name=", get(regexp_match("(.*\\bMc)([a-z])(.*)", tag("name")), 1), upper(get(regexp_match("(.*\\bMc)([a-z])(.*)", tag("name")), 2)), get(regexp_match("(.*\\bMc)([a-z])(.*)", tag("name")), 3));
}

*["name"=~/\bMac(?!y's|edonia|hine)[a-z]/]{
    assertNoMatch: "way \"name\"=\"MacArthur Boulevard\"";
    assertNoMatch: "way \"name\"=\"Macedonian Baptist Church of Baltimore\"";
    assertNoMatch: "way \"name\"=\"Macy's\"";
    assertNoMatch: "way \"name\"=\"Machine Records\"";
    assertMatch: "way \"name\"=\"Macarthur Boulevard\"";
    assertMatch: "way \"name\"=\"Boulevard Macarthur\"";
    throwWarning: tr("A word in name= begins with Mac. This commonly has a capital letter next.");
    fixAdd: concat("name=", get(regexp_match("(.*\\bMac)([a-z])(.*)", tag("name")), 1), upper(get(regexp_match("(.*\\bMac)([a-z])(.*)", tag("name")), 2)), get(regexp_match("(.*\\bMac)([a-z])(.*)", tag("name")), 3));
}

*["name"=~/ Del /]{
    assertNoMatch: "way \"name\"=Casita del Mar";
    assertMatch: "way \"name\"=Casita Del Mar";
    throwWarning: tr("name= contains the word Del which is commonly cased as del");
    fixAdd: concat("name=", replace(tag("name"), " Del ", " del "));
}

*["name"=~/ De [Ll]a /]{
    assertNoMatch: "way \"name\"=\"Casa de la Madre\"";
    assertMatch: "way \"name\"=\"Casa De La Madre\"";
    assertMatch: "way \"name\"=\"Casa De la Madre\"";
    throwWarning: tr("name= contains the word De la which is commonly cased as de la");
    fixAdd: concat("name=", replace(replace(tag("name"), " De La ", " de la "), "De la", "de la"));
}

*["name"=~/ Du /]{
    assertNoMatch: "way \"name\"=Cafe du Parc";
    assertMatch: "way \"name\"=Cafe Du Parc";
    throwWarning: tr("name= contains the word Du which is commonly cased as du");
    fixAdd: concat("name=", replace(tag("name"), " Du ", " du "));
}

*["name"=~/ De (?![Ll]a )/] {
    assertNoMatch: "way \"name\"=\"Fogo de Chao\"";
    assertNoMatch: "way \"name\"=\"Casa De La Madre\"";
    assertMatch: "way \"name\"=\"Fogo De Chao\"";
    throwWarning: tr("name= contains the word De which is commonly cased as de");
    fixAdd: concat("name=", replace(tag("name"), " De ", " de "));
}

*["name"=~/ Di /] {
    assertNoMatch: "way \"name\"=\"Buca di Beppo\"";
    assertMatch: "way \"name\"=\"Buca Di Beppo\"";
    throwWarning: tr("name= contains the word Di which is commonly cased as di");
    fixAdd: concat("name=", replace(tag("name"), " Di ", " di "));
}

*["name"=~/ (?:Of|On|For|A|An|The|At|To|In|Via|By) /] {
    assertNoMatch: "way \"name\"=\"House of Cards\"";
    assertMatch: "way \"name\"=\"House Of Cards\"";
    throwWarning: tr("name= contains a capitalized preposition that is usually lowercase");
    fixAdd: concat("name=", get(regexp_match("(.*)( (?:Of|For|A|An|The|At|To|In|Via|By) )(.*)", tag("name")), 1), lower(get(regexp_match("(.*)( (?:Of|For|A|An|The|At|To|In|Via|By) )(.*)", tag("name")), 2)), get(regexp_match("(.*)( (?:Of|For|A|An|The|At|To|In|Via|By) )(.*)", tag("name")), 3));
}

*["name"=~/ (?:Or|And|But) /] {
    assertNoMatch: "way \"name\"=\"Salt and Pepper\"";
    assertMatch: "way \"name\"=\"Salt And Pepper\"";
    throwWarning: tr("name= contains a capitalized conjunction that is usually lowercase");
    fixAdd: concat("name=", get(regexp_match("(.*)( (?:Or|And|But) )(.*)", tag("name")), 1), lower(get(regexp_match("(.*)( (?:Or|And|But) )(.*)", tag("name")), 2)), get(regexp_match("(.*)( (?:Or|And|But) )(.*)", tag("name")), 3));
}

*["name"=~/\b[a-z]+$/][inside("US,AU,GB,IE,NZ,CA")] {
    assertNoMatch: "way \"name\"=\"House of Cards\"";
    assertMatch: "way \"name\"=\"House of cards\"";
    throwWarning: tr("name= ends in a word that is lowercased");
    fixAdd: concat("name=", get(regexp_match("(.*)\\b([a-z]+)$", tag("name")), 1), title(get(regexp_match("(.*)\\b([a-z]+)$", tag("name")), 2)));
}
meta
{
    title: "(US) Abbreviated Streetname Fixup";
    version: "0,1_5/20/2025";
    description: "Expands common street name abbreviations in the US";
    author: "watmildon";
    link: "https://github.com/watmildon/josm-validator-rules/blob/main/rules/USStreetNameExpander.validator.mapcss";
    baselanguage: "en";
    min-josm-version: 14481;
}

/*
[out:json][timeout:300];
{{geocodeArea:"United States of America"}}->.a;
(
  wr[highway][highway!=platform][highway!="bus_stop"][amenity!=shelter][!bus][name~" Acc$| Aly$| Ambl$| App$| Arc$| Artl$| Arty$| Av$| Ave$| Bch$| Bg$| Bgs$| Blf$| Blk$| Blv$| Blvd$| Bnd$| Br$| Brg$| Btm$| Bwlk$| Byp$| Bypa$| Byu$| Bywy$| Bzr$| Cct$| Ch$| Cir$| Cirs$| Clf$| Clfs$| Cly$| Cmn$| Cnl$| Cnr$| Coll$| Cpe$| Cr$| Crk$| Cres$| Crst$| Cswy$| Ct$| Ctr$| Cts$| Ctyd$| Curv$| Cutt$| Cv$| Cyn$| Dl$| Dr$| Dv$| Dvwy$| Elb$| Est$| Ests$| Expy$| Expwy$| Fawy$| Fld$| Flds$| Fmrd$| Ftrl$| Frk$| Fry$| Fwy$| Gd$| Gdns$| Gr$| Gro$| Grv$| Hbr$| Hl$| Hls$| Holw$| Hts$| Hw$| Hwy$| Hvn$| Intg$| Iss$| Jct$| Jn$| Jnc$| Knl$| Knls$| Ky$| Kys$| Lck$| Lcks$| Ldg$| Lk$| Lks$| Lkt$| Ln$| Lndg$| Lp$| Mal$| Mdw$| Mdws$| Mkt$| Ml$| Mt$| Mtn$| Mtwy$| Orch$| Ovps$| Piaz$| Pk$| Pky$| Pkwy$| Pl$| Pln$| Plns$| Plz$| Pnt$| Prkwy$| Pt$| Pvt$| Qdrt$| Qtrs$| Qy$| Qys$| Rd$| Rds$| Rdg$| Rdge$| Rdgs$| Rw$| Rmrd$| Rt$| Rte$| Rty$| Shl$| Shls$| Shr$| Shrs$| Skwy$| Smt$| Spg$| Spgs$| Sq$| Sqs$| Srvc$| St$| Tce$| Ter$| Tfwy$| Thfr$| Thwy$| Tl$| Tlwy$| Tpke$| Trce$| Tr$| Trk$| Trl$| Tunl$| Unp$| Vl$| Vlg$| Vlgs$| Vly$| Vw$| Wd$| Whrf$| Wkwy$| Wlk$| Wy$| Xing$"](area.a);
  wr[highway][highway!=platform][highway!="bus_stop"][amenity!=shelter][!bus][name~" Acc\.$| Aly\.$| Ambl\.$| App\.$| Arc\.$| Artl\.$| Arty\.$| Av\.$| Ave\.$| Bch\.$| Bg\.$| Bgs\.$| Blf\.$| Blk\.$| Blv\.$| Blvd\.$| Bnd\.$| Br\.$| Brg\.$| Btm\.$| Bwlk\.$| Byp\.$| Bypa\.$| Byu\.$| Bywy\.$| Bzr\.$| Cct\.$| Ch\.$| Cir\.$| Cirs\.$| Clf\.$| Clfs\.$| Cly\.$| Cmn\.$| Cnl\.$| Cnr\.$| Coll\.$| Cpe\.$| Cr\.$| Crk\.$| Cres\.$| Crst\.$| Cswy\.$| Ct\.$| Ctr\.$| Cts\.$| Ctyd\.$| Curv\.$| Cutt\.$| Cv\.$| Cyn\.$| Dl\.$| Dr\.$| Dv\.$| Dvwy\.$| Elb\.$| Est\.$| Ests\.$| Expy\.$| Expwy\.$| Fawy\.$| Fld\.$| Flds\.$| Fmrd\.$| Ftrl\.$| Frk\.$| Fry\.$| Fwy\.$| Gd\.$| Gdns\.$| Gr\.$| Gro\.$| Grv\.$| Hbr\.$| Hl\.$| Hls\.$| Holw\.$| Hts\.$| Hw\.$| Hwy\.$| Hvn\.$| Intg\.$| Iss\.$| Jct\.$| Jn\.$| Jnc\.$| Knl\.$| Knls\.$| Ky\.$| Kys\.$| Lck\.$| Lcks\.$| Ldg\.$| Lk\.$| Lks\.$| Lkt\.$| Ln\.$| Lndg\.$| Lp\.$| Mal\.$| Mdw\.$| Mdws\.$| Mkt\.$| Ml\.$| Mt\.$| Mtn\.$| Mtwy\.$| Orch\.$| Ovps\.$| Piaz\.$| Pk\.$| Pky\.$| Pkwy\.$| Pl\.$| Pln\.$| Plns\.$| Plz\.$| Pnt\.$| Prkwy\.$| Pt\.$| Pvt\.$| Qdrt\.$| Qtrs\.$| Qy\.$| Qys\.$| Rd\.$| Rds\.$| Rdg\.$| Rdge\.$| Rdgs\.$| Rw\.$| Rmrd\.$| Rt\.$| Rte\.$| Rty\.$| Shl\.$| Shls\.$| Shr\.$| Shrs\.$| Skwy\.$| Smt\.$| Spg\.$| Spgs\.$| Sq\.$| Sqs\.$| Srvc\.$| St\.$| Tce\.$| Ter\.$| Tfwy\.$| Thfr\.$| Thwy\.$| Tl\.$| Tlwy\.$| Tpke\.$| Trce\.$| Tr\.$| Trk\.$| Trl\.$| Tunl\.$| Unp\.$| Vl\.$| Vlg\.$| Vlgs\.$| Vly\.$| Vw\.$| Wd\.$| Whrf\.$| Wkwy\.$| Wlk\.$| Wy\.$| Xing\.$"](area.a);
  wr[highway][highway!=platform][highway!="bus_stop"][amenity!=shelter][!bus][name~"^Acc |^Aly |^Ambl |^App |^Arc |^Artl |^Arty |^Av |^Ave |^Bch |^Bg |^Bgs |^Blf |^Blk |^Blv |^Blvd |^Bnd |^Br |^Brg |^Btm |^Bwlk |^Byp |^Bypa |^Byu |^Bywy |^Bzr |^Cct |^Ch |^Cir |^Cirs |^Clf |^Clfs |^Cly |^Cmn |^Cnl |^Cnr |^Coll |^Cpe |^Cr |^Crk |^Cres |^Crst |^Cswy |^Ct |^Ctr |^Cts |^Ctyd |^Curv |^Cutt |^Cv |^Cyn |^Dl |^Dr |^Dv |^Dvwy |^Elb |^Est |^Ests |^Expy |^Expwy |^Fawy |^Fld |^Flds |^Fmrd |^Ftrl |^Frk |^Fry |^Fwy |^Gd |^Gdns |^Gr |^Gro |^Grv |^Hbr |^Hl |^Hls |^Holw |^Hts |^Hw |^Hwy |^Hvn |^Intg |^Iss |^Jct |^Jn |^Jnc |^Knl |^Knls |^Ky |^Kys |^Lck |^Lcks |^Ldg |^Lk |^Lks |^Lkt |^Ln |^Lndg |^Lp |^Mal |^Mdw |^Mdws |^Mkt |^Ml |^Mt |^Mtn |^Mtwy |^Orch |^Ovps |^Piaz |^Pk |^Pky |^Pkwy |^Pl |^Pln |^Plns |^Plz |^Pnt |^Prkwy |^Pt |^Pvt |^Qdrt |^Qtrs |^Qy |^Qys |^Rd |^Rds |^Rdg |^Rdge |^Rdgs |^Rw |^Rmrd |^Rt |^Rte |^Rty |^Shl |^Shls |^Shr |^Shrs |^Skwy |^Smt |^Spg |^Spgs |^Sq |^Sqs |^Srvc |^St |^Tce |^Ter |^Tfwy |^Thfr |^Thwy |^Tl |^Tlwy |^Tpke |^Trce |^Tr |^Trk |^Trl |^Tunl |^Unp |^Vl |^Vlg |^Vlgs |^Vly |^Vw |^Wd |^Whrf |^Wkwy |^Wlk |^Wy |^Xing "](area.a);
  wr[highway][highway!=platform][highway!="bus_stop"][amenity!=shelter][!bus][name~" Acc | Aly | Ambl | App | Arc | Artl | Arty | Av | Ave | Bch | Bg | Bgs | Blf | Blk | Blv | Blvd | Bnd | Br | Brg | Btm | Bwlk | Byp | Bypa | Byu | Bywy | Bzr | Cct | Ch | Cir | Cirs | Clf | Clfs | Cly | Cmn | Cnl | Cnr | Coll | Cpe | Cr | Crk | Cres | Crst | Cswy | Ct | Ctr | Cts | Ctyd | Curv | Cutt | Cv | Cyn | Dl | Dr | Dv | Dvwy | Elb | Est | Ests | Expy | Expwy | Fawy | Fld | Flds | Fmrd | Ftrl | Frk | Fry | Fwy | Gd | Gdns | Gr | Gro | Grv | Hbr | Hl | Hls | Holw | Hts | Hw | Hwy | Hvn | Intg | Iss | Jct | Jn | Jnc | Knl | Knls | Ky | Kys | Lck | Lcks | Ldg | Lk | Lks | Lkt | Ln | Lndg | Lp | Mal | Mdw | Mdws | Mkt | Ml | Mt | Mtn | Mtwy | Orch | Ovps | Piaz | Pk | Pky | Pkwy | Pl | Pln | Plns | Plz | Pnt | Prkwy | Pt | Pvt | Qdrt | Qtrs | Qy | Qys | Rd | Rds | Rdg | Rdge | Rdgs | Rw | Rmrd | Rt | Rte | Rty | Shl | Shls | Shr | Shrs | Skwy | Smt | Spg | Spgs | Sq | Sqs | Srvc | St | Tce | Ter | Tfwy | Thfr | Thwy | Tl | Tlwy | Tpke | Trce | Tr | Trk | Trl | Tunl | Unp | Vl | Vlg | Vlgs | Vly | Vw | Wd | Whrf | Wkwy | Wlk | Wy | Xing "](area.a);
  nwr["addr:street"~" Acc$| Aly$| Ambl$| App$| Arc$| Artl$| Arty$| Av$| Ave$| Bch$| Bg$| Bgs$| Blf$| Blk$| Blv$| Blvd$| Bnd$| Br$| Brg$| Btm$| Bwlk$| Byp$| Bypa$| Byu$| Bywy$| Bzr$| Cct$| Ch$| Cir$| Cirs$| Clf$| Clfs$| Cly$| Cmn$| Cnl$| Cnr$| Coll$| Cpe$| Cr$| Crk$| Cres$| Crst$| Cswy$| Ct$| Ctr$| Cts$| Ctyd$| Curv$| Cutt$| Cv$| Cyn$| Dl$| Dr$| Dv$| Dvwy$| Elb$| Est$| Ests$| Expy$| Expwy$| Fawy$| Fld$| Flds$| Fmrd$| Ftrl$| Frk$| Fry$| Fwy$| Gd$| Gdns$| Gr$| Gro$| Grv$| Hbr$| Hl$| Hls$| Holw$| Hts$| Hw$| Hwy$| Hvn$| Intg$| Iss$| Jct$| Jn$| Jnc$| Knl$| Knls$| Ky$| Kys$| Lck$| Lcks$| Ldg$| Lk$| Lks$| Lkt$| Ln$| Lndg$| Lp$| Mal$| Mdw$| Mdws$| Mkt$| Ml$| Mt$| Mtn$| Mtwy$| Orch$| Ovps$| Piaz$| Pk$| Pky$| Pkwy$| Pl$| Pln$| Plns$| Plz$| Pnt$| Prkwy$| Pt$| Pvt$| Qdrt$| Qtrs$| Qy$| Qys$| Rd$| Rds$| Rdg$| Rdge$| Rdgs$| Rw$| Rmrd$| Rt$| Rte$| Rty$| Shl$| Shls$| Shr$| Shrs$| Skwy$| Smt$| Spg$| Spgs$| Sq$| Sqs$| Srvc$| St$| Tce$| Ter$| Tfwy$| Thfr$| Thwy$| Tl$| Tlwy$| Tpke$| Trce$| Tr$| Trk$| Trl$| Tunl$| Unp$| Vl$| Vlg$| Vlgs$| Vly$| Vw$| Wd$| Whrf$| Wkwy$| Wlk$| Wy$| Xing$"](area.a);
  nwr["addr:street"~" Acc\.$| Aly\.$| Ambl\.$| App\.$| Arc\.$| Artl\.$| Arty\.$| Av\.$| Ave\.$| Bch\.$| Bg\.$| Bgs\.$| Blf\.$| Blk\.$| Blv\.$| Blvd\.$| Bnd\.$| Br\.$| Brg\.$| Btm\.$| Bwlk\.$| Byp\.$| Bypa\.$| Byu\.$| Bywy\.$| Bzr\.$| Cct\.$| Ch\.$| Cir\.$| Cirs\.$| Clf\.$| Clfs\.$| Cly\.$| Cmn\.$| Cnl\.$| Cnr\.$| Coll\.$| Cpe\.$| Cr\.$| Crk\.$| Cres\.$| Crst\.$| Cswy\.$| Ct\.$| Ctr\.$| Cts\.$| Ctyd\.$| Curv\.$| Cutt\.$| Cv\.$| Cyn\.$| Dl\.$| Dr\.$| Dv\.$| Dvwy\.$| Elb\.$| Est\.$| Ests\.$| Expy\.$| Expwy\.$| Fawy\.$| Fld\.$| Flds\.$| Fmrd\.$| Ftrl\.$| Frk\.$| Fry\.$| Fwy\.$| Gd\.$| Gdns\.$| Gr\.$| Gro\.$| Grv\.$| Hbr\.$| Hl\.$| Hls\.$| Holw\.$| Hts\.$| Hw\.$| Hwy\.$| Hvn\.$| Intg\.$| Iss\.$| Jct\.$| Jn\.$| Jnc\.$| Knl\.$| Knls\.$| Ky\.$| Kys\.$| Lck\.$| Lcks\.$| Ldg\.$| Lk\.$| Lks\.$| Lkt\.$| Ln\.$| Lndg\.$| Lp\.$| Mal\.$| Mdw\.$| Mdws\.$| Mkt\.$| Ml\.$| Mt\.$| Mtn\.$| Mtwy\.$| Orch\.$| Ovps\.$| Piaz\.$| Pk\.$| Pky\.$| Pkwy\.$| Pl\.$| Pln\.$| Plns\.$| Plz\.$| Pnt\.$| Prkwy\.$| Pt\.$| Pvt\.$| Qdrt\.$| Qtrs\.$| Qy\.$| Qys\.$| Rd\.$| Rds\.$| Rdg\.$| Rdge\.$| Rdgs\.$| Rw\.$| Rmrd\.$| Rt\.$| Rte\.$| Rty\.$| Shl\.$| Shls\.$| Shr\.$| Shrs\.$| Skwy\.$| Smt\.$| Spg\.$| Spgs\.$| Sq\.$| Sqs\.$| Srvc\.$| St\.$| Tce\.$| Ter\.$| Tfwy\.$| Thfr\.$| Thwy\.$| Tl\.$| Tlwy\.$| Tpke\.$| Trce\.$| Tr\.$| Trk\.$| Trl\.$| Tunl\.$| Unp\.$| Vl\.$| Vlg\.$| Vlgs\.$| Vly\.$| Vw\.$| Wd\.$| Whrf\.$| Wkwy\.$| Wlk\.$| Wy\.$| Xing\.$"](area.a);
  nwr["addr:street"~"^Acc |^Aly |^Ambl |^App |^Arc |^Artl |^Arty |^Av |^Ave |^Bch |^Bg |^Bgs |^Blf |^Blk |^Blv |^Blvd |^Bnd |^Br |^Brg |^Btm |^Bwlk |^Byp |^Bypa |^Byu |^Bywy |^Bzr |^Cct |^Ch |^Cir |^Cirs |^Clf |^Clfs |^Cly |^Cmn |^Cnl |^Cnr |^Coll |^Cpe |^Cr |^Crk |^Cres |^Crst |^Cswy |^Ct |^Ctr |^Cts |^Ctyd |^Curv |^Cutt |^Cv |^Cyn |^Dl |^Dr |^Dv |^Dvwy |^Elb |^Est |^Ests |^Expy |^Expwy |^Fawy |^Fld |^Flds |^Fmrd |^Ftrl |^Frk |^Fry |^Fwy |^Gd |^Gdns |^Gr |^Gro |^Grv |^Hbr |^Hl |^Hls |^Holw |^Hts |^Hw |^Hwy |^Hvn |^Intg |^Iss |^Jct |^Jn |^Jnc |^Knl |^Knls |^Ky |^Kys |^Lck |^Lcks |^Ldg |^Lk |^Lks |^Lkt |^Ln |^Lndg |^Lp |^Mal |^Mdw |^Mdws |^Mkt |^Ml |^Mt |^Mtn |^Mtwy |^Orch |^Ovps |^Piaz |^Pk |^Pky |^Pkwy |^Pl |^Pln |^Plns |^Plz |^Pnt |^Prkwy |^Pt |^Pvt |^Qdrt |^Qtrs |^Qy |^Qys |^Rd |^Rds |^Rdg |^Rdge |^Rdgs |^Rw |^Rmrd |^Rt |^Rte |^Rty |^Shl |^Shls |^Shr |^Shrs |^Skwy |^Smt |^Spg |^Spgs |^Sq |^Sqs |^Srvc |^St |^Tce |^Ter |^Tfwy |^Thfr |^Thwy |^Tl |^Tlwy |^Tpke |^Trce |^Tr |^Trk |^Trl |^Tunl |^Unp |^Vl |^Vlg |^Vlgs |^Vly |^Vw |^Wd |^Whrf |^Wkwy |^Wlk |^Wy |^Xing "](area.a);
  nwr["addr:street"~" Acc | Aly | Ambl | App | Arc | Artl | Arty | Av | Ave | Bch | Bg | Bgs | Blf | Blk | Blv | Blvd | Bnd | Br | Brg | Btm | Bwlk | Byp | Bypa | Byu | Bywy | Bzr | Cct | Ch | Cir | Cirs | Clf | Clfs | Cly | Cmn | Cnl | Cnr | Coll | Cpe | Cr | Crk | Cres | Crst | Cswy | Ct | Ctr | Cts | Ctyd | Curv | Cutt | Cv | Cyn | Dl | Dr | Dv | Dvwy | Elb | Est | Ests | Expy | Expwy | Fawy | Fld | Flds | Fmrd | Ftrl | Frk | Fry | Fwy | Gd | Gdns | Gr | Gro | Grv | Hbr | Hl | Hls | Holw | Hts | Hw | Hwy | Hvn | Intg | Iss | Jct | Jn | Jnc | Knl | Knls | Ky | Kys | Lck | Lcks | Ldg | Lk | Lks | Lkt | Ln | Lndg | Lp | Mal | Mdw | Mdws | Mkt | Ml | Mt | Mtn | Mtwy | Orch | Ovps | Piaz | Pk | Pky | Pkwy | Pl | Pln | Plns | Plz | Pnt | Prkwy | Pt | Pvt | Qdrt | Qtrs | Qy | Qys | Rd | Rds | Rdg | Rdge | Rdgs | Rw | Rmrd | Rt | Rte | Rty | Shl | Shls | Shr | Shrs | Skwy | Smt | Spg | Spgs | Sq | Sqs | Srvc | St | Tce | Ter | Tfwy | Thfr | Thwy | Tl | Tlwy | Tpke | Trce | Tr | Trk | Trl | Tunl | Unp | Vl | Vlg | Vlgs | Vly | Vw | Wd | Whrf | Wkwy | Wlk | Wy | Xing "](area.a);
);
out body;
>;
out skel qt;
*/

*["highway"]["name"]["highway"!="bus_stop"] {
    set highway_name;
}

*["addr:street"]["addr:street"=~/ Acc$/] {
assertNoMatch: "way \"addr:street\"=Main Access";
assertMatch: "way \"addr:street\"=Main Acc";
throwWarning: tr("addr:street={0} contains postfix Acc, should likely be expanded to Access","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Access");
group: tr("addr:street contains postfix Acc, should likely be expanded to Access");
}

*["addr:street"]["addr:street"=~/ Aly$/] {
assertNoMatch: "way \"addr:street\"=Main Alley";
assertMatch: "way \"addr:street\"=Main Aly";
throwWarning: tr("addr:street={0} contains postfix Aly, should likely be expanded to Alley","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Alley");
group: tr("addr:street contains postfix Aly, should likely be expanded to Alley");
}

*["addr:street"]["addr:street"=~/ Ambl$/] {
assertNoMatch: "way \"addr:street\"=Main Amble";
assertMatch: "way \"addr:street\"=Main Ambl";
throwWarning: tr("addr:street={0} contains postfix Ambl, should likely be expanded to Amble","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Amble");
group: tr("addr:street contains postfix Ambl, should likely be expanded to Amble");
}

*["addr:street"]["addr:street"=~/ App$/] {
assertNoMatch: "way \"addr:street\"=Main Approach";
assertMatch: "way \"addr:street\"=Main App";
throwWarning: tr("addr:street={0} contains postfix App, should likely be expanded to Approach","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Approach");
group: tr("addr:street contains postfix App, should likely be expanded to Approach");
}

*["addr:street"]["addr:street"=~/ Arc$/] {
assertNoMatch: "way \"addr:street\"=Main Arcade";
assertMatch: "way \"addr:street\"=Main Arc";
throwWarning: tr("addr:street={0} contains postfix Arc, should likely be expanded to Arcade","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Arcade");
group: tr("addr:street contains postfix Arc, should likely be expanded to Arcade");
}

*["addr:street"]["addr:street"=~/ Artl$/] {
assertNoMatch: "way \"addr:street\"=Main Arterial";
assertMatch: "way \"addr:street\"=Main Artl";
throwWarning: tr("addr:street={0} contains postfix Artl, should likely be expanded to Arterial","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Arterial");
group: tr("addr:street contains postfix Artl, should likely be expanded to Arterial");
}

*["addr:street"]["addr:street"=~/ Arty$/] {
assertNoMatch: "way \"addr:street\"=Main Artery";
assertMatch: "way \"addr:street\"=Main Arty";
throwWarning: tr("addr:street={0} contains postfix Arty, should likely be expanded to Artery","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Artery");
group: tr("addr:street contains postfix Arty, should likely be expanded to Artery");
}

*["addr:street"]["addr:street"=~/ Av$/] {
assertNoMatch: "way \"addr:street\"=Main Avenue";
assertMatch: "way \"addr:street\"=Main Av";
throwWarning: tr("addr:street={0} contains postfix Av, should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Avenue");
group: tr("addr:street contains postfix Av, should likely be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/ Ave$/] {
assertNoMatch: "way \"addr:street\"=Main Avenue";
assertMatch: "way \"addr:street\"=Main Ave";
throwWarning: tr("addr:street={0} contains postfix Ave, should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Avenue");
group: tr("addr:street contains postfix Ave, should likely be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/ Bch$/] {
assertNoMatch: "way \"addr:street\"=Main Beach";
assertMatch: "way \"addr:street\"=Main Bch";
throwWarning: tr("addr:street={0} contains postfix Bch, should likely be expanded to Beach","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Beach");
group: tr("addr:street contains postfix Bch, should likely be expanded to Beach");
}

*["addr:street"]["addr:street"=~/ Bg$/] {
assertNoMatch: "way \"addr:street\"=Main Burg";
assertMatch: "way \"addr:street\"=Main Bg";
throwWarning: tr("addr:street={0} contains postfix Bg, should likely be expanded to Burg","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Burg");
group: tr("addr:street contains postfix Bg, should likely be expanded to Burg");
}

*["addr:street"]["addr:street"=~/ Bgs$/] {
assertNoMatch: "way \"addr:street\"=Main Burgs";
assertMatch: "way \"addr:street\"=Main Bgs";
throwWarning: tr("addr:street={0} contains postfix Bgs, should likely be expanded to Burgs","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Burgs");
group: tr("addr:street contains postfix Bgs, should likely be expanded to Burgs");
}

*["addr:street"]["addr:street"=~/ Blf$/] {
assertNoMatch: "way \"addr:street\"=Main Bluff";
assertMatch: "way \"addr:street\"=Main Blf";
throwWarning: tr("addr:street={0} contains postfix Blf, should likely be expanded to Bluff","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Bluff");
group: tr("addr:street contains postfix Blf, should likely be expanded to Bluff");
}

*["addr:street"]["addr:street"=~/ Blk$/] {
assertNoMatch: "way \"addr:street\"=Main Block";
assertMatch: "way \"addr:street\"=Main Blk";
throwWarning: tr("addr:street={0} contains postfix Blk, should likely be expanded to Block","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Block");
group: tr("addr:street contains postfix Blk, should likely be expanded to Block");
}

*["addr:street"]["addr:street"=~/ Blv$/] {
assertNoMatch: "way \"addr:street\"=Main Boulevard";
assertMatch: "way \"addr:street\"=Main Blv";
throwWarning: tr("addr:street={0} contains postfix Blv, should likely be expanded to Boulevard","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Boulevard");
group: tr("addr:street contains postfix Blv, should likely be expanded to Boulevard");
}

*["addr:street"]["addr:street"=~/ Blvd$/] {
assertNoMatch: "way \"addr:street\"=Main Boulevard";
assertMatch: "way \"addr:street\"=Main Blvd";
throwWarning: tr("addr:street={0} contains postfix Blvd, should likely be expanded to Boulevard","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Boulevard");
group: tr("addr:street contains postfix Blvd, should likely be expanded to Boulevard");
}

*["addr:street"]["addr:street"=~/ Bnd$/] {
assertNoMatch: "way \"addr:street\"=Main Bend";
assertMatch: "way \"addr:street\"=Main Bnd";
throwWarning: tr("addr:street={0} contains postfix Bnd, should likely be expanded to Bend","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Bend");
group: tr("addr:street contains postfix Bnd, should likely be expanded to Bend");
}

*["addr:street"]["addr:street"=~/ Br$/] {
assertNoMatch: "way \"addr:street\"=Main Bridge";
assertMatch: "way \"addr:street\"=Main Br";
throwWarning: tr("addr:street={0} contains postfix Br, should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Bridge");
group: tr("addr:street contains postfix Br, should likely be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/ Brg$/] {
assertNoMatch: "way \"addr:street\"=Main Bridge";
assertMatch: "way \"addr:street\"=Main Brg";
throwWarning: tr("addr:street={0} contains postfix Brg, should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Bridge");
group: tr("addr:street contains postfix Brg, should likely be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/ Btm$/] {
assertNoMatch: "way \"addr:street\"=Main Bottom";
assertMatch: "way \"addr:street\"=Main Btm";
throwWarning: tr("addr:street={0} contains postfix Btm, should likely be expanded to Bottom","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Bottom");
group: tr("addr:street contains postfix Btm, should likely be expanded to Bottom");
}

*["addr:street"]["addr:street"=~/ Bwlk$/] {
assertNoMatch: "way \"addr:street\"=Main Boardwalk";
assertMatch: "way \"addr:street\"=Main Bwlk";
throwWarning: tr("addr:street={0} contains postfix Bwlk, should likely be expanded to Boardwalk","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Boardwalk");
group: tr("addr:street contains postfix Bwlk, should likely be expanded to Boardwalk");
}

*["addr:street"]["addr:street"=~/ Byp$/] {
assertNoMatch: "way \"addr:street\"=Main Bypass";
assertMatch: "way \"addr:street\"=Main Byp";
throwWarning: tr("addr:street={0} contains postfix Byp, should likely be expanded to Bypass","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Bypass");
group: tr("addr:street contains postfix Byp, should likely be expanded to Bypass");
}

*["addr:street"]["addr:street"=~/ Bypa$/] {
assertNoMatch: "way \"addr:street\"=Main Bypass";
assertMatch: "way \"addr:street\"=Main Bypa";
throwWarning: tr("addr:street={0} contains postfix Bypa, should likely be expanded to Bypass","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Bypass");
group: tr("addr:street contains postfix Bypa, should likely be expanded to Bypass");
}

*["addr:street"]["addr:street"=~/ Byu$/] {
assertNoMatch: "way \"addr:street\"=Main Byou";
assertMatch: "way \"addr:street\"=Main Byu";
throwWarning: tr("addr:street={0} contains postfix Byu, should likely be expanded to Byou","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Byou");
group: tr("addr:street contains postfix Byu, should likely be expanded to Byou");
}

*["addr:street"]["addr:street"=~/ Bywy$/] {
assertNoMatch: "way \"addr:street\"=Main Byway";
assertMatch: "way \"addr:street\"=Main Bywy";
throwWarning: tr("addr:street={0} contains postfix Bywy, should likely be expanded to Byway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Byway");
group: tr("addr:street contains postfix Bywy, should likely be expanded to Byway");
}

*["addr:street"]["addr:street"=~/ Bzr$/] {
assertNoMatch: "way \"addr:street\"=Main Bazaar";
assertMatch: "way \"addr:street\"=Main Bzr";
throwWarning: tr("addr:street={0} contains postfix Bzr, should likely be expanded to Bazaar","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Bazaar");
group: tr("addr:street contains postfix Bzr, should likely be expanded to Bazaar");
}

*["addr:street"]["addr:street"=~/ Cct$/] {
assertNoMatch: "way \"addr:street\"=Main Circuit";
assertMatch: "way \"addr:street\"=Main Cct";
throwWarning: tr("addr:street={0} contains postfix Cct, should likely be expanded to Circuit","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Circuit");
group: tr("addr:street contains postfix Cct, should likely be expanded to Circuit");
}

*["addr:street"]["addr:street"=~/ Ch$/] {
assertNoMatch: "way \"addr:street\"=Main Chase";
assertMatch: "way \"addr:street\"=Main Ch";
throwWarning: tr("addr:street={0} contains postfix Ch, should likely be expanded to Chase","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Chase");
group: tr("addr:street contains postfix Ch, should likely be expanded to Chase");
}

*["addr:street"]["addr:street"=~/ Cir$/] {
assertNoMatch: "way \"addr:street\"=Main Circle";
assertMatch: "way \"addr:street\"=Main Cir";
throwWarning: tr("addr:street={0} contains postfix Cir, should likely be expanded to Circle","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Circle");
group: tr("addr:street contains postfix Cir, should likely be expanded to Circle");
}

*["addr:street"]["addr:street"=~/ Cirs$/] {
assertNoMatch: "way \"addr:street\"=Main Circles";
assertMatch: "way \"addr:street\"=Main Cirs";
throwWarning: tr("addr:street={0} contains postfix Cirs, should likely be expanded to Circles","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Circles");
group: tr("addr:street contains postfix Cirs, should likely be expanded to Circles");
}

*["addr:street"]["addr:street"=~/ Clf$/] {
assertNoMatch: "way \"addr:street\"=Main Cliff";
assertMatch: "way \"addr:street\"=Main Clf";
throwWarning: tr("addr:street={0} contains postfix Clf, should likely be expanded to Cliff","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Cliff");
group: tr("addr:street contains postfix Clf, should likely be expanded to Cliff");
}

*["addr:street"]["addr:street"=~/ Clfs$/] {
assertNoMatch: "way \"addr:street\"=Main Cliffs";
assertMatch: "way \"addr:street\"=Main Clfs";
throwWarning: tr("addr:street={0} contains postfix Clfs, should likely be expanded to Cliffs","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Cliffs");
group: tr("addr:street contains postfix Clfs, should likely be expanded to Cliffs");
}

*["addr:street"]["addr:street"=~/ Cly$/] {
assertNoMatch: "way \"addr:street\"=Main Colony";
assertMatch: "way \"addr:street\"=Main Cly";
throwWarning: tr("addr:street={0} contains postfix Cly, should likely be expanded to Colony","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Colony");
group: tr("addr:street contains postfix Cly, should likely be expanded to Colony");
}

*["addr:street"]["addr:street"=~/ Cmn$/] {
assertNoMatch: "way \"addr:street\"=Main Common";
assertMatch: "way \"addr:street\"=Main Cmn";
throwWarning: tr("addr:street={0} contains postfix Cmn, should likely be expanded to Common","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Common");
group: tr("addr:street contains postfix Cmn, should likely be expanded to Common");
}

*["addr:street"]["addr:street"=~/ Cnl$/] {
assertNoMatch: "way \"addr:street\"=Main Canal";
assertMatch: "way \"addr:street\"=Main Cnl";
throwWarning: tr("addr:street={0} contains postfix Cnl, should likely be expanded to Canal","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Canal");
group: tr("addr:street contains postfix Cnl, should likely be expanded to Canal");
}

*["addr:street"]["addr:street"=~/ Cnr$/] {
assertNoMatch: "way \"addr:street\"=Main Corner";
assertMatch: "way \"addr:street\"=Main Cnr";
throwWarning: tr("addr:street={0} contains postfix Cnr, should likely be expanded to Corner","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Corner");
group: tr("addr:street contains postfix Cnr, should likely be expanded to Corner");
}

*["addr:street"]["addr:street"=~/ Coll$/] {
assertNoMatch: "way \"addr:street\"=Main College";
assertMatch: "way \"addr:street\"=Main Coll";
throwWarning: tr("addr:street={0} contains postfix Coll, should likely be expanded to College","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "College");
group: tr("addr:street contains postfix Coll, should likely be expanded to College");
}

*["addr:street"]["addr:street"=~/ Cpe$/] {
assertNoMatch: "way \"addr:street\"=Main Cape";
assertMatch: "way \"addr:street\"=Main Cpe";
throwWarning: tr("addr:street={0} contains postfix Cpe, should likely be expanded to Cape","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Cape");
group: tr("addr:street contains postfix Cpe, should likely be expanded to Cape");
}

*["addr:street"]["addr:street"=~/ Cr$/] {
assertNoMatch: "way \"addr:street\"=Main Creek";
assertMatch: "way \"addr:street\"=Main Cr";
throwWarning: tr("addr:street={0} contains postfix Cr, should likely be expanded to Creek","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Creek");
group: tr("addr:street contains postfix Cr, should likely be expanded to Creek");
}

*["addr:street"]["addr:street"=~/ Crk$/] {
assertNoMatch: "way \"addr:street\"=Main Creek";
assertMatch: "way \"addr:street\"=Main Crk";
throwWarning: tr("addr:street={0} contains postfix Crk, should likely be expanded to Creek","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Creek");
group: tr("addr:street contains postfix Crk, should likely be expanded to Creek");
}

*["addr:street"]["addr:street"=~/ Cres$/] {
assertNoMatch: "way \"addr:street\"=Main Crescent";
assertMatch: "way \"addr:street\"=Main Cres";
throwWarning: tr("addr:street={0} contains postfix Cres, should likely be expanded to Crescent","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Crescent");
group: tr("addr:street contains postfix Cres, should likely be expanded to Crescent");
}

*["addr:street"]["addr:street"=~/ Crst$/] {
assertNoMatch: "way \"addr:street\"=Main Crest";
assertMatch: "way \"addr:street\"=Main Crst";
throwWarning: tr("addr:street={0} contains postfix Crst, should likely be expanded to Crest","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Crest");
group: tr("addr:street contains postfix Crst, should likely be expanded to Crest");
}

*["addr:street"]["addr:street"=~/ Cswy$/] {
assertNoMatch: "way \"addr:street\"=Main Causeway";
assertMatch: "way \"addr:street\"=Main Cswy";
throwWarning: tr("addr:street={0} contains postfix Cswy, should likely be expanded to Causeway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Causeway");
group: tr("addr:street contains postfix Cswy, should likely be expanded to Causeway");
}

*["addr:street"]["addr:street"=~/ Ct$/] {
assertNoMatch: "way \"addr:street\"=Main Court";
assertMatch: "way \"addr:street\"=Main Ct";
throwWarning: tr("addr:street={0} contains postfix Ct, should likely be expanded to Court","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Court");
group: tr("addr:street contains postfix Ct, should likely be expanded to Court");
}

*["addr:street"]["addr:street"=~/ Ctr$/] {
assertNoMatch: "way \"addr:street\"=Main Center";
assertMatch: "way \"addr:street\"=Main Ctr";
throwWarning: tr("addr:street={0} contains postfix Ctr, should likely be expanded to Center","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Center");
group: tr("addr:street contains postfix Ctr, should likely be expanded to Center");
}

*["addr:street"]["addr:street"=~/ Cts$/] {
assertNoMatch: "way \"addr:street\"=Main Courts";
assertMatch: "way \"addr:street\"=Main Cts";
throwWarning: tr("addr:street={0} contains postfix Cts, should likely be expanded to Courts","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Courts");
group: tr("addr:street contains postfix Cts, should likely be expanded to Courts");
}

*["addr:street"]["addr:street"=~/ Ctyd$/] {
assertNoMatch: "way \"addr:street\"=Main Courtyard";
assertMatch: "way \"addr:street\"=Main Ctyd";
throwWarning: tr("addr:street={0} contains postfix Ctyd, should likely be expanded to Courtyard","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Courtyard");
group: tr("addr:street contains postfix Ctyd, should likely be expanded to Courtyard");
}

*["addr:street"]["addr:street"=~/ Curv$/] {
assertNoMatch: "way \"addr:street\"=Main Curve";
assertMatch: "way \"addr:street\"=Main Curv";
throwWarning: tr("addr:street={0} contains postfix Curv, should likely be expanded to Curve","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Curve");
group: tr("addr:street contains postfix Curv, should likely be expanded to Curve");
}

*["addr:street"]["addr:street"=~/ Cutt$/] {
assertNoMatch: "way \"addr:street\"=Main Cutting";
assertMatch: "way \"addr:street\"=Main Cutt";
throwWarning: tr("addr:street={0} contains postfix Cutt, should likely be expanded to Cutting","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Cutting");
group: tr("addr:street contains postfix Cutt, should likely be expanded to Cutting");
}

*["addr:street"]["addr:street"=~/ Cv$/] {
assertNoMatch: "way \"addr:street\"=Main Cove";
assertMatch: "way \"addr:street\"=Main Cv";
throwWarning: tr("addr:street={0} contains postfix Cv, should likely be expanded to Cove","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Cove");
group: tr("addr:street contains postfix Cv, should likely be expanded to Cove");
}

*["addr:street"]["addr:street"=~/ Cyn$/] {
assertNoMatch: "way \"addr:street\"=Main Canyon";
assertMatch: "way \"addr:street\"=Main Cyn";
throwWarning: tr("addr:street={0} contains postfix Cyn, should likely be expanded to Canyon","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Canyon");
group: tr("addr:street contains postfix Cyn, should likely be expanded to Canyon");
}

*["addr:street"]["addr:street"=~/ Dl$/] {
assertNoMatch: "way \"addr:street\"=Main Dale";
assertMatch: "way \"addr:street\"=Main Dl";
throwWarning: tr("addr:street={0} contains postfix Dl, should likely be expanded to Dale","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Dale");
group: tr("addr:street contains postfix Dl, should likely be expanded to Dale");
}

*["addr:street"]["addr:street"=~/ Dr$/] {
assertNoMatch: "way \"addr:street\"=Main Drive";
assertMatch: "way \"addr:street\"=Main Dr";
throwWarning: tr("addr:street={0} contains postfix Dr, should likely be expanded to Drive","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Drive");
group: tr("addr:street contains postfix Dr, should likely be expanded to Drive");
}

*["addr:street"]["addr:street"=~/ Dv$/] {
assertNoMatch: "way \"addr:street\"=Main Drive";
assertMatch: "way \"addr:street\"=Main Dv";
throwWarning: tr("addr:street={0} contains postfix Dv, should likely be expanded to Drive","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Drive");
group: tr("addr:street contains postfix Dv, should likely be expanded to Drive");
}

*["addr:street"]["addr:street"=~/ Dvwy$/] {
assertNoMatch: "way \"addr:street\"=Main Driveway";
assertMatch: "way \"addr:street\"=Main Dvwy";
throwWarning: tr("addr:street={0} contains postfix Dvwy, should likely be expanded to Driveway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Driveway");
group: tr("addr:street contains postfix Dvwy, should likely be expanded to Driveway");
}

*["addr:street"]["addr:street"=~/ Elb$/] {
assertNoMatch: "way \"addr:street\"=Main Elbow";
assertMatch: "way \"addr:street\"=Main Elb";
throwWarning: tr("addr:street={0} contains postfix Elb, should likely be expanded to Elbow","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Elbow");
group: tr("addr:street contains postfix Elb, should likely be expanded to Elbow");
}

*["addr:street"]["addr:street"=~/ Est$/] {
assertNoMatch: "way \"addr:street\"=Main Estate";
assertMatch: "way \"addr:street\"=Main Est";
throwWarning: tr("addr:street={0} contains postfix Est, should likely be expanded to Estate","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Estate");
group: tr("addr:street contains postfix Est, should likely be expanded to Estate");
}

*["addr:street"]["addr:street"=~/ Ests$/] {
assertNoMatch: "way \"addr:street\"=Main Estates";
assertMatch: "way \"addr:street\"=Main Ests";
throwWarning: tr("addr:street={0} contains postfix Ests, should likely be expanded to Estates","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Estates");
group: tr("addr:street contains postfix Ests, should likely be expanded to Estates");
}

*["addr:street"]["addr:street"=~/ Expy$/] {
assertNoMatch: "way \"addr:street\"=Main Expressway";
assertMatch: "way \"addr:street\"=Main Expy";
throwWarning: tr("addr:street={0} contains postfix Expy, should likely be expanded to Expressway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Expressway");
group: tr("addr:street contains postfix Expy, should likely be expanded to Expressway");
}

*["addr:street"]["addr:street"=~/ Expwy$/] {
assertNoMatch: "way \"addr:street\"=Main Expressway";
assertMatch: "way \"addr:street\"=Main Expwy";
throwWarning: tr("addr:street={0} contains postfix Expwy, should likely be expanded to Expressway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Expressway");
group: tr("addr:street contains postfix Expwy, should likely be expanded to Expressway");
}

*["addr:street"]["addr:street"=~/ Fawy$/] {
assertNoMatch: "way \"addr:street\"=Main Fairway";
assertMatch: "way \"addr:street\"=Main Fawy";
throwWarning: tr("addr:street={0} contains postfix Fawy, should likely be expanded to Fairway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Fairway");
group: tr("addr:street contains postfix Fawy, should likely be expanded to Fairway");
}

*["addr:street"]["addr:street"=~/ Fld$/] {
assertNoMatch: "way \"addr:street\"=Main Field";
assertMatch: "way \"addr:street\"=Main Fld";
throwWarning: tr("addr:street={0} contains postfix Fld, should likely be expanded to Field","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Field");
group: tr("addr:street contains postfix Fld, should likely be expanded to Field");
}

*["addr:street"]["addr:street"=~/ Flds$/] {
assertNoMatch: "way \"addr:street\"=Main Fields";
assertMatch: "way \"addr:street\"=Main Flds";
throwWarning: tr("addr:street={0} contains postfix Flds, should likely be expanded to Fields","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Fields");
group: tr("addr:street contains postfix Flds, should likely be expanded to Fields");
}

*["addr:street"]["addr:street"=~/ Fmrd$/] {
assertNoMatch: "way \"addr:street\"=Main Farm to Market Road";
assertMatch: "way \"addr:street\"=Main Fmrd";
throwWarning: tr("addr:street={0} contains postfix Fmrd, should likely be expanded to Farm to Market Road","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Farm to Market Road");
group: tr("addr:street contains postfix Fmrd, should likely be expanded to Farm to Market Road");
}

*["addr:street"]["addr:street"=~/ Ftrl$/] {
assertNoMatch: "way \"addr:street\"=Main Firetrail";
assertMatch: "way \"addr:street\"=Main Ftrl";
throwWarning: tr("addr:street={0} contains postfix Ftrl, should likely be expanded to Firetrail","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Firetrail");
group: tr("addr:street contains postfix Ftrl, should likely be expanded to Firetrail");
}

*["addr:street"]["addr:street"=~/ Frk$/] {
assertNoMatch: "way \"addr:street\"=Main Fork";
assertMatch: "way \"addr:street\"=Main Frk";
throwWarning: tr("addr:street={0} contains postfix Frk, should likely be expanded to Fork","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Fork");
group: tr("addr:street contains postfix Frk, should likely be expanded to Fork");
}

*["addr:street"]["addr:street"=~/ Fry$/] {
assertNoMatch: "way \"addr:street\"=Main Ferry";
assertMatch: "way \"addr:street\"=Main Fry";
throwWarning: tr("addr:street={0} contains postfix Fry, should likely be expanded to Ferry","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Ferry");
group: tr("addr:street contains postfix Fry, should likely be expanded to Ferry");
}

*["addr:street"]["addr:street"=~/ Fwy$/] {
assertNoMatch: "way \"addr:street\"=Main Freeway";
assertMatch: "way \"addr:street\"=Main Fwy";
throwWarning: tr("addr:street={0} contains postfix Fwy, should likely be expanded to Freeway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Freeway");
group: tr("addr:street contains postfix Fwy, should likely be expanded to Freeway");
}

*["addr:street"]["addr:street"=~/ Gd$/] {
assertNoMatch: "way \"addr:street\"=Main Grade";
assertMatch: "way \"addr:street\"=Main Gd";
throwWarning: tr("addr:street={0} contains postfix Gd, should likely be expanded to Grade","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Grade");
group: tr("addr:street contains postfix Gd, should likely be expanded to Grade");
}

*["addr:street"]["addr:street"=~/ Gdns$/] {
assertNoMatch: "way \"addr:street\"=Main Gardens";
assertMatch: "way \"addr:street\"=Main Gdns";
throwWarning: tr("addr:street={0} contains postfix Gdns, should likely be expanded to Gardens","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Gardens");
group: tr("addr:street contains postfix Gdns, should likely be expanded to Gardens");
}

*["addr:street"]["addr:street"=~/ Gr$/] {
assertNoMatch: "way \"addr:street\"=Main Grove";
assertMatch: "way \"addr:street\"=Main Gr";
throwWarning: tr("addr:street={0} contains postfix Gr, should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Grove");
group: tr("addr:street contains postfix Gr, should likely be expanded to Grove");
}

*["addr:street"]["addr:street"=~/ Gro$/] {
assertNoMatch: "way \"addr:street\"=Main Grove";
assertMatch: "way \"addr:street\"=Main Gro";
throwWarning: tr("addr:street={0} contains postfix Gro, should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Grove");
group: tr("addr:street contains postfix Gro, should likely be expanded to Grove");
}

*["addr:street"]["addr:street"=~/ Grv$/] {
assertNoMatch: "way \"addr:street\"=Main Grove";
assertMatch: "way \"addr:street\"=Main Grv";
throwWarning: tr("addr:street={0} contains postfix Grv, should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Grove");
group: tr("addr:street contains postfix Grv, should likely be expanded to Grove");
}

*["addr:street"]["addr:street"=~/ Hbr$/] {
assertNoMatch: "way \"addr:street\"=Main Harbor";
assertMatch: "way \"addr:street\"=Main Hbr";
throwWarning: tr("addr:street={0} contains postfix Hbr, should likely be expanded to Harbor","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Harbor");
group: tr("addr:street contains postfix Hbr, should likely be expanded to Harbor");
}

*["addr:street"]["addr:street"=~/ Hl$/] {
assertNoMatch: "way \"addr:street\"=Main Hill";
assertMatch: "way \"addr:street\"=Main Hl";
throwWarning: tr("addr:street={0} contains postfix Hl, should likely be expanded to Hill","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Hill");
group: tr("addr:street contains postfix Hl, should likely be expanded to Hill");
}

*["addr:street"]["addr:street"=~/ Hls$/] {
assertNoMatch: "way \"addr:street\"=Main Hills";
assertMatch: "way \"addr:street\"=Main Hls";
throwWarning: tr("addr:street={0} contains postfix Hls, should likely be expanded to Hills","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Hills");
group: tr("addr:street contains postfix Hls, should likely be expanded to Hills");
}

*["addr:street"]["addr:street"=~/ Holw$/] {
assertNoMatch: "way \"addr:street\"=Main Hollow";
assertMatch: "way \"addr:street\"=Main Holw";
throwWarning: tr("addr:street={0} contains postfix Holw, should likely be expanded to Hollow","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Hollow");
group: tr("addr:street contains postfix Holw, should likely be expanded to Hollow");
}

*["addr:street"]["addr:street"=~/ Hts$/] {
assertNoMatch: "way \"addr:street\"=Main Heights";
assertMatch: "way \"addr:street\"=Main Hts";
throwWarning: tr("addr:street={0} contains postfix Hts, should likely be expanded to Heights","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Heights");
group: tr("addr:street contains postfix Hts, should likely be expanded to Heights");
}

*["addr:street"]["addr:street"=~/ Hw$/] {
assertNoMatch: "way \"addr:street\"=Main Highway";
assertMatch: "way \"addr:street\"=Main Hw";
throwWarning: tr("addr:street={0} contains postfix Hw, should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Highway");
group: tr("addr:street contains postfix Hw, should likely be expanded to Highway");
}

*["addr:street"]["addr:street"=~/ Hwy$/] {
assertNoMatch: "way \"addr:street\"=Main Highway";
assertMatch: "way \"addr:street\"=Main Hwy";
throwWarning: tr("addr:street={0} contains postfix Hwy, should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Highway");
group: tr("addr:street contains postfix Hwy, should likely be expanded to Highway");
}

*["addr:street"]["addr:street"=~/ Hvn$/] {
assertNoMatch: "way \"addr:street\"=Main Haven";
assertMatch: "way \"addr:street\"=Main Hvn";
throwWarning: tr("addr:street={0} contains postfix Hvn, should likely be expanded to Haven","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Haven");
group: tr("addr:street contains postfix Hvn, should likely be expanded to Haven");
}

*["addr:street"]["addr:street"=~/ Intg$/] {
assertNoMatch: "way \"addr:street\"=Main Interchange";
assertMatch: "way \"addr:street\"=Main Intg";
throwWarning: tr("addr:street={0} contains postfix Intg, should likely be expanded to Interchange","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Interchange");
group: tr("addr:street contains postfix Intg, should likely be expanded to Interchange");
}

*["addr:street"]["addr:street"=~/ Iss$/] {
assertNoMatch: "way \"addr:street\"=Main Islands";
assertMatch: "way \"addr:street\"=Main Iss";
throwWarning: tr("addr:street={0} contains postfix Iss, should likely be expanded to Islands","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Islands");
group: tr("addr:street contains postfix Iss, should likely be expanded to Islands");
}

*["addr:street"]["addr:street"=~/ Jct$/] {
assertNoMatch: "way \"addr:street\"=Main Junction";
assertMatch: "way \"addr:street\"=Main Jct";
throwWarning: tr("addr:street={0} contains postfix Jct, should likely be expanded to Junction","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Junction");
group: tr("addr:street contains postfix Jct, should likely be expanded to Junction");
}

*["addr:street"]["addr:street"=~/ Jn$/] {
assertNoMatch: "way \"addr:street\"=Main Junction";
assertMatch: "way \"addr:street\"=Main Jn";
throwWarning: tr("addr:street={0} contains postfix Jn, should likely be expanded to Junction","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Junction");
group: tr("addr:street contains postfix Jn, should likely be expanded to Junction");
}

*["addr:street"]["addr:street"=~/ Jnc$/] {
assertNoMatch: "way \"addr:street\"=Main Junction";
assertMatch: "way \"addr:street\"=Main Jnc";
throwWarning: tr("addr:street={0} contains postfix Jnc, should likely be expanded to Junction","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Junction");
group: tr("addr:street contains postfix Jnc, should likely be expanded to Junction");
}

*["addr:street"]["addr:street"=~/ Knl$/] {
assertNoMatch: "way \"addr:street\"=Main Knoll";
assertMatch: "way \"addr:street\"=Main Knl";
throwWarning: tr("addr:street={0} contains postfix Knl, should likely be expanded to Knoll","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Knoll");
group: tr("addr:street contains postfix Knl, should likely be expanded to Knoll");
}

*["addr:street"]["addr:street"=~/ Knls$/] {
assertNoMatch: "way \"addr:street\"=Main Knolls";
assertMatch: "way \"addr:street\"=Main Knls";
throwWarning: tr("addr:street={0} contains postfix Knls, should likely be expanded to Knolls","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Knolls");
group: tr("addr:street contains postfix Knls, should likely be expanded to Knolls");
}

*["addr:street"]["addr:street"=~/ Ky$/] {
assertNoMatch: "way \"addr:street\"=Main Key";
assertMatch: "way \"addr:street\"=Main Ky";
throwWarning: tr("addr:street={0} contains postfix Ky, should likely be expanded to Key","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Key");
group: tr("addr:street contains postfix Ky, should likely be expanded to Key");
}

*["addr:street"]["addr:street"=~/ Kys$/] {
assertNoMatch: "way \"addr:street\"=Main Keys";
assertMatch: "way \"addr:street\"=Main Kys";
throwWarning: tr("addr:street={0} contains postfix Kys, should likely be expanded to Keys","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Keys");
group: tr("addr:street contains postfix Kys, should likely be expanded to Keys");
}

*["addr:street"]["addr:street"=~/ Lck$/] {
assertNoMatch: "way \"addr:street\"=Main Lock";
assertMatch: "way \"addr:street\"=Main Lck";
throwWarning: tr("addr:street={0} contains postfix Lck, should likely be expanded to Lock","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Lock");
group: tr("addr:street contains postfix Lck, should likely be expanded to Lock");
}

*["addr:street"]["addr:street"=~/ Lcks$/] {
assertNoMatch: "way \"addr:street\"=Main Locks";
assertMatch: "way \"addr:street\"=Main Lcks";
throwWarning: tr("addr:street={0} contains postfix Lcks, should likely be expanded to Locks","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Locks");
group: tr("addr:street contains postfix Lcks, should likely be expanded to Locks");
}

*["addr:street"]["addr:street"=~/ Ldg$/] {
assertNoMatch: "way \"addr:street\"=Main Lodge";
assertMatch: "way \"addr:street\"=Main Ldg";
throwWarning: tr("addr:street={0} contains postfix Ldg, should likely be expanded to Lodge","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Lodge");
group: tr("addr:street contains postfix Ldg, should likely be expanded to Lodge");
}

*["addr:street"]["addr:street"=~/ Lk$/] {
assertNoMatch: "way \"addr:street\"=Main Lake";
assertMatch: "way \"addr:street\"=Main Lk";
throwWarning: tr("addr:street={0} contains postfix Lk, should likely be expanded to Lake","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Lake");
group: tr("addr:street contains postfix Lk, should likely be expanded to Lake");
}

*["addr:street"]["addr:street"=~/ Lks$/] {
assertNoMatch: "way \"addr:street\"=Main Lakes";
assertMatch: "way \"addr:street\"=Main Lks";
throwWarning: tr("addr:street={0} contains postfix Lks, should likely be expanded to Lakes","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Lakes");
group: tr("addr:street contains postfix Lks, should likely be expanded to Lakes");
}

*["addr:street"]["addr:street"=~/ Lkt$/] {
assertNoMatch: "way \"addr:street\"=Main Lookout";
assertMatch: "way \"addr:street\"=Main Lkt";
throwWarning: tr("addr:street={0} contains postfix Lkt, should likely be expanded to Lookout","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Lookout");
group: tr("addr:street contains postfix Lkt, should likely be expanded to Lookout");
}

*["addr:street"]["addr:street"=~/ Ln$/] {
assertNoMatch: "way \"addr:street\"=Main Lane";
assertMatch: "way \"addr:street\"=Main Ln";
throwWarning: tr("addr:street={0} contains postfix Ln, should likely be expanded to Lane","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Lane");
group: tr("addr:street contains postfix Ln, should likely be expanded to Lane");
}

*["addr:street"]["addr:street"=~/ Lndg$/] {
assertNoMatch: "way \"addr:street\"=Main Landing";
assertMatch: "way \"addr:street\"=Main Lndg";
throwWarning: tr("addr:street={0} contains postfix Lndg, should likely be expanded to Landing","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Landing");
group: tr("addr:street contains postfix Lndg, should likely be expanded to Landing");
}

*["addr:street"]["addr:street"=~/ Lp$/] {
assertNoMatch: "way \"addr:street\"=Main Loop";
assertMatch: "way \"addr:street\"=Main Lp";
throwWarning: tr("addr:street={0} contains postfix Lp, should likely be expanded to Loop","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Loop");
group: tr("addr:street contains postfix Lp, should likely be expanded to Loop");
}

*["addr:street"]["addr:street"=~/ Mal$/] {
assertNoMatch: "way \"addr:street\"=Main Mall";
assertMatch: "way \"addr:street\"=Main Mal";
throwWarning: tr("addr:street={0} contains postfix Mal, should likely be expanded to Mall","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Mall");
group: tr("addr:street contains postfix Mal, should likely be expanded to Mall");
}

*["addr:street"]["addr:street"=~/ Mdw$/] {
assertNoMatch: "way \"addr:street\"=Main Meadow";
assertMatch: "way \"addr:street\"=Main Mdw";
throwWarning: tr("addr:street={0} contains postfix Mdw, should likely be expanded to Meadow","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Meadow");
group: tr("addr:street contains postfix Mdw, should likely be expanded to Meadow");
}

*["addr:street"]["addr:street"=~/ Mdws$/] {
assertNoMatch: "way \"addr:street\"=Main Meadows";
assertMatch: "way \"addr:street\"=Main Mdws";
throwWarning: tr("addr:street={0} contains postfix Mdws, should likely be expanded to Meadows","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Meadows");
group: tr("addr:street contains postfix Mdws, should likely be expanded to Meadows");
}

*["addr:street"]["addr:street"=~/ Mkt$/] {
assertNoMatch: "way \"addr:street\"=Main Market";
assertMatch: "way \"addr:street\"=Main Mkt";
throwWarning: tr("addr:street={0} contains postfix Mkt, should likely be expanded to Market","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Market");
group: tr("addr:street contains postfix Mkt, should likely be expanded to Market");
}

*["addr:street"]["addr:street"=~/ Ml$/] {
assertNoMatch: "way \"addr:street\"=Main Mill";
assertMatch: "way \"addr:street\"=Main Ml";
throwWarning: tr("addr:street={0} contains postfix Ml, should likely be expanded to Mill","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Mill");
group: tr("addr:street contains postfix Ml, should likely be expanded to Mill");
}

*["addr:street"]["addr:street"=~/ Mt$/] {
assertNoMatch: "way \"addr:street\"=Main Mount";
assertMatch: "way \"addr:street\"=Main Mt";
throwWarning: tr("addr:street={0} contains postfix Mt, should likely be expanded to Mount","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Mount");
group: tr("addr:street contains postfix Mt, should likely be expanded to Mount");
}

*["addr:street"]["addr:street"=~/ Mtn$/] {
assertNoMatch: "way \"addr:street\"=Main Mountain";
assertMatch: "way \"addr:street\"=Main Mtn";
throwWarning: tr("addr:street={0} contains postfix Mtn, should likely be expanded to Mountain","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Mountain");
group: tr("addr:street contains postfix Mtn, should likely be expanded to Mountain");
}

*["addr:street"]["addr:street"=~/ Mtwy$/] {
assertNoMatch: "way \"addr:street\"=Main Motorway";
assertMatch: "way \"addr:street\"=Main Mtwy";
throwWarning: tr("addr:street={0} contains postfix Mtwy, should likely be expanded to Motorway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Motorway");
group: tr("addr:street contains postfix Mtwy, should likely be expanded to Motorway");
}

*["addr:street"]["addr:street"=~/ Orch$/] {
assertNoMatch: "way \"addr:street\"=Main Orchard";
assertMatch: "way \"addr:street\"=Main Orch";
throwWarning: tr("addr:street={0} contains postfix Orch, should likely be expanded to Orchard","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Orchard");
group: tr("addr:street contains postfix Orch, should likely be expanded to Orchard");
}

*["addr:street"]["addr:street"=~/ Ovps$/] {
assertNoMatch: "way \"addr:street\"=Main Overpass";
assertMatch: "way \"addr:street\"=Main Ovps";
throwWarning: tr("addr:street={0} contains postfix Ovps, should likely be expanded to Overpass","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Overpass");
group: tr("addr:street contains postfix Ovps, should likely be expanded to Overpass");
}

*["addr:street"]["addr:street"=~/ Piaz$/] {
assertNoMatch: "way \"addr:street\"=Main Piazza";
assertMatch: "way \"addr:street\"=Main Piaz";
throwWarning: tr("addr:street={0} contains postfix Piaz, should likely be expanded to Piazza","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Piazza");
group: tr("addr:street contains postfix Piaz, should likely be expanded to Piazza");
}

*["addr:street"]["addr:street"=~/ Pk$/] {
assertNoMatch: "way \"addr:street\"=Main Peak";
assertMatch: "way \"addr:street\"=Main Pk";
throwWarning: tr("addr:street={0} contains postfix Pk, should likely be expanded to Peak","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Peak");
group: tr("addr:street contains postfix Pk, should likely be expanded to Peak");
}

*["addr:street"]["addr:street"=~/ Pky$/] {
assertNoMatch: "way \"addr:street\"=Main Parkway";
assertMatch: "way \"addr:street\"=Main Pky";
throwWarning: tr("addr:street={0} contains postfix Pky, should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Parkway");
group: tr("addr:street contains postfix Pky, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pkwy$/] {
assertNoMatch: "way \"addr:street\"=Main Parkway";
assertMatch: "way \"addr:street\"=Main Pkwy";
throwWarning: tr("addr:street={0} contains postfix Pkwy, should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Parkway");
group: tr("addr:street contains postfix Pkwy, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pl$/] {
assertNoMatch: "way \"addr:street\"=Main Place";
assertMatch: "way \"addr:street\"=Main Pl";
throwWarning: tr("addr:street={0} contains postfix Pl, should likely be expanded to Place","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Place");
group: tr("addr:street contains postfix Pl, should likely be expanded to Place");
}

*["addr:street"]["addr:street"=~/ Pln$/] {
assertNoMatch: "way \"addr:street\"=Main Plain";
assertMatch: "way \"addr:street\"=Main Pln";
throwWarning: tr("addr:street={0} contains postfix Pln, should likely be expanded to Plain","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Plain");
group: tr("addr:street contains postfix Pln, should likely be expanded to Plain");
}

*["addr:street"]["addr:street"=~/ Plns$/] {
assertNoMatch: "way \"addr:street\"=Main Plains";
assertMatch: "way \"addr:street\"=Main Plns";
throwWarning: tr("addr:street={0} contains postfix Plns, should likely be expanded to Plains","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Plains");
group: tr("addr:street contains postfix Plns, should likely be expanded to Plains");
}

*["addr:street"]["addr:street"=~/ Plz$/] {
assertNoMatch: "way \"addr:street\"=Main Plaza";
assertMatch: "way \"addr:street\"=Main Plz";
throwWarning: tr("addr:street={0} contains postfix Plz, should likely be expanded to Plaza","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Plaza");
group: tr("addr:street contains postfix Plz, should likely be expanded to Plaza");
}

*["addr:street"]["addr:street"=~/ Pnt$/] {
assertNoMatch: "way \"addr:street\"=Main Point";
assertMatch: "way \"addr:street\"=Main Pnt";
throwWarning: tr("addr:street={0} contains postfix Pnt, should likely be expanded to Point","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Point");
group: tr("addr:street contains postfix Pnt, should likely be expanded to Point");
}

*["addr:street"]["addr:street"=~/ Prkwy$/] {
assertNoMatch: "way \"addr:street\"=Main Parkway";
assertMatch: "way \"addr:street\"=Main Prkwy";
throwWarning: tr("addr:street={0} contains postfix Prkwy, should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Parkway");
group: tr("addr:street contains postfix Prkwy, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pt$/] {
assertNoMatch: "way \"addr:street\"=Main Point";
assertMatch: "way \"addr:street\"=Main Pt";
throwWarning: tr("addr:street={0} contains postfix Pt, should likely be expanded to Point","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Point");
group: tr("addr:street contains postfix Pt, should likely be expanded to Point");
}

*["addr:street"]["addr:street"=~/ Pvt$/] {
assertNoMatch: "way \"addr:street\"=Main Private";
assertMatch: "way \"addr:street\"=Main Pvt";
throwWarning: tr("addr:street={0} contains postfix Pvt, should likely be expanded to Private","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Private");
group: tr("addr:street contains postfix Pvt, should likely be expanded to Private");
}

*["addr:street"]["addr:street"=~/ Qdrt$/] {
assertNoMatch: "way \"addr:street\"=Main Quadrant";
assertMatch: "way \"addr:street\"=Main Qdrt";
throwWarning: tr("addr:street={0} contains postfix Qdrt, should likely be expanded to Quadrant","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Quadrant");
group: tr("addr:street contains postfix Qdrt, should likely be expanded to Quadrant");
}

*["addr:street"]["addr:street"=~/ Qtrs$/] {
assertNoMatch: "way \"addr:street\"=Main Quarters";
assertMatch: "way \"addr:street\"=Main Qtrs";
throwWarning: tr("addr:street={0} contains postfix Qtrs, should likely be expanded to Quarters","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Quarters");
group: tr("addr:street contains postfix Qtrs, should likely be expanded to Quarters");
}

*["addr:street"]["addr:street"=~/ Qy$/] {
assertNoMatch: "way \"addr:street\"=Main Quay";
assertMatch: "way \"addr:street\"=Main Qy";
throwWarning: tr("addr:street={0} contains postfix Qy, should likely be expanded to Quay","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Quay");
group: tr("addr:street contains postfix Qy, should likely be expanded to Quay");
}

*["addr:street"]["addr:street"=~/ Qys$/] {
assertNoMatch: "way \"addr:street\"=Main Quays";
assertMatch: "way \"addr:street\"=Main Qys";
throwWarning: tr("addr:street={0} contains postfix Qys, should likely be expanded to Quays","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Quays");
group: tr("addr:street contains postfix Qys, should likely be expanded to Quays");
}

*["addr:street"]["addr:street"=~/ Rd$/] {
assertNoMatch: "way \"addr:street\"=Main Road";
assertMatch: "way \"addr:street\"=Main Rd";
throwWarning: tr("addr:street={0} contains postfix Rd, should likely be expanded to Road","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Road");
group: tr("addr:street contains postfix Rd, should likely be expanded to Road");
}

*["addr:street"]["addr:street"=~/ Rds$/] {
assertNoMatch: "way \"addr:street\"=Main Roads";
assertMatch: "way \"addr:street\"=Main Rds";
throwWarning: tr("addr:street={0} contains postfix Rds, should likely be expanded to Roads","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Roads");
group: tr("addr:street contains postfix Rds, should likely be expanded to Roads");
}

*["addr:street"]["addr:street"=~/ Rdg$/] {
assertNoMatch: "way \"addr:street\"=Main Ridge";
assertMatch: "way \"addr:street\"=Main Rdg";
throwWarning: tr("addr:street={0} contains postfix Rdg, should likely be expanded to Ridge","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Ridge");
group: tr("addr:street contains postfix Rdg, should likely be expanded to Ridge");
}

*["addr:street"]["addr:street"=~/ Rdge$/] {
assertNoMatch: "way \"addr:street\"=Main Ridge";
assertMatch: "way \"addr:street\"=Main Rdge";
throwWarning: tr("addr:street={0} contains postfix Rdge, should likely be expanded to Ridge","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Ridge");
group: tr("addr:street contains postfix Rdge, should likely be expanded to Ridge");
}

*["addr:street"]["addr:street"=~/ Rdgs$/] {
assertNoMatch: "way \"addr:street\"=Main Ridges";
assertMatch: "way \"addr:street\"=Main Rdgs";
throwWarning: tr("addr:street={0} contains postfix Rdgs, should likely be expanded to Ridges","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Ridges");
group: tr("addr:street contains postfix Rdgs, should likely be expanded to Ridges");
}

*["addr:street"]["addr:street"=~/ Rw$/] {
assertNoMatch: "way \"addr:street\"=Main Row";
assertMatch: "way \"addr:street\"=Main Rw";
throwWarning: tr("addr:street={0} contains postfix Rw, should likely be expanded to Row","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Row");
group: tr("addr:street contains postfix Rw, should likely be expanded to Row");
}

*["addr:street"]["addr:street"=~/ Rmrd$/] {
assertNoMatch: "way \"addr:street\"=Main Ranch to Market Road";
assertMatch: "way \"addr:street\"=Main Rmrd";
throwWarning: tr("addr:street={0} contains postfix Rmrd, should likely be expanded to Ranch to Market Road","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Ranch to Market Road");
group: tr("addr:street contains postfix Rmrd, should likely be expanded to Ranch to Market Road");
}

*["addr:street"]["addr:street"=~/ Rt$/] {
assertNoMatch: "way \"addr:street\"=Main Route";
assertMatch: "way \"addr:street\"=Main Rt";
throwWarning: tr("addr:street={0} contains postfix Rt, should likely be expanded to Route","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Route");
group: tr("addr:street contains postfix Rt, should likely be expanded to Route");
}

*["addr:street"]["addr:street"=~/ Rte$/] {
assertNoMatch: "way \"addr:street\"=Main Route";
assertMatch: "way \"addr:street\"=Main Rte";
throwWarning: tr("addr:street={0} contains postfix Rte, should likely be expanded to Route","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Route");
group: tr("addr:street contains postfix Rte, should likely be expanded to Route");
}

*["addr:street"]["addr:street"=~/ Rty$/] {
assertNoMatch: "way \"addr:street\"=Main Rotary";
assertMatch: "way \"addr:street\"=Main Rty";
throwWarning: tr("addr:street={0} contains postfix Rty, should likely be expanded to Rotary","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Rotary");
group: tr("addr:street contains postfix Rty, should likely be expanded to Rotary");
}

*["addr:street"]["addr:street"=~/ Shl$/] {
assertNoMatch: "way \"addr:street\"=Main Shoal";
assertMatch: "way \"addr:street\"=Main Shl";
throwWarning: tr("addr:street={0} contains postfix Shl, should likely be expanded to Shoal","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Shoal");
group: tr("addr:street contains postfix Shl, should likely be expanded to Shoal");
}

*["addr:street"]["addr:street"=~/ Shls$/] {
assertNoMatch: "way \"addr:street\"=Main Shoals";
assertMatch: "way \"addr:street\"=Main Shls";
throwWarning: tr("addr:street={0} contains postfix Shls, should likely be expanded to Shoals","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Shoals");
group: tr("addr:street contains postfix Shls, should likely be expanded to Shoals");
}

*["addr:street"]["addr:street"=~/ Shr$/] {
assertNoMatch: "way \"addr:street\"=Main Shore";
assertMatch: "way \"addr:street\"=Main Shr";
throwWarning: tr("addr:street={0} contains postfix Shr, should likely be expanded to Shore","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Shore");
group: tr("addr:street contains postfix Shr, should likely be expanded to Shore");
}

*["addr:street"]["addr:street"=~/ Shrs$/] {
assertNoMatch: "way \"addr:street\"=Main Shores";
assertMatch: "way \"addr:street\"=Main Shrs";
throwWarning: tr("addr:street={0} contains postfix Shrs, should likely be expanded to Shores","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Shores");
group: tr("addr:street contains postfix Shrs, should likely be expanded to Shores");
}

*["addr:street"]["addr:street"=~/ Skwy$/] {
assertNoMatch: "way \"addr:street\"=Main Skyway";
assertMatch: "way \"addr:street\"=Main Skwy";
throwWarning: tr("addr:street={0} contains postfix Skwy, should likely be expanded to Skyway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Skyway");
group: tr("addr:street contains postfix Skwy, should likely be expanded to Skyway");
}

*["addr:street"]["addr:street"=~/ Smt$/] {
assertNoMatch: "way \"addr:street\"=Main Summit";
assertMatch: "way \"addr:street\"=Main Smt";
throwWarning: tr("addr:street={0} contains postfix Smt, should likely be expanded to Summit","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Summit");
group: tr("addr:street contains postfix Smt, should likely be expanded to Summit");
}

*["addr:street"]["addr:street"=~/ Spg$/] {
assertNoMatch: "way \"addr:street\"=Main Spring";
assertMatch: "way \"addr:street\"=Main Spg";
throwWarning: tr("addr:street={0} contains postfix Spg, should likely be expanded to Spring","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Spring");
group: tr("addr:street contains postfix Spg, should likely be expanded to Spring");
}

*["addr:street"]["addr:street"=~/ Spgs$/] {
assertNoMatch: "way \"addr:street\"=Main Springs";
assertMatch: "way \"addr:street\"=Main Spgs";
throwWarning: tr("addr:street={0} contains postfix Spgs, should likely be expanded to Springs","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Springs");
group: tr("addr:street contains postfix Spgs, should likely be expanded to Springs");
}

*["addr:street"]["addr:street"=~/ Sq$/] {
assertNoMatch: "way \"addr:street\"=Main Square";
assertMatch: "way \"addr:street\"=Main Sq";
throwWarning: tr("addr:street={0} contains postfix Sq, should likely be expanded to Square","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Square");
group: tr("addr:street contains postfix Sq, should likely be expanded to Square");
}

*["addr:street"]["addr:street"=~/ Sqs$/] {
assertNoMatch: "way \"addr:street\"=Main Squares";
assertMatch: "way \"addr:street\"=Main Sqs";
throwWarning: tr("addr:street={0} contains postfix Sqs, should likely be expanded to Squares","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Squares");
group: tr("addr:street contains postfix Sqs, should likely be expanded to Squares");
}

*["addr:street"]["addr:street"=~/ Srvc$/] {
assertNoMatch: "way \"addr:street\"=Main Service";
assertMatch: "way \"addr:street\"=Main Srvc";
throwWarning: tr("addr:street={0} contains postfix Srvc, should likely be expanded to Service","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Service");
group: tr("addr:street contains postfix Srvc, should likely be expanded to Service");
}

*["addr:street"]["addr:street"=~/ St$/] {
assertNoMatch: "way \"addr:street\"=Main Street";
assertMatch: "way \"addr:street\"=Main St";
throwWarning: tr("addr:street={0} contains postfix St, should likely be expanded to Street","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Street");
group: tr("addr:street contains postfix St, should likely be expanded to Street");
}

*["addr:street"]["addr:street"=~/ Tce$/] {
assertNoMatch: "way \"addr:street\"=Main Terrace";
assertMatch: "way \"addr:street\"=Main Tce";
throwWarning: tr("addr:street={0} contains postfix Tce, should likely be expanded to Terrace","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Terrace");
group: tr("addr:street contains postfix Tce, should likely be expanded to Terrace");
}

*["addr:street"]["addr:street"=~/ Ter$/] {
assertNoMatch: "way \"addr:street\"=Main Terrace";
assertMatch: "way \"addr:street\"=Main Ter";
throwWarning: tr("addr:street={0} contains postfix Ter, should likely be expanded to Terrace","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Terrace");
group: tr("addr:street contains postfix Ter, should likely be expanded to Terrace");
}

*["addr:street"]["addr:street"=~/ Tfwy$/] {
assertNoMatch: "way \"addr:street\"=Main Trafficway";
assertMatch: "way \"addr:street\"=Main Tfwy";
throwWarning: tr("addr:street={0} contains postfix Tfwy, should likely be expanded to Trafficway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Trafficway");
group: tr("addr:street contains postfix Tfwy, should likely be expanded to Trafficway");
}

*["addr:street"]["addr:street"=~/ Thfr$/] {
assertNoMatch: "way \"addr:street\"=Main Thoroughfare";
assertMatch: "way \"addr:street\"=Main Thfr";
throwWarning: tr("addr:street={0} contains postfix Thfr, should likely be expanded to Thoroughfare","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Thoroughfare");
group: tr("addr:street contains postfix Thfr, should likely be expanded to Thoroughfare");
}

*["addr:street"]["addr:street"=~/ Thwy$/] {
assertNoMatch: "way \"addr:street\"=Main Throughway";
assertMatch: "way \"addr:street\"=Main Thwy";
throwWarning: tr("addr:street={0} contains postfix Thwy, should likely be expanded to Throughway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Throughway");
group: tr("addr:street contains postfix Thwy, should likely be expanded to Throughway");
}

*["addr:street"]["addr:street"=~/ Tl$/] {
assertNoMatch: "way \"addr:street\"=Main Trail";
assertMatch: "way \"addr:street\"=Main Tl";
throwWarning: tr("addr:street={0} contains postfix Tl, should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Trail");
group: tr("addr:street contains postfix Tl, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Tlwy$/] {
assertNoMatch: "way \"addr:street\"=Main Tollway";
assertMatch: "way \"addr:street\"=Main Tlwy";
throwWarning: tr("addr:street={0} contains postfix Tlwy, should likely be expanded to Tollway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Tollway");
group: tr("addr:street contains postfix Tlwy, should likely be expanded to Tollway");
}

*["addr:street"]["addr:street"=~/ Tpke$/] {
assertNoMatch: "way \"addr:street\"=Main Turnpike";
assertMatch: "way \"addr:street\"=Main Tpke";
throwWarning: tr("addr:street={0} contains postfix Tpke, should likely be expanded to Turnpike","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Turnpike");
group: tr("addr:street contains postfix Tpke, should likely be expanded to Turnpike");
}

*["addr:street"]["addr:street"=~/ Trce$/] {
assertNoMatch: "way \"addr:street\"=Main Trace";
assertMatch: "way \"addr:street\"=Main Trce";
throwWarning: tr("addr:street={0} contains postfix Trce, should likely be expanded to Trace","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Trace");
group: tr("addr:street contains postfix Trce, should likely be expanded to Trace");
}

*["addr:street"]["addr:street"=~/ Tr$/] {
assertNoMatch: "way \"addr:street\"=Main Trail";
assertMatch: "way \"addr:street\"=Main Tr";
throwWarning: tr("addr:street={0} contains postfix Tr, should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Trail");
group: tr("addr:street contains postfix Tr, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Trk$/] {
assertNoMatch: "way \"addr:street\"=Main Track";
assertMatch: "way \"addr:street\"=Main Trk";
throwWarning: tr("addr:street={0} contains postfix Trk, should likely be expanded to Track","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Track");
group: tr("addr:street contains postfix Trk, should likely be expanded to Track");
}

*["addr:street"]["addr:street"=~/ Trl$/] {
assertNoMatch: "way \"addr:street\"=Main Trail";
assertMatch: "way \"addr:street\"=Main Trl";
throwWarning: tr("addr:street={0} contains postfix Trl, should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Trail");
group: tr("addr:street contains postfix Trl, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Tunl$/] {
assertNoMatch: "way \"addr:street\"=Main Tunnel";
assertMatch: "way \"addr:street\"=Main Tunl";
throwWarning: tr("addr:street={0} contains postfix Tunl, should likely be expanded to Tunnel","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Tunnel");
group: tr("addr:street contains postfix Tunl, should likely be expanded to Tunnel");
}

*["addr:street"]["addr:street"=~/ Unp$/] {
assertNoMatch: "way \"addr:street\"=Main Underpass";
assertMatch: "way \"addr:street\"=Main Unp";
throwWarning: tr("addr:street={0} contains postfix Unp, should likely be expanded to Underpass","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Underpass");
group: tr("addr:street contains postfix Unp, should likely be expanded to Underpass");
}

*["addr:street"]["addr:street"=~/ Vl$/] {
assertNoMatch: "way \"addr:street\"=Main Villa";
assertMatch: "way \"addr:street\"=Main Vl";
throwWarning: tr("addr:street={0} contains postfix Vl, should likely be expanded to Villa","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Villa");
group: tr("addr:street contains postfix Vl, should likely be expanded to Villa");
}

*["addr:street"]["addr:street"=~/ Vlg$/] {
assertNoMatch: "way \"addr:street\"=Main Village";
assertMatch: "way \"addr:street\"=Main Vlg";
throwWarning: tr("addr:street={0} contains postfix Vlg, should likely be expanded to Village","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Village");
group: tr("addr:street contains postfix Vlg, should likely be expanded to Village");
}

*["addr:street"]["addr:street"=~/ Vlgs$/] {
assertNoMatch: "way \"addr:street\"=Main Villages";
assertMatch: "way \"addr:street\"=Main Vlgs";
throwWarning: tr("addr:street={0} contains postfix Vlgs, should likely be expanded to Villages","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Villages");
group: tr("addr:street contains postfix Vlgs, should likely be expanded to Villages");
}

*["addr:street"]["addr:street"=~/ Vly$/] {
assertNoMatch: "way \"addr:street\"=Main Valley";
assertMatch: "way \"addr:street\"=Main Vly";
throwWarning: tr("addr:street={0} contains postfix Vly, should likely be expanded to Valley","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Valley");
group: tr("addr:street contains postfix Vly, should likely be expanded to Valley");
}

*["addr:street"]["addr:street"=~/ Vw$/] {
assertNoMatch: "way \"addr:street\"=Main View";
assertMatch: "way \"addr:street\"=Main Vw";
throwWarning: tr("addr:street={0} contains postfix Vw, should likely be expanded to View","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "View");
group: tr("addr:street contains postfix Vw, should likely be expanded to View");
}

*["addr:street"]["addr:street"=~/ Wd$/] {
assertNoMatch: "way \"addr:street\"=Main Wood";
assertMatch: "way \"addr:street\"=Main Wd";
throwWarning: tr("addr:street={0} contains postfix Wd, should likely be expanded to Wood","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Wood");
group: tr("addr:street contains postfix Wd, should likely be expanded to Wood");
}

*["addr:street"]["addr:street"=~/ Whrf$/] {
assertNoMatch: "way \"addr:street\"=Main Wharf";
assertMatch: "way \"addr:street\"=Main Whrf";
throwWarning: tr("addr:street={0} contains postfix Whrf, should likely be expanded to Wharf","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Wharf");
group: tr("addr:street contains postfix Whrf, should likely be expanded to Wharf");
}

*["addr:street"]["addr:street"=~/ Wkwy$/] {
assertNoMatch: "way \"addr:street\"=Main Walkway";
assertMatch: "way \"addr:street\"=Main Wkwy";
throwWarning: tr("addr:street={0} contains postfix Wkwy, should likely be expanded to Walkway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Walkway");
group: tr("addr:street contains postfix Wkwy, should likely be expanded to Walkway");
}

*["addr:street"]["addr:street"=~/ Wlk$/] {
assertNoMatch: "way \"addr:street\"=Main Walk";
assertMatch: "way \"addr:street\"=Main Wlk";
throwWarning: tr("addr:street={0} contains postfix Wlk, should likely be expanded to Walk","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Walk");
group: tr("addr:street contains postfix Wlk, should likely be expanded to Walk");
}

*["addr:street"]["addr:street"=~/ Wy$/] {
assertNoMatch: "way \"addr:street\"=Main Way";
assertMatch: "way \"addr:street\"=Main Wy";
throwWarning: tr("addr:street={0} contains postfix Wy, should likely be expanded to Way","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Way");
group: tr("addr:street contains postfix Wy, should likely be expanded to Way");
}

*["addr:street"]["addr:street"=~/ Xing$/] {
assertNoMatch: "way \"addr:street\"=Main Crossing";
assertMatch: "way \"addr:street\"=Main Xing";
throwWarning: tr("addr:street={0} contains postfix Xing, should likely be expanded to Crossing","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Crossing");
group: tr("addr:street contains postfix Xing, should likely be expanded to Crossing");
}

*["name"=~/ Acc$/].highway_name {
assertNoMatch: "way \"name\"=Main Access";
assertMatch: "way \"name\"=Main Acc";
throwWarning: tr("Highway name contains postfix Acc, should likely be expanded to Access");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Access");
}

*["name"=~/ Aly$/].highway_name {
assertNoMatch: "way \"name\"=Main Alley";
assertMatch: "way \"name\"=Main Aly";
throwWarning: tr("Highway name contains postfix Aly, should likely be expanded to Alley");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Alley");
}

*["name"=~/ Ambl$/].highway_name {
assertNoMatch: "way \"name\"=Main Amble";
assertMatch: "way \"name\"=Main Ambl";
throwWarning: tr("Highway name contains postfix Ambl, should likely be expanded to Amble");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Amble");
}

*["name"=~/ App$/].highway_name {
assertNoMatch: "way \"name\"=Main Approach";
assertMatch: "way \"name\"=Main App";
throwWarning: tr("Highway name contains postfix App, should likely be expanded to Approach");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Approach");
}

*["name"=~/ Arc$/].highway_name {
assertNoMatch: "way \"name\"=Main Arcade";
assertMatch: "way \"name\"=Main Arc";
throwWarning: tr("Highway name contains postfix Arc, should likely be expanded to Arcade");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Arcade");
}

*["name"=~/ Artl$/].highway_name {
assertNoMatch: "way \"name\"=Main Arterial";
assertMatch: "way \"name\"=Main Artl";
throwWarning: tr("Highway name contains postfix Artl, should likely be expanded to Arterial");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Arterial");
}

*["name"=~/ Arty$/].highway_name {
assertNoMatch: "way \"name\"=Main Artery";
assertMatch: "way \"name\"=Main Arty";
throwWarning: tr("Highway name contains postfix Arty, should likely be expanded to Artery");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Artery");
}

*["name"=~/ Av$/].highway_name {
assertNoMatch: "way \"name\"=Main Avenue";
assertMatch: "way \"name\"=Main Av";
throwWarning: tr("Highway name contains postfix Av, should likely be expanded to Avenue");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Avenue");
}

*["name"=~/ Ave$/].highway_name {
assertNoMatch: "way \"name\"=Main Avenue";
assertMatch: "way \"name\"=Main Ave";
throwWarning: tr("Highway name contains postfix Ave, should likely be expanded to Avenue");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Avenue");
}

*["name"=~/ Bch$/].highway_name {
assertNoMatch: "way \"name\"=Main Beach";
assertMatch: "way \"name\"=Main Bch";
throwWarning: tr("Highway name contains postfix Bch, should likely be expanded to Beach");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Beach");
}

*["name"=~/ Bg$/].highway_name {
assertNoMatch: "way \"name\"=Main Burg";
assertMatch: "way \"name\"=Main Bg";
throwWarning: tr("Highway name contains postfix Bg, should likely be expanded to Burg");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Burg");
}

*["name"=~/ Bgs$/].highway_name {
assertNoMatch: "way \"name\"=Main Burgs";
assertMatch: "way \"name\"=Main Bgs";
throwWarning: tr("Highway name contains postfix Bgs, should likely be expanded to Burgs");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Burgs");
}

*["name"=~/ Blf$/].highway_name {
assertNoMatch: "way \"name\"=Main Bluff";
assertMatch: "way \"name\"=Main Blf";
throwWarning: tr("Highway name contains postfix Blf, should likely be expanded to Bluff");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Bluff");
}

*["name"=~/ Blk$/].highway_name {
assertNoMatch: "way \"name\"=Main Block";
assertMatch: "way \"name\"=Main Blk";
throwWarning: tr("Highway name contains postfix Blk, should likely be expanded to Block");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Block");
}

*["name"=~/ Blv$/].highway_name {
assertNoMatch: "way \"name\"=Main Boulevard";
assertMatch: "way \"name\"=Main Blv";
throwWarning: tr("Highway name contains postfix Blv, should likely be expanded to Boulevard");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Boulevard");
}

*["name"=~/ Blvd$/].highway_name {
assertNoMatch: "way \"name\"=Main Boulevard";
assertMatch: "way \"name\"=Main Blvd";
throwWarning: tr("Highway name contains postfix Blvd, should likely be expanded to Boulevard");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Boulevard");
}

*["name"=~/ Bnd$/].highway_name {
assertNoMatch: "way \"name\"=Main Bend";
assertMatch: "way \"name\"=Main Bnd";
throwWarning: tr("Highway name contains postfix Bnd, should likely be expanded to Bend");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Bend");
}

*["name"=~/ Br$/].highway_name {
assertNoMatch: "way \"name\"=Main Bridge";
assertMatch: "way \"name\"=Main Br";
throwWarning: tr("Highway name contains postfix Br, should likely be expanded to Bridge");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Bridge");
}

*["name"=~/ Brg$/].highway_name {
assertNoMatch: "way \"name\"=Main Bridge";
assertMatch: "way \"name\"=Main Brg";
throwWarning: tr("Highway name contains postfix Brg, should likely be expanded to Bridge");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Bridge");
}

*["name"=~/ Btm$/].highway_name {
assertNoMatch: "way \"name\"=Main Bottom";
assertMatch: "way \"name\"=Main Btm";
throwWarning: tr("Highway name contains postfix Btm, should likely be expanded to Bottom");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Bottom");
}

*["name"=~/ Bwlk$/].highway_name {
assertNoMatch: "way \"name\"=Main Boardwalk";
assertMatch: "way \"name\"=Main Bwlk";
throwWarning: tr("Highway name contains postfix Bwlk, should likely be expanded to Boardwalk");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Boardwalk");
}

*["name"=~/ Byp$/].highway_name {
assertNoMatch: "way \"name\"=Main Bypass";
assertMatch: "way \"name\"=Main Byp";
throwWarning: tr("Highway name contains postfix Byp, should likely be expanded to Bypass");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Bypass");
}

*["name"=~/ Bypa$/].highway_name {
assertNoMatch: "way \"name\"=Main Bypass";
assertMatch: "way \"name\"=Main Bypa";
throwWarning: tr("Highway name contains postfix Bypa, should likely be expanded to Bypass");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Bypass");
}

*["name"=~/ Byu$/].highway_name {
assertNoMatch: "way \"name\"=Main Byou";
assertMatch: "way \"name\"=Main Byu";
throwWarning: tr("Highway name contains postfix Byu, should likely be expanded to Byou");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Byou");
}

*["name"=~/ Bywy$/].highway_name {
assertNoMatch: "way \"name\"=Main Byway";
assertMatch: "way \"name\"=Main Bywy";
throwWarning: tr("Highway name contains postfix Bywy, should likely be expanded to Byway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Byway");
}

*["name"=~/ Bzr$/].highway_name {
assertNoMatch: "way \"name\"=Main Bazaar";
assertMatch: "way \"name\"=Main Bzr";
throwWarning: tr("Highway name contains postfix Bzr, should likely be expanded to Bazaar");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Bazaar");
}

*["name"=~/ Cct$/].highway_name {
assertNoMatch: "way \"name\"=Main Circuit";
assertMatch: "way \"name\"=Main Cct";
throwWarning: tr("Highway name contains postfix Cct, should likely be expanded to Circuit");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Circuit");
}

*["name"=~/ Ch$/].highway_name {
assertNoMatch: "way \"name\"=Main Chase";
assertMatch: "way \"name\"=Main Ch";
throwWarning: tr("Highway name contains postfix Ch, should likely be expanded to Chase");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Chase");
}

*["name"=~/ Cir$/].highway_name {
assertNoMatch: "way \"name\"=Main Circle";
assertMatch: "way \"name\"=Main Cir";
throwWarning: tr("Highway name contains postfix Cir, should likely be expanded to Circle");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Circle");
}

*["name"=~/ Cirs$/].highway_name {
assertNoMatch: "way \"name\"=Main Circles";
assertMatch: "way \"name\"=Main Cirs";
throwWarning: tr("Highway name contains postfix Cirs, should likely be expanded to Circles");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Circles");
}

*["name"=~/ Clf$/].highway_name {
assertNoMatch: "way \"name\"=Main Cliff";
assertMatch: "way \"name\"=Main Clf";
throwWarning: tr("Highway name contains postfix Clf, should likely be expanded to Cliff");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Cliff");
}

*["name"=~/ Clfs$/].highway_name {
assertNoMatch: "way \"name\"=Main Cliffs";
assertMatch: "way \"name\"=Main Clfs";
throwWarning: tr("Highway name contains postfix Clfs, should likely be expanded to Cliffs");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Cliffs");
}

*["name"=~/ Cly$/].highway_name {
assertNoMatch: "way \"name\"=Main Colony";
assertMatch: "way \"name\"=Main Cly";
throwWarning: tr("Highway name contains postfix Cly, should likely be expanded to Colony");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Colony");
}

*["name"=~/ Cmn$/].highway_name {
assertNoMatch: "way \"name\"=Main Common";
assertMatch: "way \"name\"=Main Cmn";
throwWarning: tr("Highway name contains postfix Cmn, should likely be expanded to Common");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Common");
}

*["name"=~/ Cnl$/].highway_name {
assertNoMatch: "way \"name\"=Main Canal";
assertMatch: "way \"name\"=Main Cnl";
throwWarning: tr("Highway name contains postfix Cnl, should likely be expanded to Canal");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Canal");
}

*["name"=~/ Cnr$/].highway_name {
assertNoMatch: "way \"name\"=Main Corner";
assertMatch: "way \"name\"=Main Cnr";
throwWarning: tr("Highway name contains postfix Cnr, should likely be expanded to Corner");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Corner");
}

*["name"=~/ Coll$/].highway_name {
assertNoMatch: "way \"name\"=Main College";
assertMatch: "way \"name\"=Main Coll";
throwWarning: tr("Highway name contains postfix Coll, should likely be expanded to College");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "College");
}

*["name"=~/ Cpe$/].highway_name {
assertNoMatch: "way \"name\"=Main Cape";
assertMatch: "way \"name\"=Main Cpe";
throwWarning: tr("Highway name contains postfix Cpe, should likely be expanded to Cape");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Cape");
}

*["name"=~/ Cr$/].highway_name {
assertNoMatch: "way \"name\"=Main Creek";
assertMatch: "way \"name\"=Main Cr";
throwWarning: tr("Highway name contains postfix Cr, should likely be expanded to Creek");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Creek");
}

*["name"=~/ Crk$/].highway_name {
assertNoMatch: "way \"name\"=Main Creek";
assertMatch: "way \"name\"=Main Crk";
throwWarning: tr("Highway name contains postfix Crk, should likely be expanded to Creek");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Creek");
}

*["name"=~/ Cres$/].highway_name {
assertNoMatch: "way \"name\"=Main Crescent";
assertMatch: "way \"name\"=Main Cres";
throwWarning: tr("Highway name contains postfix Cres, should likely be expanded to Crescent");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Crescent");
}

*["name"=~/ Crst$/].highway_name {
assertNoMatch: "way \"name\"=Main Crest";
assertMatch: "way \"name\"=Main Crst";
throwWarning: tr("Highway name contains postfix Crst, should likely be expanded to Crest");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Crest");
}

*["name"=~/ Cswy$/].highway_name {
assertNoMatch: "way \"name\"=Main Causeway";
assertMatch: "way \"name\"=Main Cswy";
throwWarning: tr("Highway name contains postfix Cswy, should likely be expanded to Causeway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Causeway");
}

*["name"=~/ Ct$/].highway_name {
assertNoMatch: "way \"name\"=Main Court";
assertMatch: "way \"name\"=Main Ct";
throwWarning: tr("Highway name contains postfix Ct, should likely be expanded to Court");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Court");
}

*["name"=~/ Ctr$/].highway_name {
assertNoMatch: "way \"name\"=Main Center";
assertMatch: "way \"name\"=Main Ctr";
throwWarning: tr("Highway name contains postfix Ctr, should likely be expanded to Center");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Center");
}

*["name"=~/ Cts$/].highway_name {
assertNoMatch: "way \"name\"=Main Courts";
assertMatch: "way \"name\"=Main Cts";
throwWarning: tr("Highway name contains postfix Cts, should likely be expanded to Courts");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Courts");
}

*["name"=~/ Ctyd$/].highway_name {
assertNoMatch: "way \"name\"=Main Courtyard";
assertMatch: "way \"name\"=Main Ctyd";
throwWarning: tr("Highway name contains postfix Ctyd, should likely be expanded to Courtyard");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Courtyard");
}

*["name"=~/ Curv$/].highway_name {
assertNoMatch: "way \"name\"=Main Curve";
assertMatch: "way \"name\"=Main Curv";
throwWarning: tr("Highway name contains postfix Curv, should likely be expanded to Curve");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Curve");
}

*["name"=~/ Cutt$/].highway_name {
assertNoMatch: "way \"name\"=Main Cutting";
assertMatch: "way \"name\"=Main Cutt";
throwWarning: tr("Highway name contains postfix Cutt, should likely be expanded to Cutting");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Cutting");
}

*["name"=~/ Cv$/].highway_name {
assertNoMatch: "way \"name\"=Main Cove";
assertMatch: "way \"name\"=Main Cv";
throwWarning: tr("Highway name contains postfix Cv, should likely be expanded to Cove");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Cove");
}

*["name"=~/ Cyn$/].highway_name {
assertNoMatch: "way \"name\"=Main Canyon";
assertMatch: "way \"name\"=Main Cyn";
throwWarning: tr("Highway name contains postfix Cyn, should likely be expanded to Canyon");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Canyon");
}

*["name"=~/ Dl$/].highway_name {
assertNoMatch: "way \"name\"=Main Dale";
assertMatch: "way \"name\"=Main Dl";
throwWarning: tr("Highway name contains postfix Dl, should likely be expanded to Dale");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Dale");
}

*["name"=~/ Dr$/].highway_name {
assertNoMatch: "way \"name\"=Main Drive";
assertMatch: "way \"name\"=Main Dr";
throwWarning: tr("Highway name contains postfix Dr, should likely be expanded to Drive");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Drive");
}

*["name"=~/ Dv$/].highway_name {
assertNoMatch: "way \"name\"=Main Drive";
assertMatch: "way \"name\"=Main Dv";
throwWarning: tr("Highway name contains postfix Dv, should likely be expanded to Drive");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Drive");
}

*["name"=~/ Dvwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Driveway";
assertMatch: "way \"name\"=Main Dvwy";
throwWarning: tr("Highway name contains postfix Dvwy, should likely be expanded to Driveway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Driveway");
}

*["name"=~/ Elb$/].highway_name {
assertNoMatch: "way \"name\"=Main Elbow";
assertMatch: "way \"name\"=Main Elb";
throwWarning: tr("Highway name contains postfix Elb, should likely be expanded to Elbow");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Elbow");
}

*["name"=~/ Est$/].highway_name {
assertNoMatch: "way \"name\"=Main Estate";
assertMatch: "way \"name\"=Main Est";
throwWarning: tr("Highway name contains postfix Est, should likely be expanded to Estate");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Estate");
}

*["name"=~/ Ests$/].highway_name {
assertNoMatch: "way \"name\"=Main Estates";
assertMatch: "way \"name\"=Main Ests";
throwWarning: tr("Highway name contains postfix Ests, should likely be expanded to Estates");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Estates");
}

*["name"=~/ Expy$/].highway_name {
assertNoMatch: "way \"name\"=Main Expressway";
assertMatch: "way \"name\"=Main Expy";
throwWarning: tr("Highway name contains postfix Expy, should likely be expanded to Expressway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Expressway");
}

*["name"=~/ Expwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Expressway";
assertMatch: "way \"name\"=Main Expwy";
throwWarning: tr("Highway name contains postfix Expwy, should likely be expanded to Expressway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Expressway");
}

*["name"=~/ Fawy$/].highway_name {
assertNoMatch: "way \"name\"=Main Fairway";
assertMatch: "way \"name\"=Main Fawy";
throwWarning: tr("Highway name contains postfix Fawy, should likely be expanded to Fairway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Fairway");
}

*["name"=~/ Fld$/].highway_name {
assertNoMatch: "way \"name\"=Main Field";
assertMatch: "way \"name\"=Main Fld";
throwWarning: tr("Highway name contains postfix Fld, should likely be expanded to Field");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Field");
}

*["name"=~/ Flds$/].highway_name {
assertNoMatch: "way \"name\"=Main Fields";
assertMatch: "way \"name\"=Main Flds";
throwWarning: tr("Highway name contains postfix Flds, should likely be expanded to Fields");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Fields");
}

*["name"=~/ Fmrd$/].highway_name {
assertNoMatch: "way \"name\"=Main Farm to Market Road";
assertMatch: "way \"name\"=Main Fmrd";
throwWarning: tr("Highway name contains postfix Fmrd, should likely be expanded to Farm to Market Road");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Farm to Market Road");
}

*["name"=~/ Ftrl$/].highway_name {
assertNoMatch: "way \"name\"=Main Firetrail";
assertMatch: "way \"name\"=Main Ftrl";
throwWarning: tr("Highway name contains postfix Ftrl, should likely be expanded to Firetrail");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Firetrail");
}

*["name"=~/ Frk$/].highway_name {
assertNoMatch: "way \"name\"=Main Fork";
assertMatch: "way \"name\"=Main Frk";
throwWarning: tr("Highway name contains postfix Frk, should likely be expanded to Fork");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Fork");
}

*["name"=~/ Fry$/].highway_name {
assertNoMatch: "way \"name\"=Main Ferry";
assertMatch: "way \"name\"=Main Fry";
throwWarning: tr("Highway name contains postfix Fry, should likely be expanded to Ferry");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Ferry");
}

*["name"=~/ Fwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Freeway";
assertMatch: "way \"name\"=Main Fwy";
throwWarning: tr("Highway name contains postfix Fwy, should likely be expanded to Freeway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Freeway");
}

*["name"=~/ Gd$/].highway_name {
assertNoMatch: "way \"name\"=Main Grade";
assertMatch: "way \"name\"=Main Gd";
throwWarning: tr("Highway name contains postfix Gd, should likely be expanded to Grade");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Grade");
}

*["name"=~/ Gdns$/].highway_name {
assertNoMatch: "way \"name\"=Main Gardens";
assertMatch: "way \"name\"=Main Gdns";
throwWarning: tr("Highway name contains postfix Gdns, should likely be expanded to Gardens");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Gardens");
}

*["name"=~/ Gr$/].highway_name {
assertNoMatch: "way \"name\"=Main Grove";
assertMatch: "way \"name\"=Main Gr";
throwWarning: tr("Highway name contains postfix Gr, should likely be expanded to Grove");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Grove");
}

*["name"=~/ Gro$/].highway_name {
assertNoMatch: "way \"name\"=Main Grove";
assertMatch: "way \"name\"=Main Gro";
throwWarning: tr("Highway name contains postfix Gro, should likely be expanded to Grove");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Grove");
}

*["name"=~/ Grv$/].highway_name {
assertNoMatch: "way \"name\"=Main Grove";
assertMatch: "way \"name\"=Main Grv";
throwWarning: tr("Highway name contains postfix Grv, should likely be expanded to Grove");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Grove");
}

*["name"=~/ Hbr$/].highway_name {
assertNoMatch: "way \"name\"=Main Harbor";
assertMatch: "way \"name\"=Main Hbr";
throwWarning: tr("Highway name contains postfix Hbr, should likely be expanded to Harbor");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Harbor");
}

*["name"=~/ Hl$/].highway_name {
assertNoMatch: "way \"name\"=Main Hill";
assertMatch: "way \"name\"=Main Hl";
throwWarning: tr("Highway name contains postfix Hl, should likely be expanded to Hill");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Hill");
}

*["name"=~/ Hls$/].highway_name {
assertNoMatch: "way \"name\"=Main Hills";
assertMatch: "way \"name\"=Main Hls";
throwWarning: tr("Highway name contains postfix Hls, should likely be expanded to Hills");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Hills");
}

*["name"=~/ Holw$/].highway_name {
assertNoMatch: "way \"name\"=Main Hollow";
assertMatch: "way \"name\"=Main Holw";
throwWarning: tr("Highway name contains postfix Holw, should likely be expanded to Hollow");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Hollow");
}

*["name"=~/ Hts$/].highway_name {
assertNoMatch: "way \"name\"=Main Heights";
assertMatch: "way \"name\"=Main Hts";
throwWarning: tr("Highway name contains postfix Hts, should likely be expanded to Heights");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Heights");
}

*["name"=~/ Hw$/].highway_name {
assertNoMatch: "way \"name\"=Main Highway";
assertMatch: "way \"name\"=Main Hw";
throwWarning: tr("Highway name contains postfix Hw, should likely be expanded to Highway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Highway");
}

*["name"=~/ Hwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Highway";
assertMatch: "way \"name\"=Main Hwy";
throwWarning: tr("Highway name contains postfix Hwy, should likely be expanded to Highway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Highway");
}

*["name"=~/ Hvn$/].highway_name {
assertNoMatch: "way \"name\"=Main Haven";
assertMatch: "way \"name\"=Main Hvn";
throwWarning: tr("Highway name contains postfix Hvn, should likely be expanded to Haven");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Haven");
}

*["name"=~/ Intg$/].highway_name {
assertNoMatch: "way \"name\"=Main Interchange";
assertMatch: "way \"name\"=Main Intg";
throwWarning: tr("Highway name contains postfix Intg, should likely be expanded to Interchange");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Interchange");
}

*["name"=~/ Iss$/].highway_name {
assertNoMatch: "way \"name\"=Main Islands";
assertMatch: "way \"name\"=Main Iss";
throwWarning: tr("Highway name contains postfix Iss, should likely be expanded to Islands");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Islands");
}

*["name"=~/ Jct$/].highway_name {
assertNoMatch: "way \"name\"=Main Junction";
assertMatch: "way \"name\"=Main Jct";
throwWarning: tr("Highway name contains postfix Jct, should likely be expanded to Junction");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Junction");
}

*["name"=~/ Jn$/].highway_name {
assertNoMatch: "way \"name\"=Main Junction";
assertMatch: "way \"name\"=Main Jn";
throwWarning: tr("Highway name contains postfix Jn, should likely be expanded to Junction");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Junction");
}

*["name"=~/ Jnc$/].highway_name {
assertNoMatch: "way \"name\"=Main Junction";
assertMatch: "way \"name\"=Main Jnc";
throwWarning: tr("Highway name contains postfix Jnc, should likely be expanded to Junction");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Junction");
}

*["name"=~/ Knl$/].highway_name {
assertNoMatch: "way \"name\"=Main Knoll";
assertMatch: "way \"name\"=Main Knl";
throwWarning: tr("Highway name contains postfix Knl, should likely be expanded to Knoll");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Knoll");
}

*["name"=~/ Knls$/].highway_name {
assertNoMatch: "way \"name\"=Main Knolls";
assertMatch: "way \"name\"=Main Knls";
throwWarning: tr("Highway name contains postfix Knls, should likely be expanded to Knolls");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Knolls");
}

*["name"=~/ Ky$/].highway_name {
assertNoMatch: "way \"name\"=Main Key";
assertMatch: "way \"name\"=Main Ky";
throwWarning: tr("Highway name contains postfix Ky, should likely be expanded to Key");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Key");
}

*["name"=~/ Kys$/].highway_name {
assertNoMatch: "way \"name\"=Main Keys";
assertMatch: "way \"name\"=Main Kys";
throwWarning: tr("Highway name contains postfix Kys, should likely be expanded to Keys");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Keys");
}

*["name"=~/ Lck$/].highway_name {
assertNoMatch: "way \"name\"=Main Lock";
assertMatch: "way \"name\"=Main Lck";
throwWarning: tr("Highway name contains postfix Lck, should likely be expanded to Lock");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Lock");
}

*["name"=~/ Lcks$/].highway_name {
assertNoMatch: "way \"name\"=Main Locks";
assertMatch: "way \"name\"=Main Lcks";
throwWarning: tr("Highway name contains postfix Lcks, should likely be expanded to Locks");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Locks");
}

*["name"=~/ Ldg$/].highway_name {
assertNoMatch: "way \"name\"=Main Lodge";
assertMatch: "way \"name\"=Main Ldg";
throwWarning: tr("Highway name contains postfix Ldg, should likely be expanded to Lodge");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Lodge");
}

*["name"=~/ Lk$/].highway_name {
assertNoMatch: "way \"name\"=Main Lake";
assertMatch: "way \"name\"=Main Lk";
throwWarning: tr("Highway name contains postfix Lk, should likely be expanded to Lake");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Lake");
}

*["name"=~/ Lks$/].highway_name {
assertNoMatch: "way \"name\"=Main Lakes";
assertMatch: "way \"name\"=Main Lks";
throwWarning: tr("Highway name contains postfix Lks, should likely be expanded to Lakes");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Lakes");
}

*["name"=~/ Lkt$/].highway_name {
assertNoMatch: "way \"name\"=Main Lookout";
assertMatch: "way \"name\"=Main Lkt";
throwWarning: tr("Highway name contains postfix Lkt, should likely be expanded to Lookout");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Lookout");
}

*["name"=~/ Ln$/].highway_name {
assertNoMatch: "way \"name\"=Main Lane";
assertMatch: "way \"name\"=Main Ln";
throwWarning: tr("Highway name contains postfix Ln, should likely be expanded to Lane");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Lane");
}

*["name"=~/ Lndg$/].highway_name {
assertNoMatch: "way \"name\"=Main Landing";
assertMatch: "way \"name\"=Main Lndg";
throwWarning: tr("Highway name contains postfix Lndg, should likely be expanded to Landing");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Landing");
}

*["name"=~/ Lp$/].highway_name {
assertNoMatch: "way \"name\"=Main Loop";
assertMatch: "way \"name\"=Main Lp";
throwWarning: tr("Highway name contains postfix Lp, should likely be expanded to Loop");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Loop");
}

*["name"=~/ Mal$/].highway_name {
assertNoMatch: "way \"name\"=Main Mall";
assertMatch: "way \"name\"=Main Mal";
throwWarning: tr("Highway name contains postfix Mal, should likely be expanded to Mall");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Mall");
}

*["name"=~/ Mdw$/].highway_name {
assertNoMatch: "way \"name\"=Main Meadow";
assertMatch: "way \"name\"=Main Mdw";
throwWarning: tr("Highway name contains postfix Mdw, should likely be expanded to Meadow");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Meadow");
}

*["name"=~/ Mdws$/].highway_name {
assertNoMatch: "way \"name\"=Main Meadows";
assertMatch: "way \"name\"=Main Mdws";
throwWarning: tr("Highway name contains postfix Mdws, should likely be expanded to Meadows");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Meadows");
}

*["name"=~/ Mkt$/].highway_name {
assertNoMatch: "way \"name\"=Main Market";
assertMatch: "way \"name\"=Main Mkt";
throwWarning: tr("Highway name contains postfix Mkt, should likely be expanded to Market");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Market");
}

*["name"=~/ Ml$/].highway_name {
assertNoMatch: "way \"name\"=Main Mill";
assertMatch: "way \"name\"=Main Ml";
throwWarning: tr("Highway name contains postfix Ml, should likely be expanded to Mill");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Mill");
}

*["name"=~/ Mt$/].highway_name {
assertNoMatch: "way \"name\"=Main Mount";
assertMatch: "way \"name\"=Main Mt";
throwWarning: tr("Highway name contains postfix Mt, should likely be expanded to Mount");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Mount");
}

*["name"=~/ Mtn$/].highway_name {
assertNoMatch: "way \"name\"=Main Mountain";
assertMatch: "way \"name\"=Main Mtn";
throwWarning: tr("Highway name contains postfix Mtn, should likely be expanded to Mountain");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Mountain");
}

*["name"=~/ Mtwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Motorway";
assertMatch: "way \"name\"=Main Mtwy";
throwWarning: tr("Highway name contains postfix Mtwy, should likely be expanded to Motorway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Motorway");
}

*["name"=~/ Orch$/].highway_name {
assertNoMatch: "way \"name\"=Main Orchard";
assertMatch: "way \"name\"=Main Orch";
throwWarning: tr("Highway name contains postfix Orch, should likely be expanded to Orchard");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Orchard");
}

*["name"=~/ Ovps$/].highway_name {
assertNoMatch: "way \"name\"=Main Overpass";
assertMatch: "way \"name\"=Main Ovps";
throwWarning: tr("Highway name contains postfix Ovps, should likely be expanded to Overpass");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Overpass");
}

*["name"=~/ Piaz$/].highway_name {
assertNoMatch: "way \"name\"=Main Piazza";
assertMatch: "way \"name\"=Main Piaz";
throwWarning: tr("Highway name contains postfix Piaz, should likely be expanded to Piazza");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Piazza");
}

*["name"=~/ Pk$/].highway_name {
assertNoMatch: "way \"name\"=Main Peak";
assertMatch: "way \"name\"=Main Pk";
throwWarning: tr("Highway name contains postfix Pk, should likely be expanded to Peak");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Peak");
}

*["name"=~/ Pky$/].highway_name {
assertNoMatch: "way \"name\"=Main Parkway";
assertMatch: "way \"name\"=Main Pky";
throwWarning: tr("Highway name contains postfix Pky, should likely be expanded to Parkway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Parkway");
}

*["name"=~/ Pkwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Parkway";
assertMatch: "way \"name\"=Main Pkwy";
throwWarning: tr("Highway name contains postfix Pkwy, should likely be expanded to Parkway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Parkway");
}

*["name"=~/ Pl$/].highway_name {
assertNoMatch: "way \"name\"=Main Place";
assertMatch: "way \"name\"=Main Pl";
throwWarning: tr("Highway name contains postfix Pl, should likely be expanded to Place");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Place");
}

*["name"=~/ Pln$/].highway_name {
assertNoMatch: "way \"name\"=Main Plain";
assertMatch: "way \"name\"=Main Pln";
throwWarning: tr("Highway name contains postfix Pln, should likely be expanded to Plain");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Plain");
}

*["name"=~/ Plns$/].highway_name {
assertNoMatch: "way \"name\"=Main Plains";
assertMatch: "way \"name\"=Main Plns";
throwWarning: tr("Highway name contains postfix Plns, should likely be expanded to Plains");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Plains");
}

*["name"=~/ Plz$/].highway_name {
assertNoMatch: "way \"name\"=Main Plaza";
assertMatch: "way \"name\"=Main Plz";
throwWarning: tr("Highway name contains postfix Plz, should likely be expanded to Plaza");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Plaza");
}

*["name"=~/ Pnt$/].highway_name {
assertNoMatch: "way \"name\"=Main Point";
assertMatch: "way \"name\"=Main Pnt";
throwWarning: tr("Highway name contains postfix Pnt, should likely be expanded to Point");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Point");
}

*["name"=~/ Prkwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Parkway";
assertMatch: "way \"name\"=Main Prkwy";
throwWarning: tr("Highway name contains postfix Prkwy, should likely be expanded to Parkway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Parkway");
}

*["name"=~/ Pt$/].highway_name {
assertNoMatch: "way \"name\"=Main Point";
assertMatch: "way \"name\"=Main Pt";
throwWarning: tr("Highway name contains postfix Pt, should likely be expanded to Point");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Point");
}

*["name"=~/ Pvt$/].highway_name {
assertNoMatch: "way \"name\"=Main Private";
assertMatch: "way \"name\"=Main Pvt";
throwWarning: tr("Highway name contains postfix Pvt, should likely be expanded to Private");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Private");
}

*["name"=~/ Qdrt$/].highway_name {
assertNoMatch: "way \"name\"=Main Quadrant";
assertMatch: "way \"name\"=Main Qdrt";
throwWarning: tr("Highway name contains postfix Qdrt, should likely be expanded to Quadrant");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Quadrant");
}

*["name"=~/ Qtrs$/].highway_name {
assertNoMatch: "way \"name\"=Main Quarters";
assertMatch: "way \"name\"=Main Qtrs";
throwWarning: tr("Highway name contains postfix Qtrs, should likely be expanded to Quarters");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Quarters");
}

*["name"=~/ Qy$/].highway_name {
assertNoMatch: "way \"name\"=Main Quay";
assertMatch: "way \"name\"=Main Qy";
throwWarning: tr("Highway name contains postfix Qy, should likely be expanded to Quay");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Quay");
}

*["name"=~/ Qys$/].highway_name {
assertNoMatch: "way \"name\"=Main Quays";
assertMatch: "way \"name\"=Main Qys";
throwWarning: tr("Highway name contains postfix Qys, should likely be expanded to Quays");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Quays");
}

*["name"=~/ Rd$/].highway_name {
assertNoMatch: "way \"name\"=Main Road";
assertMatch: "way \"name\"=Main Rd";
throwWarning: tr("Highway name contains postfix Rd, should likely be expanded to Road");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Road");
}

*["name"=~/ Rds$/].highway_name {
assertNoMatch: "way \"name\"=Main Roads";
assertMatch: "way \"name\"=Main Rds";
throwWarning: tr("Highway name contains postfix Rds, should likely be expanded to Roads");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Roads");
}

*["name"=~/ Rdg$/].highway_name {
assertNoMatch: "way \"name\"=Main Ridge";
assertMatch: "way \"name\"=Main Rdg";
throwWarning: tr("Highway name contains postfix Rdg, should likely be expanded to Ridge");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Ridge");
}

*["name"=~/ Rdge$/].highway_name {
assertNoMatch: "way \"name\"=Main Ridge";
assertMatch: "way \"name\"=Main Rdge";
throwWarning: tr("Highway name contains postfix Rdge, should likely be expanded to Ridge");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Ridge");
}

*["name"=~/ Rdgs$/].highway_name {
assertNoMatch: "way \"name\"=Main Ridges";
assertMatch: "way \"name\"=Main Rdgs";
throwWarning: tr("Highway name contains postfix Rdgs, should likely be expanded to Ridges");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Ridges");
}

*["name"=~/ Rw$/].highway_name {
assertNoMatch: "way \"name\"=Main Row";
assertMatch: "way \"name\"=Main Rw";
throwWarning: tr("Highway name contains postfix Rw, should likely be expanded to Row");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Row");
}

*["name"=~/ Rmrd$/].highway_name {
assertNoMatch: "way \"name\"=Main Ranch to Market Road";
assertMatch: "way \"name\"=Main Rmrd";
throwWarning: tr("Highway name contains postfix Rmrd, should likely be expanded to Ranch to Market Road");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Ranch to Market Road");
}

*["name"=~/ Rt$/].highway_name {
assertNoMatch: "way \"name\"=Main Route";
assertMatch: "way \"name\"=Main Rt";
throwWarning: tr("Highway name contains postfix Rt, should likely be expanded to Route");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Route");
}

*["name"=~/ Rte$/].highway_name {
assertNoMatch: "way \"name\"=Main Route";
assertMatch: "way \"name\"=Main Rte";
throwWarning: tr("Highway name contains postfix Rte, should likely be expanded to Route");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Route");
}

*["name"=~/ Rty$/].highway_name {
assertNoMatch: "way \"name\"=Main Rotary";
assertMatch: "way \"name\"=Main Rty";
throwWarning: tr("Highway name contains postfix Rty, should likely be expanded to Rotary");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Rotary");
}

*["name"=~/ Shl$/].highway_name {
assertNoMatch: "way \"name\"=Main Shoal";
assertMatch: "way \"name\"=Main Shl";
throwWarning: tr("Highway name contains postfix Shl, should likely be expanded to Shoal");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Shoal");
}

*["name"=~/ Shls$/].highway_name {
assertNoMatch: "way \"name\"=Main Shoals";
assertMatch: "way \"name\"=Main Shls";
throwWarning: tr("Highway name contains postfix Shls, should likely be expanded to Shoals");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Shoals");
}

*["name"=~/ Shr$/].highway_name {
assertNoMatch: "way \"name\"=Main Shore";
assertMatch: "way \"name\"=Main Shr";
throwWarning: tr("Highway name contains postfix Shr, should likely be expanded to Shore");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Shore");
}

*["name"=~/ Shrs$/].highway_name {
assertNoMatch: "way \"name\"=Main Shores";
assertMatch: "way \"name\"=Main Shrs";
throwWarning: tr("Highway name contains postfix Shrs, should likely be expanded to Shores");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Shores");
}

*["name"=~/ Skwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Skyway";
assertMatch: "way \"name\"=Main Skwy";
throwWarning: tr("Highway name contains postfix Skwy, should likely be expanded to Skyway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Skyway");
}

*["name"=~/ Smt$/].highway_name {
assertNoMatch: "way \"name\"=Main Summit";
assertMatch: "way \"name\"=Main Smt";
throwWarning: tr("Highway name contains postfix Smt, should likely be expanded to Summit");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Summit");
}

*["name"=~/ Spg$/].highway_name {
assertNoMatch: "way \"name\"=Main Spring";
assertMatch: "way \"name\"=Main Spg";
throwWarning: tr("Highway name contains postfix Spg, should likely be expanded to Spring");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Spring");
}

*["name"=~/ Spgs$/].highway_name {
assertNoMatch: "way \"name\"=Main Springs";
assertMatch: "way \"name\"=Main Spgs";
throwWarning: tr("Highway name contains postfix Spgs, should likely be expanded to Springs");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Springs");
}

*["name"=~/ Sq$/].highway_name {
assertNoMatch: "way \"name\"=Main Square";
assertMatch: "way \"name\"=Main Sq";
throwWarning: tr("Highway name contains postfix Sq, should likely be expanded to Square");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Square");
}

*["name"=~/ Sqs$/].highway_name {
assertNoMatch: "way \"name\"=Main Squares";
assertMatch: "way \"name\"=Main Sqs";
throwWarning: tr("Highway name contains postfix Sqs, should likely be expanded to Squares");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Squares");
}

*["name"=~/ Srvc$/].highway_name {
assertNoMatch: "way \"name\"=Main Service";
assertMatch: "way \"name\"=Main Srvc";
throwWarning: tr("Highway name contains postfix Srvc, should likely be expanded to Service");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Service");
}

*["name"=~/ St$/].highway_name {
assertNoMatch: "way \"name\"=Main Street";
assertMatch: "way \"name\"=Main St";
throwWarning: tr("Highway name contains postfix St, should likely be expanded to Street");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Street");
}

*["name"=~/ Tce$/].highway_name {
assertNoMatch: "way \"name\"=Main Terrace";
assertMatch: "way \"name\"=Main Tce";
throwWarning: tr("Highway name contains postfix Tce, should likely be expanded to Terrace");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Terrace");
}

*["name"=~/ Ter$/].highway_name {
assertNoMatch: "way \"name\"=Main Terrace";
assertMatch: "way \"name\"=Main Ter";
throwWarning: tr("Highway name contains postfix Ter, should likely be expanded to Terrace");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Terrace");
}

*["name"=~/ Tfwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Trafficway";
assertMatch: "way \"name\"=Main Tfwy";
throwWarning: tr("Highway name contains postfix Tfwy, should likely be expanded to Trafficway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Trafficway");
}

*["name"=~/ Thfr$/].highway_name {
assertNoMatch: "way \"name\"=Main Thoroughfare";
assertMatch: "way \"name\"=Main Thfr";
throwWarning: tr("Highway name contains postfix Thfr, should likely be expanded to Thoroughfare");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Thoroughfare");
}

*["name"=~/ Thwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Throughway";
assertMatch: "way \"name\"=Main Thwy";
throwWarning: tr("Highway name contains postfix Thwy, should likely be expanded to Throughway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Throughway");
}

*["name"=~/ Tl$/].highway_name {
assertNoMatch: "way \"name\"=Main Trail";
assertMatch: "way \"name\"=Main Tl";
throwWarning: tr("Highway name contains postfix Tl, should likely be expanded to Trail");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Trail");
}

*["name"=~/ Tlwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Tollway";
assertMatch: "way \"name\"=Main Tlwy";
throwWarning: tr("Highway name contains postfix Tlwy, should likely be expanded to Tollway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Tollway");
}

*["name"=~/ Tpke$/].highway_name {
assertNoMatch: "way \"name\"=Main Turnpike";
assertMatch: "way \"name\"=Main Tpke";
throwWarning: tr("Highway name contains postfix Tpke, should likely be expanded to Turnpike");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Turnpike");
}

*["name"=~/ Trce$/].highway_name {
assertNoMatch: "way \"name\"=Main Trace";
assertMatch: "way \"name\"=Main Trce";
throwWarning: tr("Highway name contains postfix Trce, should likely be expanded to Trace");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Trace");
}

*["name"=~/ Tr$/].highway_name {
assertNoMatch: "way \"name\"=Main Trail";
assertMatch: "way \"name\"=Main Tr";
throwWarning: tr("Highway name contains postfix Tr, should likely be expanded to Trail");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Trail");
}

*["name"=~/ Trk$/].highway_name {
assertNoMatch: "way \"name\"=Main Track";
assertMatch: "way \"name\"=Main Trk";
throwWarning: tr("Highway name contains postfix Trk, should likely be expanded to Track");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Track");
}

*["name"=~/ Trl$/].highway_name {
assertNoMatch: "way \"name\"=Main Trail";
assertMatch: "way \"name\"=Main Trl";
throwWarning: tr("Highway name contains postfix Trl, should likely be expanded to Trail");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Trail");
}

*["name"=~/ Tunl$/].highway_name {
assertNoMatch: "way \"name\"=Main Tunnel";
assertMatch: "way \"name\"=Main Tunl";
throwWarning: tr("Highway name contains postfix Tunl, should likely be expanded to Tunnel");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Tunnel");
}

*["name"=~/ Unp$/].highway_name {
assertNoMatch: "way \"name\"=Main Underpass";
assertMatch: "way \"name\"=Main Unp";
throwWarning: tr("Highway name contains postfix Unp, should likely be expanded to Underpass");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Underpass");
}

*["name"=~/ Vl$/].highway_name {
assertNoMatch: "way \"name\"=Main Villa";
assertMatch: "way \"name\"=Main Vl";
throwWarning: tr("Highway name contains postfix Vl, should likely be expanded to Villa");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Villa");
}

*["name"=~/ Vlg$/].highway_name {
assertNoMatch: "way \"name\"=Main Village";
assertMatch: "way \"name\"=Main Vlg";
throwWarning: tr("Highway name contains postfix Vlg, should likely be expanded to Village");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Village");
}

*["name"=~/ Vlgs$/].highway_name {
assertNoMatch: "way \"name\"=Main Villages";
assertMatch: "way \"name\"=Main Vlgs";
throwWarning: tr("Highway name contains postfix Vlgs, should likely be expanded to Villages");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Villages");
}

*["name"=~/ Vly$/].highway_name {
assertNoMatch: "way \"name\"=Main Valley";
assertMatch: "way \"name\"=Main Vly";
throwWarning: tr("Highway name contains postfix Vly, should likely be expanded to Valley");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Valley");
}

*["name"=~/ Vw$/].highway_name {
assertNoMatch: "way \"name\"=Main View";
assertMatch: "way \"name\"=Main Vw";
throwWarning: tr("Highway name contains postfix Vw, should likely be expanded to View");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "View");
}

*["name"=~/ Wd$/].highway_name {
assertNoMatch: "way \"name\"=Main Wood";
assertMatch: "way \"name\"=Main Wd";
throwWarning: tr("Highway name contains postfix Wd, should likely be expanded to Wood");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Wood");
}

*["name"=~/ Whrf$/].highway_name {
assertNoMatch: "way \"name\"=Main Wharf";
assertMatch: "way \"name\"=Main Whrf";
throwWarning: tr("Highway name contains postfix Whrf, should likely be expanded to Wharf");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Wharf");
}

*["name"=~/ Wkwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Walkway";
assertMatch: "way \"name\"=Main Wkwy";
throwWarning: tr("Highway name contains postfix Wkwy, should likely be expanded to Walkway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Walkway");
}

*["name"=~/ Wlk$/].highway_name {
assertNoMatch: "way \"name\"=Main Walk";
assertMatch: "way \"name\"=Main Wlk";
throwWarning: tr("Highway name contains postfix Wlk, should likely be expanded to Walk");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Walk");
}

*["name"=~/ Wy$/].highway_name {
assertNoMatch: "way \"name\"=Main Way";
assertMatch: "way \"name\"=Main Wy";
throwWarning: tr("Highway name contains postfix Wy, should likely be expanded to Way");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Way");
}

*["name"=~/ Xing$/].highway_name {
assertNoMatch: "way \"name\"=Main Crossing";
assertMatch: "way \"name\"=Main Xing";
throwWarning: tr("Highway name contains postfix Xing, should likely be expanded to Crossing");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Crossing");
}

*["addr:street"]["addr:street"=~/ Acc\.$/] {
assertNoMatch: "way \"addr:street\"=Main Access";
assertMatch: "way \"addr:street\"=Main Acc.";
throwWarning: tr("addr:street={0} contains prefix Acc., should likely be expanded to Access","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Access");
group: tr("addr:street contains postfix Acc, should likely be expanded to Access");
}

*["addr:street"]["addr:street"=~/ Aly\.$/] {
assertNoMatch: "way \"addr:street\"=Main Alley";
assertMatch: "way \"addr:street\"=Main Aly.";
throwWarning: tr("addr:street={0} contains prefix Aly., should likely be expanded to Alley","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Alley");
group: tr("addr:street contains postfix Aly, should likely be expanded to Alley");
}

*["addr:street"]["addr:street"=~/ Ambl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Amble";
assertMatch: "way \"addr:street\"=Main Ambl.";
throwWarning: tr("addr:street={0} contains prefix Ambl., should likely be expanded to Amble","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Amble");
group: tr("addr:street contains postfix Ambl, should likely be expanded to Amble");
}

*["addr:street"]["addr:street"=~/ App\.$/] {
assertNoMatch: "way \"addr:street\"=Main Approach";
assertMatch: "way \"addr:street\"=Main App.";
throwWarning: tr("addr:street={0} contains prefix App., should likely be expanded to Approach","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Approach");
group: tr("addr:street contains postfix App, should likely be expanded to Approach");
}

*["addr:street"]["addr:street"=~/ Arc\.$/] {
assertNoMatch: "way \"addr:street\"=Main Arcade";
assertMatch: "way \"addr:street\"=Main Arc.";
throwWarning: tr("addr:street={0} contains prefix Arc., should likely be expanded to Arcade","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Arcade");
group: tr("addr:street contains postfix Arc, should likely be expanded to Arcade");
}

*["addr:street"]["addr:street"=~/ Artl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Arterial";
assertMatch: "way \"addr:street\"=Main Artl.";
throwWarning: tr("addr:street={0} contains prefix Artl., should likely be expanded to Arterial","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Arterial");
group: tr("addr:street contains postfix Artl, should likely be expanded to Arterial");
}

*["addr:street"]["addr:street"=~/ Arty\.$/] {
assertNoMatch: "way \"addr:street\"=Main Artery";
assertMatch: "way \"addr:street\"=Main Arty.";
throwWarning: tr("addr:street={0} contains prefix Arty., should likely be expanded to Artery","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Artery");
group: tr("addr:street contains postfix Arty, should likely be expanded to Artery");
}

*["addr:street"]["addr:street"=~/ Av\.$/] {
assertNoMatch: "way \"addr:street\"=Main Avenue";
assertMatch: "way \"addr:street\"=Main Av.";
throwWarning: tr("addr:street={0} contains prefix Av., should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Avenue");
group: tr("addr:street contains postfix Av, should likely be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/ Ave\.$/] {
assertNoMatch: "way \"addr:street\"=Main Avenue";
assertMatch: "way \"addr:street\"=Main Ave.";
throwWarning: tr("addr:street={0} contains prefix Ave., should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Avenue");
group: tr("addr:street contains postfix Ave, should likely be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/ Bch\.$/] {
assertNoMatch: "way \"addr:street\"=Main Beach";
assertMatch: "way \"addr:street\"=Main Bch.";
throwWarning: tr("addr:street={0} contains prefix Bch., should likely be expanded to Beach","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Beach");
group: tr("addr:street contains postfix Bch, should likely be expanded to Beach");
}

*["addr:street"]["addr:street"=~/ Bg\.$/] {
assertNoMatch: "way \"addr:street\"=Main Burg";
assertMatch: "way \"addr:street\"=Main Bg.";
throwWarning: tr("addr:street={0} contains prefix Bg., should likely be expanded to Burg","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Burg");
group: tr("addr:street contains postfix Bg, should likely be expanded to Burg");
}

*["addr:street"]["addr:street"=~/ Bgs\.$/] {
assertNoMatch: "way \"addr:street\"=Main Burgs";
assertMatch: "way \"addr:street\"=Main Bgs.";
throwWarning: tr("addr:street={0} contains prefix Bgs., should likely be expanded to Burgs","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Burgs");
group: tr("addr:street contains postfix Bgs, should likely be expanded to Burgs");
}

*["addr:street"]["addr:street"=~/ Blf\.$/] {
assertNoMatch: "way \"addr:street\"=Main Bluff";
assertMatch: "way \"addr:street\"=Main Blf.";
throwWarning: tr("addr:street={0} contains prefix Blf., should likely be expanded to Bluff","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Bluff");
group: tr("addr:street contains postfix Blf, should likely be expanded to Bluff");
}

*["addr:street"]["addr:street"=~/ Blk\.$/] {
assertNoMatch: "way \"addr:street\"=Main Block";
assertMatch: "way \"addr:street\"=Main Blk.";
throwWarning: tr("addr:street={0} contains prefix Blk., should likely be expanded to Block","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Block");
group: tr("addr:street contains postfix Blk, should likely be expanded to Block");
}

*["addr:street"]["addr:street"=~/ Blv\.$/] {
assertNoMatch: "way \"addr:street\"=Main Boulevard";
assertMatch: "way \"addr:street\"=Main Blv.";
throwWarning: tr("addr:street={0} contains prefix Blv., should likely be expanded to Boulevard","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Boulevard");
group: tr("addr:street contains postfix Blv, should likely be expanded to Boulevard");
}

*["addr:street"]["addr:street"=~/ Blvd\.$/] {
assertNoMatch: "way \"addr:street\"=Main Boulevard";
assertMatch: "way \"addr:street\"=Main Blvd.";
throwWarning: tr("addr:street={0} contains prefix Blvd., should likely be expanded to Boulevard","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Boulevard");
group: tr("addr:street contains postfix Blvd, should likely be expanded to Boulevard");
}

*["addr:street"]["addr:street"=~/ Bnd\.$/] {
assertNoMatch: "way \"addr:street\"=Main Bend";
assertMatch: "way \"addr:street\"=Main Bnd.";
throwWarning: tr("addr:street={0} contains prefix Bnd., should likely be expanded to Bend","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Bend");
group: tr("addr:street contains postfix Bnd, should likely be expanded to Bend");
}

*["addr:street"]["addr:street"=~/ Br\.$/] {
assertNoMatch: "way \"addr:street\"=Main Bridge";
assertMatch: "way \"addr:street\"=Main Br.";
throwWarning: tr("addr:street={0} contains prefix Br., should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Bridge");
group: tr("addr:street contains postfix Br, should likely be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/ Brg\.$/] {
assertNoMatch: "way \"addr:street\"=Main Bridge";
assertMatch: "way \"addr:street\"=Main Brg.";
throwWarning: tr("addr:street={0} contains prefix Brg., should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Bridge");
group: tr("addr:street contains postfix Brg, should likely be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/ Btm\.$/] {
assertNoMatch: "way \"addr:street\"=Main Bottom";
assertMatch: "way \"addr:street\"=Main Btm.";
throwWarning: tr("addr:street={0} contains prefix Btm., should likely be expanded to Bottom","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Bottom");
group: tr("addr:street contains postfix Btm, should likely be expanded to Bottom");
}

*["addr:street"]["addr:street"=~/ Bwlk\.$/] {
assertNoMatch: "way \"addr:street\"=Main Boardwalk";
assertMatch: "way \"addr:street\"=Main Bwlk.";
throwWarning: tr("addr:street={0} contains prefix Bwlk., should likely be expanded to Boardwalk","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Boardwalk");
group: tr("addr:street contains postfix Bwlk, should likely be expanded to Boardwalk");
}

*["addr:street"]["addr:street"=~/ Byp\.$/] {
assertNoMatch: "way \"addr:street\"=Main Bypass";
assertMatch: "way \"addr:street\"=Main Byp.";
throwWarning: tr("addr:street={0} contains prefix Byp., should likely be expanded to Bypass","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Bypass");
group: tr("addr:street contains postfix Byp, should likely be expanded to Bypass");
}

*["addr:street"]["addr:street"=~/ Bypa\.$/] {
assertNoMatch: "way \"addr:street\"=Main Bypass";
assertMatch: "way \"addr:street\"=Main Bypa.";
throwWarning: tr("addr:street={0} contains prefix Bypa., should likely be expanded to Bypass","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Bypass");
group: tr("addr:street contains postfix Bypa, should likely be expanded to Bypass");
}

*["addr:street"]["addr:street"=~/ Byu\.$/] {
assertNoMatch: "way \"addr:street\"=Main Byou";
assertMatch: "way \"addr:street\"=Main Byu.";
throwWarning: tr("addr:street={0} contains prefix Byu., should likely be expanded to Byou","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Byou");
group: tr("addr:street contains postfix Byu, should likely be expanded to Byou");
}

*["addr:street"]["addr:street"=~/ Bywy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Byway";
assertMatch: "way \"addr:street\"=Main Bywy.";
throwWarning: tr("addr:street={0} contains prefix Bywy., should likely be expanded to Byway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Byway");
group: tr("addr:street contains postfix Bywy, should likely be expanded to Byway");
}

*["addr:street"]["addr:street"=~/ Bzr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Bazaar";
assertMatch: "way \"addr:street\"=Main Bzr.";
throwWarning: tr("addr:street={0} contains prefix Bzr., should likely be expanded to Bazaar","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Bazaar");
group: tr("addr:street contains postfix Bzr, should likely be expanded to Bazaar");
}

*["addr:street"]["addr:street"=~/ Cct\.$/] {
assertNoMatch: "way \"addr:street\"=Main Circuit";
assertMatch: "way \"addr:street\"=Main Cct.";
throwWarning: tr("addr:street={0} contains prefix Cct., should likely be expanded to Circuit","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Circuit");
group: tr("addr:street contains postfix Cct, should likely be expanded to Circuit");
}

*["addr:street"]["addr:street"=~/ Ch\.$/] {
assertNoMatch: "way \"addr:street\"=Main Chase";
assertMatch: "way \"addr:street\"=Main Ch.";
throwWarning: tr("addr:street={0} contains prefix Ch., should likely be expanded to Chase","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Chase");
group: tr("addr:street contains postfix Ch, should likely be expanded to Chase");
}

*["addr:street"]["addr:street"=~/ Cir\.$/] {
assertNoMatch: "way \"addr:street\"=Main Circle";
assertMatch: "way \"addr:street\"=Main Cir.";
throwWarning: tr("addr:street={0} contains prefix Cir., should likely be expanded to Circle","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Circle");
group: tr("addr:street contains postfix Cir, should likely be expanded to Circle");
}

*["addr:street"]["addr:street"=~/ Cirs\.$/] {
assertNoMatch: "way \"addr:street\"=Main Circles";
assertMatch: "way \"addr:street\"=Main Cirs.";
throwWarning: tr("addr:street={0} contains prefix Cirs., should likely be expanded to Circles","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Circles");
group: tr("addr:street contains postfix Cirs, should likely be expanded to Circles");
}

*["addr:street"]["addr:street"=~/ Clf\.$/] {
assertNoMatch: "way \"addr:street\"=Main Cliff";
assertMatch: "way \"addr:street\"=Main Clf.";
throwWarning: tr("addr:street={0} contains prefix Clf., should likely be expanded to Cliff","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Cliff");
group: tr("addr:street contains postfix Clf, should likely be expanded to Cliff");
}

*["addr:street"]["addr:street"=~/ Clfs\.$/] {
assertNoMatch: "way \"addr:street\"=Main Cliffs";
assertMatch: "way \"addr:street\"=Main Clfs.";
throwWarning: tr("addr:street={0} contains prefix Clfs., should likely be expanded to Cliffs","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Cliffs");
group: tr("addr:street contains postfix Clfs, should likely be expanded to Cliffs");
}

*["addr:street"]["addr:street"=~/ Cly\.$/] {
assertNoMatch: "way \"addr:street\"=Main Colony";
assertMatch: "way \"addr:street\"=Main Cly.";
throwWarning: tr("addr:street={0} contains prefix Cly., should likely be expanded to Colony","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Colony");
group: tr("addr:street contains postfix Cly, should likely be expanded to Colony");
}

*["addr:street"]["addr:street"=~/ Cmn\.$/] {
assertNoMatch: "way \"addr:street\"=Main Common";
assertMatch: "way \"addr:street\"=Main Cmn.";
throwWarning: tr("addr:street={0} contains prefix Cmn., should likely be expanded to Common","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Common");
group: tr("addr:street contains postfix Cmn, should likely be expanded to Common");
}

*["addr:street"]["addr:street"=~/ Cnl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Canal";
assertMatch: "way \"addr:street\"=Main Cnl.";
throwWarning: tr("addr:street={0} contains prefix Cnl., should likely be expanded to Canal","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Canal");
group: tr("addr:street contains postfix Cnl, should likely be expanded to Canal");
}

*["addr:street"]["addr:street"=~/ Cnr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Corner";
assertMatch: "way \"addr:street\"=Main Cnr.";
throwWarning: tr("addr:street={0} contains prefix Cnr., should likely be expanded to Corner","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Corner");
group: tr("addr:street contains postfix Cnr, should likely be expanded to Corner");
}

*["addr:street"]["addr:street"=~/ Coll\.$/] {
assertNoMatch: "way \"addr:street\"=Main College";
assertMatch: "way \"addr:street\"=Main Coll.";
throwWarning: tr("addr:street={0} contains prefix Coll., should likely be expanded to College","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "College");
group: tr("addr:street contains postfix Coll, should likely be expanded to College");
}

*["addr:street"]["addr:street"=~/ Cpe\.$/] {
assertNoMatch: "way \"addr:street\"=Main Cape";
assertMatch: "way \"addr:street\"=Main Cpe.";
throwWarning: tr("addr:street={0} contains prefix Cpe., should likely be expanded to Cape","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Cape");
group: tr("addr:street contains postfix Cpe, should likely be expanded to Cape");
}

*["addr:street"]["addr:street"=~/ Cr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Creek";
assertMatch: "way \"addr:street\"=Main Cr.";
throwWarning: tr("addr:street={0} contains prefix Cr., should likely be expanded to Creek","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Creek");
group: tr("addr:street contains postfix Cr, should likely be expanded to Creek");
}

*["addr:street"]["addr:street"=~/ Crk\.$/] {
assertNoMatch: "way \"addr:street\"=Main Creek";
assertMatch: "way \"addr:street\"=Main Crk.";
throwWarning: tr("addr:street={0} contains prefix Crk., should likely be expanded to Creek","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Creek");
group: tr("addr:street contains postfix Crk, should likely be expanded to Creek");
}

*["addr:street"]["addr:street"=~/ Cres\.$/] {
assertNoMatch: "way \"addr:street\"=Main Crescent";
assertMatch: "way \"addr:street\"=Main Cres.";
throwWarning: tr("addr:street={0} contains prefix Cres., should likely be expanded to Crescent","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Crescent");
group: tr("addr:street contains postfix Cres, should likely be expanded to Crescent");
}

*["addr:street"]["addr:street"=~/ Crst\.$/] {
assertNoMatch: "way \"addr:street\"=Main Crest";
assertMatch: "way \"addr:street\"=Main Crst.";
throwWarning: tr("addr:street={0} contains prefix Crst., should likely be expanded to Crest","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Crest");
group: tr("addr:street contains postfix Crst, should likely be expanded to Crest");
}

*["addr:street"]["addr:street"=~/ Cswy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Causeway";
assertMatch: "way \"addr:street\"=Main Cswy.";
throwWarning: tr("addr:street={0} contains prefix Cswy., should likely be expanded to Causeway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Causeway");
group: tr("addr:street contains postfix Cswy, should likely be expanded to Causeway");
}

*["addr:street"]["addr:street"=~/ Ct\.$/] {
assertNoMatch: "way \"addr:street\"=Main Court";
assertMatch: "way \"addr:street\"=Main Ct.";
throwWarning: tr("addr:street={0} contains prefix Ct., should likely be expanded to Court","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Court");
group: tr("addr:street contains postfix Ct, should likely be expanded to Court");
}

*["addr:street"]["addr:street"=~/ Ctr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Center";
assertMatch: "way \"addr:street\"=Main Ctr.";
throwWarning: tr("addr:street={0} contains prefix Ctr., should likely be expanded to Center","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Center");
group: tr("addr:street contains postfix Ctr, should likely be expanded to Center");
}

*["addr:street"]["addr:street"=~/ Cts\.$/] {
assertNoMatch: "way \"addr:street\"=Main Courts";
assertMatch: "way \"addr:street\"=Main Cts.";
throwWarning: tr("addr:street={0} contains prefix Cts., should likely be expanded to Courts","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Courts");
group: tr("addr:street contains postfix Cts, should likely be expanded to Courts");
}

*["addr:street"]["addr:street"=~/ Ctyd\.$/] {
assertNoMatch: "way \"addr:street\"=Main Courtyard";
assertMatch: "way \"addr:street\"=Main Ctyd.";
throwWarning: tr("addr:street={0} contains prefix Ctyd., should likely be expanded to Courtyard","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Courtyard");
group: tr("addr:street contains postfix Ctyd, should likely be expanded to Courtyard");
}

*["addr:street"]["addr:street"=~/ Curv\.$/] {
assertNoMatch: "way \"addr:street\"=Main Curve";
assertMatch: "way \"addr:street\"=Main Curv.";
throwWarning: tr("addr:street={0} contains prefix Curv., should likely be expanded to Curve","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Curve");
group: tr("addr:street contains postfix Curv, should likely be expanded to Curve");
}

*["addr:street"]["addr:street"=~/ Cutt\.$/] {
assertNoMatch: "way \"addr:street\"=Main Cutting";
assertMatch: "way \"addr:street\"=Main Cutt.";
throwWarning: tr("addr:street={0} contains prefix Cutt., should likely be expanded to Cutting","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Cutting");
group: tr("addr:street contains postfix Cutt, should likely be expanded to Cutting");
}

*["addr:street"]["addr:street"=~/ Cv\.$/] {
assertNoMatch: "way \"addr:street\"=Main Cove";
assertMatch: "way \"addr:street\"=Main Cv.";
throwWarning: tr("addr:street={0} contains prefix Cv., should likely be expanded to Cove","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Cove");
group: tr("addr:street contains postfix Cv, should likely be expanded to Cove");
}

*["addr:street"]["addr:street"=~/ Cyn\.$/] {
assertNoMatch: "way \"addr:street\"=Main Canyon";
assertMatch: "way \"addr:street\"=Main Cyn.";
throwWarning: tr("addr:street={0} contains prefix Cyn., should likely be expanded to Canyon","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Canyon");
group: tr("addr:street contains postfix Cyn, should likely be expanded to Canyon");
}

*["addr:street"]["addr:street"=~/ Dl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Dale";
assertMatch: "way \"addr:street\"=Main Dl.";
throwWarning: tr("addr:street={0} contains prefix Dl., should likely be expanded to Dale","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Dale");
group: tr("addr:street contains postfix Dl, should likely be expanded to Dale");
}

*["addr:street"]["addr:street"=~/ Dr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Drive";
assertMatch: "way \"addr:street\"=Main Dr.";
throwWarning: tr("addr:street={0} contains prefix Dr., should likely be expanded to Drive","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Drive");
group: tr("addr:street contains postfix Dr, should likely be expanded to Drive");
}

*["addr:street"]["addr:street"=~/ Dv\.$/] {
assertNoMatch: "way \"addr:street\"=Main Drive";
assertMatch: "way \"addr:street\"=Main Dv.";
throwWarning: tr("addr:street={0} contains prefix Dv., should likely be expanded to Drive","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Drive");
group: tr("addr:street contains postfix Dv, should likely be expanded to Drive");
}

*["addr:street"]["addr:street"=~/ Dvwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Driveway";
assertMatch: "way \"addr:street\"=Main Dvwy.";
throwWarning: tr("addr:street={0} contains prefix Dvwy., should likely be expanded to Driveway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Driveway");
group: tr("addr:street contains postfix Dvwy, should likely be expanded to Driveway");
}

*["addr:street"]["addr:street"=~/ Elb\.$/] {
assertNoMatch: "way \"addr:street\"=Main Elbow";
assertMatch: "way \"addr:street\"=Main Elb.";
throwWarning: tr("addr:street={0} contains prefix Elb., should likely be expanded to Elbow","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Elbow");
group: tr("addr:street contains postfix Elb, should likely be expanded to Elbow");
}

*["addr:street"]["addr:street"=~/ Est\.$/] {
assertNoMatch: "way \"addr:street\"=Main Estate";
assertMatch: "way \"addr:street\"=Main Est.";
throwWarning: tr("addr:street={0} contains prefix Est., should likely be expanded to Estate","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Estate");
group: tr("addr:street contains postfix Est, should likely be expanded to Estate");
}

*["addr:street"]["addr:street"=~/ Ests\.$/] {
assertNoMatch: "way \"addr:street\"=Main Estates";
assertMatch: "way \"addr:street\"=Main Ests.";
throwWarning: tr("addr:street={0} contains prefix Ests., should likely be expanded to Estates","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Estates");
group: tr("addr:street contains postfix Ests, should likely be expanded to Estates");
}

*["addr:street"]["addr:street"=~/ Expy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Expressway";
assertMatch: "way \"addr:street\"=Main Expy.";
throwWarning: tr("addr:street={0} contains prefix Expy., should likely be expanded to Expressway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Expressway");
group: tr("addr:street contains postfix Expy, should likely be expanded to Expressway");
}

*["addr:street"]["addr:street"=~/ Expwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Expressway";
assertMatch: "way \"addr:street\"=Main Expwy.";
throwWarning: tr("addr:street={0} contains prefix Expwy., should likely be expanded to Expressway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-6), "Expressway");
group: tr("addr:street contains postfix Expwy, should likely be expanded to Expressway");
}

*["addr:street"]["addr:street"=~/ Fawy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Fairway";
assertMatch: "way \"addr:street\"=Main Fawy.";
throwWarning: tr("addr:street={0} contains prefix Fawy., should likely be expanded to Fairway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Fairway");
group: tr("addr:street contains postfix Fawy, should likely be expanded to Fairway");
}

*["addr:street"]["addr:street"=~/ Fld\.$/] {
assertNoMatch: "way \"addr:street\"=Main Field";
assertMatch: "way \"addr:street\"=Main Fld.";
throwWarning: tr("addr:street={0} contains prefix Fld., should likely be expanded to Field","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Field");
group: tr("addr:street contains postfix Fld, should likely be expanded to Field");
}

*["addr:street"]["addr:street"=~/ Flds\.$/] {
assertNoMatch: "way \"addr:street\"=Main Fields";
assertMatch: "way \"addr:street\"=Main Flds.";
throwWarning: tr("addr:street={0} contains prefix Flds., should likely be expanded to Fields","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Fields");
group: tr("addr:street contains postfix Flds, should likely be expanded to Fields");
}

*["addr:street"]["addr:street"=~/ Fmrd\.$/] {
assertNoMatch: "way \"addr:street\"=Main Farm to Market Road";
assertMatch: "way \"addr:street\"=Main Fmrd.";
throwWarning: tr("addr:street={0} contains prefix Fmrd., should likely be expanded to Farm to Market Road","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Farm to Market Road");
group: tr("addr:street contains postfix Fmrd, should likely be expanded to Farm to Market Road");
}

*["addr:street"]["addr:street"=~/ Ftrl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Firetrail";
assertMatch: "way \"addr:street\"=Main Ftrl.";
throwWarning: tr("addr:street={0} contains prefix Ftrl., should likely be expanded to Firetrail","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Firetrail");
group: tr("addr:street contains postfix Ftrl, should likely be expanded to Firetrail");
}

*["addr:street"]["addr:street"=~/ Frk\.$/] {
assertNoMatch: "way \"addr:street\"=Main Fork";
assertMatch: "way \"addr:street\"=Main Frk.";
throwWarning: tr("addr:street={0} contains prefix Frk., should likely be expanded to Fork","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Fork");
group: tr("addr:street contains postfix Frk, should likely be expanded to Fork");
}

*["addr:street"]["addr:street"=~/ Fry\.$/] {
assertNoMatch: "way \"addr:street\"=Main Ferry";
assertMatch: "way \"addr:street\"=Main Fry.";
throwWarning: tr("addr:street={0} contains prefix Fry., should likely be expanded to Ferry","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Ferry");
group: tr("addr:street contains postfix Fry, should likely be expanded to Ferry");
}

*["addr:street"]["addr:street"=~/ Fwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Freeway";
assertMatch: "way \"addr:street\"=Main Fwy.";
throwWarning: tr("addr:street={0} contains prefix Fwy., should likely be expanded to Freeway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Freeway");
group: tr("addr:street contains postfix Fwy, should likely be expanded to Freeway");
}

*["addr:street"]["addr:street"=~/ Gd\.$/] {
assertNoMatch: "way \"addr:street\"=Main Grade";
assertMatch: "way \"addr:street\"=Main Gd.";
throwWarning: tr("addr:street={0} contains prefix Gd., should likely be expanded to Grade","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Grade");
group: tr("addr:street contains postfix Gd, should likely be expanded to Grade");
}

*["addr:street"]["addr:street"=~/ Gdns\.$/] {
assertNoMatch: "way \"addr:street\"=Main Gardens";
assertMatch: "way \"addr:street\"=Main Gdns.";
throwWarning: tr("addr:street={0} contains prefix Gdns., should likely be expanded to Gardens","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Gardens");
group: tr("addr:street contains postfix Gdns, should likely be expanded to Gardens");
}

*["addr:street"]["addr:street"=~/ Gr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Grove";
assertMatch: "way \"addr:street\"=Main Gr.";
throwWarning: tr("addr:street={0} contains prefix Gr., should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Grove");
group: tr("addr:street contains postfix Gr, should likely be expanded to Grove");
}

*["addr:street"]["addr:street"=~/ Gro\.$/] {
assertNoMatch: "way \"addr:street\"=Main Grove";
assertMatch: "way \"addr:street\"=Main Gro.";
throwWarning: tr("addr:street={0} contains prefix Gro., should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Grove");
group: tr("addr:street contains postfix Gro, should likely be expanded to Grove");
}

*["addr:street"]["addr:street"=~/ Grv\.$/] {
assertNoMatch: "way \"addr:street\"=Main Grove";
assertMatch: "way \"addr:street\"=Main Grv.";
throwWarning: tr("addr:street={0} contains prefix Grv., should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Grove");
group: tr("addr:street contains postfix Grv, should likely be expanded to Grove");
}

*["addr:street"]["addr:street"=~/ Hbr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Harbor";
assertMatch: "way \"addr:street\"=Main Hbr.";
throwWarning: tr("addr:street={0} contains prefix Hbr., should likely be expanded to Harbor","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Harbor");
group: tr("addr:street contains postfix Hbr, should likely be expanded to Harbor");
}

*["addr:street"]["addr:street"=~/ Hl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Hill";
assertMatch: "way \"addr:street\"=Main Hl.";
throwWarning: tr("addr:street={0} contains prefix Hl., should likely be expanded to Hill","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Hill");
group: tr("addr:street contains postfix Hl, should likely be expanded to Hill");
}

*["addr:street"]["addr:street"=~/ Hls\.$/] {
assertNoMatch: "way \"addr:street\"=Main Hills";
assertMatch: "way \"addr:street\"=Main Hls.";
throwWarning: tr("addr:street={0} contains prefix Hls., should likely be expanded to Hills","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Hills");
group: tr("addr:street contains postfix Hls, should likely be expanded to Hills");
}

*["addr:street"]["addr:street"=~/ Holw\.$/] {
assertNoMatch: "way \"addr:street\"=Main Hollow";
assertMatch: "way \"addr:street\"=Main Holw.";
throwWarning: tr("addr:street={0} contains prefix Holw., should likely be expanded to Hollow","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Hollow");
group: tr("addr:street contains postfix Holw, should likely be expanded to Hollow");
}

*["addr:street"]["addr:street"=~/ Hts\.$/] {
assertNoMatch: "way \"addr:street\"=Main Heights";
assertMatch: "way \"addr:street\"=Main Hts.";
throwWarning: tr("addr:street={0} contains prefix Hts., should likely be expanded to Heights","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Heights");
group: tr("addr:street contains postfix Hts, should likely be expanded to Heights");
}

*["addr:street"]["addr:street"=~/ Hw\.$/] {
assertNoMatch: "way \"addr:street\"=Main Highway";
assertMatch: "way \"addr:street\"=Main Hw.";
throwWarning: tr("addr:street={0} contains prefix Hw., should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Highway");
group: tr("addr:street contains postfix Hw, should likely be expanded to Highway");
}

*["addr:street"]["addr:street"=~/ Hwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Highway";
assertMatch: "way \"addr:street\"=Main Hwy.";
throwWarning: tr("addr:street={0} contains prefix Hwy., should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Highway");
group: tr("addr:street contains postfix Hwy, should likely be expanded to Highway");
}

*["addr:street"]["addr:street"=~/ Hvn\.$/] {
assertNoMatch: "way \"addr:street\"=Main Haven";
assertMatch: "way \"addr:street\"=Main Hvn.";
throwWarning: tr("addr:street={0} contains prefix Hvn., should likely be expanded to Haven","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Haven");
group: tr("addr:street contains postfix Hvn, should likely be expanded to Haven");
}

*["addr:street"]["addr:street"=~/ Intg\.$/] {
assertNoMatch: "way \"addr:street\"=Main Interchange";
assertMatch: "way \"addr:street\"=Main Intg.";
throwWarning: tr("addr:street={0} contains prefix Intg., should likely be expanded to Interchange","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Interchange");
group: tr("addr:street contains postfix Intg, should likely be expanded to Interchange");
}

*["addr:street"]["addr:street"=~/ Iss\.$/] {
assertNoMatch: "way \"addr:street\"=Main Islands";
assertMatch: "way \"addr:street\"=Main Iss.";
throwWarning: tr("addr:street={0} contains prefix Iss., should likely be expanded to Islands","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Islands");
group: tr("addr:street contains postfix Iss, should likely be expanded to Islands");
}

*["addr:street"]["addr:street"=~/ Jct\.$/] {
assertNoMatch: "way \"addr:street\"=Main Junction";
assertMatch: "way \"addr:street\"=Main Jct.";
throwWarning: tr("addr:street={0} contains prefix Jct., should likely be expanded to Junction","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Junction");
group: tr("addr:street contains postfix Jct, should likely be expanded to Junction");
}

*["addr:street"]["addr:street"=~/ Jn\.$/] {
assertNoMatch: "way \"addr:street\"=Main Junction";
assertMatch: "way \"addr:street\"=Main Jn.";
throwWarning: tr("addr:street={0} contains prefix Jn., should likely be expanded to Junction","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Junction");
group: tr("addr:street contains postfix Jn, should likely be expanded to Junction");
}

*["addr:street"]["addr:street"=~/ Jnc\.$/] {
assertNoMatch: "way \"addr:street\"=Main Junction";
assertMatch: "way \"addr:street\"=Main Jnc.";
throwWarning: tr("addr:street={0} contains prefix Jnc., should likely be expanded to Junction","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Junction");
group: tr("addr:street contains postfix Jnc, should likely be expanded to Junction");
}

*["addr:street"]["addr:street"=~/ Knl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Knoll";
assertMatch: "way \"addr:street\"=Main Knl.";
throwWarning: tr("addr:street={0} contains prefix Knl., should likely be expanded to Knoll","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Knoll");
group: tr("addr:street contains postfix Knl, should likely be expanded to Knoll");
}

*["addr:street"]["addr:street"=~/ Knls\.$/] {
assertNoMatch: "way \"addr:street\"=Main Knolls";
assertMatch: "way \"addr:street\"=Main Knls.";
throwWarning: tr("addr:street={0} contains prefix Knls., should likely be expanded to Knolls","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Knolls");
group: tr("addr:street contains postfix Knls, should likely be expanded to Knolls");
}

*["addr:street"]["addr:street"=~/ Ky\.$/] {
assertNoMatch: "way \"addr:street\"=Main Key";
assertMatch: "way \"addr:street\"=Main Ky.";
throwWarning: tr("addr:street={0} contains prefix Ky., should likely be expanded to Key","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Key");
group: tr("addr:street contains postfix Ky, should likely be expanded to Key");
}

*["addr:street"]["addr:street"=~/ Kys\.$/] {
assertNoMatch: "way \"addr:street\"=Main Keys";
assertMatch: "way \"addr:street\"=Main Kys.";
throwWarning: tr("addr:street={0} contains prefix Kys., should likely be expanded to Keys","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Keys");
group: tr("addr:street contains postfix Kys, should likely be expanded to Keys");
}

*["addr:street"]["addr:street"=~/ Lck\.$/] {
assertNoMatch: "way \"addr:street\"=Main Lock";
assertMatch: "way \"addr:street\"=Main Lck.";
throwWarning: tr("addr:street={0} contains prefix Lck., should likely be expanded to Lock","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Lock");
group: tr("addr:street contains postfix Lck, should likely be expanded to Lock");
}

*["addr:street"]["addr:street"=~/ Lcks\.$/] {
assertNoMatch: "way \"addr:street\"=Main Locks";
assertMatch: "way \"addr:street\"=Main Lcks.";
throwWarning: tr("addr:street={0} contains prefix Lcks., should likely be expanded to Locks","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Locks");
group: tr("addr:street contains postfix Lcks, should likely be expanded to Locks");
}

*["addr:street"]["addr:street"=~/ Ldg\.$/] {
assertNoMatch: "way \"addr:street\"=Main Lodge";
assertMatch: "way \"addr:street\"=Main Ldg.";
throwWarning: tr("addr:street={0} contains prefix Ldg., should likely be expanded to Lodge","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Lodge");
group: tr("addr:street contains postfix Ldg, should likely be expanded to Lodge");
}

*["addr:street"]["addr:street"=~/ Lk\.$/] {
assertNoMatch: "way \"addr:street\"=Main Lake";
assertMatch: "way \"addr:street\"=Main Lk.";
throwWarning: tr("addr:street={0} contains prefix Lk., should likely be expanded to Lake","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Lake");
group: tr("addr:street contains postfix Lk, should likely be expanded to Lake");
}

*["addr:street"]["addr:street"=~/ Lks\.$/] {
assertNoMatch: "way \"addr:street\"=Main Lakes";
assertMatch: "way \"addr:street\"=Main Lks.";
throwWarning: tr("addr:street={0} contains prefix Lks., should likely be expanded to Lakes","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Lakes");
group: tr("addr:street contains postfix Lks, should likely be expanded to Lakes");
}

*["addr:street"]["addr:street"=~/ Lkt\.$/] {
assertNoMatch: "way \"addr:street\"=Main Lookout";
assertMatch: "way \"addr:street\"=Main Lkt.";
throwWarning: tr("addr:street={0} contains prefix Lkt., should likely be expanded to Lookout","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Lookout");
group: tr("addr:street contains postfix Lkt, should likely be expanded to Lookout");
}

*["addr:street"]["addr:street"=~/ Ln\.$/] {
assertNoMatch: "way \"addr:street\"=Main Lane";
assertMatch: "way \"addr:street\"=Main Ln.";
throwWarning: tr("addr:street={0} contains prefix Ln., should likely be expanded to Lane","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Lane");
group: tr("addr:street contains postfix Ln, should likely be expanded to Lane");
}

*["addr:street"]["addr:street"=~/ Lndg\.$/] {
assertNoMatch: "way \"addr:street\"=Main Landing";
assertMatch: "way \"addr:street\"=Main Lndg.";
throwWarning: tr("addr:street={0} contains prefix Lndg., should likely be expanded to Landing","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Landing");
group: tr("addr:street contains postfix Lndg, should likely be expanded to Landing");
}

*["addr:street"]["addr:street"=~/ Lp\.$/] {
assertNoMatch: "way \"addr:street\"=Main Loop";
assertMatch: "way \"addr:street\"=Main Lp.";
throwWarning: tr("addr:street={0} contains prefix Lp., should likely be expanded to Loop","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Loop");
group: tr("addr:street contains postfix Lp, should likely be expanded to Loop");
}

*["addr:street"]["addr:street"=~/ Mal\.$/] {
assertNoMatch: "way \"addr:street\"=Main Mall";
assertMatch: "way \"addr:street\"=Main Mal.";
throwWarning: tr("addr:street={0} contains prefix Mal., should likely be expanded to Mall","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Mall");
group: tr("addr:street contains postfix Mal, should likely be expanded to Mall");
}

*["addr:street"]["addr:street"=~/ Mdw\.$/] {
assertNoMatch: "way \"addr:street\"=Main Meadow";
assertMatch: "way \"addr:street\"=Main Mdw.";
throwWarning: tr("addr:street={0} contains prefix Mdw., should likely be expanded to Meadow","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Meadow");
group: tr("addr:street contains postfix Mdw, should likely be expanded to Meadow");
}

*["addr:street"]["addr:street"=~/ Mdws\.$/] {
assertNoMatch: "way \"addr:street\"=Main Meadows";
assertMatch: "way \"addr:street\"=Main Mdws.";
throwWarning: tr("addr:street={0} contains prefix Mdws., should likely be expanded to Meadows","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Meadows");
group: tr("addr:street contains postfix Mdws, should likely be expanded to Meadows");
}

*["addr:street"]["addr:street"=~/ Mkt\.$/] {
assertNoMatch: "way \"addr:street\"=Main Market";
assertMatch: "way \"addr:street\"=Main Mkt.";
throwWarning: tr("addr:street={0} contains prefix Mkt., should likely be expanded to Market","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Market");
group: tr("addr:street contains postfix Mkt, should likely be expanded to Market");
}

*["addr:street"]["addr:street"=~/ Ml\.$/] {
assertNoMatch: "way \"addr:street\"=Main Mill";
assertMatch: "way \"addr:street\"=Main Ml.";
throwWarning: tr("addr:street={0} contains prefix Ml., should likely be expanded to Mill","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Mill");
group: tr("addr:street contains postfix Ml, should likely be expanded to Mill");
}

*["addr:street"]["addr:street"=~/ Mt\.$/] {
assertNoMatch: "way \"addr:street\"=Main Mount";
assertMatch: "way \"addr:street\"=Main Mt.";
throwWarning: tr("addr:street={0} contains prefix Mt., should likely be expanded to Mount","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Mount");
group: tr("addr:street contains postfix Mt, should likely be expanded to Mount");
}

*["addr:street"]["addr:street"=~/ Mtn\.$/] {
assertNoMatch: "way \"addr:street\"=Main Mountain";
assertMatch: "way \"addr:street\"=Main Mtn.";
throwWarning: tr("addr:street={0} contains prefix Mtn., should likely be expanded to Mountain","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Mountain");
group: tr("addr:street contains postfix Mtn, should likely be expanded to Mountain");
}

*["addr:street"]["addr:street"=~/ Mtwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Motorway";
assertMatch: "way \"addr:street\"=Main Mtwy.";
throwWarning: tr("addr:street={0} contains prefix Mtwy., should likely be expanded to Motorway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Motorway");
group: tr("addr:street contains postfix Mtwy, should likely be expanded to Motorway");
}

*["addr:street"]["addr:street"=~/ Orch\.$/] {
assertNoMatch: "way \"addr:street\"=Main Orchard";
assertMatch: "way \"addr:street\"=Main Orch.";
throwWarning: tr("addr:street={0} contains prefix Orch., should likely be expanded to Orchard","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Orchard");
group: tr("addr:street contains postfix Orch, should likely be expanded to Orchard");
}

*["addr:street"]["addr:street"=~/ Ovps\.$/] {
assertNoMatch: "way \"addr:street\"=Main Overpass";
assertMatch: "way \"addr:street\"=Main Ovps.";
throwWarning: tr("addr:street={0} contains prefix Ovps., should likely be expanded to Overpass","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Overpass");
group: tr("addr:street contains postfix Ovps, should likely be expanded to Overpass");
}

*["addr:street"]["addr:street"=~/ Piaz\.$/] {
assertNoMatch: "way \"addr:street\"=Main Piazza";
assertMatch: "way \"addr:street\"=Main Piaz.";
throwWarning: tr("addr:street={0} contains prefix Piaz., should likely be expanded to Piazza","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Piazza");
group: tr("addr:street contains postfix Piaz, should likely be expanded to Piazza");
}

*["addr:street"]["addr:street"=~/ Pk\.$/] {
assertNoMatch: "way \"addr:street\"=Main Peak";
assertMatch: "way \"addr:street\"=Main Pk.";
throwWarning: tr("addr:street={0} contains prefix Pk., should likely be expanded to Peak","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Peak");
group: tr("addr:street contains postfix Pk, should likely be expanded to Peak");
}

*["addr:street"]["addr:street"=~/ Pky\.$/] {
assertNoMatch: "way \"addr:street\"=Main Parkway";
assertMatch: "way \"addr:street\"=Main Pky.";
throwWarning: tr("addr:street={0} contains prefix Pky., should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Parkway");
group: tr("addr:street contains postfix Pky, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pkwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Parkway";
assertMatch: "way \"addr:street\"=Main Pkwy.";
throwWarning: tr("addr:street={0} contains prefix Pkwy., should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Parkway");
group: tr("addr:street contains postfix Pkwy, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Place";
assertMatch: "way \"addr:street\"=Main Pl.";
throwWarning: tr("addr:street={0} contains prefix Pl., should likely be expanded to Place","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Place");
group: tr("addr:street contains postfix Pl, should likely be expanded to Place");
}

*["addr:street"]["addr:street"=~/ Pln\.$/] {
assertNoMatch: "way \"addr:street\"=Main Plain";
assertMatch: "way \"addr:street\"=Main Pln.";
throwWarning: tr("addr:street={0} contains prefix Pln., should likely be expanded to Plain","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Plain");
group: tr("addr:street contains postfix Pln, should likely be expanded to Plain");
}

*["addr:street"]["addr:street"=~/ Plns\.$/] {
assertNoMatch: "way \"addr:street\"=Main Plains";
assertMatch: "way \"addr:street\"=Main Plns.";
throwWarning: tr("addr:street={0} contains prefix Plns., should likely be expanded to Plains","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Plains");
group: tr("addr:street contains postfix Plns, should likely be expanded to Plains");
}

*["addr:street"]["addr:street"=~/ Plz\.$/] {
assertNoMatch: "way \"addr:street\"=Main Plaza";
assertMatch: "way \"addr:street\"=Main Plz.";
throwWarning: tr("addr:street={0} contains prefix Plz., should likely be expanded to Plaza","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Plaza");
group: tr("addr:street contains postfix Plz, should likely be expanded to Plaza");
}

*["addr:street"]["addr:street"=~/ Pnt\.$/] {
assertNoMatch: "way \"addr:street\"=Main Point";
assertMatch: "way \"addr:street\"=Main Pnt.";
throwWarning: tr("addr:street={0} contains prefix Pnt., should likely be expanded to Point","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Point");
group: tr("addr:street contains postfix Pnt, should likely be expanded to Point");
}

*["addr:street"]["addr:street"=~/ Prkwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Parkway";
assertMatch: "way \"addr:street\"=Main Prkwy.";
throwWarning: tr("addr:street={0} contains prefix Prkwy., should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-6), "Parkway");
group: tr("addr:street contains postfix Prkwy, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pt\.$/] {
assertNoMatch: "way \"addr:street\"=Main Point";
assertMatch: "way \"addr:street\"=Main Pt.";
throwWarning: tr("addr:street={0} contains prefix Pt., should likely be expanded to Point","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Point");
group: tr("addr:street contains postfix Pt, should likely be expanded to Point");
}

*["addr:street"]["addr:street"=~/ Pvt\.$/] {
assertNoMatch: "way \"addr:street\"=Main Private";
assertMatch: "way \"addr:street\"=Main Pvt.";
throwWarning: tr("addr:street={0} contains prefix Pvt., should likely be expanded to Private","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Private");
group: tr("addr:street contains postfix Pvt, should likely be expanded to Private");
}

*["addr:street"]["addr:street"=~/ Qdrt\.$/] {
assertNoMatch: "way \"addr:street\"=Main Quadrant";
assertMatch: "way \"addr:street\"=Main Qdrt.";
throwWarning: tr("addr:street={0} contains prefix Qdrt., should likely be expanded to Quadrant","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Quadrant");
group: tr("addr:street contains postfix Qdrt, should likely be expanded to Quadrant");
}

*["addr:street"]["addr:street"=~/ Qtrs\.$/] {
assertNoMatch: "way \"addr:street\"=Main Quarters";
assertMatch: "way \"addr:street\"=Main Qtrs.";
throwWarning: tr("addr:street={0} contains prefix Qtrs., should likely be expanded to Quarters","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Quarters");
group: tr("addr:street contains postfix Qtrs, should likely be expanded to Quarters");
}

*["addr:street"]["addr:street"=~/ Qy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Quay";
assertMatch: "way \"addr:street\"=Main Qy.";
throwWarning: tr("addr:street={0} contains prefix Qy., should likely be expanded to Quay","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Quay");
group: tr("addr:street contains postfix Qy, should likely be expanded to Quay");
}

*["addr:street"]["addr:street"=~/ Qys\.$/] {
assertNoMatch: "way \"addr:street\"=Main Quays";
assertMatch: "way \"addr:street\"=Main Qys.";
throwWarning: tr("addr:street={0} contains prefix Qys., should likely be expanded to Quays","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Quays");
group: tr("addr:street contains postfix Qys, should likely be expanded to Quays");
}

*["addr:street"]["addr:street"=~/ Rd\.$/] {
assertNoMatch: "way \"addr:street\"=Main Road";
assertMatch: "way \"addr:street\"=Main Rd.";
throwWarning: tr("addr:street={0} contains prefix Rd., should likely be expanded to Road","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Road");
group: tr("addr:street contains postfix Rd, should likely be expanded to Road");
}

*["addr:street"]["addr:street"=~/ Rds\.$/] {
assertNoMatch: "way \"addr:street\"=Main Roads";
assertMatch: "way \"addr:street\"=Main Rds.";
throwWarning: tr("addr:street={0} contains prefix Rds., should likely be expanded to Roads","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Roads");
group: tr("addr:street contains postfix Rds, should likely be expanded to Roads");
}

*["addr:street"]["addr:street"=~/ Rdg\.$/] {
assertNoMatch: "way \"addr:street\"=Main Ridge";
assertMatch: "way \"addr:street\"=Main Rdg.";
throwWarning: tr("addr:street={0} contains prefix Rdg., should likely be expanded to Ridge","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Ridge");
group: tr("addr:street contains postfix Rdg, should likely be expanded to Ridge");
}

*["addr:street"]["addr:street"=~/ Rdge\.$/] {
assertNoMatch: "way \"addr:street\"=Main Ridge";
assertMatch: "way \"addr:street\"=Main Rdge.";
throwWarning: tr("addr:street={0} contains prefix Rdge., should likely be expanded to Ridge","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Ridge");
group: tr("addr:street contains postfix Rdge, should likely be expanded to Ridge");
}

*["addr:street"]["addr:street"=~/ Rdgs\.$/] {
assertNoMatch: "way \"addr:street\"=Main Ridges";
assertMatch: "way \"addr:street\"=Main Rdgs.";
throwWarning: tr("addr:street={0} contains prefix Rdgs., should likely be expanded to Ridges","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Ridges");
group: tr("addr:street contains postfix Rdgs, should likely be expanded to Ridges");
}

*["addr:street"]["addr:street"=~/ Rw\.$/] {
assertNoMatch: "way \"addr:street\"=Main Row";
assertMatch: "way \"addr:street\"=Main Rw.";
throwWarning: tr("addr:street={0} contains prefix Rw., should likely be expanded to Row","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Row");
group: tr("addr:street contains postfix Rw, should likely be expanded to Row");
}

*["addr:street"]["addr:street"=~/ Rmrd\.$/] {
assertNoMatch: "way \"addr:street\"=Main Ranch to Market Road";
assertMatch: "way \"addr:street\"=Main Rmrd.";
throwWarning: tr("addr:street={0} contains prefix Rmrd., should likely be expanded to Ranch to Market Road","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Ranch to Market Road");
group: tr("addr:street contains postfix Rmrd, should likely be expanded to Ranch to Market Road");
}

*["addr:street"]["addr:street"=~/ Rt\.$/] {
assertNoMatch: "way \"addr:street\"=Main Route";
assertMatch: "way \"addr:street\"=Main Rt.";
throwWarning: tr("addr:street={0} contains prefix Rt., should likely be expanded to Route","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Route");
group: tr("addr:street contains postfix Rt, should likely be expanded to Route");
}

*["addr:street"]["addr:street"=~/ Rte\.$/] {
assertNoMatch: "way \"addr:street\"=Main Route";
assertMatch: "way \"addr:street\"=Main Rte.";
throwWarning: tr("addr:street={0} contains prefix Rte., should likely be expanded to Route","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Route");
group: tr("addr:street contains postfix Rte, should likely be expanded to Route");
}

*["addr:street"]["addr:street"=~/ Rty\.$/] {
assertNoMatch: "way \"addr:street\"=Main Rotary";
assertMatch: "way \"addr:street\"=Main Rty.";
throwWarning: tr("addr:street={0} contains prefix Rty., should likely be expanded to Rotary","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Rotary");
group: tr("addr:street contains postfix Rty, should likely be expanded to Rotary");
}

*["addr:street"]["addr:street"=~/ Shl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Shoal";
assertMatch: "way \"addr:street\"=Main Shl.";
throwWarning: tr("addr:street={0} contains prefix Shl., should likely be expanded to Shoal","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Shoal");
group: tr("addr:street contains postfix Shl, should likely be expanded to Shoal");
}

*["addr:street"]["addr:street"=~/ Shls\.$/] {
assertNoMatch: "way \"addr:street\"=Main Shoals";
assertMatch: "way \"addr:street\"=Main Shls.";
throwWarning: tr("addr:street={0} contains prefix Shls., should likely be expanded to Shoals","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Shoals");
group: tr("addr:street contains postfix Shls, should likely be expanded to Shoals");
}

*["addr:street"]["addr:street"=~/ Shr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Shore";
assertMatch: "way \"addr:street\"=Main Shr.";
throwWarning: tr("addr:street={0} contains prefix Shr., should likely be expanded to Shore","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Shore");
group: tr("addr:street contains postfix Shr, should likely be expanded to Shore");
}

*["addr:street"]["addr:street"=~/ Shrs\.$/] {
assertNoMatch: "way \"addr:street\"=Main Shores";
assertMatch: "way \"addr:street\"=Main Shrs.";
throwWarning: tr("addr:street={0} contains prefix Shrs., should likely be expanded to Shores","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Shores");
group: tr("addr:street contains postfix Shrs, should likely be expanded to Shores");
}

*["addr:street"]["addr:street"=~/ Skwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Skyway";
assertMatch: "way \"addr:street\"=Main Skwy.";
throwWarning: tr("addr:street={0} contains prefix Skwy., should likely be expanded to Skyway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Skyway");
group: tr("addr:street contains postfix Skwy, should likely be expanded to Skyway");
}

*["addr:street"]["addr:street"=~/ Smt\.$/] {
assertNoMatch: "way \"addr:street\"=Main Summit";
assertMatch: "way \"addr:street\"=Main Smt.";
throwWarning: tr("addr:street={0} contains prefix Smt., should likely be expanded to Summit","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Summit");
group: tr("addr:street contains postfix Smt, should likely be expanded to Summit");
}

*["addr:street"]["addr:street"=~/ Spg\.$/] {
assertNoMatch: "way \"addr:street\"=Main Spring";
assertMatch: "way \"addr:street\"=Main Spg.";
throwWarning: tr("addr:street={0} contains prefix Spg., should likely be expanded to Spring","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Spring");
group: tr("addr:street contains postfix Spg, should likely be expanded to Spring");
}

*["addr:street"]["addr:street"=~/ Spgs\.$/] {
assertNoMatch: "way \"addr:street\"=Main Springs";
assertMatch: "way \"addr:street\"=Main Spgs.";
throwWarning: tr("addr:street={0} contains prefix Spgs., should likely be expanded to Springs","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Springs");
group: tr("addr:street contains postfix Spgs, should likely be expanded to Springs");
}

*["addr:street"]["addr:street"=~/ Sq\.$/] {
assertNoMatch: "way \"addr:street\"=Main Square";
assertMatch: "way \"addr:street\"=Main Sq.";
throwWarning: tr("addr:street={0} contains prefix Sq., should likely be expanded to Square","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Square");
group: tr("addr:street contains postfix Sq, should likely be expanded to Square");
}

*["addr:street"]["addr:street"=~/ Sqs\.$/] {
assertNoMatch: "way \"addr:street\"=Main Squares";
assertMatch: "way \"addr:street\"=Main Sqs.";
throwWarning: tr("addr:street={0} contains prefix Sqs., should likely be expanded to Squares","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Squares");
group: tr("addr:street contains postfix Sqs, should likely be expanded to Squares");
}

*["addr:street"]["addr:street"=~/ Srvc\.$/] {
assertNoMatch: "way \"addr:street\"=Main Service";
assertMatch: "way \"addr:street\"=Main Srvc.";
throwWarning: tr("addr:street={0} contains prefix Srvc., should likely be expanded to Service","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Service");
group: tr("addr:street contains postfix Srvc, should likely be expanded to Service");
}

*["addr:street"]["addr:street"=~/ St\.$/] {
assertNoMatch: "way \"addr:street\"=Main Street";
assertMatch: "way \"addr:street\"=Main St.";
throwWarning: tr("addr:street={0} contains prefix St., should likely be expanded to Street","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Street");
group: tr("addr:street contains postfix St, should likely be expanded to Street");
}

*["addr:street"]["addr:street"=~/ Tce\.$/] {
assertNoMatch: "way \"addr:street\"=Main Terrace";
assertMatch: "way \"addr:street\"=Main Tce.";
throwWarning: tr("addr:street={0} contains prefix Tce., should likely be expanded to Terrace","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Terrace");
group: tr("addr:street contains postfix Tce, should likely be expanded to Terrace");
}

*["addr:street"]["addr:street"=~/ Ter\.$/] {
assertNoMatch: "way \"addr:street\"=Main Terrace";
assertMatch: "way \"addr:street\"=Main Ter.";
throwWarning: tr("addr:street={0} contains prefix Ter., should likely be expanded to Terrace","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Terrace");
group: tr("addr:street contains postfix Ter, should likely be expanded to Terrace");
}

*["addr:street"]["addr:street"=~/ Tfwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Trafficway";
assertMatch: "way \"addr:street\"=Main Tfwy.";
throwWarning: tr("addr:street={0} contains prefix Tfwy., should likely be expanded to Trafficway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Trafficway");
group: tr("addr:street contains postfix Tfwy, should likely be expanded to Trafficway");
}

*["addr:street"]["addr:street"=~/ Thfr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Thoroughfare";
assertMatch: "way \"addr:street\"=Main Thfr.";
throwWarning: tr("addr:street={0} contains prefix Thfr., should likely be expanded to Thoroughfare","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Thoroughfare");
group: tr("addr:street contains postfix Thfr, should likely be expanded to Thoroughfare");
}

*["addr:street"]["addr:street"=~/ Thwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Throughway";
assertMatch: "way \"addr:street\"=Main Thwy.";
throwWarning: tr("addr:street={0} contains prefix Thwy., should likely be expanded to Throughway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Throughway");
group: tr("addr:street contains postfix Thwy, should likely be expanded to Throughway");
}

*["addr:street"]["addr:street"=~/ Tl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Trail";
assertMatch: "way \"addr:street\"=Main Tl.";
throwWarning: tr("addr:street={0} contains prefix Tl., should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Trail");
group: tr("addr:street contains postfix Tl, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Tlwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Tollway";
assertMatch: "way \"addr:street\"=Main Tlwy.";
throwWarning: tr("addr:street={0} contains prefix Tlwy., should likely be expanded to Tollway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Tollway");
group: tr("addr:street contains postfix Tlwy, should likely be expanded to Tollway");
}

*["addr:street"]["addr:street"=~/ Tpke\.$/] {
assertNoMatch: "way \"addr:street\"=Main Turnpike";
assertMatch: "way \"addr:street\"=Main Tpke.";
throwWarning: tr("addr:street={0} contains prefix Tpke., should likely be expanded to Turnpike","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Turnpike");
group: tr("addr:street contains postfix Tpke, should likely be expanded to Turnpike");
}

*["addr:street"]["addr:street"=~/ Trce\.$/] {
assertNoMatch: "way \"addr:street\"=Main Trace";
assertMatch: "way \"addr:street\"=Main Trce.";
throwWarning: tr("addr:street={0} contains prefix Trce., should likely be expanded to Trace","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Trace");
group: tr("addr:street contains postfix Trce, should likely be expanded to Trace");
}

*["addr:street"]["addr:street"=~/ Tr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Trail";
assertMatch: "way \"addr:street\"=Main Tr.";
throwWarning: tr("addr:street={0} contains prefix Tr., should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Trail");
group: tr("addr:street contains postfix Tr, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Trk\.$/] {
assertNoMatch: "way \"addr:street\"=Main Track";
assertMatch: "way \"addr:street\"=Main Trk.";
throwWarning: tr("addr:street={0} contains prefix Trk., should likely be expanded to Track","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Track");
group: tr("addr:street contains postfix Trk, should likely be expanded to Track");
}

*["addr:street"]["addr:street"=~/ Trl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Trail";
assertMatch: "way \"addr:street\"=Main Trl.";
throwWarning: tr("addr:street={0} contains prefix Trl., should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Trail");
group: tr("addr:street contains postfix Trl, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Tunl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Tunnel";
assertMatch: "way \"addr:street\"=Main Tunl.";
throwWarning: tr("addr:street={0} contains prefix Tunl., should likely be expanded to Tunnel","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Tunnel");
group: tr("addr:street contains postfix Tunl, should likely be expanded to Tunnel");
}

*["addr:street"]["addr:street"=~/ Unp\.$/] {
assertNoMatch: "way \"addr:street\"=Main Underpass";
assertMatch: "way \"addr:street\"=Main Unp.";
throwWarning: tr("addr:street={0} contains prefix Unp., should likely be expanded to Underpass","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Underpass");
group: tr("addr:street contains postfix Unp, should likely be expanded to Underpass");
}

*["addr:street"]["addr:street"=~/ Vl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Villa";
assertMatch: "way \"addr:street\"=Main Vl.";
throwWarning: tr("addr:street={0} contains prefix Vl., should likely be expanded to Villa","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Villa");
group: tr("addr:street contains postfix Vl, should likely be expanded to Villa");
}

*["addr:street"]["addr:street"=~/ Vlg\.$/] {
assertNoMatch: "way \"addr:street\"=Main Village";
assertMatch: "way \"addr:street\"=Main Vlg.";
throwWarning: tr("addr:street={0} contains prefix Vlg., should likely be expanded to Village","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Village");
group: tr("addr:street contains postfix Vlg, should likely be expanded to Village");
}

*["addr:street"]["addr:street"=~/ Vlgs\.$/] {
assertNoMatch: "way \"addr:street\"=Main Villages";
assertMatch: "way \"addr:street\"=Main Vlgs.";
throwWarning: tr("addr:street={0} contains prefix Vlgs., should likely be expanded to Villages","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Villages");
group: tr("addr:street contains postfix Vlgs, should likely be expanded to Villages");
}

*["addr:street"]["addr:street"=~/ Vly\.$/] {
assertNoMatch: "way \"addr:street\"=Main Valley";
assertMatch: "way \"addr:street\"=Main Vly.";
throwWarning: tr("addr:street={0} contains prefix Vly., should likely be expanded to Valley","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Valley");
group: tr("addr:street contains postfix Vly, should likely be expanded to Valley");
}

*["addr:street"]["addr:street"=~/ Vw\.$/] {
assertNoMatch: "way \"addr:street\"=Main View";
assertMatch: "way \"addr:street\"=Main Vw.";
throwWarning: tr("addr:street={0} contains prefix Vw., should likely be expanded to View","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "View");
group: tr("addr:street contains postfix Vw, should likely be expanded to View");
}

*["addr:street"]["addr:street"=~/ Wd\.$/] {
assertNoMatch: "way \"addr:street\"=Main Wood";
assertMatch: "way \"addr:street\"=Main Wd.";
throwWarning: tr("addr:street={0} contains prefix Wd., should likely be expanded to Wood","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Wood");
group: tr("addr:street contains postfix Wd, should likely be expanded to Wood");
}

*["addr:street"]["addr:street"=~/ Whrf\.$/] {
assertNoMatch: "way \"addr:street\"=Main Wharf";
assertMatch: "way \"addr:street\"=Main Whrf.";
throwWarning: tr("addr:street={0} contains prefix Whrf., should likely be expanded to Wharf","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Wharf");
group: tr("addr:street contains postfix Whrf, should likely be expanded to Wharf");
}

*["addr:street"]["addr:street"=~/ Wkwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Walkway";
assertMatch: "way \"addr:street\"=Main Wkwy.";
throwWarning: tr("addr:street={0} contains prefix Wkwy., should likely be expanded to Walkway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Walkway");
group: tr("addr:street contains postfix Wkwy, should likely be expanded to Walkway");
}

*["addr:street"]["addr:street"=~/ Wlk\.$/] {
assertNoMatch: "way \"addr:street\"=Main Walk";
assertMatch: "way \"addr:street\"=Main Wlk.";
throwWarning: tr("addr:street={0} contains prefix Wlk., should likely be expanded to Walk","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Walk");
group: tr("addr:street contains postfix Wlk, should likely be expanded to Walk");
}

*["addr:street"]["addr:street"=~/ Wy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Way";
assertMatch: "way \"addr:street\"=Main Wy.";
throwWarning: tr("addr:street={0} contains prefix Wy., should likely be expanded to Way","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Way");
group: tr("addr:street contains postfix Wy, should likely be expanded to Way");
}

*["addr:street"]["addr:street"=~/ Xing\.$/] {
assertNoMatch: "way \"addr:street\"=Main Crossing";
assertMatch: "way \"addr:street\"=Main Xing.";
throwWarning: tr("addr:street={0} contains prefix Xing., should likely be expanded to Crossing","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Crossing");
group: tr("addr:street contains postfix Xing, should likely be expanded to Crossing");
}

*["name"=~/ Acc\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Access";
assertMatch: "way \"name\"=Main Acc.";
throwWarning: tr("Highway name contains postfix Acc., should likely be expanded to Access");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Access");
}

*["name"=~/ Aly\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Alley";
assertMatch: "way \"name\"=Main Aly.";
throwWarning: tr("Highway name contains postfix Aly., should likely be expanded to Alley");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Alley");
}

*["name"=~/ Ambl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Amble";
assertMatch: "way \"name\"=Main Ambl.";
throwWarning: tr("Highway name contains postfix Ambl., should likely be expanded to Amble");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Amble");
}

*["name"=~/ App\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Approach";
assertMatch: "way \"name\"=Main App.";
throwWarning: tr("Highway name contains postfix App., should likely be expanded to Approach");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Approach");
}

*["name"=~/ Arc\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Arcade";
assertMatch: "way \"name\"=Main Arc.";
throwWarning: tr("Highway name contains postfix Arc., should likely be expanded to Arcade");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Arcade");
}

*["name"=~/ Artl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Arterial";
assertMatch: "way \"name\"=Main Artl.";
throwWarning: tr("Highway name contains postfix Artl., should likely be expanded to Arterial");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Arterial");
}

*["name"=~/ Arty\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Artery";
assertMatch: "way \"name\"=Main Arty.";
throwWarning: tr("Highway name contains postfix Arty., should likely be expanded to Artery");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Artery");
}

*["name"=~/ Av\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Avenue";
assertMatch: "way \"name\"=Main Av.";
throwWarning: tr("Highway name contains postfix Av., should likely be expanded to Avenue");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Avenue");
}

*["name"=~/ Ave\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Avenue";
assertMatch: "way \"name\"=Main Ave.";
throwWarning: tr("Highway name contains postfix Ave., should likely be expanded to Avenue");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Avenue");
}

*["name"=~/ Bch\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Beach";
assertMatch: "way \"name\"=Main Bch.";
throwWarning: tr("Highway name contains postfix Bch., should likely be expanded to Beach");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Beach");
}

*["name"=~/ Bg\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Burg";
assertMatch: "way \"name\"=Main Bg.";
throwWarning: tr("Highway name contains postfix Bg., should likely be expanded to Burg");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Burg");
}

*["name"=~/ Bgs\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Burgs";
assertMatch: "way \"name\"=Main Bgs.";
throwWarning: tr("Highway name contains postfix Bgs., should likely be expanded to Burgs");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Burgs");
}

*["name"=~/ Blf\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Bluff";
assertMatch: "way \"name\"=Main Blf.";
throwWarning: tr("Highway name contains postfix Blf., should likely be expanded to Bluff");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Bluff");
}

*["name"=~/ Blk\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Block";
assertMatch: "way \"name\"=Main Blk.";
throwWarning: tr("Highway name contains postfix Blk., should likely be expanded to Block");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Block");
}

*["name"=~/ Blv\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Boulevard";
assertMatch: "way \"name\"=Main Blv.";
throwWarning: tr("Highway name contains postfix Blv., should likely be expanded to Boulevard");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Boulevard");
}

*["name"=~/ Blvd\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Boulevard";
assertMatch: "way \"name\"=Main Blvd.";
throwWarning: tr("Highway name contains postfix Blvd., should likely be expanded to Boulevard");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Boulevard");
}

*["name"=~/ Bnd\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Bend";
assertMatch: "way \"name\"=Main Bnd.";
throwWarning: tr("Highway name contains postfix Bnd., should likely be expanded to Bend");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Bend");
}

*["name"=~/ Br\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Bridge";
assertMatch: "way \"name\"=Main Br.";
throwWarning: tr("Highway name contains postfix Br., should likely be expanded to Bridge");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Bridge");
}

*["name"=~/ Brg\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Bridge";
assertMatch: "way \"name\"=Main Brg.";
throwWarning: tr("Highway name contains postfix Brg., should likely be expanded to Bridge");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Bridge");
}

*["name"=~/ Btm\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Bottom";
assertMatch: "way \"name\"=Main Btm.";
throwWarning: tr("Highway name contains postfix Btm., should likely be expanded to Bottom");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Bottom");
}

*["name"=~/ Bwlk\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Boardwalk";
assertMatch: "way \"name\"=Main Bwlk.";
throwWarning: tr("Highway name contains postfix Bwlk., should likely be expanded to Boardwalk");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Boardwalk");
}

*["name"=~/ Byp\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Bypass";
assertMatch: "way \"name\"=Main Byp.";
throwWarning: tr("Highway name contains postfix Byp., should likely be expanded to Bypass");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Bypass");
}

*["name"=~/ Bypa\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Bypass";
assertMatch: "way \"name\"=Main Bypa.";
throwWarning: tr("Highway name contains postfix Bypa., should likely be expanded to Bypass");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Bypass");
}

*["name"=~/ Byu\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Byou";
assertMatch: "way \"name\"=Main Byu.";
throwWarning: tr("Highway name contains postfix Byu., should likely be expanded to Byou");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Byou");
}

*["name"=~/ Bywy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Byway";
assertMatch: "way \"name\"=Main Bywy.";
throwWarning: tr("Highway name contains postfix Bywy., should likely be expanded to Byway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Byway");
}

*["name"=~/ Bzr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Bazaar";
assertMatch: "way \"name\"=Main Bzr.";
throwWarning: tr("Highway name contains postfix Bzr., should likely be expanded to Bazaar");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Bazaar");
}

*["name"=~/ Cct\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Circuit";
assertMatch: "way \"name\"=Main Cct.";
throwWarning: tr("Highway name contains postfix Cct., should likely be expanded to Circuit");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Circuit");
}

*["name"=~/ Ch\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Chase";
assertMatch: "way \"name\"=Main Ch.";
throwWarning: tr("Highway name contains postfix Ch., should likely be expanded to Chase");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Chase");
}

*["name"=~/ Cir\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Circle";
assertMatch: "way \"name\"=Main Cir.";
throwWarning: tr("Highway name contains postfix Cir., should likely be expanded to Circle");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Circle");
}

*["name"=~/ Cirs\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Circles";
assertMatch: "way \"name\"=Main Cirs.";
throwWarning: tr("Highway name contains postfix Cirs., should likely be expanded to Circles");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Circles");
}

*["name"=~/ Clf\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Cliff";
assertMatch: "way \"name\"=Main Clf.";
throwWarning: tr("Highway name contains postfix Clf., should likely be expanded to Cliff");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Cliff");
}

*["name"=~/ Clfs\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Cliffs";
assertMatch: "way \"name\"=Main Clfs.";
throwWarning: tr("Highway name contains postfix Clfs., should likely be expanded to Cliffs");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Cliffs");
}

*["name"=~/ Cly\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Colony";
assertMatch: "way \"name\"=Main Cly.";
throwWarning: tr("Highway name contains postfix Cly., should likely be expanded to Colony");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Colony");
}

*["name"=~/ Cmn\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Common";
assertMatch: "way \"name\"=Main Cmn.";
throwWarning: tr("Highway name contains postfix Cmn., should likely be expanded to Common");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Common");
}

*["name"=~/ Cnl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Canal";
assertMatch: "way \"name\"=Main Cnl.";
throwWarning: tr("Highway name contains postfix Cnl., should likely be expanded to Canal");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Canal");
}

*["name"=~/ Cnr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Corner";
assertMatch: "way \"name\"=Main Cnr.";
throwWarning: tr("Highway name contains postfix Cnr., should likely be expanded to Corner");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Corner");
}

*["name"=~/ Coll\.$/].highway_name {
assertNoMatch: "way \"name\"=Main College";
assertMatch: "way \"name\"=Main Coll.";
throwWarning: tr("Highway name contains postfix Coll., should likely be expanded to College");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "College");
}

*["name"=~/ Cpe\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Cape";
assertMatch: "way \"name\"=Main Cpe.";
throwWarning: tr("Highway name contains postfix Cpe., should likely be expanded to Cape");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Cape");
}

*["name"=~/ Cr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Creek";
assertMatch: "way \"name\"=Main Cr.";
throwWarning: tr("Highway name contains postfix Cr., should likely be expanded to Creek");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Creek");
}

*["name"=~/ Crk\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Creek";
assertMatch: "way \"name\"=Main Crk.";
throwWarning: tr("Highway name contains postfix Crk., should likely be expanded to Creek");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Creek");
}

*["name"=~/ Cres\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Crescent";
assertMatch: "way \"name\"=Main Cres.";
throwWarning: tr("Highway name contains postfix Cres., should likely be expanded to Crescent");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Crescent");
}

*["name"=~/ Crst\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Crest";
assertMatch: "way \"name\"=Main Crst.";
throwWarning: tr("Highway name contains postfix Crst., should likely be expanded to Crest");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Crest");
}

*["name"=~/ Cswy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Causeway";
assertMatch: "way \"name\"=Main Cswy.";
throwWarning: tr("Highway name contains postfix Cswy., should likely be expanded to Causeway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Causeway");
}

*["name"=~/ Ct\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Court";
assertMatch: "way \"name\"=Main Ct.";
throwWarning: tr("Highway name contains postfix Ct., should likely be expanded to Court");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Court");
}

*["name"=~/ Ctr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Center";
assertMatch: "way \"name\"=Main Ctr.";
throwWarning: tr("Highway name contains postfix Ctr., should likely be expanded to Center");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Center");
}

*["name"=~/ Cts\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Courts";
assertMatch: "way \"name\"=Main Cts.";
throwWarning: tr("Highway name contains postfix Cts., should likely be expanded to Courts");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Courts");
}

*["name"=~/ Ctyd\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Courtyard";
assertMatch: "way \"name\"=Main Ctyd.";
throwWarning: tr("Highway name contains postfix Ctyd., should likely be expanded to Courtyard");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Courtyard");
}

*["name"=~/ Curv\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Curve";
assertMatch: "way \"name\"=Main Curv.";
throwWarning: tr("Highway name contains postfix Curv., should likely be expanded to Curve");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Curve");
}

*["name"=~/ Cutt\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Cutting";
assertMatch: "way \"name\"=Main Cutt.";
throwWarning: tr("Highway name contains postfix Cutt., should likely be expanded to Cutting");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Cutting");
}

*["name"=~/ Cv\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Cove";
assertMatch: "way \"name\"=Main Cv.";
throwWarning: tr("Highway name contains postfix Cv., should likely be expanded to Cove");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Cove");
}

*["name"=~/ Cyn\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Canyon";
assertMatch: "way \"name\"=Main Cyn.";
throwWarning: tr("Highway name contains postfix Cyn., should likely be expanded to Canyon");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Canyon");
}

*["name"=~/ Dl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Dale";
assertMatch: "way \"name\"=Main Dl.";
throwWarning: tr("Highway name contains postfix Dl., should likely be expanded to Dale");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Dale");
}

*["name"=~/ Dr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Drive";
assertMatch: "way \"name\"=Main Dr.";
throwWarning: tr("Highway name contains postfix Dr., should likely be expanded to Drive");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Drive");
}

*["name"=~/ Dv\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Drive";
assertMatch: "way \"name\"=Main Dv.";
throwWarning: tr("Highway name contains postfix Dv., should likely be expanded to Drive");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Drive");
}

*["name"=~/ Dvwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Driveway";
assertMatch: "way \"name\"=Main Dvwy.";
throwWarning: tr("Highway name contains postfix Dvwy., should likely be expanded to Driveway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Driveway");
}

*["name"=~/ Elb\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Elbow";
assertMatch: "way \"name\"=Main Elb.";
throwWarning: tr("Highway name contains postfix Elb., should likely be expanded to Elbow");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Elbow");
}

*["name"=~/ Est\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Estate";
assertMatch: "way \"name\"=Main Est.";
throwWarning: tr("Highway name contains postfix Est., should likely be expanded to Estate");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Estate");
}

*["name"=~/ Ests\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Estates";
assertMatch: "way \"name\"=Main Ests.";
throwWarning: tr("Highway name contains postfix Ests., should likely be expanded to Estates");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Estates");
}

*["name"=~/ Expy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Expressway";
assertMatch: "way \"name\"=Main Expy.";
throwWarning: tr("Highway name contains postfix Expy., should likely be expanded to Expressway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Expressway");
}

*["name"=~/ Expwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Expressway";
assertMatch: "way \"name\"=Main Expwy.";
throwWarning: tr("Highway name contains postfix Expwy., should likely be expanded to Expressway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-6), "Expressway");
}

*["name"=~/ Fawy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Fairway";
assertMatch: "way \"name\"=Main Fawy.";
throwWarning: tr("Highway name contains postfix Fawy., should likely be expanded to Fairway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Fairway");
}

*["name"=~/ Fld\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Field";
assertMatch: "way \"name\"=Main Fld.";
throwWarning: tr("Highway name contains postfix Fld., should likely be expanded to Field");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Field");
}

*["name"=~/ Flds\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Fields";
assertMatch: "way \"name\"=Main Flds.";
throwWarning: tr("Highway name contains postfix Flds., should likely be expanded to Fields");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Fields");
}

*["name"=~/ Fmrd\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Farm to Market Road";
assertMatch: "way \"name\"=Main Fmrd.";
throwWarning: tr("Highway name contains postfix Fmrd., should likely be expanded to Farm to Market Road");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Farm to Market Road");
}

*["name"=~/ Ftrl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Firetrail";
assertMatch: "way \"name\"=Main Ftrl.";
throwWarning: tr("Highway name contains postfix Ftrl., should likely be expanded to Firetrail");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Firetrail");
}

*["name"=~/ Frk\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Fork";
assertMatch: "way \"name\"=Main Frk.";
throwWarning: tr("Highway name contains postfix Frk., should likely be expanded to Fork");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Fork");
}

*["name"=~/ Fry\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Ferry";
assertMatch: "way \"name\"=Main Fry.";
throwWarning: tr("Highway name contains postfix Fry., should likely be expanded to Ferry");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Ferry");
}

*["name"=~/ Fwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Freeway";
assertMatch: "way \"name\"=Main Fwy.";
throwWarning: tr("Highway name contains postfix Fwy., should likely be expanded to Freeway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Freeway");
}

*["name"=~/ Gd\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Grade";
assertMatch: "way \"name\"=Main Gd.";
throwWarning: tr("Highway name contains postfix Gd., should likely be expanded to Grade");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Grade");
}

*["name"=~/ Gdns\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Gardens";
assertMatch: "way \"name\"=Main Gdns.";
throwWarning: tr("Highway name contains postfix Gdns., should likely be expanded to Gardens");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Gardens");
}

*["name"=~/ Gr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Grove";
assertMatch: "way \"name\"=Main Gr.";
throwWarning: tr("Highway name contains postfix Gr., should likely be expanded to Grove");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Grove");
}

*["name"=~/ Gro\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Grove";
assertMatch: "way \"name\"=Main Gro.";
throwWarning: tr("Highway name contains postfix Gro., should likely be expanded to Grove");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Grove");
}

*["name"=~/ Grv\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Grove";
assertMatch: "way \"name\"=Main Grv.";
throwWarning: tr("Highway name contains postfix Grv., should likely be expanded to Grove");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Grove");
}

*["name"=~/ Hbr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Harbor";
assertMatch: "way \"name\"=Main Hbr.";
throwWarning: tr("Highway name contains postfix Hbr., should likely be expanded to Harbor");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Harbor");
}

*["name"=~/ Hl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Hill";
assertMatch: "way \"name\"=Main Hl.";
throwWarning: tr("Highway name contains postfix Hl., should likely be expanded to Hill");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Hill");
}

*["name"=~/ Hls\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Hills";
assertMatch: "way \"name\"=Main Hls.";
throwWarning: tr("Highway name contains postfix Hls., should likely be expanded to Hills");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Hills");
}

*["name"=~/ Holw\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Hollow";
assertMatch: "way \"name\"=Main Holw.";
throwWarning: tr("Highway name contains postfix Holw., should likely be expanded to Hollow");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Hollow");
}

*["name"=~/ Hts\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Heights";
assertMatch: "way \"name\"=Main Hts.";
throwWarning: tr("Highway name contains postfix Hts., should likely be expanded to Heights");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Heights");
}

*["name"=~/ Hw\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Highway";
assertMatch: "way \"name\"=Main Hw.";
throwWarning: tr("Highway name contains postfix Hw., should likely be expanded to Highway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Highway");
}

*["name"=~/ Hwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Highway";
assertMatch: "way \"name\"=Main Hwy.";
throwWarning: tr("Highway name contains postfix Hwy., should likely be expanded to Highway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Highway");
}

*["name"=~/ Hvn\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Haven";
assertMatch: "way \"name\"=Main Hvn.";
throwWarning: tr("Highway name contains postfix Hvn., should likely be expanded to Haven");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Haven");
}

*["name"=~/ Intg\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Interchange";
assertMatch: "way \"name\"=Main Intg.";
throwWarning: tr("Highway name contains postfix Intg., should likely be expanded to Interchange");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Interchange");
}

*["name"=~/ Iss\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Islands";
assertMatch: "way \"name\"=Main Iss.";
throwWarning: tr("Highway name contains postfix Iss., should likely be expanded to Islands");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Islands");
}

*["name"=~/ Jct\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Junction";
assertMatch: "way \"name\"=Main Jct.";
throwWarning: tr("Highway name contains postfix Jct., should likely be expanded to Junction");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Junction");
}

*["name"=~/ Jn\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Junction";
assertMatch: "way \"name\"=Main Jn.";
throwWarning: tr("Highway name contains postfix Jn., should likely be expanded to Junction");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Junction");
}

*["name"=~/ Jnc\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Junction";
assertMatch: "way \"name\"=Main Jnc.";
throwWarning: tr("Highway name contains postfix Jnc., should likely be expanded to Junction");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Junction");
}

*["name"=~/ Knl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Knoll";
assertMatch: "way \"name\"=Main Knl.";
throwWarning: tr("Highway name contains postfix Knl., should likely be expanded to Knoll");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Knoll");
}

*["name"=~/ Knls\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Knolls";
assertMatch: "way \"name\"=Main Knls.";
throwWarning: tr("Highway name contains postfix Knls., should likely be expanded to Knolls");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Knolls");
}

*["name"=~/ Ky\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Key";
assertMatch: "way \"name\"=Main Ky.";
throwWarning: tr("Highway name contains postfix Ky., should likely be expanded to Key");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Key");
}

*["name"=~/ Kys\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Keys";
assertMatch: "way \"name\"=Main Kys.";
throwWarning: tr("Highway name contains postfix Kys., should likely be expanded to Keys");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Keys");
}

*["name"=~/ Lck\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Lock";
assertMatch: "way \"name\"=Main Lck.";
throwWarning: tr("Highway name contains postfix Lck., should likely be expanded to Lock");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Lock");
}

*["name"=~/ Lcks\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Locks";
assertMatch: "way \"name\"=Main Lcks.";
throwWarning: tr("Highway name contains postfix Lcks., should likely be expanded to Locks");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Locks");
}

*["name"=~/ Ldg\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Lodge";
assertMatch: "way \"name\"=Main Ldg.";
throwWarning: tr("Highway name contains postfix Ldg., should likely be expanded to Lodge");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Lodge");
}

*["name"=~/ Lk\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Lake";
assertMatch: "way \"name\"=Main Lk.";
throwWarning: tr("Highway name contains postfix Lk., should likely be expanded to Lake");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Lake");
}

*["name"=~/ Lks\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Lakes";
assertMatch: "way \"name\"=Main Lks.";
throwWarning: tr("Highway name contains postfix Lks., should likely be expanded to Lakes");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Lakes");
}

*["name"=~/ Lkt\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Lookout";
assertMatch: "way \"name\"=Main Lkt.";
throwWarning: tr("Highway name contains postfix Lkt., should likely be expanded to Lookout");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Lookout");
}

*["name"=~/ Ln\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Lane";
assertMatch: "way \"name\"=Main Ln.";
throwWarning: tr("Highway name contains postfix Ln., should likely be expanded to Lane");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Lane");
}

*["name"=~/ Lndg\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Landing";
assertMatch: "way \"name\"=Main Lndg.";
throwWarning: tr("Highway name contains postfix Lndg., should likely be expanded to Landing");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Landing");
}

*["name"=~/ Lp\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Loop";
assertMatch: "way \"name\"=Main Lp.";
throwWarning: tr("Highway name contains postfix Lp., should likely be expanded to Loop");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Loop");
}

*["name"=~/ Mal\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Mall";
assertMatch: "way \"name\"=Main Mal.";
throwWarning: tr("Highway name contains postfix Mal., should likely be expanded to Mall");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Mall");
}

*["name"=~/ Mdw\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Meadow";
assertMatch: "way \"name\"=Main Mdw.";
throwWarning: tr("Highway name contains postfix Mdw., should likely be expanded to Meadow");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Meadow");
}

*["name"=~/ Mdws\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Meadows";
assertMatch: "way \"name\"=Main Mdws.";
throwWarning: tr("Highway name contains postfix Mdws., should likely be expanded to Meadows");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Meadows");
}

*["name"=~/ Mkt\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Market";
assertMatch: "way \"name\"=Main Mkt.";
throwWarning: tr("Highway name contains postfix Mkt., should likely be expanded to Market");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Market");
}

*["name"=~/ Ml\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Mill";
assertMatch: "way \"name\"=Main Ml.";
throwWarning: tr("Highway name contains postfix Ml., should likely be expanded to Mill");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Mill");
}

*["name"=~/ Mt\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Mount";
assertMatch: "way \"name\"=Main Mt.";
throwWarning: tr("Highway name contains postfix Mt., should likely be expanded to Mount");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Mount");
}

*["name"=~/ Mtn\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Mountain";
assertMatch: "way \"name\"=Main Mtn.";
throwWarning: tr("Highway name contains postfix Mtn., should likely be expanded to Mountain");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Mountain");
}

*["name"=~/ Mtwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Motorway";
assertMatch: "way \"name\"=Main Mtwy.";
throwWarning: tr("Highway name contains postfix Mtwy., should likely be expanded to Motorway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Motorway");
}

*["name"=~/ Orch\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Orchard";
assertMatch: "way \"name\"=Main Orch.";
throwWarning: tr("Highway name contains postfix Orch., should likely be expanded to Orchard");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Orchard");
}

*["name"=~/ Ovps\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Overpass";
assertMatch: "way \"name\"=Main Ovps.";
throwWarning: tr("Highway name contains postfix Ovps., should likely be expanded to Overpass");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Overpass");
}

*["name"=~/ Piaz\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Piazza";
assertMatch: "way \"name\"=Main Piaz.";
throwWarning: tr("Highway name contains postfix Piaz., should likely be expanded to Piazza");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Piazza");
}

*["name"=~/ Pk\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Peak";
assertMatch: "way \"name\"=Main Pk.";
throwWarning: tr("Highway name contains postfix Pk., should likely be expanded to Peak");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Peak");
}

*["name"=~/ Pky\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Parkway";
assertMatch: "way \"name\"=Main Pky.";
throwWarning: tr("Highway name contains postfix Pky., should likely be expanded to Parkway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Parkway");
}

*["name"=~/ Pkwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Parkway";
assertMatch: "way \"name\"=Main Pkwy.";
throwWarning: tr("Highway name contains postfix Pkwy., should likely be expanded to Parkway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Parkway");
}

*["name"=~/ Pl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Place";
assertMatch: "way \"name\"=Main Pl.";
throwWarning: tr("Highway name contains postfix Pl., should likely be expanded to Place");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Place");
}

*["name"=~/ Pln\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Plain";
assertMatch: "way \"name\"=Main Pln.";
throwWarning: tr("Highway name contains postfix Pln., should likely be expanded to Plain");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Plain");
}

*["name"=~/ Plns\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Plains";
assertMatch: "way \"name\"=Main Plns.";
throwWarning: tr("Highway name contains postfix Plns., should likely be expanded to Plains");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Plains");
}

*["name"=~/ Plz\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Plaza";
assertMatch: "way \"name\"=Main Plz.";
throwWarning: tr("Highway name contains postfix Plz., should likely be expanded to Plaza");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Plaza");
}

*["name"=~/ Pnt\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Point";
assertMatch: "way \"name\"=Main Pnt.";
throwWarning: tr("Highway name contains postfix Pnt., should likely be expanded to Point");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Point");
}

*["name"=~/ Prkwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Parkway";
assertMatch: "way \"name\"=Main Prkwy.";
throwWarning: tr("Highway name contains postfix Prkwy., should likely be expanded to Parkway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-6), "Parkway");
}

*["name"=~/ Pt\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Point";
assertMatch: "way \"name\"=Main Pt.";
throwWarning: tr("Highway name contains postfix Pt., should likely be expanded to Point");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Point");
}

*["name"=~/ Pvt\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Private";
assertMatch: "way \"name\"=Main Pvt.";
throwWarning: tr("Highway name contains postfix Pvt., should likely be expanded to Private");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Private");
}

*["name"=~/ Qdrt\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Quadrant";
assertMatch: "way \"name\"=Main Qdrt.";
throwWarning: tr("Highway name contains postfix Qdrt., should likely be expanded to Quadrant");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Quadrant");
}

*["name"=~/ Qtrs\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Quarters";
assertMatch: "way \"name\"=Main Qtrs.";
throwWarning: tr("Highway name contains postfix Qtrs., should likely be expanded to Quarters");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Quarters");
}

*["name"=~/ Qy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Quay";
assertMatch: "way \"name\"=Main Qy.";
throwWarning: tr("Highway name contains postfix Qy., should likely be expanded to Quay");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Quay");
}

*["name"=~/ Qys\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Quays";
assertMatch: "way \"name\"=Main Qys.";
throwWarning: tr("Highway name contains postfix Qys., should likely be expanded to Quays");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Quays");
}

*["name"=~/ Rd\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Road";
assertMatch: "way \"name\"=Main Rd.";
throwWarning: tr("Highway name contains postfix Rd., should likely be expanded to Road");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Road");
}

*["name"=~/ Rds\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Roads";
assertMatch: "way \"name\"=Main Rds.";
throwWarning: tr("Highway name contains postfix Rds., should likely be expanded to Roads");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Roads");
}

*["name"=~/ Rdg\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Ridge";
assertMatch: "way \"name\"=Main Rdg.";
throwWarning: tr("Highway name contains postfix Rdg., should likely be expanded to Ridge");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Ridge");
}

*["name"=~/ Rdge\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Ridge";
assertMatch: "way \"name\"=Main Rdge.";
throwWarning: tr("Highway name contains postfix Rdge., should likely be expanded to Ridge");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Ridge");
}

*["name"=~/ Rdgs\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Ridges";
assertMatch: "way \"name\"=Main Rdgs.";
throwWarning: tr("Highway name contains postfix Rdgs., should likely be expanded to Ridges");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Ridges");
}

*["name"=~/ Rw\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Row";
assertMatch: "way \"name\"=Main Rw.";
throwWarning: tr("Highway name contains postfix Rw., should likely be expanded to Row");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Row");
}

*["name"=~/ Rmrd\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Ranch to Market Road";
assertMatch: "way \"name\"=Main Rmrd.";
throwWarning: tr("Highway name contains postfix Rmrd., should likely be expanded to Ranch to Market Road");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Ranch to Market Road");
}

*["name"=~/ Rt\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Route";
assertMatch: "way \"name\"=Main Rt.";
throwWarning: tr("Highway name contains postfix Rt., should likely be expanded to Route");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Route");
}

*["name"=~/ Rte\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Route";
assertMatch: "way \"name\"=Main Rte.";
throwWarning: tr("Highway name contains postfix Rte., should likely be expanded to Route");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Route");
}

*["name"=~/ Rty\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Rotary";
assertMatch: "way \"name\"=Main Rty.";
throwWarning: tr("Highway name contains postfix Rty., should likely be expanded to Rotary");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Rotary");
}

*["name"=~/ Shl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Shoal";
assertMatch: "way \"name\"=Main Shl.";
throwWarning: tr("Highway name contains postfix Shl., should likely be expanded to Shoal");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Shoal");
}

*["name"=~/ Shls\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Shoals";
assertMatch: "way \"name\"=Main Shls.";
throwWarning: tr("Highway name contains postfix Shls., should likely be expanded to Shoals");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Shoals");
}

*["name"=~/ Shr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Shore";
assertMatch: "way \"name\"=Main Shr.";
throwWarning: tr("Highway name contains postfix Shr., should likely be expanded to Shore");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Shore");
}

*["name"=~/ Shrs\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Shores";
assertMatch: "way \"name\"=Main Shrs.";
throwWarning: tr("Highway name contains postfix Shrs., should likely be expanded to Shores");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Shores");
}

*["name"=~/ Skwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Skyway";
assertMatch: "way \"name\"=Main Skwy.";
throwWarning: tr("Highway name contains postfix Skwy., should likely be expanded to Skyway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Skyway");
}

*["name"=~/ Smt\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Summit";
assertMatch: "way \"name\"=Main Smt.";
throwWarning: tr("Highway name contains postfix Smt., should likely be expanded to Summit");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Summit");
}

*["name"=~/ Spg\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Spring";
assertMatch: "way \"name\"=Main Spg.";
throwWarning: tr("Highway name contains postfix Spg., should likely be expanded to Spring");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Spring");
}

*["name"=~/ Spgs\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Springs";
assertMatch: "way \"name\"=Main Spgs.";
throwWarning: tr("Highway name contains postfix Spgs., should likely be expanded to Springs");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Springs");
}

*["name"=~/ Sq\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Square";
assertMatch: "way \"name\"=Main Sq.";
throwWarning: tr("Highway name contains postfix Sq., should likely be expanded to Square");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Square");
}

*["name"=~/ Sqs\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Squares";
assertMatch: "way \"name\"=Main Sqs.";
throwWarning: tr("Highway name contains postfix Sqs., should likely be expanded to Squares");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Squares");
}

*["name"=~/ Srvc\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Service";
assertMatch: "way \"name\"=Main Srvc.";
throwWarning: tr("Highway name contains postfix Srvc., should likely be expanded to Service");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Service");
}

*["name"=~/ St\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Street";
assertMatch: "way \"name\"=Main St.";
throwWarning: tr("Highway name contains postfix St., should likely be expanded to Street");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Street");
}

*["name"=~/ Tce\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Terrace";
assertMatch: "way \"name\"=Main Tce.";
throwWarning: tr("Highway name contains postfix Tce., should likely be expanded to Terrace");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Terrace");
}

*["name"=~/ Ter\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Terrace";
assertMatch: "way \"name\"=Main Ter.";
throwWarning: tr("Highway name contains postfix Ter., should likely be expanded to Terrace");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Terrace");
}

*["name"=~/ Tfwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Trafficway";
assertMatch: "way \"name\"=Main Tfwy.";
throwWarning: tr("Highway name contains postfix Tfwy., should likely be expanded to Trafficway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Trafficway");
}

*["name"=~/ Thfr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Thoroughfare";
assertMatch: "way \"name\"=Main Thfr.";
throwWarning: tr("Highway name contains postfix Thfr., should likely be expanded to Thoroughfare");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Thoroughfare");
}

*["name"=~/ Thwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Throughway";
assertMatch: "way \"name\"=Main Thwy.";
throwWarning: tr("Highway name contains postfix Thwy., should likely be expanded to Throughway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Throughway");
}

*["name"=~/ Tl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Trail";
assertMatch: "way \"name\"=Main Tl.";
throwWarning: tr("Highway name contains postfix Tl., should likely be expanded to Trail");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Trail");
}

*["name"=~/ Tlwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Tollway";
assertMatch: "way \"name\"=Main Tlwy.";
throwWarning: tr("Highway name contains postfix Tlwy., should likely be expanded to Tollway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Tollway");
}

*["name"=~/ Tpke\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Turnpike";
assertMatch: "way \"name\"=Main Tpke.";
throwWarning: tr("Highway name contains postfix Tpke., should likely be expanded to Turnpike");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Turnpike");
}

*["name"=~/ Trce\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Trace";
assertMatch: "way \"name\"=Main Trce.";
throwWarning: tr("Highway name contains postfix Trce., should likely be expanded to Trace");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Trace");
}

*["name"=~/ Tr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Trail";
assertMatch: "way \"name\"=Main Tr.";
throwWarning: tr("Highway name contains postfix Tr., should likely be expanded to Trail");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Trail");
}

*["name"=~/ Trk\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Track";
assertMatch: "way \"name\"=Main Trk.";
throwWarning: tr("Highway name contains postfix Trk., should likely be expanded to Track");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Track");
}

*["name"=~/ Trl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Trail";
assertMatch: "way \"name\"=Main Trl.";
throwWarning: tr("Highway name contains postfix Trl., should likely be expanded to Trail");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Trail");
}

*["name"=~/ Tunl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Tunnel";
assertMatch: "way \"name\"=Main Tunl.";
throwWarning: tr("Highway name contains postfix Tunl., should likely be expanded to Tunnel");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Tunnel");
}

*["name"=~/ Unp\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Underpass";
assertMatch: "way \"name\"=Main Unp.";
throwWarning: tr("Highway name contains postfix Unp., should likely be expanded to Underpass");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Underpass");
}

*["name"=~/ Vl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Villa";
assertMatch: "way \"name\"=Main Vl.";
throwWarning: tr("Highway name contains postfix Vl., should likely be expanded to Villa");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Villa");
}

*["name"=~/ Vlg\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Village";
assertMatch: "way \"name\"=Main Vlg.";
throwWarning: tr("Highway name contains postfix Vlg., should likely be expanded to Village");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Village");
}

*["name"=~/ Vlgs\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Villages";
assertMatch: "way \"name\"=Main Vlgs.";
throwWarning: tr("Highway name contains postfix Vlgs., should likely be expanded to Villages");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Villages");
}

*["name"=~/ Vly\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Valley";
assertMatch: "way \"name\"=Main Vly.";
throwWarning: tr("Highway name contains postfix Vly., should likely be expanded to Valley");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Valley");
}

*["name"=~/ Vw\.$/].highway_name {
assertNoMatch: "way \"name\"=Main View";
assertMatch: "way \"name\"=Main Vw.";
throwWarning: tr("Highway name contains postfix Vw., should likely be expanded to View");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "View");
}

*["name"=~/ Wd\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Wood";
assertMatch: "way \"name\"=Main Wd.";
throwWarning: tr("Highway name contains postfix Wd., should likely be expanded to Wood");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Wood");
}

*["name"=~/ Whrf\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Wharf";
assertMatch: "way \"name\"=Main Whrf.";
throwWarning: tr("Highway name contains postfix Whrf., should likely be expanded to Wharf");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Wharf");
}

*["name"=~/ Wkwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Walkway";
assertMatch: "way \"name\"=Main Wkwy.";
throwWarning: tr("Highway name contains postfix Wkwy., should likely be expanded to Walkway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Walkway");
}

*["name"=~/ Wlk\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Walk";
assertMatch: "way \"name\"=Main Wlk.";
throwWarning: tr("Highway name contains postfix Wlk., should likely be expanded to Walk");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Walk");
}

*["name"=~/ Wy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Way";
assertMatch: "way \"name\"=Main Wy.";
throwWarning: tr("Highway name contains postfix Wy., should likely be expanded to Way");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Way");
}

*["name"=~/ Xing\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Crossing";
assertMatch: "way \"name\"=Main Xing.";
throwWarning: tr("Highway name contains postfix Xing., should likely be expanded to Crossing");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Crossing");
}

*["addr:street"]["addr:street"=~/ Acc /] {
assertNoMatch: "way \"addr:street\"=Main Access East";
assertMatch: "way \"addr:street\"=Main Acc East";
throwWarning: tr("addr:street={0} contains ' Acc ', should likely be expanded to Access","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Acc ", " Access "));
group: tr("addr:street contains Acc, should likely be expanded to Access");
}

*["addr:street"]["addr:street"=~/ Aly /] {
assertNoMatch: "way \"addr:street\"=Main Alley East";
assertMatch: "way \"addr:street\"=Main Aly East";
throwWarning: tr("addr:street={0} contains ' Aly ', should likely be expanded to Alley","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Aly ", " Alley "));
group: tr("addr:street contains Aly, should likely be expanded to Alley");
}

*["addr:street"]["addr:street"=~/ Ambl /] {
assertNoMatch: "way \"addr:street\"=Main Amble East";
assertMatch: "way \"addr:street\"=Main Ambl East";
throwWarning: tr("addr:street={0} contains ' Ambl ', should likely be expanded to Amble","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ambl ", " Amble "));
group: tr("addr:street contains Ambl, should likely be expanded to Amble");
}

*["addr:street"]["addr:street"=~/ App /] {
assertNoMatch: "way \"addr:street\"=Main Approach East";
assertMatch: "way \"addr:street\"=Main App East";
throwWarning: tr("addr:street={0} contains ' App ', should likely be expanded to Approach","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," App ", " Approach "));
group: tr("addr:street contains App, should likely be expanded to Approach");
}

*["addr:street"]["addr:street"=~/ Arc /] {
assertNoMatch: "way \"addr:street\"=Main Arcade East";
assertMatch: "way \"addr:street\"=Main Arc East";
throwWarning: tr("addr:street={0} contains ' Arc ', should likely be expanded to Arcade","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Arc ", " Arcade "));
group: tr("addr:street contains Arc, should likely be expanded to Arcade");
}

*["addr:street"]["addr:street"=~/ Artl /] {
assertNoMatch: "way \"addr:street\"=Main Arterial East";
assertMatch: "way \"addr:street\"=Main Artl East";
throwWarning: tr("addr:street={0} contains ' Artl ', should likely be expanded to Arterial","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Artl ", " Arterial "));
group: tr("addr:street contains Artl, should likely be expanded to Arterial");
}

*["addr:street"]["addr:street"=~/ Arty /] {
assertNoMatch: "way \"addr:street\"=Main Artery East";
assertMatch: "way \"addr:street\"=Main Arty East";
throwWarning: tr("addr:street={0} contains ' Arty ', should likely be expanded to Artery","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Arty ", " Artery "));
group: tr("addr:street contains Arty, should likely be expanded to Artery");
}

*["addr:street"]["addr:street"=~/ Av /] {
assertNoMatch: "way \"addr:street\"=Main Avenue East";
assertMatch: "way \"addr:street\"=Main Av East";
throwWarning: tr("addr:street={0} contains ' Av ', should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Av ", " Avenue "));
group: tr("addr:street contains Av, should likely be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/ Ave /] {
assertNoMatch: "way \"addr:street\"=Main Avenue East";
assertMatch: "way \"addr:street\"=Main Ave East";
throwWarning: tr("addr:street={0} contains ' Ave ', should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ave ", " Avenue "));
group: tr("addr:street contains Ave, should likely be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/ Bch /] {
assertNoMatch: "way \"addr:street\"=Main Beach East";
assertMatch: "way \"addr:street\"=Main Bch East";
throwWarning: tr("addr:street={0} contains ' Bch ', should likely be expanded to Beach","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bch ", " Beach "));
group: tr("addr:street contains Bch, should likely be expanded to Beach");
}

*["addr:street"]["addr:street"=~/ Bg /] {
assertNoMatch: "way \"addr:street\"=Main Burg East";
assertMatch: "way \"addr:street\"=Main Bg East";
throwWarning: tr("addr:street={0} contains ' Bg ', should likely be expanded to Burg","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bg ", " Burg "));
group: tr("addr:street contains Bg, should likely be expanded to Burg");
}

*["addr:street"]["addr:street"=~/ Bgs /] {
assertNoMatch: "way \"addr:street\"=Main Burgs East";
assertMatch: "way \"addr:street\"=Main Bgs East";
throwWarning: tr("addr:street={0} contains ' Bgs ', should likely be expanded to Burgs","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bgs ", " Burgs "));
group: tr("addr:street contains Bgs, should likely be expanded to Burgs");
}

*["addr:street"]["addr:street"=~/ Blf /] {
assertNoMatch: "way \"addr:street\"=Main Bluff East";
assertMatch: "way \"addr:street\"=Main Blf East";
throwWarning: tr("addr:street={0} contains ' Blf ', should likely be expanded to Bluff","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Blf ", " Bluff "));
group: tr("addr:street contains Blf, should likely be expanded to Bluff");
}

*["addr:street"]["addr:street"=~/ Blk /] {
assertNoMatch: "way \"addr:street\"=Main Block East";
assertMatch: "way \"addr:street\"=Main Blk East";
throwWarning: tr("addr:street={0} contains ' Blk ', should likely be expanded to Block","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Blk ", " Block "));
group: tr("addr:street contains Blk, should likely be expanded to Block");
}

*["addr:street"]["addr:street"=~/ Blv /] {
assertNoMatch: "way \"addr:street\"=Main Boulevard East";
assertMatch: "way \"addr:street\"=Main Blv East";
throwWarning: tr("addr:street={0} contains ' Blv ', should likely be expanded to Boulevard","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Blv ", " Boulevard "));
group: tr("addr:street contains Blv, should likely be expanded to Boulevard");
}

*["addr:street"]["addr:street"=~/ Blvd /] {
assertNoMatch: "way \"addr:street\"=Main Boulevard East";
assertMatch: "way \"addr:street\"=Main Blvd East";
throwWarning: tr("addr:street={0} contains ' Blvd ', should likely be expanded to Boulevard","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Blvd ", " Boulevard "));
group: tr("addr:street contains Blvd, should likely be expanded to Boulevard");
}

*["addr:street"]["addr:street"=~/ Bnd /] {
assertNoMatch: "way \"addr:street\"=Main Bend East";
assertMatch: "way \"addr:street\"=Main Bnd East";
throwWarning: tr("addr:street={0} contains ' Bnd ', should likely be expanded to Bend","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bnd ", " Bend "));
group: tr("addr:street contains Bnd, should likely be expanded to Bend");
}

*["addr:street"]["addr:street"=~/ Br /] {
assertNoMatch: "way \"addr:street\"=Main Bridge East";
assertMatch: "way \"addr:street\"=Main Br East";
throwWarning: tr("addr:street={0} contains ' Br ', should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Br ", " Bridge "));
group: tr("addr:street contains Br, should likely be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/ Brg /] {
assertNoMatch: "way \"addr:street\"=Main Bridge East";
assertMatch: "way \"addr:street\"=Main Brg East";
throwWarning: tr("addr:street={0} contains ' Brg ', should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Brg ", " Bridge "));
group: tr("addr:street contains Brg, should likely be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/ Btm /] {
assertNoMatch: "way \"addr:street\"=Main Bottom East";
assertMatch: "way \"addr:street\"=Main Btm East";
throwWarning: tr("addr:street={0} contains ' Btm ', should likely be expanded to Bottom","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Btm ", " Bottom "));
group: tr("addr:street contains Btm, should likely be expanded to Bottom");
}

*["addr:street"]["addr:street"=~/ Bwlk /] {
assertNoMatch: "way \"addr:street\"=Main Boardwalk East";
assertMatch: "way \"addr:street\"=Main Bwlk East";
throwWarning: tr("addr:street={0} contains ' Bwlk ', should likely be expanded to Boardwalk","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bwlk ", " Boardwalk "));
group: tr("addr:street contains Bwlk, should likely be expanded to Boardwalk");
}

*["addr:street"]["addr:street"=~/ Byp /] {
assertNoMatch: "way \"addr:street\"=Main Bypass East";
assertMatch: "way \"addr:street\"=Main Byp East";
throwWarning: tr("addr:street={0} contains ' Byp ', should likely be expanded to Bypass","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Byp ", " Bypass "));
group: tr("addr:street contains Byp, should likely be expanded to Bypass");
}

*["addr:street"]["addr:street"=~/ Bypa /] {
assertNoMatch: "way \"addr:street\"=Main Bypass East";
assertMatch: "way \"addr:street\"=Main Bypa East";
throwWarning: tr("addr:street={0} contains ' Bypa ', should likely be expanded to Bypass","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bypa ", " Bypass "));
group: tr("addr:street contains Bypa, should likely be expanded to Bypass");
}

*["addr:street"]["addr:street"=~/ Byu /] {
assertNoMatch: "way \"addr:street\"=Main Byou East";
assertMatch: "way \"addr:street\"=Main Byu East";
throwWarning: tr("addr:street={0} contains ' Byu ', should likely be expanded to Byou","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Byu ", " Byou "));
group: tr("addr:street contains Byu, should likely be expanded to Byou");
}

*["addr:street"]["addr:street"=~/ Bywy /] {
assertNoMatch: "way \"addr:street\"=Main Byway East";
assertMatch: "way \"addr:street\"=Main Bywy East";
throwWarning: tr("addr:street={0} contains ' Bywy ', should likely be expanded to Byway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bywy ", " Byway "));
group: tr("addr:street contains Bywy, should likely be expanded to Byway");
}

*["addr:street"]["addr:street"=~/ Bzr /] {
assertNoMatch: "way \"addr:street\"=Main Bazaar East";
assertMatch: "way \"addr:street\"=Main Bzr East";
throwWarning: tr("addr:street={0} contains ' Bzr ', should likely be expanded to Bazaar","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bzr ", " Bazaar "));
group: tr("addr:street contains Bzr, should likely be expanded to Bazaar");
}

*["addr:street"]["addr:street"=~/ Cct /] {
assertNoMatch: "way \"addr:street\"=Main Circuit East";
assertMatch: "way \"addr:street\"=Main Cct East";
throwWarning: tr("addr:street={0} contains ' Cct ', should likely be expanded to Circuit","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cct ", " Circuit "));
group: tr("addr:street contains Cct, should likely be expanded to Circuit");
}

*["addr:street"]["addr:street"=~/ Ch /] {
assertNoMatch: "way \"addr:street\"=Main Chase East";
assertMatch: "way \"addr:street\"=Main Ch East";
throwWarning: tr("addr:street={0} contains ' Ch ', should likely be expanded to Chase","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ch ", " Chase "));
group: tr("addr:street contains Ch, should likely be expanded to Chase");
}

*["addr:street"]["addr:street"=~/ Cir /] {
assertNoMatch: "way \"addr:street\"=Main Circle East";
assertMatch: "way \"addr:street\"=Main Cir East";
throwWarning: tr("addr:street={0} contains ' Cir ', should likely be expanded to Circle","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cir ", " Circle "));
group: tr("addr:street contains Cir, should likely be expanded to Circle");
}

*["addr:street"]["addr:street"=~/ Cirs /] {
assertNoMatch: "way \"addr:street\"=Main Circles East";
assertMatch: "way \"addr:street\"=Main Cirs East";
throwWarning: tr("addr:street={0} contains ' Cirs ', should likely be expanded to Circles","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cirs ", " Circles "));
group: tr("addr:street contains Cirs, should likely be expanded to Circles");
}

*["addr:street"]["addr:street"=~/ Clf /] {
assertNoMatch: "way \"addr:street\"=Main Cliff East";
assertMatch: "way \"addr:street\"=Main Clf East";
throwWarning: tr("addr:street={0} contains ' Clf ', should likely be expanded to Cliff","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Clf ", " Cliff "));
group: tr("addr:street contains Clf, should likely be expanded to Cliff");
}

*["addr:street"]["addr:street"=~/ Clfs /] {
assertNoMatch: "way \"addr:street\"=Main Cliffs East";
assertMatch: "way \"addr:street\"=Main Clfs East";
throwWarning: tr("addr:street={0} contains ' Clfs ', should likely be expanded to Cliffs","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Clfs ", " Cliffs "));
group: tr("addr:street contains Clfs, should likely be expanded to Cliffs");
}

*["addr:street"]["addr:street"=~/ Cly /] {
assertNoMatch: "way \"addr:street\"=Main Colony East";
assertMatch: "way \"addr:street\"=Main Cly East";
throwWarning: tr("addr:street={0} contains ' Cly ', should likely be expanded to Colony","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cly ", " Colony "));
group: tr("addr:street contains Cly, should likely be expanded to Colony");
}

*["addr:street"]["addr:street"=~/ Cmn /] {
assertNoMatch: "way \"addr:street\"=Main Common East";
assertMatch: "way \"addr:street\"=Main Cmn East";
throwWarning: tr("addr:street={0} contains ' Cmn ', should likely be expanded to Common","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cmn ", " Common "));
group: tr("addr:street contains Cmn, should likely be expanded to Common");
}

*["addr:street"]["addr:street"=~/ Cnl /] {
assertNoMatch: "way \"addr:street\"=Main Canal East";
assertMatch: "way \"addr:street\"=Main Cnl East";
throwWarning: tr("addr:street={0} contains ' Cnl ', should likely be expanded to Canal","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cnl ", " Canal "));
group: tr("addr:street contains Cnl, should likely be expanded to Canal");
}

*["addr:street"]["addr:street"=~/ Cnr /] {
assertNoMatch: "way \"addr:street\"=Main Corner East";
assertMatch: "way \"addr:street\"=Main Cnr East";
throwWarning: tr("addr:street={0} contains ' Cnr ', should likely be expanded to Corner","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cnr ", " Corner "));
group: tr("addr:street contains Cnr, should likely be expanded to Corner");
}

*["addr:street"]["addr:street"=~/ Coll /] {
assertNoMatch: "way \"addr:street\"=Main College East";
assertMatch: "way \"addr:street\"=Main Coll East";
throwWarning: tr("addr:street={0} contains ' Coll ', should likely be expanded to College","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Coll ", " College "));
group: tr("addr:street contains Coll, should likely be expanded to College");
}

*["addr:street"]["addr:street"=~/ Cpe /] {
assertNoMatch: "way \"addr:street\"=Main Cape East";
assertMatch: "way \"addr:street\"=Main Cpe East";
throwWarning: tr("addr:street={0} contains ' Cpe ', should likely be expanded to Cape","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cpe ", " Cape "));
group: tr("addr:street contains Cpe, should likely be expanded to Cape");
}

*["addr:street"]["addr:street"=~/ Cr /] {
assertNoMatch: "way \"addr:street\"=Main Creek East";
assertMatch: "way \"addr:street\"=Main Cr East";
throwWarning: tr("addr:street={0} contains ' Cr ', should likely be expanded to Creek","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cr ", " Creek "));
group: tr("addr:street contains Cr, should likely be expanded to Creek");
}

*["addr:street"]["addr:street"=~/ Crk /] {
assertNoMatch: "way \"addr:street\"=Main Creek East";
assertMatch: "way \"addr:street\"=Main Crk East";
throwWarning: tr("addr:street={0} contains ' Crk ', should likely be expanded to Creek","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Crk ", " Creek "));
group: tr("addr:street contains Crk, should likely be expanded to Creek");
}

*["addr:street"]["addr:street"=~/ Cres /] {
assertNoMatch: "way \"addr:street\"=Main Crescent East";
assertMatch: "way \"addr:street\"=Main Cres East";
throwWarning: tr("addr:street={0} contains ' Cres ', should likely be expanded to Crescent","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cres ", " Crescent "));
group: tr("addr:street contains Cres, should likely be expanded to Crescent");
}

*["addr:street"]["addr:street"=~/ Crst /] {
assertNoMatch: "way \"addr:street\"=Main Crest East";
assertMatch: "way \"addr:street\"=Main Crst East";
throwWarning: tr("addr:street={0} contains ' Crst ', should likely be expanded to Crest","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Crst ", " Crest "));
group: tr("addr:street contains Crst, should likely be expanded to Crest");
}

*["addr:street"]["addr:street"=~/ Cswy /] {
assertNoMatch: "way \"addr:street\"=Main Causeway East";
assertMatch: "way \"addr:street\"=Main Cswy East";
throwWarning: tr("addr:street={0} contains ' Cswy ', should likely be expanded to Causeway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cswy ", " Causeway "));
group: tr("addr:street contains Cswy, should likely be expanded to Causeway");
}

*["addr:street"]["addr:street"=~/ Ct /] {
assertNoMatch: "way \"addr:street\"=Main Court East";
assertMatch: "way \"addr:street\"=Main Ct East";
throwWarning: tr("addr:street={0} contains ' Ct ', should likely be expanded to Court","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ct ", " Court "));
group: tr("addr:street contains Ct, should likely be expanded to Court");
}

*["addr:street"]["addr:street"=~/ Ctr /] {
assertNoMatch: "way \"addr:street\"=Main Center East";
assertMatch: "way \"addr:street\"=Main Ctr East";
throwWarning: tr("addr:street={0} contains ' Ctr ', should likely be expanded to Center","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ctr ", " Center "));
group: tr("addr:street contains Ctr, should likely be expanded to Center");
}

*["addr:street"]["addr:street"=~/ Cts /] {
assertNoMatch: "way \"addr:street\"=Main Courts East";
assertMatch: "way \"addr:street\"=Main Cts East";
throwWarning: tr("addr:street={0} contains ' Cts ', should likely be expanded to Courts","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cts ", " Courts "));
group: tr("addr:street contains Cts, should likely be expanded to Courts");
}

*["addr:street"]["addr:street"=~/ Ctyd /] {
assertNoMatch: "way \"addr:street\"=Main Courtyard East";
assertMatch: "way \"addr:street\"=Main Ctyd East";
throwWarning: tr("addr:street={0} contains ' Ctyd ', should likely be expanded to Courtyard","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ctyd ", " Courtyard "));
group: tr("addr:street contains Ctyd, should likely be expanded to Courtyard");
}

*["addr:street"]["addr:street"=~/ Curv /] {
assertNoMatch: "way \"addr:street\"=Main Curve East";
assertMatch: "way \"addr:street\"=Main Curv East";
throwWarning: tr("addr:street={0} contains ' Curv ', should likely be expanded to Curve","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Curv ", " Curve "));
group: tr("addr:street contains Curv, should likely be expanded to Curve");
}

*["addr:street"]["addr:street"=~/ Cutt /] {
assertNoMatch: "way \"addr:street\"=Main Cutting East";
assertMatch: "way \"addr:street\"=Main Cutt East";
throwWarning: tr("addr:street={0} contains ' Cutt ', should likely be expanded to Cutting","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cutt ", " Cutting "));
group: tr("addr:street contains Cutt, should likely be expanded to Cutting");
}

*["addr:street"]["addr:street"=~/ Cv /] {
assertNoMatch: "way \"addr:street\"=Main Cove East";
assertMatch: "way \"addr:street\"=Main Cv East";
throwWarning: tr("addr:street={0} contains ' Cv ', should likely be expanded to Cove","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cv ", " Cove "));
group: tr("addr:street contains Cv, should likely be expanded to Cove");
}

*["addr:street"]["addr:street"=~/ Cyn /] {
assertNoMatch: "way \"addr:street\"=Main Canyon East";
assertMatch: "way \"addr:street\"=Main Cyn East";
throwWarning: tr("addr:street={0} contains ' Cyn ', should likely be expanded to Canyon","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cyn ", " Canyon "));
group: tr("addr:street contains Cyn, should likely be expanded to Canyon");
}

*["addr:street"]["addr:street"=~/ Dl /] {
assertNoMatch: "way \"addr:street\"=Main Dale East";
assertMatch: "way \"addr:street\"=Main Dl East";
throwWarning: tr("addr:street={0} contains ' Dl ', should likely be expanded to Dale","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Dl ", " Dale "));
group: tr("addr:street contains Dl, should likely be expanded to Dale");
}

*["addr:street"]["addr:street"=~/ Dr /] {
assertNoMatch: "way \"addr:street\"=Main Drive East";
assertMatch: "way \"addr:street\"=Main Dr East";
throwWarning: tr("addr:street={0} contains ' Dr ', should likely be expanded to Drive","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Dr ", " Drive "));
group: tr("addr:street contains Dr, should likely be expanded to Drive");
}

*["addr:street"]["addr:street"=~/ Dv /] {
assertNoMatch: "way \"addr:street\"=Main Drive East";
assertMatch: "way \"addr:street\"=Main Dv East";
throwWarning: tr("addr:street={0} contains ' Dv ', should likely be expanded to Drive","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Dv ", " Drive "));
group: tr("addr:street contains Dv, should likely be expanded to Drive");
}

*["addr:street"]["addr:street"=~/ Dvwy /] {
assertNoMatch: "way \"addr:street\"=Main Driveway East";
assertMatch: "way \"addr:street\"=Main Dvwy East";
throwWarning: tr("addr:street={0} contains ' Dvwy ', should likely be expanded to Driveway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Dvwy ", " Driveway "));
group: tr("addr:street contains Dvwy, should likely be expanded to Driveway");
}

*["addr:street"]["addr:street"=~/ Elb /] {
assertNoMatch: "way \"addr:street\"=Main Elbow East";
assertMatch: "way \"addr:street\"=Main Elb East";
throwWarning: tr("addr:street={0} contains ' Elb ', should likely be expanded to Elbow","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Elb ", " Elbow "));
group: tr("addr:street contains Elb, should likely be expanded to Elbow");
}

*["addr:street"]["addr:street"=~/ Est /] {
assertNoMatch: "way \"addr:street\"=Main Estate East";
assertMatch: "way \"addr:street\"=Main Est East";
throwWarning: tr("addr:street={0} contains ' Est ', should likely be expanded to Estate","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Est ", " Estate "));
group: tr("addr:street contains Est, should likely be expanded to Estate");
}

*["addr:street"]["addr:street"=~/ Ests /] {
assertNoMatch: "way \"addr:street\"=Main Estates East";
assertMatch: "way \"addr:street\"=Main Ests East";
throwWarning: tr("addr:street={0} contains ' Ests ', should likely be expanded to Estates","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ests ", " Estates "));
group: tr("addr:street contains Ests, should likely be expanded to Estates");
}

*["addr:street"]["addr:street"=~/ Expy /] {
assertNoMatch: "way \"addr:street\"=Main Expressway East";
assertMatch: "way \"addr:street\"=Main Expy East";
throwWarning: tr("addr:street={0} contains ' Expy ', should likely be expanded to Expressway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Expy ", " Expressway "));
group: tr("addr:street contains Expy, should likely be expanded to Expressway");
}

*["addr:street"]["addr:street"=~/ Expwy /] {
assertNoMatch: "way \"addr:street\"=Main Expressway East";
assertMatch: "way \"addr:street\"=Main Expwy East";
throwWarning: tr("addr:street={0} contains ' Expwy ', should likely be expanded to Expressway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Expwy ", " Expressway "));
group: tr("addr:street contains Expwy, should likely be expanded to Expressway");
}

*["addr:street"]["addr:street"=~/ Fawy /] {
assertNoMatch: "way \"addr:street\"=Main Fairway East";
assertMatch: "way \"addr:street\"=Main Fawy East";
throwWarning: tr("addr:street={0} contains ' Fawy ', should likely be expanded to Fairway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fawy ", " Fairway "));
group: tr("addr:street contains Fawy, should likely be expanded to Fairway");
}

*["addr:street"]["addr:street"=~/ Fld /] {
assertNoMatch: "way \"addr:street\"=Main Field East";
assertMatch: "way \"addr:street\"=Main Fld East";
throwWarning: tr("addr:street={0} contains ' Fld ', should likely be expanded to Field","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fld ", " Field "));
group: tr("addr:street contains Fld, should likely be expanded to Field");
}

*["addr:street"]["addr:street"=~/ Flds /] {
assertNoMatch: "way \"addr:street\"=Main Fields East";
assertMatch: "way \"addr:street\"=Main Flds East";
throwWarning: tr("addr:street={0} contains ' Flds ', should likely be expanded to Fields","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Flds ", " Fields "));
group: tr("addr:street contains Flds, should likely be expanded to Fields");
}

*["addr:street"]["addr:street"=~/ Fmrd /] {
assertNoMatch: "way \"addr:street\"=Main Farm to Market Road East";
assertMatch: "way \"addr:street\"=Main Fmrd East";
throwWarning: tr("addr:street={0} contains ' Fmrd ', should likely be expanded to Farm to Market Road","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fmrd ", " Farm to Market Road "));
group: tr("addr:street contains Fmrd, should likely be expanded to Farm to Market Road");
}

*["addr:street"]["addr:street"=~/ Ftrl /] {
assertNoMatch: "way \"addr:street\"=Main Firetrail East";
assertMatch: "way \"addr:street\"=Main Ftrl East";
throwWarning: tr("addr:street={0} contains ' Ftrl ', should likely be expanded to Firetrail","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ftrl ", " Firetrail "));
group: tr("addr:street contains Ftrl, should likely be expanded to Firetrail");
}

*["addr:street"]["addr:street"=~/ Frk /] {
assertNoMatch: "way \"addr:street\"=Main Fork East";
assertMatch: "way \"addr:street\"=Main Frk East";
throwWarning: tr("addr:street={0} contains ' Frk ', should likely be expanded to Fork","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Frk ", " Fork "));
group: tr("addr:street contains Frk, should likely be expanded to Fork");
}

*["addr:street"]["addr:street"=~/ Fry /] {
assertNoMatch: "way \"addr:street\"=Main Ferry East";
assertMatch: "way \"addr:street\"=Main Fry East";
throwWarning: tr("addr:street={0} contains ' Fry ', should likely be expanded to Ferry","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fry ", " Ferry "));
group: tr("addr:street contains Fry, should likely be expanded to Ferry");
}

*["addr:street"]["addr:street"=~/ Fwy /] {
assertNoMatch: "way \"addr:street\"=Main Freeway East";
assertMatch: "way \"addr:street\"=Main Fwy East";
throwWarning: tr("addr:street={0} contains ' Fwy ', should likely be expanded to Freeway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fwy ", " Freeway "));
group: tr("addr:street contains Fwy, should likely be expanded to Freeway");
}

*["addr:street"]["addr:street"=~/ Gd /] {
assertNoMatch: "way \"addr:street\"=Main Grade East";
assertMatch: "way \"addr:street\"=Main Gd East";
throwWarning: tr("addr:street={0} contains ' Gd ', should likely be expanded to Grade","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gd ", " Grade "));
group: tr("addr:street contains Gd, should likely be expanded to Grade");
}

*["addr:street"]["addr:street"=~/ Gdns /] {
assertNoMatch: "way \"addr:street\"=Main Gardens East";
assertMatch: "way \"addr:street\"=Main Gdns East";
throwWarning: tr("addr:street={0} contains ' Gdns ', should likely be expanded to Gardens","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gdns ", " Gardens "));
group: tr("addr:street contains Gdns, should likely be expanded to Gardens");
}

*["addr:street"]["addr:street"=~/ Gr /] {
assertNoMatch: "way \"addr:street\"=Main Grove East";
assertMatch: "way \"addr:street\"=Main Gr East";
throwWarning: tr("addr:street={0} contains ' Gr ', should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gr ", " Grove "));
group: tr("addr:street contains Gr, should likely be expanded to Grove");
}

*["addr:street"]["addr:street"=~/ Gro /] {
assertNoMatch: "way \"addr:street\"=Main Grove East";
assertMatch: "way \"addr:street\"=Main Gro East";
throwWarning: tr("addr:street={0} contains ' Gro ', should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gro ", " Grove "));
group: tr("addr:street contains Gro, should likely be expanded to Grove");
}

*["addr:street"]["addr:street"=~/ Grv /] {
assertNoMatch: "way \"addr:street\"=Main Grove East";
assertMatch: "way \"addr:street\"=Main Grv East";
throwWarning: tr("addr:street={0} contains ' Grv ', should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Grv ", " Grove "));
group: tr("addr:street contains Grv, should likely be expanded to Grove");
}

*["addr:street"]["addr:street"=~/ Hbr /] {
assertNoMatch: "way \"addr:street\"=Main Harbor East";
assertMatch: "way \"addr:street\"=Main Hbr East";
throwWarning: tr("addr:street={0} contains ' Hbr ', should likely be expanded to Harbor","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hbr ", " Harbor "));
group: tr("addr:street contains Hbr, should likely be expanded to Harbor");
}

*["addr:street"]["addr:street"=~/ Hl /] {
assertNoMatch: "way \"addr:street\"=Main Hill East";
assertMatch: "way \"addr:street\"=Main Hl East";
throwWarning: tr("addr:street={0} contains ' Hl ', should likely be expanded to Hill","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hl ", " Hill "));
group: tr("addr:street contains Hl, should likely be expanded to Hill");
}

*["addr:street"]["addr:street"=~/ Hls /] {
assertNoMatch: "way \"addr:street\"=Main Hills East";
assertMatch: "way \"addr:street\"=Main Hls East";
throwWarning: tr("addr:street={0} contains ' Hls ', should likely be expanded to Hills","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hls ", " Hills "));
group: tr("addr:street contains Hls, should likely be expanded to Hills");
}

*["addr:street"]["addr:street"=~/ Holw /] {
assertNoMatch: "way \"addr:street\"=Main Hollow East";
assertMatch: "way \"addr:street\"=Main Holw East";
throwWarning: tr("addr:street={0} contains ' Holw ', should likely be expanded to Hollow","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Holw ", " Hollow "));
group: tr("addr:street contains Holw, should likely be expanded to Hollow");
}

*["addr:street"]["addr:street"=~/ Hts /] {
assertNoMatch: "way \"addr:street\"=Main Heights East";
assertMatch: "way \"addr:street\"=Main Hts East";
throwWarning: tr("addr:street={0} contains ' Hts ', should likely be expanded to Heights","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hts ", " Heights "));
group: tr("addr:street contains Hts, should likely be expanded to Heights");
}

*["addr:street"]["addr:street"=~/ Hw /] {
assertNoMatch: "way \"addr:street\"=Main Highway East";
assertMatch: "way \"addr:street\"=Main Hw East";
throwWarning: tr("addr:street={0} contains ' Hw ', should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hw ", " Highway "));
group: tr("addr:street contains Hw, should likely be expanded to Highway");
}

*["addr:street"]["addr:street"=~/ Hwy /] {
assertNoMatch: "way \"addr:street\"=Main Highway East";
assertMatch: "way \"addr:street\"=Main Hwy East";
throwWarning: tr("addr:street={0} contains ' Hwy ', should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hwy ", " Highway "));
group: tr("addr:street contains Hwy, should likely be expanded to Highway");
}

*["addr:street"]["addr:street"=~/ Hvn /] {
assertNoMatch: "way \"addr:street\"=Main Haven East";
assertMatch: "way \"addr:street\"=Main Hvn East";
throwWarning: tr("addr:street={0} contains ' Hvn ', should likely be expanded to Haven","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hvn ", " Haven "));
group: tr("addr:street contains Hvn, should likely be expanded to Haven");
}

*["addr:street"]["addr:street"=~/ Intg /] {
assertNoMatch: "way \"addr:street\"=Main Interchange East";
assertMatch: "way \"addr:street\"=Main Intg East";
throwWarning: tr("addr:street={0} contains ' Intg ', should likely be expanded to Interchange","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Intg ", " Interchange "));
group: tr("addr:street contains Intg, should likely be expanded to Interchange");
}

*["addr:street"]["addr:street"=~/ Iss /] {
assertNoMatch: "way \"addr:street\"=Main Islands East";
assertMatch: "way \"addr:street\"=Main Iss East";
throwWarning: tr("addr:street={0} contains ' Iss ', should likely be expanded to Islands","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Iss ", " Islands "));
group: tr("addr:street contains Iss, should likely be expanded to Islands");
}

*["addr:street"]["addr:street"=~/ Jct /] {
assertNoMatch: "way \"addr:street\"=Main Junction East";
assertMatch: "way \"addr:street\"=Main Jct East";
throwWarning: tr("addr:street={0} contains ' Jct ', should likely be expanded to Junction","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Jct ", " Junction "));
group: tr("addr:street contains Jct, should likely be expanded to Junction");
}

*["addr:street"]["addr:street"=~/ Jn /] {
assertNoMatch: "way \"addr:street\"=Main Junction East";
assertMatch: "way \"addr:street\"=Main Jn East";
throwWarning: tr("addr:street={0} contains ' Jn ', should likely be expanded to Junction","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Jn ", " Junction "));
group: tr("addr:street contains Jn, should likely be expanded to Junction");
}

*["addr:street"]["addr:street"=~/ Jnc /] {
assertNoMatch: "way \"addr:street\"=Main Junction East";
assertMatch: "way \"addr:street\"=Main Jnc East";
throwWarning: tr("addr:street={0} contains ' Jnc ', should likely be expanded to Junction","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Jnc ", " Junction "));
group: tr("addr:street contains Jnc, should likely be expanded to Junction");
}

*["addr:street"]["addr:street"=~/ Knl /] {
assertNoMatch: "way \"addr:street\"=Main Knoll East";
assertMatch: "way \"addr:street\"=Main Knl East";
throwWarning: tr("addr:street={0} contains ' Knl ', should likely be expanded to Knoll","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Knl ", " Knoll "));
group: tr("addr:street contains Knl, should likely be expanded to Knoll");
}

*["addr:street"]["addr:street"=~/ Knls /] {
assertNoMatch: "way \"addr:street\"=Main Knolls East";
assertMatch: "way \"addr:street\"=Main Knls East";
throwWarning: tr("addr:street={0} contains ' Knls ', should likely be expanded to Knolls","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Knls ", " Knolls "));
group: tr("addr:street contains Knls, should likely be expanded to Knolls");
}

*["addr:street"]["addr:street"=~/ Ky /] {
assertNoMatch: "way \"addr:street\"=Main Key East";
assertMatch: "way \"addr:street\"=Main Ky East";
throwWarning: tr("addr:street={0} contains ' Ky ', should likely be expanded to Key","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ky ", " Key "));
group: tr("addr:street contains Ky, should likely be expanded to Key");
}

*["addr:street"]["addr:street"=~/ Kys /] {
assertNoMatch: "way \"addr:street\"=Main Keys East";
assertMatch: "way \"addr:street\"=Main Kys East";
throwWarning: tr("addr:street={0} contains ' Kys ', should likely be expanded to Keys","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Kys ", " Keys "));
group: tr("addr:street contains Kys, should likely be expanded to Keys");
}

*["addr:street"]["addr:street"=~/ Lck /] {
assertNoMatch: "way \"addr:street\"=Main Lock East";
assertMatch: "way \"addr:street\"=Main Lck East";
throwWarning: tr("addr:street={0} contains ' Lck ', should likely be expanded to Lock","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lck ", " Lock "));
group: tr("addr:street contains Lck, should likely be expanded to Lock");
}

*["addr:street"]["addr:street"=~/ Lcks /] {
assertNoMatch: "way \"addr:street\"=Main Locks East";
assertMatch: "way \"addr:street\"=Main Lcks East";
throwWarning: tr("addr:street={0} contains ' Lcks ', should likely be expanded to Locks","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lcks ", " Locks "));
group: tr("addr:street contains Lcks, should likely be expanded to Locks");
}

*["addr:street"]["addr:street"=~/ Ldg /] {
assertNoMatch: "way \"addr:street\"=Main Lodge East";
assertMatch: "way \"addr:street\"=Main Ldg East";
throwWarning: tr("addr:street={0} contains ' Ldg ', should likely be expanded to Lodge","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ldg ", " Lodge "));
group: tr("addr:street contains Ldg, should likely be expanded to Lodge");
}

*["addr:street"]["addr:street"=~/ Lk /] {
assertNoMatch: "way \"addr:street\"=Main Lake East";
assertMatch: "way \"addr:street\"=Main Lk East";
throwWarning: tr("addr:street={0} contains ' Lk ', should likely be expanded to Lake","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lk ", " Lake "));
group: tr("addr:street contains Lk, should likely be expanded to Lake");
}

*["addr:street"]["addr:street"=~/ Lks /] {
assertNoMatch: "way \"addr:street\"=Main Lakes East";
assertMatch: "way \"addr:street\"=Main Lks East";
throwWarning: tr("addr:street={0} contains ' Lks ', should likely be expanded to Lakes","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lks ", " Lakes "));
group: tr("addr:street contains Lks, should likely be expanded to Lakes");
}

*["addr:street"]["addr:street"=~/ Lkt /] {
assertNoMatch: "way \"addr:street\"=Main Lookout East";
assertMatch: "way \"addr:street\"=Main Lkt East";
throwWarning: tr("addr:street={0} contains ' Lkt ', should likely be expanded to Lookout","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lkt ", " Lookout "));
group: tr("addr:street contains Lkt, should likely be expanded to Lookout");
}

*["addr:street"]["addr:street"=~/ Ln /] {
assertNoMatch: "way \"addr:street\"=Main Lane East";
assertMatch: "way \"addr:street\"=Main Ln East";
throwWarning: tr("addr:street={0} contains ' Ln ', should likely be expanded to Lane","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ln ", " Lane "));
group: tr("addr:street contains Ln, should likely be expanded to Lane");
}

*["addr:street"]["addr:street"=~/ Lndg /] {
assertNoMatch: "way \"addr:street\"=Main Landing East";
assertMatch: "way \"addr:street\"=Main Lndg East";
throwWarning: tr("addr:street={0} contains ' Lndg ', should likely be expanded to Landing","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lndg ", " Landing "));
group: tr("addr:street contains Lndg, should likely be expanded to Landing");
}

*["addr:street"]["addr:street"=~/ Lp /] {
assertNoMatch: "way \"addr:street\"=Main Loop East";
assertMatch: "way \"addr:street\"=Main Lp East";
throwWarning: tr("addr:street={0} contains ' Lp ', should likely be expanded to Loop","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lp ", " Loop "));
group: tr("addr:street contains Lp, should likely be expanded to Loop");
}

*["addr:street"]["addr:street"=~/ Mal /] {
assertNoMatch: "way \"addr:street\"=Main Mall East";
assertMatch: "way \"addr:street\"=Main Mal East";
throwWarning: tr("addr:street={0} contains ' Mal ', should likely be expanded to Mall","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mal ", " Mall "));
group: tr("addr:street contains Mal, should likely be expanded to Mall");
}

*["addr:street"]["addr:street"=~/ Mdw /] {
assertNoMatch: "way \"addr:street\"=Main Meadow East";
assertMatch: "way \"addr:street\"=Main Mdw East";
throwWarning: tr("addr:street={0} contains ' Mdw ', should likely be expanded to Meadow","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mdw ", " Meadow "));
group: tr("addr:street contains Mdw, should likely be expanded to Meadow");
}

*["addr:street"]["addr:street"=~/ Mdws /] {
assertNoMatch: "way \"addr:street\"=Main Meadows East";
assertMatch: "way \"addr:street\"=Main Mdws East";
throwWarning: tr("addr:street={0} contains ' Mdws ', should likely be expanded to Meadows","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mdws ", " Meadows "));
group: tr("addr:street contains Mdws, should likely be expanded to Meadows");
}

*["addr:street"]["addr:street"=~/ Mkt /] {
assertNoMatch: "way \"addr:street\"=Main Market East";
assertMatch: "way \"addr:street\"=Main Mkt East";
throwWarning: tr("addr:street={0} contains ' Mkt ', should likely be expanded to Market","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mkt ", " Market "));
group: tr("addr:street contains Mkt, should likely be expanded to Market");
}

*["addr:street"]["addr:street"=~/ Ml /] {
assertNoMatch: "way \"addr:street\"=Main Mill East";
assertMatch: "way \"addr:street\"=Main Ml East";
throwWarning: tr("addr:street={0} contains ' Ml ', should likely be expanded to Mill","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ml ", " Mill "));
group: tr("addr:street contains Ml, should likely be expanded to Mill");
}

*["addr:street"]["addr:street"=~/ Mt /] {
assertNoMatch: "way \"addr:street\"=Main Mount East";
assertMatch: "way \"addr:street\"=Main Mt East";
throwWarning: tr("addr:street={0} contains ' Mt ', should likely be expanded to Mount","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mt ", " Mount "));
group: tr("addr:street contains Mt, should likely be expanded to Mount");
}

*["addr:street"]["addr:street"=~/ Mtn /] {
assertNoMatch: "way \"addr:street\"=Main Mountain East";
assertMatch: "way \"addr:street\"=Main Mtn East";
throwWarning: tr("addr:street={0} contains ' Mtn ', should likely be expanded to Mountain","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mtn ", " Mountain "));
group: tr("addr:street contains Mtn, should likely be expanded to Mountain");
}

*["addr:street"]["addr:street"=~/ Mtwy /] {
assertNoMatch: "way \"addr:street\"=Main Motorway East";
assertMatch: "way \"addr:street\"=Main Mtwy East";
throwWarning: tr("addr:street={0} contains ' Mtwy ', should likely be expanded to Motorway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mtwy ", " Motorway "));
group: tr("addr:street contains Mtwy, should likely be expanded to Motorway");
}

*["addr:street"]["addr:street"=~/ Orch /] {
assertNoMatch: "way \"addr:street\"=Main Orchard East";
assertMatch: "way \"addr:street\"=Main Orch East";
throwWarning: tr("addr:street={0} contains ' Orch ', should likely be expanded to Orchard","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Orch ", " Orchard "));
group: tr("addr:street contains Orch, should likely be expanded to Orchard");
}

*["addr:street"]["addr:street"=~/ Ovps /] {
assertNoMatch: "way \"addr:street\"=Main Overpass East";
assertMatch: "way \"addr:street\"=Main Ovps East";
throwWarning: tr("addr:street={0} contains ' Ovps ', should likely be expanded to Overpass","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ovps ", " Overpass "));
group: tr("addr:street contains Ovps, should likely be expanded to Overpass");
}

*["addr:street"]["addr:street"=~/ Piaz /] {
assertNoMatch: "way \"addr:street\"=Main Piazza East";
assertMatch: "way \"addr:street\"=Main Piaz East";
throwWarning: tr("addr:street={0} contains ' Piaz ', should likely be expanded to Piazza","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Piaz ", " Piazza "));
group: tr("addr:street contains Piaz, should likely be expanded to Piazza");
}

*["addr:street"]["addr:street"=~/ Pk /] {
assertNoMatch: "way \"addr:street\"=Main Peak East";
assertMatch: "way \"addr:street\"=Main Pk East";
throwWarning: tr("addr:street={0} contains ' Pk ', should likely be expanded to Peak","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pk ", " Peak "));
group: tr("addr:street contains Pk, should likely be expanded to Peak");
}

*["addr:street"]["addr:street"=~/ Pky /] {
assertNoMatch: "way \"addr:street\"=Main Parkway East";
assertMatch: "way \"addr:street\"=Main Pky East";
throwWarning: tr("addr:street={0} contains ' Pky ', should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pky ", " Parkway "));
group: tr("addr:street contains Pky, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pkwy /] {
assertNoMatch: "way \"addr:street\"=Main Parkway East";
assertMatch: "way \"addr:street\"=Main Pkwy East";
throwWarning: tr("addr:street={0} contains ' Pkwy ', should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pkwy ", " Parkway "));
group: tr("addr:street contains Pkwy, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pl /] {
assertNoMatch: "way \"addr:street\"=Main Place East";
assertMatch: "way \"addr:street\"=Main Pl East";
throwWarning: tr("addr:street={0} contains ' Pl ', should likely be expanded to Place","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pl ", " Place "));
group: tr("addr:street contains Pl, should likely be expanded to Place");
}

*["addr:street"]["addr:street"=~/ Pln /] {
assertNoMatch: "way \"addr:street\"=Main Plain East";
assertMatch: "way \"addr:street\"=Main Pln East";
throwWarning: tr("addr:street={0} contains ' Pln ', should likely be expanded to Plain","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pln ", " Plain "));
group: tr("addr:street contains Pln, should likely be expanded to Plain");
}

*["addr:street"]["addr:street"=~/ Plns /] {
assertNoMatch: "way \"addr:street\"=Main Plains East";
assertMatch: "way \"addr:street\"=Main Plns East";
throwWarning: tr("addr:street={0} contains ' Plns ', should likely be expanded to Plains","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Plns ", " Plains "));
group: tr("addr:street contains Plns, should likely be expanded to Plains");
}

*["addr:street"]["addr:street"=~/ Plz /] {
assertNoMatch: "way \"addr:street\"=Main Plaza East";
assertMatch: "way \"addr:street\"=Main Plz East";
throwWarning: tr("addr:street={0} contains ' Plz ', should likely be expanded to Plaza","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Plz ", " Plaza "));
group: tr("addr:street contains Plz, should likely be expanded to Plaza");
}

*["addr:street"]["addr:street"=~/ Pnt /] {
assertNoMatch: "way \"addr:street\"=Main Point East";
assertMatch: "way \"addr:street\"=Main Pnt East";
throwWarning: tr("addr:street={0} contains ' Pnt ', should likely be expanded to Point","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pnt ", " Point "));
group: tr("addr:street contains Pnt, should likely be expanded to Point");
}

*["addr:street"]["addr:street"=~/ Prkwy /] {
assertNoMatch: "way \"addr:street\"=Main Parkway East";
assertMatch: "way \"addr:street\"=Main Prkwy East";
throwWarning: tr("addr:street={0} contains ' Prkwy ', should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Prkwy ", " Parkway "));
group: tr("addr:street contains Prkwy, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pt /] {
assertNoMatch: "way \"addr:street\"=Main Point East";
assertMatch: "way \"addr:street\"=Main Pt East";
throwWarning: tr("addr:street={0} contains ' Pt ', should likely be expanded to Point","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pt ", " Point "));
group: tr("addr:street contains Pt, should likely be expanded to Point");
}

*["addr:street"]["addr:street"=~/ Pvt /] {
assertNoMatch: "way \"addr:street\"=Main Private East";
assertMatch: "way \"addr:street\"=Main Pvt East";
throwWarning: tr("addr:street={0} contains ' Pvt ', should likely be expanded to Private","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pvt ", " Private "));
group: tr("addr:street contains Pvt, should likely be expanded to Private");
}

*["addr:street"]["addr:street"=~/ Qdrt /] {
assertNoMatch: "way \"addr:street\"=Main Quadrant East";
assertMatch: "way \"addr:street\"=Main Qdrt East";
throwWarning: tr("addr:street={0} contains ' Qdrt ', should likely be expanded to Quadrant","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Qdrt ", " Quadrant "));
group: tr("addr:street contains Qdrt, should likely be expanded to Quadrant");
}

*["addr:street"]["addr:street"=~/ Qtrs /] {
assertNoMatch: "way \"addr:street\"=Main Quarters East";
assertMatch: "way \"addr:street\"=Main Qtrs East";
throwWarning: tr("addr:street={0} contains ' Qtrs ', should likely be expanded to Quarters","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Qtrs ", " Quarters "));
group: tr("addr:street contains Qtrs, should likely be expanded to Quarters");
}

*["addr:street"]["addr:street"=~/ Qy /] {
assertNoMatch: "way \"addr:street\"=Main Quay East";
assertMatch: "way \"addr:street\"=Main Qy East";
throwWarning: tr("addr:street={0} contains ' Qy ', should likely be expanded to Quay","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Qy ", " Quay "));
group: tr("addr:street contains Qy, should likely be expanded to Quay");
}

*["addr:street"]["addr:street"=~/ Qys /] {
assertNoMatch: "way \"addr:street\"=Main Quays East";
assertMatch: "way \"addr:street\"=Main Qys East";
throwWarning: tr("addr:street={0} contains ' Qys ', should likely be expanded to Quays","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Qys ", " Quays "));
group: tr("addr:street contains Qys, should likely be expanded to Quays");
}

*["addr:street"]["addr:street"=~/ Rd /] {
assertNoMatch: "way \"addr:street\"=Main Road East";
assertMatch: "way \"addr:street\"=Main Rd East";
throwWarning: tr("addr:street={0} contains ' Rd ', should likely be expanded to Road","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rd ", " Road "));
group: tr("addr:street contains Rd, should likely be expanded to Road");
}

*["addr:street"]["addr:street"=~/ Rds /] {
assertNoMatch: "way \"addr:street\"=Main Roads East";
assertMatch: "way \"addr:street\"=Main Rds East";
throwWarning: tr("addr:street={0} contains ' Rds ', should likely be expanded to Roads","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rds ", " Roads "));
group: tr("addr:street contains Rds, should likely be expanded to Roads");
}

*["addr:street"]["addr:street"=~/ Rdg /] {
assertNoMatch: "way \"addr:street\"=Main Ridge East";
assertMatch: "way \"addr:street\"=Main Rdg East";
throwWarning: tr("addr:street={0} contains ' Rdg ', should likely be expanded to Ridge","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rdg ", " Ridge "));
group: tr("addr:street contains Rdg, should likely be expanded to Ridge");
}

*["addr:street"]["addr:street"=~/ Rdge /] {
assertNoMatch: "way \"addr:street\"=Main Ridge East";
assertMatch: "way \"addr:street\"=Main Rdge East";
throwWarning: tr("addr:street={0} contains ' Rdge ', should likely be expanded to Ridge","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rdge ", " Ridge "));
group: tr("addr:street contains Rdge, should likely be expanded to Ridge");
}

*["addr:street"]["addr:street"=~/ Rdgs /] {
assertNoMatch: "way \"addr:street\"=Main Ridges East";
assertMatch: "way \"addr:street\"=Main Rdgs East";
throwWarning: tr("addr:street={0} contains ' Rdgs ', should likely be expanded to Ridges","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rdgs ", " Ridges "));
group: tr("addr:street contains Rdgs, should likely be expanded to Ridges");
}

*["addr:street"]["addr:street"=~/ Rw /] {
assertNoMatch: "way \"addr:street\"=Main Row East";
assertMatch: "way \"addr:street\"=Main Rw East";
throwWarning: tr("addr:street={0} contains ' Rw ', should likely be expanded to Row","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rw ", " Row "));
group: tr("addr:street contains Rw, should likely be expanded to Row");
}

*["addr:street"]["addr:street"=~/ Rmrd /] {
assertNoMatch: "way \"addr:street\"=Main Ranch to Market Road East";
assertMatch: "way \"addr:street\"=Main Rmrd East";
throwWarning: tr("addr:street={0} contains ' Rmrd ', should likely be expanded to Ranch to Market Road","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rmrd ", " Ranch to Market Road "));
group: tr("addr:street contains Rmrd, should likely be expanded to Ranch to Market Road");
}

*["addr:street"]["addr:street"=~/ Rt /] {
assertNoMatch: "way \"addr:street\"=Main Route East";
assertMatch: "way \"addr:street\"=Main Rt East";
throwWarning: tr("addr:street={0} contains ' Rt ', should likely be expanded to Route","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rt ", " Route "));
group: tr("addr:street contains Rt, should likely be expanded to Route");
}

*["addr:street"]["addr:street"=~/ Rte /] {
assertNoMatch: "way \"addr:street\"=Main Route East";
assertMatch: "way \"addr:street\"=Main Rte East";
throwWarning: tr("addr:street={0} contains ' Rte ', should likely be expanded to Route","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rte ", " Route "));
group: tr("addr:street contains Rte, should likely be expanded to Route");
}

*["addr:street"]["addr:street"=~/ Rty /] {
assertNoMatch: "way \"addr:street\"=Main Rotary East";
assertMatch: "way \"addr:street\"=Main Rty East";
throwWarning: tr("addr:street={0} contains ' Rty ', should likely be expanded to Rotary","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rty ", " Rotary "));
group: tr("addr:street contains Rty, should likely be expanded to Rotary");
}

*["addr:street"]["addr:street"=~/ Shl /] {
assertNoMatch: "way \"addr:street\"=Main Shoal East";
assertMatch: "way \"addr:street\"=Main Shl East";
throwWarning: tr("addr:street={0} contains ' Shl ', should likely be expanded to Shoal","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Shl ", " Shoal "));
group: tr("addr:street contains Shl, should likely be expanded to Shoal");
}

*["addr:street"]["addr:street"=~/ Shls /] {
assertNoMatch: "way \"addr:street\"=Main Shoals East";
assertMatch: "way \"addr:street\"=Main Shls East";
throwWarning: tr("addr:street={0} contains ' Shls ', should likely be expanded to Shoals","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Shls ", " Shoals "));
group: tr("addr:street contains Shls, should likely be expanded to Shoals");
}

*["addr:street"]["addr:street"=~/ Shr /] {
assertNoMatch: "way \"addr:street\"=Main Shore East";
assertMatch: "way \"addr:street\"=Main Shr East";
throwWarning: tr("addr:street={0} contains ' Shr ', should likely be expanded to Shore","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Shr ", " Shore "));
group: tr("addr:street contains Shr, should likely be expanded to Shore");
}

*["addr:street"]["addr:street"=~/ Shrs /] {
assertNoMatch: "way \"addr:street\"=Main Shores East";
assertMatch: "way \"addr:street\"=Main Shrs East";
throwWarning: tr("addr:street={0} contains ' Shrs ', should likely be expanded to Shores","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Shrs ", " Shores "));
group: tr("addr:street contains Shrs, should likely be expanded to Shores");
}

*["addr:street"]["addr:street"=~/ Skwy /] {
assertNoMatch: "way \"addr:street\"=Main Skyway East";
assertMatch: "way \"addr:street\"=Main Skwy East";
throwWarning: tr("addr:street={0} contains ' Skwy ', should likely be expanded to Skyway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Skwy ", " Skyway "));
group: tr("addr:street contains Skwy, should likely be expanded to Skyway");
}

*["addr:street"]["addr:street"=~/ Smt /] {
assertNoMatch: "way \"addr:street\"=Main Summit East";
assertMatch: "way \"addr:street\"=Main Smt East";
throwWarning: tr("addr:street={0} contains ' Smt ', should likely be expanded to Summit","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Smt ", " Summit "));
group: tr("addr:street contains Smt, should likely be expanded to Summit");
}

*["addr:street"]["addr:street"=~/ Spg /] {
assertNoMatch: "way \"addr:street\"=Main Spring East";
assertMatch: "way \"addr:street\"=Main Spg East";
throwWarning: tr("addr:street={0} contains ' Spg ', should likely be expanded to Spring","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Spg ", " Spring "));
group: tr("addr:street contains Spg, should likely be expanded to Spring");
}

*["addr:street"]["addr:street"=~/ Spgs /] {
assertNoMatch: "way \"addr:street\"=Main Springs East";
assertMatch: "way \"addr:street\"=Main Spgs East";
throwWarning: tr("addr:street={0} contains ' Spgs ', should likely be expanded to Springs","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Spgs ", " Springs "));
group: tr("addr:street contains Spgs, should likely be expanded to Springs");
}

*["addr:street"]["addr:street"=~/ Sq /] {
assertNoMatch: "way \"addr:street\"=Main Square East";
assertMatch: "way \"addr:street\"=Main Sq East";
throwWarning: tr("addr:street={0} contains ' Sq ', should likely be expanded to Square","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Sq ", " Square "));
group: tr("addr:street contains Sq, should likely be expanded to Square");
}

*["addr:street"]["addr:street"=~/ Sqs /] {
assertNoMatch: "way \"addr:street\"=Main Squares East";
assertMatch: "way \"addr:street\"=Main Sqs East";
throwWarning: tr("addr:street={0} contains ' Sqs ', should likely be expanded to Squares","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Sqs ", " Squares "));
group: tr("addr:street contains Sqs, should likely be expanded to Squares");
}

*["addr:street"]["addr:street"=~/ Srvc /] {
assertNoMatch: "way \"addr:street\"=Main Service East";
assertMatch: "way \"addr:street\"=Main Srvc East";
throwWarning: tr("addr:street={0} contains ' Srvc ', should likely be expanded to Service","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Srvc ", " Service "));
group: tr("addr:street contains Srvc, should likely be expanded to Service");
}

*["addr:street"]["addr:street"=~/ St /] {
assertNoMatch: "way \"addr:street\"=Main Street East";
assertMatch: "way \"addr:street\"=Main St East";
throwWarning: tr("addr:street={0} contains ' St ', should likely be expanded to Street","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," St ", " Street "));
group: tr("addr:street contains St, should likely be expanded to Street");
}

*["addr:street"]["addr:street"=~/ Tce /] {
assertNoMatch: "way \"addr:street\"=Main Terrace East";
assertMatch: "way \"addr:street\"=Main Tce East";
throwWarning: tr("addr:street={0} contains ' Tce ', should likely be expanded to Terrace","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tce ", " Terrace "));
group: tr("addr:street contains Tce, should likely be expanded to Terrace");
}

*["addr:street"]["addr:street"=~/ Ter /] {
assertNoMatch: "way \"addr:street\"=Main Terrace East";
assertMatch: "way \"addr:street\"=Main Ter East";
throwWarning: tr("addr:street={0} contains ' Ter ', should likely be expanded to Terrace","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ter ", " Terrace "));
group: tr("addr:street contains Ter, should likely be expanded to Terrace");
}

*["addr:street"]["addr:street"=~/ Tfwy /] {
assertNoMatch: "way \"addr:street\"=Main Trafficway East";
assertMatch: "way \"addr:street\"=Main Tfwy East";
throwWarning: tr("addr:street={0} contains ' Tfwy ', should likely be expanded to Trafficway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tfwy ", " Trafficway "));
group: tr("addr:street contains Tfwy, should likely be expanded to Trafficway");
}

*["addr:street"]["addr:street"=~/ Thfr /] {
assertNoMatch: "way \"addr:street\"=Main Thoroughfare East";
assertMatch: "way \"addr:street\"=Main Thfr East";
throwWarning: tr("addr:street={0} contains ' Thfr ', should likely be expanded to Thoroughfare","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Thfr ", " Thoroughfare "));
group: tr("addr:street contains Thfr, should likely be expanded to Thoroughfare");
}

*["addr:street"]["addr:street"=~/ Thwy /] {
assertNoMatch: "way \"addr:street\"=Main Throughway East";
assertMatch: "way \"addr:street\"=Main Thwy East";
throwWarning: tr("addr:street={0} contains ' Thwy ', should likely be expanded to Throughway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Thwy ", " Throughway "));
group: tr("addr:street contains Thwy, should likely be expanded to Throughway");
}

*["addr:street"]["addr:street"=~/ Tl /] {
assertNoMatch: "way \"addr:street\"=Main Trail East";
assertMatch: "way \"addr:street\"=Main Tl East";
throwWarning: tr("addr:street={0} contains ' Tl ', should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tl ", " Trail "));
group: tr("addr:street contains Tl, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Tlwy /] {
assertNoMatch: "way \"addr:street\"=Main Tollway East";
assertMatch: "way \"addr:street\"=Main Tlwy East";
throwWarning: tr("addr:street={0} contains ' Tlwy ', should likely be expanded to Tollway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tlwy ", " Tollway "));
group: tr("addr:street contains Tlwy, should likely be expanded to Tollway");
}

*["addr:street"]["addr:street"=~/ Tpke /] {
assertNoMatch: "way \"addr:street\"=Main Turnpike East";
assertMatch: "way \"addr:street\"=Main Tpke East";
throwWarning: tr("addr:street={0} contains ' Tpke ', should likely be expanded to Turnpike","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tpke ", " Turnpike "));
group: tr("addr:street contains Tpke, should likely be expanded to Turnpike");
}

*["addr:street"]["addr:street"=~/ Trce /] {
assertNoMatch: "way \"addr:street\"=Main Trace East";
assertMatch: "way \"addr:street\"=Main Trce East";
throwWarning: tr("addr:street={0} contains ' Trce ', should likely be expanded to Trace","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Trce ", " Trace "));
group: tr("addr:street contains Trce, should likely be expanded to Trace");
}

*["addr:street"]["addr:street"=~/ Tr /] {
assertNoMatch: "way \"addr:street\"=Main Trail East";
assertMatch: "way \"addr:street\"=Main Tr East";
throwWarning: tr("addr:street={0} contains ' Tr ', should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tr ", " Trail "));
group: tr("addr:street contains Tr, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Trk /] {
assertNoMatch: "way \"addr:street\"=Main Track East";
assertMatch: "way \"addr:street\"=Main Trk East";
throwWarning: tr("addr:street={0} contains ' Trk ', should likely be expanded to Track","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Trk ", " Track "));
group: tr("addr:street contains Trk, should likely be expanded to Track");
}

*["addr:street"]["addr:street"=~/ Trl /] {
assertNoMatch: "way \"addr:street\"=Main Trail East";
assertMatch: "way \"addr:street\"=Main Trl East";
throwWarning: tr("addr:street={0} contains ' Trl ', should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Trl ", " Trail "));
group: tr("addr:street contains Trl, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Tunl /] {
assertNoMatch: "way \"addr:street\"=Main Tunnel East";
assertMatch: "way \"addr:street\"=Main Tunl East";
throwWarning: tr("addr:street={0} contains ' Tunl ', should likely be expanded to Tunnel","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tunl ", " Tunnel "));
group: tr("addr:street contains Tunl, should likely be expanded to Tunnel");
}

*["addr:street"]["addr:street"=~/ Unp /] {
assertNoMatch: "way \"addr:street\"=Main Underpass East";
assertMatch: "way \"addr:street\"=Main Unp East";
throwWarning: tr("addr:street={0} contains ' Unp ', should likely be expanded to Underpass","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Unp ", " Underpass "));
group: tr("addr:street contains Unp, should likely be expanded to Underpass");
}

*["addr:street"]["addr:street"=~/ Vl /] {
assertNoMatch: "way \"addr:street\"=Main Villa East";
assertMatch: "way \"addr:street\"=Main Vl East";
throwWarning: tr("addr:street={0} contains ' Vl ', should likely be expanded to Villa","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vl ", " Villa "));
group: tr("addr:street contains Vl, should likely be expanded to Villa");
}

*["addr:street"]["addr:street"=~/ Vlg /] {
assertNoMatch: "way \"addr:street\"=Main Village East";
assertMatch: "way \"addr:street\"=Main Vlg East";
throwWarning: tr("addr:street={0} contains ' Vlg ', should likely be expanded to Village","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vlg ", " Village "));
group: tr("addr:street contains Vlg, should likely be expanded to Village");
}

*["addr:street"]["addr:street"=~/ Vlgs /] {
assertNoMatch: "way \"addr:street\"=Main Villages East";
assertMatch: "way \"addr:street\"=Main Vlgs East";
throwWarning: tr("addr:street={0} contains ' Vlgs ', should likely be expanded to Villages","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vlgs ", " Villages "));
group: tr("addr:street contains Vlgs, should likely be expanded to Villages");
}

*["addr:street"]["addr:street"=~/ Vly /] {
assertNoMatch: "way \"addr:street\"=Main Valley East";
assertMatch: "way \"addr:street\"=Main Vly East";
throwWarning: tr("addr:street={0} contains ' Vly ', should likely be expanded to Valley","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vly ", " Valley "));
group: tr("addr:street contains Vly, should likely be expanded to Valley");
}

*["addr:street"]["addr:street"=~/ Vw /] {
assertNoMatch: "way \"addr:street\"=Main View East";
assertMatch: "way \"addr:street\"=Main Vw East";
throwWarning: tr("addr:street={0} contains ' Vw ', should likely be expanded to View","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vw ", " View "));
group: tr("addr:street contains Vw, should likely be expanded to View");
}

*["addr:street"]["addr:street"=~/ Wd /] {
assertNoMatch: "way \"addr:street\"=Main Wood East";
assertMatch: "way \"addr:street\"=Main Wd East";
throwWarning: tr("addr:street={0} contains ' Wd ', should likely be expanded to Wood","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Wd ", " Wood "));
group: tr("addr:street contains Wd, should likely be expanded to Wood");
}

*["addr:street"]["addr:street"=~/ Whrf /] {
assertNoMatch: "way \"addr:street\"=Main Wharf East";
assertMatch: "way \"addr:street\"=Main Whrf East";
throwWarning: tr("addr:street={0} contains ' Whrf ', should likely be expanded to Wharf","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Whrf ", " Wharf "));
group: tr("addr:street contains Whrf, should likely be expanded to Wharf");
}

*["addr:street"]["addr:street"=~/ Wkwy /] {
assertNoMatch: "way \"addr:street\"=Main Walkway East";
assertMatch: "way \"addr:street\"=Main Wkwy East";
throwWarning: tr("addr:street={0} contains ' Wkwy ', should likely be expanded to Walkway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Wkwy ", " Walkway "));
group: tr("addr:street contains Wkwy, should likely be expanded to Walkway");
}

*["addr:street"]["addr:street"=~/ Wlk /] {
assertNoMatch: "way \"addr:street\"=Main Walk East";
assertMatch: "way \"addr:street\"=Main Wlk East";
throwWarning: tr("addr:street={0} contains ' Wlk ', should likely be expanded to Walk","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Wlk ", " Walk "));
group: tr("addr:street contains Wlk, should likely be expanded to Walk");
}

*["addr:street"]["addr:street"=~/ Wy /] {
assertNoMatch: "way \"addr:street\"=Main Way East";
assertMatch: "way \"addr:street\"=Main Wy East";
throwWarning: tr("addr:street={0} contains ' Wy ', should likely be expanded to Way","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Wy ", " Way "));
group: tr("addr:street contains Wy, should likely be expanded to Way");
}

*["addr:street"]["addr:street"=~/ Xing /] {
assertNoMatch: "way \"addr:street\"=Main Crossing East";
assertMatch: "way \"addr:street\"=Main Xing East";
throwWarning: tr("addr:street={0} contains ' Xing ', should likely be expanded to Crossing","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Xing ", " Crossing "));
group: tr("addr:street contains Xing, should likely be expanded to Crossing");
}

*["name"=~/ Acc /].highway_name {
assertNoMatch: "way \"name\"=Main Access East";
assertMatch: "way \"name\"=Main Acc East";
throwWarning: tr("Highway name contains Acc, may need to be expanded to Access");
fixAdd: concat("name=", replace(tag("name")," Acc ", " Access "));
}

*["name"=~/ Aly /].highway_name {
assertNoMatch: "way \"name\"=Main Alley East";
assertMatch: "way \"name\"=Main Aly East";
throwWarning: tr("Highway name contains Aly, may need to be expanded to Alley");
fixAdd: concat("name=", replace(tag("name")," Aly ", " Alley "));
}

*["name"=~/ Ambl /].highway_name {
assertNoMatch: "way \"name\"=Main Amble East";
assertMatch: "way \"name\"=Main Ambl East";
throwWarning: tr("Highway name contains Ambl, may need to be expanded to Amble");
fixAdd: concat("name=", replace(tag("name")," Ambl ", " Amble "));
}

*["name"=~/ App /].highway_name {
assertNoMatch: "way \"name\"=Main Approach East";
assertMatch: "way \"name\"=Main App East";
throwWarning: tr("Highway name contains App, may need to be expanded to Approach");
fixAdd: concat("name=", replace(tag("name")," App ", " Approach "));
}

*["name"=~/ Arc /].highway_name {
assertNoMatch: "way \"name\"=Main Arcade East";
assertMatch: "way \"name\"=Main Arc East";
throwWarning: tr("Highway name contains Arc, may need to be expanded to Arcade");
fixAdd: concat("name=", replace(tag("name")," Arc ", " Arcade "));
}

*["name"=~/ Artl /].highway_name {
assertNoMatch: "way \"name\"=Main Arterial East";
assertMatch: "way \"name\"=Main Artl East";
throwWarning: tr("Highway name contains Artl, may need to be expanded to Arterial");
fixAdd: concat("name=", replace(tag("name")," Artl ", " Arterial "));
}

*["name"=~/ Arty /].highway_name {
assertNoMatch: "way \"name\"=Main Artery East";
assertMatch: "way \"name\"=Main Arty East";
throwWarning: tr("Highway name contains Arty, may need to be expanded to Artery");
fixAdd: concat("name=", replace(tag("name")," Arty ", " Artery "));
}

*["name"=~/ Av /].highway_name {
assertNoMatch: "way \"name\"=Main Avenue East";
assertMatch: "way \"name\"=Main Av East";
throwWarning: tr("Highway name contains Av, may need to be expanded to Avenue");
fixAdd: concat("name=", replace(tag("name")," Av ", " Avenue "));
}

*["name"=~/ Ave /].highway_name {
assertNoMatch: "way \"name\"=Main Avenue East";
assertMatch: "way \"name\"=Main Ave East";
throwWarning: tr("Highway name contains Ave, may need to be expanded to Avenue");
fixAdd: concat("name=", replace(tag("name")," Ave ", " Avenue "));
}

*["name"=~/ Bch /].highway_name {
assertNoMatch: "way \"name\"=Main Beach East";
assertMatch: "way \"name\"=Main Bch East";
throwWarning: tr("Highway name contains Bch, may need to be expanded to Beach");
fixAdd: concat("name=", replace(tag("name")," Bch ", " Beach "));
}

*["name"=~/ Bg /].highway_name {
assertNoMatch: "way \"name\"=Main Burg East";
assertMatch: "way \"name\"=Main Bg East";
throwWarning: tr("Highway name contains Bg, may need to be expanded to Burg");
fixAdd: concat("name=", replace(tag("name")," Bg ", " Burg "));
}

*["name"=~/ Bgs /].highway_name {
assertNoMatch: "way \"name\"=Main Burgs East";
assertMatch: "way \"name\"=Main Bgs East";
throwWarning: tr("Highway name contains Bgs, may need to be expanded to Burgs");
fixAdd: concat("name=", replace(tag("name")," Bgs ", " Burgs "));
}

*["name"=~/ Blf /].highway_name {
assertNoMatch: "way \"name\"=Main Bluff East";
assertMatch: "way \"name\"=Main Blf East";
throwWarning: tr("Highway name contains Blf, may need to be expanded to Bluff");
fixAdd: concat("name=", replace(tag("name")," Blf ", " Bluff "));
}

*["name"=~/ Blk /].highway_name {
assertNoMatch: "way \"name\"=Main Block East";
assertMatch: "way \"name\"=Main Blk East";
throwWarning: tr("Highway name contains Blk, may need to be expanded to Block");
fixAdd: concat("name=", replace(tag("name")," Blk ", " Block "));
}

*["name"=~/ Blv /].highway_name {
assertNoMatch: "way \"name\"=Main Boulevard East";
assertMatch: "way \"name\"=Main Blv East";
throwWarning: tr("Highway name contains Blv, may need to be expanded to Boulevard");
fixAdd: concat("name=", replace(tag("name")," Blv ", " Boulevard "));
}

*["name"=~/ Blvd /].highway_name {
assertNoMatch: "way \"name\"=Main Boulevard East";
assertMatch: "way \"name\"=Main Blvd East";
throwWarning: tr("Highway name contains Blvd, may need to be expanded to Boulevard");
fixAdd: concat("name=", replace(tag("name")," Blvd ", " Boulevard "));
}

*["name"=~/ Bnd /].highway_name {
assertNoMatch: "way \"name\"=Main Bend East";
assertMatch: "way \"name\"=Main Bnd East";
throwWarning: tr("Highway name contains Bnd, may need to be expanded to Bend");
fixAdd: concat("name=", replace(tag("name")," Bnd ", " Bend "));
}

*["name"=~/ Br /].highway_name {
assertNoMatch: "way \"name\"=Main Bridge East";
assertMatch: "way \"name\"=Main Br East";
throwWarning: tr("Highway name contains Br, may need to be expanded to Bridge");
fixAdd: concat("name=", replace(tag("name")," Br ", " Bridge "));
}

*["name"=~/ Brg /].highway_name {
assertNoMatch: "way \"name\"=Main Bridge East";
assertMatch: "way \"name\"=Main Brg East";
throwWarning: tr("Highway name contains Brg, may need to be expanded to Bridge");
fixAdd: concat("name=", replace(tag("name")," Brg ", " Bridge "));
}

*["name"=~/ Btm /].highway_name {
assertNoMatch: "way \"name\"=Main Bottom East";
assertMatch: "way \"name\"=Main Btm East";
throwWarning: tr("Highway name contains Btm, may need to be expanded to Bottom");
fixAdd: concat("name=", replace(tag("name")," Btm ", " Bottom "));
}

*["name"=~/ Bwlk /].highway_name {
assertNoMatch: "way \"name\"=Main Boardwalk East";
assertMatch: "way \"name\"=Main Bwlk East";
throwWarning: tr("Highway name contains Bwlk, may need to be expanded to Boardwalk");
fixAdd: concat("name=", replace(tag("name")," Bwlk ", " Boardwalk "));
}

*["name"=~/ Byp /].highway_name {
assertNoMatch: "way \"name\"=Main Bypass East";
assertMatch: "way \"name\"=Main Byp East";
throwWarning: tr("Highway name contains Byp, may need to be expanded to Bypass");
fixAdd: concat("name=", replace(tag("name")," Byp ", " Bypass "));
}

*["name"=~/ Bypa /].highway_name {
assertNoMatch: "way \"name\"=Main Bypass East";
assertMatch: "way \"name\"=Main Bypa East";
throwWarning: tr("Highway name contains Bypa, may need to be expanded to Bypass");
fixAdd: concat("name=", replace(tag("name")," Bypa ", " Bypass "));
}

*["name"=~/ Byu /].highway_name {
assertNoMatch: "way \"name\"=Main Byou East";
assertMatch: "way \"name\"=Main Byu East";
throwWarning: tr("Highway name contains Byu, may need to be expanded to Byou");
fixAdd: concat("name=", replace(tag("name")," Byu ", " Byou "));
}

*["name"=~/ Bywy /].highway_name {
assertNoMatch: "way \"name\"=Main Byway East";
assertMatch: "way \"name\"=Main Bywy East";
throwWarning: tr("Highway name contains Bywy, may need to be expanded to Byway");
fixAdd: concat("name=", replace(tag("name")," Bywy ", " Byway "));
}

*["name"=~/ Bzr /].highway_name {
assertNoMatch: "way \"name\"=Main Bazaar East";
assertMatch: "way \"name\"=Main Bzr East";
throwWarning: tr("Highway name contains Bzr, may need to be expanded to Bazaar");
fixAdd: concat("name=", replace(tag("name")," Bzr ", " Bazaar "));
}

*["name"=~/ Cct /].highway_name {
assertNoMatch: "way \"name\"=Main Circuit East";
assertMatch: "way \"name\"=Main Cct East";
throwWarning: tr("Highway name contains Cct, may need to be expanded to Circuit");
fixAdd: concat("name=", replace(tag("name")," Cct ", " Circuit "));
}

*["name"=~/ Ch /].highway_name {
assertNoMatch: "way \"name\"=Main Chase East";
assertMatch: "way \"name\"=Main Ch East";
throwWarning: tr("Highway name contains Ch, may need to be expanded to Chase");
fixAdd: concat("name=", replace(tag("name")," Ch ", " Chase "));
}

*["name"=~/ Cir /].highway_name {
assertNoMatch: "way \"name\"=Main Circle East";
assertMatch: "way \"name\"=Main Cir East";
throwWarning: tr("Highway name contains Cir, may need to be expanded to Circle");
fixAdd: concat("name=", replace(tag("name")," Cir ", " Circle "));
}

*["name"=~/ Cirs /].highway_name {
assertNoMatch: "way \"name\"=Main Circles East";
assertMatch: "way \"name\"=Main Cirs East";
throwWarning: tr("Highway name contains Cirs, may need to be expanded to Circles");
fixAdd: concat("name=", replace(tag("name")," Cirs ", " Circles "));
}

*["name"=~/ Clf /].highway_name {
assertNoMatch: "way \"name\"=Main Cliff East";
assertMatch: "way \"name\"=Main Clf East";
throwWarning: tr("Highway name contains Clf, may need to be expanded to Cliff");
fixAdd: concat("name=", replace(tag("name")," Clf ", " Cliff "));
}

*["name"=~/ Clfs /].highway_name {
assertNoMatch: "way \"name\"=Main Cliffs East";
assertMatch: "way \"name\"=Main Clfs East";
throwWarning: tr("Highway name contains Clfs, may need to be expanded to Cliffs");
fixAdd: concat("name=", replace(tag("name")," Clfs ", " Cliffs "));
}

*["name"=~/ Cly /].highway_name {
assertNoMatch: "way \"name\"=Main Colony East";
assertMatch: "way \"name\"=Main Cly East";
throwWarning: tr("Highway name contains Cly, may need to be expanded to Colony");
fixAdd: concat("name=", replace(tag("name")," Cly ", " Colony "));
}

*["name"=~/ Cmn /].highway_name {
assertNoMatch: "way \"name\"=Main Common East";
assertMatch: "way \"name\"=Main Cmn East";
throwWarning: tr("Highway name contains Cmn, may need to be expanded to Common");
fixAdd: concat("name=", replace(tag("name")," Cmn ", " Common "));
}

*["name"=~/ Cnl /].highway_name {
assertNoMatch: "way \"name\"=Main Canal East";
assertMatch: "way \"name\"=Main Cnl East";
throwWarning: tr("Highway name contains Cnl, may need to be expanded to Canal");
fixAdd: concat("name=", replace(tag("name")," Cnl ", " Canal "));
}

*["name"=~/ Cnr /].highway_name {
assertNoMatch: "way \"name\"=Main Corner East";
assertMatch: "way \"name\"=Main Cnr East";
throwWarning: tr("Highway name contains Cnr, may need to be expanded to Corner");
fixAdd: concat("name=", replace(tag("name")," Cnr ", " Corner "));
}

*["name"=~/ Coll /].highway_name {
assertNoMatch: "way \"name\"=Main College East";
assertMatch: "way \"name\"=Main Coll East";
throwWarning: tr("Highway name contains Coll, may need to be expanded to College");
fixAdd: concat("name=", replace(tag("name")," Coll ", " College "));
}

*["name"=~/ Cpe /].highway_name {
assertNoMatch: "way \"name\"=Main Cape East";
assertMatch: "way \"name\"=Main Cpe East";
throwWarning: tr("Highway name contains Cpe, may need to be expanded to Cape");
fixAdd: concat("name=", replace(tag("name")," Cpe ", " Cape "));
}

*["name"=~/ Cr /].highway_name {
assertNoMatch: "way \"name\"=Main Creek East";
assertMatch: "way \"name\"=Main Cr East";
throwWarning: tr("Highway name contains Cr, may need to be expanded to Creek");
fixAdd: concat("name=", replace(tag("name")," Cr ", " Creek "));
}

*["name"=~/ Crk /].highway_name {
assertNoMatch: "way \"name\"=Main Creek East";
assertMatch: "way \"name\"=Main Crk East";
throwWarning: tr("Highway name contains Crk, may need to be expanded to Creek");
fixAdd: concat("name=", replace(tag("name")," Crk ", " Creek "));
}

*["name"=~/ Cres /].highway_name {
assertNoMatch: "way \"name\"=Main Crescent East";
assertMatch: "way \"name\"=Main Cres East";
throwWarning: tr("Highway name contains Cres, may need to be expanded to Crescent");
fixAdd: concat("name=", replace(tag("name")," Cres ", " Crescent "));
}

*["name"=~/ Crst /].highway_name {
assertNoMatch: "way \"name\"=Main Crest East";
assertMatch: "way \"name\"=Main Crst East";
throwWarning: tr("Highway name contains Crst, may need to be expanded to Crest");
fixAdd: concat("name=", replace(tag("name")," Crst ", " Crest "));
}

*["name"=~/ Cswy /].highway_name {
assertNoMatch: "way \"name\"=Main Causeway East";
assertMatch: "way \"name\"=Main Cswy East";
throwWarning: tr("Highway name contains Cswy, may need to be expanded to Causeway");
fixAdd: concat("name=", replace(tag("name")," Cswy ", " Causeway "));
}

*["name"=~/ Ct /].highway_name {
assertNoMatch: "way \"name\"=Main Court East";
assertMatch: "way \"name\"=Main Ct East";
throwWarning: tr("Highway name contains Ct, may need to be expanded to Court");
fixAdd: concat("name=", replace(tag("name")," Ct ", " Court "));
}

*["name"=~/ Ctr /].highway_name {
assertNoMatch: "way \"name\"=Main Center East";
assertMatch: "way \"name\"=Main Ctr East";
throwWarning: tr("Highway name contains Ctr, may need to be expanded to Center");
fixAdd: concat("name=", replace(tag("name")," Ctr ", " Center "));
}

*["name"=~/ Cts /].highway_name {
assertNoMatch: "way \"name\"=Main Courts East";
assertMatch: "way \"name\"=Main Cts East";
throwWarning: tr("Highway name contains Cts, may need to be expanded to Courts");
fixAdd: concat("name=", replace(tag("name")," Cts ", " Courts "));
}

*["name"=~/ Ctyd /].highway_name {
assertNoMatch: "way \"name\"=Main Courtyard East";
assertMatch: "way \"name\"=Main Ctyd East";
throwWarning: tr("Highway name contains Ctyd, may need to be expanded to Courtyard");
fixAdd: concat("name=", replace(tag("name")," Ctyd ", " Courtyard "));
}

*["name"=~/ Curv /].highway_name {
assertNoMatch: "way \"name\"=Main Curve East";
assertMatch: "way \"name\"=Main Curv East";
throwWarning: tr("Highway name contains Curv, may need to be expanded to Curve");
fixAdd: concat("name=", replace(tag("name")," Curv ", " Curve "));
}

*["name"=~/ Cutt /].highway_name {
assertNoMatch: "way \"name\"=Main Cutting East";
assertMatch: "way \"name\"=Main Cutt East";
throwWarning: tr("Highway name contains Cutt, may need to be expanded to Cutting");
fixAdd: concat("name=", replace(tag("name")," Cutt ", " Cutting "));
}

*["name"=~/ Cv /].highway_name {
assertNoMatch: "way \"name\"=Main Cove East";
assertMatch: "way \"name\"=Main Cv East";
throwWarning: tr("Highway name contains Cv, may need to be expanded to Cove");
fixAdd: concat("name=", replace(tag("name")," Cv ", " Cove "));
}

*["name"=~/ Cyn /].highway_name {
assertNoMatch: "way \"name\"=Main Canyon East";
assertMatch: "way \"name\"=Main Cyn East";
throwWarning: tr("Highway name contains Cyn, may need to be expanded to Canyon");
fixAdd: concat("name=", replace(tag("name")," Cyn ", " Canyon "));
}

*["name"=~/ Dl /].highway_name {
assertNoMatch: "way \"name\"=Main Dale East";
assertMatch: "way \"name\"=Main Dl East";
throwWarning: tr("Highway name contains Dl, may need to be expanded to Dale");
fixAdd: concat("name=", replace(tag("name")," Dl ", " Dale "));
}

*["name"=~/ Dr /].highway_name {
assertNoMatch: "way \"name\"=Main Drive East";
assertMatch: "way \"name\"=Main Dr East";
throwWarning: tr("Highway name contains Dr, may need to be expanded to Drive");
fixAdd: concat("name=", replace(tag("name")," Dr ", " Drive "));
}

*["name"=~/ Dv /].highway_name {
assertNoMatch: "way \"name\"=Main Drive East";
assertMatch: "way \"name\"=Main Dv East";
throwWarning: tr("Highway name contains Dv, may need to be expanded to Drive");
fixAdd: concat("name=", replace(tag("name")," Dv ", " Drive "));
}

*["name"=~/ Dvwy /].highway_name {
assertNoMatch: "way \"name\"=Main Driveway East";
assertMatch: "way \"name\"=Main Dvwy East";
throwWarning: tr("Highway name contains Dvwy, may need to be expanded to Driveway");
fixAdd: concat("name=", replace(tag("name")," Dvwy ", " Driveway "));
}

*["name"=~/ Elb /].highway_name {
assertNoMatch: "way \"name\"=Main Elbow East";
assertMatch: "way \"name\"=Main Elb East";
throwWarning: tr("Highway name contains Elb, may need to be expanded to Elbow");
fixAdd: concat("name=", replace(tag("name")," Elb ", " Elbow "));
}

*["name"=~/ Est /].highway_name {
assertNoMatch: "way \"name\"=Main Estate East";
assertMatch: "way \"name\"=Main Est East";
throwWarning: tr("Highway name contains Est, may need to be expanded to Estate");
fixAdd: concat("name=", replace(tag("name")," Est ", " Estate "));
}

*["name"=~/ Ests /].highway_name {
assertNoMatch: "way \"name\"=Main Estates East";
assertMatch: "way \"name\"=Main Ests East";
throwWarning: tr("Highway name contains Ests, may need to be expanded to Estates");
fixAdd: concat("name=", replace(tag("name")," Ests ", " Estates "));
}

*["name"=~/ Expy /].highway_name {
assertNoMatch: "way \"name\"=Main Expressway East";
assertMatch: "way \"name\"=Main Expy East";
throwWarning: tr("Highway name contains Expy, may need to be expanded to Expressway");
fixAdd: concat("name=", replace(tag("name")," Expy ", " Expressway "));
}

*["name"=~/ Expwy /].highway_name {
assertNoMatch: "way \"name\"=Main Expressway East";
assertMatch: "way \"name\"=Main Expwy East";
throwWarning: tr("Highway name contains Expwy, may need to be expanded to Expressway");
fixAdd: concat("name=", replace(tag("name")," Expwy ", " Expressway "));
}

*["name"=~/ Fawy /].highway_name {
assertNoMatch: "way \"name\"=Main Fairway East";
assertMatch: "way \"name\"=Main Fawy East";
throwWarning: tr("Highway name contains Fawy, may need to be expanded to Fairway");
fixAdd: concat("name=", replace(tag("name")," Fawy ", " Fairway "));
}

*["name"=~/ Fld /].highway_name {
assertNoMatch: "way \"name\"=Main Field East";
assertMatch: "way \"name\"=Main Fld East";
throwWarning: tr("Highway name contains Fld, may need to be expanded to Field");
fixAdd: concat("name=", replace(tag("name")," Fld ", " Field "));
}

*["name"=~/ Flds /].highway_name {
assertNoMatch: "way \"name\"=Main Fields East";
assertMatch: "way \"name\"=Main Flds East";
throwWarning: tr("Highway name contains Flds, may need to be expanded to Fields");
fixAdd: concat("name=", replace(tag("name")," Flds ", " Fields "));
}

*["name"=~/ Fmrd /].highway_name {
assertNoMatch: "way \"name\"=Main Farm to Market Road East";
assertMatch: "way \"name\"=Main Fmrd East";
throwWarning: tr("Highway name contains Fmrd, may need to be expanded to Farm to Market Road");
fixAdd: concat("name=", replace(tag("name")," Fmrd ", " Farm to Market Road "));
}

*["name"=~/ Ftrl /].highway_name {
assertNoMatch: "way \"name\"=Main Firetrail East";
assertMatch: "way \"name\"=Main Ftrl East";
throwWarning: tr("Highway name contains Ftrl, may need to be expanded to Firetrail");
fixAdd: concat("name=", replace(tag("name")," Ftrl ", " Firetrail "));
}

*["name"=~/ Frk /].highway_name {
assertNoMatch: "way \"name\"=Main Fork East";
assertMatch: "way \"name\"=Main Frk East";
throwWarning: tr("Highway name contains Frk, may need to be expanded to Fork");
fixAdd: concat("name=", replace(tag("name")," Frk ", " Fork "));
}

*["name"=~/ Fry /].highway_name {
assertNoMatch: "way \"name\"=Main Ferry East";
assertMatch: "way \"name\"=Main Fry East";
throwWarning: tr("Highway name contains Fry, may need to be expanded to Ferry");
fixAdd: concat("name=", replace(tag("name")," Fry ", " Ferry "));
}

*["name"=~/ Fwy /].highway_name {
assertNoMatch: "way \"name\"=Main Freeway East";
assertMatch: "way \"name\"=Main Fwy East";
throwWarning: tr("Highway name contains Fwy, may need to be expanded to Freeway");
fixAdd: concat("name=", replace(tag("name")," Fwy ", " Freeway "));
}

*["name"=~/ Gd /].highway_name {
assertNoMatch: "way \"name\"=Main Grade East";
assertMatch: "way \"name\"=Main Gd East";
throwWarning: tr("Highway name contains Gd, may need to be expanded to Grade");
fixAdd: concat("name=", replace(tag("name")," Gd ", " Grade "));
}

*["name"=~/ Gdns /].highway_name {
assertNoMatch: "way \"name\"=Main Gardens East";
assertMatch: "way \"name\"=Main Gdns East";
throwWarning: tr("Highway name contains Gdns, may need to be expanded to Gardens");
fixAdd: concat("name=", replace(tag("name")," Gdns ", " Gardens "));
}

*["name"=~/ Gr /].highway_name {
assertNoMatch: "way \"name\"=Main Grove East";
assertMatch: "way \"name\"=Main Gr East";
throwWarning: tr("Highway name contains Gr, may need to be expanded to Grove");
fixAdd: concat("name=", replace(tag("name")," Gr ", " Grove "));
}

*["name"=~/ Gro /].highway_name {
assertNoMatch: "way \"name\"=Main Grove East";
assertMatch: "way \"name\"=Main Gro East";
throwWarning: tr("Highway name contains Gro, may need to be expanded to Grove");
fixAdd: concat("name=", replace(tag("name")," Gro ", " Grove "));
}

*["name"=~/ Grv /].highway_name {
assertNoMatch: "way \"name\"=Main Grove East";
assertMatch: "way \"name\"=Main Grv East";
throwWarning: tr("Highway name contains Grv, may need to be expanded to Grove");
fixAdd: concat("name=", replace(tag("name")," Grv ", " Grove "));
}

*["name"=~/ Hbr /].highway_name {
assertNoMatch: "way \"name\"=Main Harbor East";
assertMatch: "way \"name\"=Main Hbr East";
throwWarning: tr("Highway name contains Hbr, may need to be expanded to Harbor");
fixAdd: concat("name=", replace(tag("name")," Hbr ", " Harbor "));
}

*["name"=~/ Hl /].highway_name {
assertNoMatch: "way \"name\"=Main Hill East";
assertMatch: "way \"name\"=Main Hl East";
throwWarning: tr("Highway name contains Hl, may need to be expanded to Hill");
fixAdd: concat("name=", replace(tag("name")," Hl ", " Hill "));
}

*["name"=~/ Hls /].highway_name {
assertNoMatch: "way \"name\"=Main Hills East";
assertMatch: "way \"name\"=Main Hls East";
throwWarning: tr("Highway name contains Hls, may need to be expanded to Hills");
fixAdd: concat("name=", replace(tag("name")," Hls ", " Hills "));
}

*["name"=~/ Holw /].highway_name {
assertNoMatch: "way \"name\"=Main Hollow East";
assertMatch: "way \"name\"=Main Holw East";
throwWarning: tr("Highway name contains Holw, may need to be expanded to Hollow");
fixAdd: concat("name=", replace(tag("name")," Holw ", " Hollow "));
}

*["name"=~/ Hts /].highway_name {
assertNoMatch: "way \"name\"=Main Heights East";
assertMatch: "way \"name\"=Main Hts East";
throwWarning: tr("Highway name contains Hts, may need to be expanded to Heights");
fixAdd: concat("name=", replace(tag("name")," Hts ", " Heights "));
}

*["name"=~/ Hw /].highway_name {
assertNoMatch: "way \"name\"=Main Highway East";
assertMatch: "way \"name\"=Main Hw East";
throwWarning: tr("Highway name contains Hw, may need to be expanded to Highway");
fixAdd: concat("name=", replace(tag("name")," Hw ", " Highway "));
}

*["name"=~/ Hwy /].highway_name {
assertNoMatch: "way \"name\"=Main Highway East";
assertMatch: "way \"name\"=Main Hwy East";
throwWarning: tr("Highway name contains Hwy, may need to be expanded to Highway");
fixAdd: concat("name=", replace(tag("name")," Hwy ", " Highway "));
}

*["name"=~/ Hvn /].highway_name {
assertNoMatch: "way \"name\"=Main Haven East";
assertMatch: "way \"name\"=Main Hvn East";
throwWarning: tr("Highway name contains Hvn, may need to be expanded to Haven");
fixAdd: concat("name=", replace(tag("name")," Hvn ", " Haven "));
}

*["name"=~/ Intg /].highway_name {
assertNoMatch: "way \"name\"=Main Interchange East";
assertMatch: "way \"name\"=Main Intg East";
throwWarning: tr("Highway name contains Intg, may need to be expanded to Interchange");
fixAdd: concat("name=", replace(tag("name")," Intg ", " Interchange "));
}

*["name"=~/ Iss /].highway_name {
assertNoMatch: "way \"name\"=Main Islands East";
assertMatch: "way \"name\"=Main Iss East";
throwWarning: tr("Highway name contains Iss, may need to be expanded to Islands");
fixAdd: concat("name=", replace(tag("name")," Iss ", " Islands "));
}

*["name"=~/ Jct /].highway_name {
assertNoMatch: "way \"name\"=Main Junction East";
assertMatch: "way \"name\"=Main Jct East";
throwWarning: tr("Highway name contains Jct, may need to be expanded to Junction");
fixAdd: concat("name=", replace(tag("name")," Jct ", " Junction "));
}

*["name"=~/ Jn /].highway_name {
assertNoMatch: "way \"name\"=Main Junction East";
assertMatch: "way \"name\"=Main Jn East";
throwWarning: tr("Highway name contains Jn, may need to be expanded to Junction");
fixAdd: concat("name=", replace(tag("name")," Jn ", " Junction "));
}

*["name"=~/ Jnc /].highway_name {
assertNoMatch: "way \"name\"=Main Junction East";
assertMatch: "way \"name\"=Main Jnc East";
throwWarning: tr("Highway name contains Jnc, may need to be expanded to Junction");
fixAdd: concat("name=", replace(tag("name")," Jnc ", " Junction "));
}

*["name"=~/ Knl /].highway_name {
assertNoMatch: "way \"name\"=Main Knoll East";
assertMatch: "way \"name\"=Main Knl East";
throwWarning: tr("Highway name contains Knl, may need to be expanded to Knoll");
fixAdd: concat("name=", replace(tag("name")," Knl ", " Knoll "));
}

*["name"=~/ Knls /].highway_name {
assertNoMatch: "way \"name\"=Main Knolls East";
assertMatch: "way \"name\"=Main Knls East";
throwWarning: tr("Highway name contains Knls, may need to be expanded to Knolls");
fixAdd: concat("name=", replace(tag("name")," Knls ", " Knolls "));
}

*["name"=~/ Ky /].highway_name {
assertNoMatch: "way \"name\"=Main Key East";
assertMatch: "way \"name\"=Main Ky East";
throwWarning: tr("Highway name contains Ky, may need to be expanded to Key");
fixAdd: concat("name=", replace(tag("name")," Ky ", " Key "));
}

*["name"=~/ Kys /].highway_name {
assertNoMatch: "way \"name\"=Main Keys East";
assertMatch: "way \"name\"=Main Kys East";
throwWarning: tr("Highway name contains Kys, may need to be expanded to Keys");
fixAdd: concat("name=", replace(tag("name")," Kys ", " Keys "));
}

*["name"=~/ Lck /].highway_name {
assertNoMatch: "way \"name\"=Main Lock East";
assertMatch: "way \"name\"=Main Lck East";
throwWarning: tr("Highway name contains Lck, may need to be expanded to Lock");
fixAdd: concat("name=", replace(tag("name")," Lck ", " Lock "));
}

*["name"=~/ Lcks /].highway_name {
assertNoMatch: "way \"name\"=Main Locks East";
assertMatch: "way \"name\"=Main Lcks East";
throwWarning: tr("Highway name contains Lcks, may need to be expanded to Locks");
fixAdd: concat("name=", replace(tag("name")," Lcks ", " Locks "));
}

*["name"=~/ Ldg /].highway_name {
assertNoMatch: "way \"name\"=Main Lodge East";
assertMatch: "way \"name\"=Main Ldg East";
throwWarning: tr("Highway name contains Ldg, may need to be expanded to Lodge");
fixAdd: concat("name=", replace(tag("name")," Ldg ", " Lodge "));
}

*["name"=~/ Lk /].highway_name {
assertNoMatch: "way \"name\"=Main Lake East";
assertMatch: "way \"name\"=Main Lk East";
throwWarning: tr("Highway name contains Lk, may need to be expanded to Lake");
fixAdd: concat("name=", replace(tag("name")," Lk ", " Lake "));
}

*["name"=~/ Lks /].highway_name {
assertNoMatch: "way \"name\"=Main Lakes East";
assertMatch: "way \"name\"=Main Lks East";
throwWarning: tr("Highway name contains Lks, may need to be expanded to Lakes");
fixAdd: concat("name=", replace(tag("name")," Lks ", " Lakes "));
}

*["name"=~/ Lkt /].highway_name {
assertNoMatch: "way \"name\"=Main Lookout East";
assertMatch: "way \"name\"=Main Lkt East";
throwWarning: tr("Highway name contains Lkt, may need to be expanded to Lookout");
fixAdd: concat("name=", replace(tag("name")," Lkt ", " Lookout "));
}

*["name"=~/ Ln /].highway_name {
assertNoMatch: "way \"name\"=Main Lane East";
assertMatch: "way \"name\"=Main Ln East";
throwWarning: tr("Highway name contains Ln, may need to be expanded to Lane");
fixAdd: concat("name=", replace(tag("name")," Ln ", " Lane "));
}

*["name"=~/ Lndg /].highway_name {
assertNoMatch: "way \"name\"=Main Landing East";
assertMatch: "way \"name\"=Main Lndg East";
throwWarning: tr("Highway name contains Lndg, may need to be expanded to Landing");
fixAdd: concat("name=", replace(tag("name")," Lndg ", " Landing "));
}

*["name"=~/ Lp /].highway_name {
assertNoMatch: "way \"name\"=Main Loop East";
assertMatch: "way \"name\"=Main Lp East";
throwWarning: tr("Highway name contains Lp, may need to be expanded to Loop");
fixAdd: concat("name=", replace(tag("name")," Lp ", " Loop "));
}

*["name"=~/ Mal /].highway_name {
assertNoMatch: "way \"name\"=Main Mall East";
assertMatch: "way \"name\"=Main Mal East";
throwWarning: tr("Highway name contains Mal, may need to be expanded to Mall");
fixAdd: concat("name=", replace(tag("name")," Mal ", " Mall "));
}

*["name"=~/ Mdw /].highway_name {
assertNoMatch: "way \"name\"=Main Meadow East";
assertMatch: "way \"name\"=Main Mdw East";
throwWarning: tr("Highway name contains Mdw, may need to be expanded to Meadow");
fixAdd: concat("name=", replace(tag("name")," Mdw ", " Meadow "));
}

*["name"=~/ Mdws /].highway_name {
assertNoMatch: "way \"name\"=Main Meadows East";
assertMatch: "way \"name\"=Main Mdws East";
throwWarning: tr("Highway name contains Mdws, may need to be expanded to Meadows");
fixAdd: concat("name=", replace(tag("name")," Mdws ", " Meadows "));
}

*["name"=~/ Mkt /].highway_name {
assertNoMatch: "way \"name\"=Main Market East";
assertMatch: "way \"name\"=Main Mkt East";
throwWarning: tr("Highway name contains Mkt, may need to be expanded to Market");
fixAdd: concat("name=", replace(tag("name")," Mkt ", " Market "));
}

*["name"=~/ Ml /].highway_name {
assertNoMatch: "way \"name\"=Main Mill East";
assertMatch: "way \"name\"=Main Ml East";
throwWarning: tr("Highway name contains Ml, may need to be expanded to Mill");
fixAdd: concat("name=", replace(tag("name")," Ml ", " Mill "));
}

*["name"=~/ Mt /].highway_name {
assertNoMatch: "way \"name\"=Main Mount East";
assertMatch: "way \"name\"=Main Mt East";
throwWarning: tr("Highway name contains Mt, may need to be expanded to Mount");
fixAdd: concat("name=", replace(tag("name")," Mt ", " Mount "));
}

*["name"=~/ Mtn /].highway_name {
assertNoMatch: "way \"name\"=Main Mountain East";
assertMatch: "way \"name\"=Main Mtn East";
throwWarning: tr("Highway name contains Mtn, may need to be expanded to Mountain");
fixAdd: concat("name=", replace(tag("name")," Mtn ", " Mountain "));
}

*["name"=~/ Mtwy /].highway_name {
assertNoMatch: "way \"name\"=Main Motorway East";
assertMatch: "way \"name\"=Main Mtwy East";
throwWarning: tr("Highway name contains Mtwy, may need to be expanded to Motorway");
fixAdd: concat("name=", replace(tag("name")," Mtwy ", " Motorway "));
}

*["name"=~/ Orch /].highway_name {
assertNoMatch: "way \"name\"=Main Orchard East";
assertMatch: "way \"name\"=Main Orch East";
throwWarning: tr("Highway name contains Orch, may need to be expanded to Orchard");
fixAdd: concat("name=", replace(tag("name")," Orch ", " Orchard "));
}

*["name"=~/ Ovps /].highway_name {
assertNoMatch: "way \"name\"=Main Overpass East";
assertMatch: "way \"name\"=Main Ovps East";
throwWarning: tr("Highway name contains Ovps, may need to be expanded to Overpass");
fixAdd: concat("name=", replace(tag("name")," Ovps ", " Overpass "));
}

*["name"=~/ Piaz /].highway_name {
assertNoMatch: "way \"name\"=Main Piazza East";
assertMatch: "way \"name\"=Main Piaz East";
throwWarning: tr("Highway name contains Piaz, may need to be expanded to Piazza");
fixAdd: concat("name=", replace(tag("name")," Piaz ", " Piazza "));
}

*["name"=~/ Pk /].highway_name {
assertNoMatch: "way \"name\"=Main Peak East";
assertMatch: "way \"name\"=Main Pk East";
throwWarning: tr("Highway name contains Pk, may need to be expanded to Peak");
fixAdd: concat("name=", replace(tag("name")," Pk ", " Peak "));
}

*["name"=~/ Pky /].highway_name {
assertNoMatch: "way \"name\"=Main Parkway East";
assertMatch: "way \"name\"=Main Pky East";
throwWarning: tr("Highway name contains Pky, may need to be expanded to Parkway");
fixAdd: concat("name=", replace(tag("name")," Pky ", " Parkway "));
}

*["name"=~/ Pkwy /].highway_name {
assertNoMatch: "way \"name\"=Main Parkway East";
assertMatch: "way \"name\"=Main Pkwy East";
throwWarning: tr("Highway name contains Pkwy, may need to be expanded to Parkway");
fixAdd: concat("name=", replace(tag("name")," Pkwy ", " Parkway "));
}

*["name"=~/ Pl /].highway_name {
assertNoMatch: "way \"name\"=Main Place East";
assertMatch: "way \"name\"=Main Pl East";
throwWarning: tr("Highway name contains Pl, may need to be expanded to Place");
fixAdd: concat("name=", replace(tag("name")," Pl ", " Place "));
}

*["name"=~/ Pln /].highway_name {
assertNoMatch: "way \"name\"=Main Plain East";
assertMatch: "way \"name\"=Main Pln East";
throwWarning: tr("Highway name contains Pln, may need to be expanded to Plain");
fixAdd: concat("name=", replace(tag("name")," Pln ", " Plain "));
}

*["name"=~/ Plns /].highway_name {
assertNoMatch: "way \"name\"=Main Plains East";
assertMatch: "way \"name\"=Main Plns East";
throwWarning: tr("Highway name contains Plns, may need to be expanded to Plains");
fixAdd: concat("name=", replace(tag("name")," Plns ", " Plains "));
}

*["name"=~/ Plz /].highway_name {
assertNoMatch: "way \"name\"=Main Plaza East";
assertMatch: "way \"name\"=Main Plz East";
throwWarning: tr("Highway name contains Plz, may need to be expanded to Plaza");
fixAdd: concat("name=", replace(tag("name")," Plz ", " Plaza "));
}

*["name"=~/ Pnt /].highway_name {
assertNoMatch: "way \"name\"=Main Point East";
assertMatch: "way \"name\"=Main Pnt East";
throwWarning: tr("Highway name contains Pnt, may need to be expanded to Point");
fixAdd: concat("name=", replace(tag("name")," Pnt ", " Point "));
}

*["name"=~/ Prkwy /].highway_name {
assertNoMatch: "way \"name\"=Main Parkway East";
assertMatch: "way \"name\"=Main Prkwy East";
throwWarning: tr("Highway name contains Prkwy, may need to be expanded to Parkway");
fixAdd: concat("name=", replace(tag("name")," Prkwy ", " Parkway "));
}

*["name"=~/ Pt /].highway_name {
assertNoMatch: "way \"name\"=Main Point East";
assertMatch: "way \"name\"=Main Pt East";
throwWarning: tr("Highway name contains Pt, may need to be expanded to Point");
fixAdd: concat("name=", replace(tag("name")," Pt ", " Point "));
}

*["name"=~/ Pvt /].highway_name {
assertNoMatch: "way \"name\"=Main Private East";
assertMatch: "way \"name\"=Main Pvt East";
throwWarning: tr("Highway name contains Pvt, may need to be expanded to Private");
fixAdd: concat("name=", replace(tag("name")," Pvt ", " Private "));
}

*["name"=~/ Qdrt /].highway_name {
assertNoMatch: "way \"name\"=Main Quadrant East";
assertMatch: "way \"name\"=Main Qdrt East";
throwWarning: tr("Highway name contains Qdrt, may need to be expanded to Quadrant");
fixAdd: concat("name=", replace(tag("name")," Qdrt ", " Quadrant "));
}

*["name"=~/ Qtrs /].highway_name {
assertNoMatch: "way \"name\"=Main Quarters East";
assertMatch: "way \"name\"=Main Qtrs East";
throwWarning: tr("Highway name contains Qtrs, may need to be expanded to Quarters");
fixAdd: concat("name=", replace(tag("name")," Qtrs ", " Quarters "));
}

*["name"=~/ Qy /].highway_name {
assertNoMatch: "way \"name\"=Main Quay East";
assertMatch: "way \"name\"=Main Qy East";
throwWarning: tr("Highway name contains Qy, may need to be expanded to Quay");
fixAdd: concat("name=", replace(tag("name")," Qy ", " Quay "));
}

*["name"=~/ Qys /].highway_name {
assertNoMatch: "way \"name\"=Main Quays East";
assertMatch: "way \"name\"=Main Qys East";
throwWarning: tr("Highway name contains Qys, may need to be expanded to Quays");
fixAdd: concat("name=", replace(tag("name")," Qys ", " Quays "));
}

*["name"=~/ Rd /].highway_name {
assertNoMatch: "way \"name\"=Main Road East";
assertMatch: "way \"name\"=Main Rd East";
throwWarning: tr("Highway name contains Rd, may need to be expanded to Road");
fixAdd: concat("name=", replace(tag("name")," Rd ", " Road "));
}

*["name"=~/ Rds /].highway_name {
assertNoMatch: "way \"name\"=Main Roads East";
assertMatch: "way \"name\"=Main Rds East";
throwWarning: tr("Highway name contains Rds, may need to be expanded to Roads");
fixAdd: concat("name=", replace(tag("name")," Rds ", " Roads "));
}

*["name"=~/ Rdg /].highway_name {
assertNoMatch: "way \"name\"=Main Ridge East";
assertMatch: "way \"name\"=Main Rdg East";
throwWarning: tr("Highway name contains Rdg, may need to be expanded to Ridge");
fixAdd: concat("name=", replace(tag("name")," Rdg ", " Ridge "));
}

*["name"=~/ Rdge /].highway_name {
assertNoMatch: "way \"name\"=Main Ridge East";
assertMatch: "way \"name\"=Main Rdge East";
throwWarning: tr("Highway name contains Rdge, may need to be expanded to Ridge");
fixAdd: concat("name=", replace(tag("name")," Rdge ", " Ridge "));
}

*["name"=~/ Rdgs /].highway_name {
assertNoMatch: "way \"name\"=Main Ridges East";
assertMatch: "way \"name\"=Main Rdgs East";
throwWarning: tr("Highway name contains Rdgs, may need to be expanded to Ridges");
fixAdd: concat("name=", replace(tag("name")," Rdgs ", " Ridges "));
}

*["name"=~/ Rw /].highway_name {
assertNoMatch: "way \"name\"=Main Row East";
assertMatch: "way \"name\"=Main Rw East";
throwWarning: tr("Highway name contains Rw, may need to be expanded to Row");
fixAdd: concat("name=", replace(tag("name")," Rw ", " Row "));
}

*["name"=~/ Rmrd /].highway_name {
assertNoMatch: "way \"name\"=Main Ranch to Market Road East";
assertMatch: "way \"name\"=Main Rmrd East";
throwWarning: tr("Highway name contains Rmrd, may need to be expanded to Ranch to Market Road");
fixAdd: concat("name=", replace(tag("name")," Rmrd ", " Ranch to Market Road "));
}

*["name"=~/ Rt /].highway_name {
assertNoMatch: "way \"name\"=Main Route East";
assertMatch: "way \"name\"=Main Rt East";
throwWarning: tr("Highway name contains Rt, may need to be expanded to Route");
fixAdd: concat("name=", replace(tag("name")," Rt ", " Route "));
}

*["name"=~/ Rte /].highway_name {
assertNoMatch: "way \"name\"=Main Route East";
assertMatch: "way \"name\"=Main Rte East";
throwWarning: tr("Highway name contains Rte, may need to be expanded to Route");
fixAdd: concat("name=", replace(tag("name")," Rte ", " Route "));
}

*["name"=~/ Rty /].highway_name {
assertNoMatch: "way \"name\"=Main Rotary East";
assertMatch: "way \"name\"=Main Rty East";
throwWarning: tr("Highway name contains Rty, may need to be expanded to Rotary");
fixAdd: concat("name=", replace(tag("name")," Rty ", " Rotary "));
}

*["name"=~/ Shl /].highway_name {
assertNoMatch: "way \"name\"=Main Shoal East";
assertMatch: "way \"name\"=Main Shl East";
throwWarning: tr("Highway name contains Shl, may need to be expanded to Shoal");
fixAdd: concat("name=", replace(tag("name")," Shl ", " Shoal "));
}

*["name"=~/ Shls /].highway_name {
assertNoMatch: "way \"name\"=Main Shoals East";
assertMatch: "way \"name\"=Main Shls East";
throwWarning: tr("Highway name contains Shls, may need to be expanded to Shoals");
fixAdd: concat("name=", replace(tag("name")," Shls ", " Shoals "));
}

*["name"=~/ Shr /].highway_name {
assertNoMatch: "way \"name\"=Main Shore East";
assertMatch: "way \"name\"=Main Shr East";
throwWarning: tr("Highway name contains Shr, may need to be expanded to Shore");
fixAdd: concat("name=", replace(tag("name")," Shr ", " Shore "));
}

*["name"=~/ Shrs /].highway_name {
assertNoMatch: "way \"name\"=Main Shores East";
assertMatch: "way \"name\"=Main Shrs East";
throwWarning: tr("Highway name contains Shrs, may need to be expanded to Shores");
fixAdd: concat("name=", replace(tag("name")," Shrs ", " Shores "));
}

*["name"=~/ Skwy /].highway_name {
assertNoMatch: "way \"name\"=Main Skyway East";
assertMatch: "way \"name\"=Main Skwy East";
throwWarning: tr("Highway name contains Skwy, may need to be expanded to Skyway");
fixAdd: concat("name=", replace(tag("name")," Skwy ", " Skyway "));
}

*["name"=~/ Smt /].highway_name {
assertNoMatch: "way \"name\"=Main Summit East";
assertMatch: "way \"name\"=Main Smt East";
throwWarning: tr("Highway name contains Smt, may need to be expanded to Summit");
fixAdd: concat("name=", replace(tag("name")," Smt ", " Summit "));
}

*["name"=~/ Spg /].highway_name {
assertNoMatch: "way \"name\"=Main Spring East";
assertMatch: "way \"name\"=Main Spg East";
throwWarning: tr("Highway name contains Spg, may need to be expanded to Spring");
fixAdd: concat("name=", replace(tag("name")," Spg ", " Spring "));
}

*["name"=~/ Spgs /].highway_name {
assertNoMatch: "way \"name\"=Main Springs East";
assertMatch: "way \"name\"=Main Spgs East";
throwWarning: tr("Highway name contains Spgs, may need to be expanded to Springs");
fixAdd: concat("name=", replace(tag("name")," Spgs ", " Springs "));
}

*["name"=~/ Sq /].highway_name {
assertNoMatch: "way \"name\"=Main Square East";
assertMatch: "way \"name\"=Main Sq East";
throwWarning: tr("Highway name contains Sq, may need to be expanded to Square");
fixAdd: concat("name=", replace(tag("name")," Sq ", " Square "));
}

*["name"=~/ Sqs /].highway_name {
assertNoMatch: "way \"name\"=Main Squares East";
assertMatch: "way \"name\"=Main Sqs East";
throwWarning: tr("Highway name contains Sqs, may need to be expanded to Squares");
fixAdd: concat("name=", replace(tag("name")," Sqs ", " Squares "));
}

*["name"=~/ Srvc /].highway_name {
assertNoMatch: "way \"name\"=Main Service East";
assertMatch: "way \"name\"=Main Srvc East";
throwWarning: tr("Highway name contains Srvc, may need to be expanded to Service");
fixAdd: concat("name=", replace(tag("name")," Srvc ", " Service "));
}

*["name"=~/ St /].highway_name {
assertNoMatch: "way \"name\"=Main Street East";
assertMatch: "way \"name\"=Main St East";
throwWarning: tr("Highway name contains St, may need to be expanded to Street");
fixAdd: concat("name=", replace(tag("name")," St ", " Street "));
}

*["name"=~/ Tce /].highway_name {
assertNoMatch: "way \"name\"=Main Terrace East";
assertMatch: "way \"name\"=Main Tce East";
throwWarning: tr("Highway name contains Tce, may need to be expanded to Terrace");
fixAdd: concat("name=", replace(tag("name")," Tce ", " Terrace "));
}

*["name"=~/ Ter /].highway_name {
assertNoMatch: "way \"name\"=Main Terrace East";
assertMatch: "way \"name\"=Main Ter East";
throwWarning: tr("Highway name contains Ter, may need to be expanded to Terrace");
fixAdd: concat("name=", replace(tag("name")," Ter ", " Terrace "));
}

*["name"=~/ Tfwy /].highway_name {
assertNoMatch: "way \"name\"=Main Trafficway East";
assertMatch: "way \"name\"=Main Tfwy East";
throwWarning: tr("Highway name contains Tfwy, may need to be expanded to Trafficway");
fixAdd: concat("name=", replace(tag("name")," Tfwy ", " Trafficway "));
}

*["name"=~/ Thfr /].highway_name {
assertNoMatch: "way \"name\"=Main Thoroughfare East";
assertMatch: "way \"name\"=Main Thfr East";
throwWarning: tr("Highway name contains Thfr, may need to be expanded to Thoroughfare");
fixAdd: concat("name=", replace(tag("name")," Thfr ", " Thoroughfare "));
}

*["name"=~/ Thwy /].highway_name {
assertNoMatch: "way \"name\"=Main Throughway East";
assertMatch: "way \"name\"=Main Thwy East";
throwWarning: tr("Highway name contains Thwy, may need to be expanded to Throughway");
fixAdd: concat("name=", replace(tag("name")," Thwy ", " Throughway "));
}

*["name"=~/ Tl /].highway_name {
assertNoMatch: "way \"name\"=Main Trail East";
assertMatch: "way \"name\"=Main Tl East";
throwWarning: tr("Highway name contains Tl, may need to be expanded to Trail");
fixAdd: concat("name=", replace(tag("name")," Tl ", " Trail "));
}

*["name"=~/ Tlwy /].highway_name {
assertNoMatch: "way \"name\"=Main Tollway East";
assertMatch: "way \"name\"=Main Tlwy East";
throwWarning: tr("Highway name contains Tlwy, may need to be expanded to Tollway");
fixAdd: concat("name=", replace(tag("name")," Tlwy ", " Tollway "));
}

*["name"=~/ Tpke /].highway_name {
assertNoMatch: "way \"name\"=Main Turnpike East";
assertMatch: "way \"name\"=Main Tpke East";
throwWarning: tr("Highway name contains Tpke, may need to be expanded to Turnpike");
fixAdd: concat("name=", replace(tag("name")," Tpke ", " Turnpike "));
}

*["name"=~/ Trce /].highway_name {
assertNoMatch: "way \"name\"=Main Trace East";
assertMatch: "way \"name\"=Main Trce East";
throwWarning: tr("Highway name contains Trce, may need to be expanded to Trace");
fixAdd: concat("name=", replace(tag("name")," Trce ", " Trace "));
}

*["name"=~/ Tr /].highway_name {
assertNoMatch: "way \"name\"=Main Trail East";
assertMatch: "way \"name\"=Main Tr East";
throwWarning: tr("Highway name contains Tr, may need to be expanded to Trail");
fixAdd: concat("name=", replace(tag("name")," Tr ", " Trail "));
}

*["name"=~/ Trk /].highway_name {
assertNoMatch: "way \"name\"=Main Track East";
assertMatch: "way \"name\"=Main Trk East";
throwWarning: tr("Highway name contains Trk, may need to be expanded to Track");
fixAdd: concat("name=", replace(tag("name")," Trk ", " Track "));
}

*["name"=~/ Trl /].highway_name {
assertNoMatch: "way \"name\"=Main Trail East";
assertMatch: "way \"name\"=Main Trl East";
throwWarning: tr("Highway name contains Trl, may need to be expanded to Trail");
fixAdd: concat("name=", replace(tag("name")," Trl ", " Trail "));
}

*["name"=~/ Tunl /].highway_name {
assertNoMatch: "way \"name\"=Main Tunnel East";
assertMatch: "way \"name\"=Main Tunl East";
throwWarning: tr("Highway name contains Tunl, may need to be expanded to Tunnel");
fixAdd: concat("name=", replace(tag("name")," Tunl ", " Tunnel "));
}

*["name"=~/ Unp /].highway_name {
assertNoMatch: "way \"name\"=Main Underpass East";
assertMatch: "way \"name\"=Main Unp East";
throwWarning: tr("Highway name contains Unp, may need to be expanded to Underpass");
fixAdd: concat("name=", replace(tag("name")," Unp ", " Underpass "));
}

*["name"=~/ Vl /].highway_name {
assertNoMatch: "way \"name\"=Main Villa East";
assertMatch: "way \"name\"=Main Vl East";
throwWarning: tr("Highway name contains Vl, may need to be expanded to Villa");
fixAdd: concat("name=", replace(tag("name")," Vl ", " Villa "));
}

*["name"=~/ Vlg /].highway_name {
assertNoMatch: "way \"name\"=Main Village East";
assertMatch: "way \"name\"=Main Vlg East";
throwWarning: tr("Highway name contains Vlg, may need to be expanded to Village");
fixAdd: concat("name=", replace(tag("name")," Vlg ", " Village "));
}

*["name"=~/ Vlgs /].highway_name {
assertNoMatch: "way \"name\"=Main Villages East";
assertMatch: "way \"name\"=Main Vlgs East";
throwWarning: tr("Highway name contains Vlgs, may need to be expanded to Villages");
fixAdd: concat("name=", replace(tag("name")," Vlgs ", " Villages "));
}

*["name"=~/ Vly /].highway_name {
assertNoMatch: "way \"name\"=Main Valley East";
assertMatch: "way \"name\"=Main Vly East";
throwWarning: tr("Highway name contains Vly, may need to be expanded to Valley");
fixAdd: concat("name=", replace(tag("name")," Vly ", " Valley "));
}

*["name"=~/ Vw /].highway_name {
assertNoMatch: "way \"name\"=Main View East";
assertMatch: "way \"name\"=Main Vw East";
throwWarning: tr("Highway name contains Vw, may need to be expanded to View");
fixAdd: concat("name=", replace(tag("name")," Vw ", " View "));
}

*["name"=~/ Wd /].highway_name {
assertNoMatch: "way \"name\"=Main Wood East";
assertMatch: "way \"name\"=Main Wd East";
throwWarning: tr("Highway name contains Wd, may need to be expanded to Wood");
fixAdd: concat("name=", replace(tag("name")," Wd ", " Wood "));
}

*["name"=~/ Whrf /].highway_name {
assertNoMatch: "way \"name\"=Main Wharf East";
assertMatch: "way \"name\"=Main Whrf East";
throwWarning: tr("Highway name contains Whrf, may need to be expanded to Wharf");
fixAdd: concat("name=", replace(tag("name")," Whrf ", " Wharf "));
}

*["name"=~/ Wkwy /].highway_name {
assertNoMatch: "way \"name\"=Main Walkway East";
assertMatch: "way \"name\"=Main Wkwy East";
throwWarning: tr("Highway name contains Wkwy, may need to be expanded to Walkway");
fixAdd: concat("name=", replace(tag("name")," Wkwy ", " Walkway "));
}

*["name"=~/ Wlk /].highway_name {
assertNoMatch: "way \"name\"=Main Walk East";
assertMatch: "way \"name\"=Main Wlk East";
throwWarning: tr("Highway name contains Wlk, may need to be expanded to Walk");
fixAdd: concat("name=", replace(tag("name")," Wlk ", " Walk "));
}

*["name"=~/ Wy /].highway_name {
assertNoMatch: "way \"name\"=Main Way East";
assertMatch: "way \"name\"=Main Wy East";
throwWarning: tr("Highway name contains Wy, may need to be expanded to Way");
fixAdd: concat("name=", replace(tag("name")," Wy ", " Way "));
}

*["name"=~/ Xing /].highway_name {
assertNoMatch: "way \"name\"=Main Crossing East";
assertMatch: "way \"name\"=Main Xing East";
throwWarning: tr("Highway name contains Xing, may need to be expanded to Crossing");
fixAdd: concat("name=", replace(tag("name")," Xing ", " Crossing "));
}

*["addr:street"]["addr:street"=~/ Acc\. /] {
assertNoMatch: "way \"addr:street\"=Main Access East";
assertMatch: "way \"addr:street\"=Main Acc East";
throwWarning: tr("addr:street={0} contains ' Acc. ', should likely be expanded to Access","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Acc. ", " Access "));
group: tr("addr:street contains Acc, should likely be expanded to Access");
}

*["addr:street"]["addr:street"=~/ Aly\. /] {
assertNoMatch: "way \"addr:street\"=Main Alley East";
assertMatch: "way \"addr:street\"=Main Aly East";
throwWarning: tr("addr:street={0} contains ' Aly. ', should likely be expanded to Alley","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Aly. ", " Alley "));
group: tr("addr:street contains Aly, should likely be expanded to Alley");
}

*["addr:street"]["addr:street"=~/ Ambl\. /] {
assertNoMatch: "way \"addr:street\"=Main Amble East";
assertMatch: "way \"addr:street\"=Main Ambl East";
throwWarning: tr("addr:street={0} contains ' Ambl. ', should likely be expanded to Amble","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ambl. ", " Amble "));
group: tr("addr:street contains Ambl, should likely be expanded to Amble");
}

*["addr:street"]["addr:street"=~/ App\. /] {
assertNoMatch: "way \"addr:street\"=Main Approach East";
assertMatch: "way \"addr:street\"=Main App East";
throwWarning: tr("addr:street={0} contains ' App. ', should likely be expanded to Approach","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," App. ", " Approach "));
group: tr("addr:street contains App, should likely be expanded to Approach");
}

*["addr:street"]["addr:street"=~/ Arc\. /] {
assertNoMatch: "way \"addr:street\"=Main Arcade East";
assertMatch: "way \"addr:street\"=Main Arc East";
throwWarning: tr("addr:street={0} contains ' Arc. ', should likely be expanded to Arcade","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Arc. ", " Arcade "));
group: tr("addr:street contains Arc, should likely be expanded to Arcade");
}

*["addr:street"]["addr:street"=~/ Artl\. /] {
assertNoMatch: "way \"addr:street\"=Main Arterial East";
assertMatch: "way \"addr:street\"=Main Artl East";
throwWarning: tr("addr:street={0} contains ' Artl. ', should likely be expanded to Arterial","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Artl. ", " Arterial "));
group: tr("addr:street contains Artl, should likely be expanded to Arterial");
}

*["addr:street"]["addr:street"=~/ Arty\. /] {
assertNoMatch: "way \"addr:street\"=Main Artery East";
assertMatch: "way \"addr:street\"=Main Arty East";
throwWarning: tr("addr:street={0} contains ' Arty. ', should likely be expanded to Artery","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Arty. ", " Artery "));
group: tr("addr:street contains Arty, should likely be expanded to Artery");
}

*["addr:street"]["addr:street"=~/ Av\. /] {
assertNoMatch: "way \"addr:street\"=Main Avenue East";
assertMatch: "way \"addr:street\"=Main Av East";
throwWarning: tr("addr:street={0} contains ' Av. ', should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Av. ", " Avenue "));
group: tr("addr:street contains Av, should likely be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/ Ave\. /] {
assertNoMatch: "way \"addr:street\"=Main Avenue East";
assertMatch: "way \"addr:street\"=Main Ave East";
throwWarning: tr("addr:street={0} contains ' Ave. ', should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ave. ", " Avenue "));
group: tr("addr:street contains Ave, should likely be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/ Bch\. /] {
assertNoMatch: "way \"addr:street\"=Main Beach East";
assertMatch: "way \"addr:street\"=Main Bch East";
throwWarning: tr("addr:street={0} contains ' Bch. ', should likely be expanded to Beach","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bch. ", " Beach "));
group: tr("addr:street contains Bch, should likely be expanded to Beach");
}

*["addr:street"]["addr:street"=~/ Bg\. /] {
assertNoMatch: "way \"addr:street\"=Main Burg East";
assertMatch: "way \"addr:street\"=Main Bg East";
throwWarning: tr("addr:street={0} contains ' Bg. ', should likely be expanded to Burg","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bg. ", " Burg "));
group: tr("addr:street contains Bg, should likely be expanded to Burg");
}

*["addr:street"]["addr:street"=~/ Bgs\. /] {
assertNoMatch: "way \"addr:street\"=Main Burgs East";
assertMatch: "way \"addr:street\"=Main Bgs East";
throwWarning: tr("addr:street={0} contains ' Bgs. ', should likely be expanded to Burgs","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bgs. ", " Burgs "));
group: tr("addr:street contains Bgs, should likely be expanded to Burgs");
}

*["addr:street"]["addr:street"=~/ Blf\. /] {
assertNoMatch: "way \"addr:street\"=Main Bluff East";
assertMatch: "way \"addr:street\"=Main Blf East";
throwWarning: tr("addr:street={0} contains ' Blf. ', should likely be expanded to Bluff","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Blf. ", " Bluff "));
group: tr("addr:street contains Blf, should likely be expanded to Bluff");
}

*["addr:street"]["addr:street"=~/ Blk\. /] {
assertNoMatch: "way \"addr:street\"=Main Block East";
assertMatch: "way \"addr:street\"=Main Blk East";
throwWarning: tr("addr:street={0} contains ' Blk. ', should likely be expanded to Block","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Blk. ", " Block "));
group: tr("addr:street contains Blk, should likely be expanded to Block");
}

*["addr:street"]["addr:street"=~/ Blv\. /] {
assertNoMatch: "way \"addr:street\"=Main Boulevard East";
assertMatch: "way \"addr:street\"=Main Blv East";
throwWarning: tr("addr:street={0} contains ' Blv. ', should likely be expanded to Boulevard","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Blv. ", " Boulevard "));
group: tr("addr:street contains Blv, should likely be expanded to Boulevard");
}

*["addr:street"]["addr:street"=~/ Blvd\. /] {
assertNoMatch: "way \"addr:street\"=Main Boulevard East";
assertMatch: "way \"addr:street\"=Main Blvd East";
throwWarning: tr("addr:street={0} contains ' Blvd. ', should likely be expanded to Boulevard","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Blvd. ", " Boulevard "));
group: tr("addr:street contains Blvd, should likely be expanded to Boulevard");
}

*["addr:street"]["addr:street"=~/ Bnd\. /] {
assertNoMatch: "way \"addr:street\"=Main Bend East";
assertMatch: "way \"addr:street\"=Main Bnd East";
throwWarning: tr("addr:street={0} contains ' Bnd. ', should likely be expanded to Bend","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bnd. ", " Bend "));
group: tr("addr:street contains Bnd, should likely be expanded to Bend");
}

*["addr:street"]["addr:street"=~/ Br\. /] {
assertNoMatch: "way \"addr:street\"=Main Bridge East";
assertMatch: "way \"addr:street\"=Main Br East";
throwWarning: tr("addr:street={0} contains ' Br. ', should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Br. ", " Bridge "));
group: tr("addr:street contains Br, should likely be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/ Brg\. /] {
assertNoMatch: "way \"addr:street\"=Main Bridge East";
assertMatch: "way \"addr:street\"=Main Brg East";
throwWarning: tr("addr:street={0} contains ' Brg. ', should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Brg. ", " Bridge "));
group: tr("addr:street contains Brg, should likely be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/ Btm\. /] {
assertNoMatch: "way \"addr:street\"=Main Bottom East";
assertMatch: "way \"addr:street\"=Main Btm East";
throwWarning: tr("addr:street={0} contains ' Btm. ', should likely be expanded to Bottom","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Btm. ", " Bottom "));
group: tr("addr:street contains Btm, should likely be expanded to Bottom");
}

*["addr:street"]["addr:street"=~/ Bwlk\. /] {
assertNoMatch: "way \"addr:street\"=Main Boardwalk East";
assertMatch: "way \"addr:street\"=Main Bwlk East";
throwWarning: tr("addr:street={0} contains ' Bwlk. ', should likely be expanded to Boardwalk","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bwlk. ", " Boardwalk "));
group: tr("addr:street contains Bwlk, should likely be expanded to Boardwalk");
}

*["addr:street"]["addr:street"=~/ Byp\. /] {
assertNoMatch: "way \"addr:street\"=Main Bypass East";
assertMatch: "way \"addr:street\"=Main Byp East";
throwWarning: tr("addr:street={0} contains ' Byp. ', should likely be expanded to Bypass","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Byp. ", " Bypass "));
group: tr("addr:street contains Byp, should likely be expanded to Bypass");
}

*["addr:street"]["addr:street"=~/ Bypa\. /] {
assertNoMatch: "way \"addr:street\"=Main Bypass East";
assertMatch: "way \"addr:street\"=Main Bypa East";
throwWarning: tr("addr:street={0} contains ' Bypa. ', should likely be expanded to Bypass","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bypa. ", " Bypass "));
group: tr("addr:street contains Bypa, should likely be expanded to Bypass");
}

*["addr:street"]["addr:street"=~/ Byu\. /] {
assertNoMatch: "way \"addr:street\"=Main Byou East";
assertMatch: "way \"addr:street\"=Main Byu East";
throwWarning: tr("addr:street={0} contains ' Byu. ', should likely be expanded to Byou","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Byu. ", " Byou "));
group: tr("addr:street contains Byu, should likely be expanded to Byou");
}

*["addr:street"]["addr:street"=~/ Bywy\. /] {
assertNoMatch: "way \"addr:street\"=Main Byway East";
assertMatch: "way \"addr:street\"=Main Bywy East";
throwWarning: tr("addr:street={0} contains ' Bywy. ', should likely be expanded to Byway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bywy. ", " Byway "));
group: tr("addr:street contains Bywy, should likely be expanded to Byway");
}

*["addr:street"]["addr:street"=~/ Bzr\. /] {
assertNoMatch: "way \"addr:street\"=Main Bazaar East";
assertMatch: "way \"addr:street\"=Main Bzr East";
throwWarning: tr("addr:street={0} contains ' Bzr. ', should likely be expanded to Bazaar","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bzr. ", " Bazaar "));
group: tr("addr:street contains Bzr, should likely be expanded to Bazaar");
}

*["addr:street"]["addr:street"=~/ Cct\. /] {
assertNoMatch: "way \"addr:street\"=Main Circuit East";
assertMatch: "way \"addr:street\"=Main Cct East";
throwWarning: tr("addr:street={0} contains ' Cct. ', should likely be expanded to Circuit","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cct. ", " Circuit "));
group: tr("addr:street contains Cct, should likely be expanded to Circuit");
}

*["addr:street"]["addr:street"=~/ Ch\. /] {
assertNoMatch: "way \"addr:street\"=Main Chase East";
assertMatch: "way \"addr:street\"=Main Ch East";
throwWarning: tr("addr:street={0} contains ' Ch. ', should likely be expanded to Chase","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ch. ", " Chase "));
group: tr("addr:street contains Ch, should likely be expanded to Chase");
}

*["addr:street"]["addr:street"=~/ Cir\. /] {
assertNoMatch: "way \"addr:street\"=Main Circle East";
assertMatch: "way \"addr:street\"=Main Cir East";
throwWarning: tr("addr:street={0} contains ' Cir. ', should likely be expanded to Circle","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cir. ", " Circle "));
group: tr("addr:street contains Cir, should likely be expanded to Circle");
}

*["addr:street"]["addr:street"=~/ Cirs\. /] {
assertNoMatch: "way \"addr:street\"=Main Circles East";
assertMatch: "way \"addr:street\"=Main Cirs East";
throwWarning: tr("addr:street={0} contains ' Cirs. ', should likely be expanded to Circles","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cirs. ", " Circles "));
group: tr("addr:street contains Cirs, should likely be expanded to Circles");
}

*["addr:street"]["addr:street"=~/ Clf\. /] {
assertNoMatch: "way \"addr:street\"=Main Cliff East";
assertMatch: "way \"addr:street\"=Main Clf East";
throwWarning: tr("addr:street={0} contains ' Clf. ', should likely be expanded to Cliff","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Clf. ", " Cliff "));
group: tr("addr:street contains Clf, should likely be expanded to Cliff");
}

*["addr:street"]["addr:street"=~/ Clfs\. /] {
assertNoMatch: "way \"addr:street\"=Main Cliffs East";
assertMatch: "way \"addr:street\"=Main Clfs East";
throwWarning: tr("addr:street={0} contains ' Clfs. ', should likely be expanded to Cliffs","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Clfs. ", " Cliffs "));
group: tr("addr:street contains Clfs, should likely be expanded to Cliffs");
}

*["addr:street"]["addr:street"=~/ Cly\. /] {
assertNoMatch: "way \"addr:street\"=Main Colony East";
assertMatch: "way \"addr:street\"=Main Cly East";
throwWarning: tr("addr:street={0} contains ' Cly. ', should likely be expanded to Colony","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cly. ", " Colony "));
group: tr("addr:street contains Cly, should likely be expanded to Colony");
}

*["addr:street"]["addr:street"=~/ Cmn\. /] {
assertNoMatch: "way \"addr:street\"=Main Common East";
assertMatch: "way \"addr:street\"=Main Cmn East";
throwWarning: tr("addr:street={0} contains ' Cmn. ', should likely be expanded to Common","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cmn. ", " Common "));
group: tr("addr:street contains Cmn, should likely be expanded to Common");
}

*["addr:street"]["addr:street"=~/ Cnl\. /] {
assertNoMatch: "way \"addr:street\"=Main Canal East";
assertMatch: "way \"addr:street\"=Main Cnl East";
throwWarning: tr("addr:street={0} contains ' Cnl. ', should likely be expanded to Canal","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cnl. ", " Canal "));
group: tr("addr:street contains Cnl, should likely be expanded to Canal");
}

*["addr:street"]["addr:street"=~/ Cnr\. /] {
assertNoMatch: "way \"addr:street\"=Main Corner East";
assertMatch: "way \"addr:street\"=Main Cnr East";
throwWarning: tr("addr:street={0} contains ' Cnr. ', should likely be expanded to Corner","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cnr. ", " Corner "));
group: tr("addr:street contains Cnr, should likely be expanded to Corner");
}

*["addr:street"]["addr:street"=~/ Coll\. /] {
assertNoMatch: "way \"addr:street\"=Main College East";
assertMatch: "way \"addr:street\"=Main Coll East";
throwWarning: tr("addr:street={0} contains ' Coll. ', should likely be expanded to College","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Coll. ", " College "));
group: tr("addr:street contains Coll, should likely be expanded to College");
}

*["addr:street"]["addr:street"=~/ Cpe\. /] {
assertNoMatch: "way \"addr:street\"=Main Cape East";
assertMatch: "way \"addr:street\"=Main Cpe East";
throwWarning: tr("addr:street={0} contains ' Cpe. ', should likely be expanded to Cape","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cpe. ", " Cape "));
group: tr("addr:street contains Cpe, should likely be expanded to Cape");
}

*["addr:street"]["addr:street"=~/ Cr\. /] {
assertNoMatch: "way \"addr:street\"=Main Creek East";
assertMatch: "way \"addr:street\"=Main Cr East";
throwWarning: tr("addr:street={0} contains ' Cr. ', should likely be expanded to Creek","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cr. ", " Creek "));
group: tr("addr:street contains Cr, should likely be expanded to Creek");
}

*["addr:street"]["addr:street"=~/ Crk\. /] {
assertNoMatch: "way \"addr:street\"=Main Creek East";
assertMatch: "way \"addr:street\"=Main Crk East";
throwWarning: tr("addr:street={0} contains ' Crk. ', should likely be expanded to Creek","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Crk. ", " Creek "));
group: tr("addr:street contains Crk, should likely be expanded to Creek");
}

*["addr:street"]["addr:street"=~/ Cres\. /] {
assertNoMatch: "way \"addr:street\"=Main Crescent East";
assertMatch: "way \"addr:street\"=Main Cres East";
throwWarning: tr("addr:street={0} contains ' Cres. ', should likely be expanded to Crescent","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cres. ", " Crescent "));
group: tr("addr:street contains Cres, should likely be expanded to Crescent");
}

*["addr:street"]["addr:street"=~/ Crst\. /] {
assertNoMatch: "way \"addr:street\"=Main Crest East";
assertMatch: "way \"addr:street\"=Main Crst East";
throwWarning: tr("addr:street={0} contains ' Crst. ', should likely be expanded to Crest","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Crst. ", " Crest "));
group: tr("addr:street contains Crst, should likely be expanded to Crest");
}

*["addr:street"]["addr:street"=~/ Cswy\. /] {
assertNoMatch: "way \"addr:street\"=Main Causeway East";
assertMatch: "way \"addr:street\"=Main Cswy East";
throwWarning: tr("addr:street={0} contains ' Cswy. ', should likely be expanded to Causeway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cswy. ", " Causeway "));
group: tr("addr:street contains Cswy, should likely be expanded to Causeway");
}

*["addr:street"]["addr:street"=~/ Ct\. /] {
assertNoMatch: "way \"addr:street\"=Main Court East";
assertMatch: "way \"addr:street\"=Main Ct East";
throwWarning: tr("addr:street={0} contains ' Ct. ', should likely be expanded to Court","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ct. ", " Court "));
group: tr("addr:street contains Ct, should likely be expanded to Court");
}

*["addr:street"]["addr:street"=~/ Ctr\. /] {
assertNoMatch: "way \"addr:street\"=Main Center East";
assertMatch: "way \"addr:street\"=Main Ctr East";
throwWarning: tr("addr:street={0} contains ' Ctr. ', should likely be expanded to Center","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ctr. ", " Center "));
group: tr("addr:street contains Ctr, should likely be expanded to Center");
}

*["addr:street"]["addr:street"=~/ Cts\. /] {
assertNoMatch: "way \"addr:street\"=Main Courts East";
assertMatch: "way \"addr:street\"=Main Cts East";
throwWarning: tr("addr:street={0} contains ' Cts. ', should likely be expanded to Courts","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cts. ", " Courts "));
group: tr("addr:street contains Cts, should likely be expanded to Courts");
}

*["addr:street"]["addr:street"=~/ Ctyd\. /] {
assertNoMatch: "way \"addr:street\"=Main Courtyard East";
assertMatch: "way \"addr:street\"=Main Ctyd East";
throwWarning: tr("addr:street={0} contains ' Ctyd. ', should likely be expanded to Courtyard","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ctyd. ", " Courtyard "));
group: tr("addr:street contains Ctyd, should likely be expanded to Courtyard");
}

*["addr:street"]["addr:street"=~/ Curv\. /] {
assertNoMatch: "way \"addr:street\"=Main Curve East";
assertMatch: "way \"addr:street\"=Main Curv East";
throwWarning: tr("addr:street={0} contains ' Curv. ', should likely be expanded to Curve","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Curv. ", " Curve "));
group: tr("addr:street contains Curv, should likely be expanded to Curve");
}

*["addr:street"]["addr:street"=~/ Cutt\. /] {
assertNoMatch: "way \"addr:street\"=Main Cutting East";
assertMatch: "way \"addr:street\"=Main Cutt East";
throwWarning: tr("addr:street={0} contains ' Cutt. ', should likely be expanded to Cutting","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cutt. ", " Cutting "));
group: tr("addr:street contains Cutt, should likely be expanded to Cutting");
}

*["addr:street"]["addr:street"=~/ Cv\. /] {
assertNoMatch: "way \"addr:street\"=Main Cove East";
assertMatch: "way \"addr:street\"=Main Cv East";
throwWarning: tr("addr:street={0} contains ' Cv. ', should likely be expanded to Cove","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cv. ", " Cove "));
group: tr("addr:street contains Cv, should likely be expanded to Cove");
}

*["addr:street"]["addr:street"=~/ Cyn\. /] {
assertNoMatch: "way \"addr:street\"=Main Canyon East";
assertMatch: "way \"addr:street\"=Main Cyn East";
throwWarning: tr("addr:street={0} contains ' Cyn. ', should likely be expanded to Canyon","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cyn. ", " Canyon "));
group: tr("addr:street contains Cyn, should likely be expanded to Canyon");
}

*["addr:street"]["addr:street"=~/ Dl\. /] {
assertNoMatch: "way \"addr:street\"=Main Dale East";
assertMatch: "way \"addr:street\"=Main Dl East";
throwWarning: tr("addr:street={0} contains ' Dl. ', should likely be expanded to Dale","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Dl. ", " Dale "));
group: tr("addr:street contains Dl, should likely be expanded to Dale");
}

*["addr:street"]["addr:street"=~/ Dr\. /] {
assertNoMatch: "way \"addr:street\"=Main Drive East";
assertMatch: "way \"addr:street\"=Main Dr East";
throwWarning: tr("addr:street={0} contains ' Dr. ', should likely be expanded to Drive","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Dr. ", " Drive "));
group: tr("addr:street contains Dr, should likely be expanded to Drive");
}

*["addr:street"]["addr:street"=~/ Dv\. /] {
assertNoMatch: "way \"addr:street\"=Main Drive East";
assertMatch: "way \"addr:street\"=Main Dv East";
throwWarning: tr("addr:street={0} contains ' Dv. ', should likely be expanded to Drive","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Dv. ", " Drive "));
group: tr("addr:street contains Dv, should likely be expanded to Drive");
}

*["addr:street"]["addr:street"=~/ Dvwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Driveway East";
assertMatch: "way \"addr:street\"=Main Dvwy East";
throwWarning: tr("addr:street={0} contains ' Dvwy. ', should likely be expanded to Driveway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Dvwy. ", " Driveway "));
group: tr("addr:street contains Dvwy, should likely be expanded to Driveway");
}

*["addr:street"]["addr:street"=~/ Elb\. /] {
assertNoMatch: "way \"addr:street\"=Main Elbow East";
assertMatch: "way \"addr:street\"=Main Elb East";
throwWarning: tr("addr:street={0} contains ' Elb. ', should likely be expanded to Elbow","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Elb. ", " Elbow "));
group: tr("addr:street contains Elb, should likely be expanded to Elbow");
}

*["addr:street"]["addr:street"=~/ Est\. /] {
assertNoMatch: "way \"addr:street\"=Main Estate East";
assertMatch: "way \"addr:street\"=Main Est East";
throwWarning: tr("addr:street={0} contains ' Est. ', should likely be expanded to Estate","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Est. ", " Estate "));
group: tr("addr:street contains Est, should likely be expanded to Estate");
}

*["addr:street"]["addr:street"=~/ Ests\. /] {
assertNoMatch: "way \"addr:street\"=Main Estates East";
assertMatch: "way \"addr:street\"=Main Ests East";
throwWarning: tr("addr:street={0} contains ' Ests. ', should likely be expanded to Estates","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ests. ", " Estates "));
group: tr("addr:street contains Ests, should likely be expanded to Estates");
}

*["addr:street"]["addr:street"=~/ Expy\. /] {
assertNoMatch: "way \"addr:street\"=Main Expressway East";
assertMatch: "way \"addr:street\"=Main Expy East";
throwWarning: tr("addr:street={0} contains ' Expy. ', should likely be expanded to Expressway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Expy. ", " Expressway "));
group: tr("addr:street contains Expy, should likely be expanded to Expressway");
}

*["addr:street"]["addr:street"=~/ Expwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Expressway East";
assertMatch: "way \"addr:street\"=Main Expwy East";
throwWarning: tr("addr:street={0} contains ' Expwy. ', should likely be expanded to Expressway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Expwy. ", " Expressway "));
group: tr("addr:street contains Expwy, should likely be expanded to Expressway");
}

*["addr:street"]["addr:street"=~/ Fawy\. /] {
assertNoMatch: "way \"addr:street\"=Main Fairway East";
assertMatch: "way \"addr:street\"=Main Fawy East";
throwWarning: tr("addr:street={0} contains ' Fawy. ', should likely be expanded to Fairway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fawy. ", " Fairway "));
group: tr("addr:street contains Fawy, should likely be expanded to Fairway");
}

*["addr:street"]["addr:street"=~/ Fld\. /] {
assertNoMatch: "way \"addr:street\"=Main Field East";
assertMatch: "way \"addr:street\"=Main Fld East";
throwWarning: tr("addr:street={0} contains ' Fld. ', should likely be expanded to Field","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fld. ", " Field "));
group: tr("addr:street contains Fld, should likely be expanded to Field");
}

*["addr:street"]["addr:street"=~/ Flds\. /] {
assertNoMatch: "way \"addr:street\"=Main Fields East";
assertMatch: "way \"addr:street\"=Main Flds East";
throwWarning: tr("addr:street={0} contains ' Flds. ', should likely be expanded to Fields","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Flds. ", " Fields "));
group: tr("addr:street contains Flds, should likely be expanded to Fields");
}

*["addr:street"]["addr:street"=~/ Fmrd\. /] {
assertNoMatch: "way \"addr:street\"=Main Farm to Market Road East";
assertMatch: "way \"addr:street\"=Main Fmrd East";
throwWarning: tr("addr:street={0} contains ' Fmrd. ', should likely be expanded to Farm to Market Road","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fmrd. ", " Farm to Market Road "));
group: tr("addr:street contains Fmrd, should likely be expanded to Farm to Market Road");
}

*["addr:street"]["addr:street"=~/ Ftrl\. /] {
assertNoMatch: "way \"addr:street\"=Main Firetrail East";
assertMatch: "way \"addr:street\"=Main Ftrl East";
throwWarning: tr("addr:street={0} contains ' Ftrl. ', should likely be expanded to Firetrail","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ftrl. ", " Firetrail "));
group: tr("addr:street contains Ftrl, should likely be expanded to Firetrail");
}

*["addr:street"]["addr:street"=~/ Frk\. /] {
assertNoMatch: "way \"addr:street\"=Main Fork East";
assertMatch: "way \"addr:street\"=Main Frk East";
throwWarning: tr("addr:street={0} contains ' Frk. ', should likely be expanded to Fork","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Frk. ", " Fork "));
group: tr("addr:street contains Frk, should likely be expanded to Fork");
}

*["addr:street"]["addr:street"=~/ Fry\. /] {
assertNoMatch: "way \"addr:street\"=Main Ferry East";
assertMatch: "way \"addr:street\"=Main Fry East";
throwWarning: tr("addr:street={0} contains ' Fry. ', should likely be expanded to Ferry","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fry. ", " Ferry "));
group: tr("addr:street contains Fry, should likely be expanded to Ferry");
}

*["addr:street"]["addr:street"=~/ Fwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Freeway East";
assertMatch: "way \"addr:street\"=Main Fwy East";
throwWarning: tr("addr:street={0} contains ' Fwy. ', should likely be expanded to Freeway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fwy. ", " Freeway "));
group: tr("addr:street contains Fwy, should likely be expanded to Freeway");
}

*["addr:street"]["addr:street"=~/ Gd\. /] {
assertNoMatch: "way \"addr:street\"=Main Grade East";
assertMatch: "way \"addr:street\"=Main Gd East";
throwWarning: tr("addr:street={0} contains ' Gd. ', should likely be expanded to Grade","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gd. ", " Grade "));
group: tr("addr:street contains Gd, should likely be expanded to Grade");
}

*["addr:street"]["addr:street"=~/ Gdns\. /] {
assertNoMatch: "way \"addr:street\"=Main Gardens East";
assertMatch: "way \"addr:street\"=Main Gdns East";
throwWarning: tr("addr:street={0} contains ' Gdns. ', should likely be expanded to Gardens","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gdns. ", " Gardens "));
group: tr("addr:street contains Gdns, should likely be expanded to Gardens");
}

*["addr:street"]["addr:street"=~/ Gr\. /] {
assertNoMatch: "way \"addr:street\"=Main Grove East";
assertMatch: "way \"addr:street\"=Main Gr East";
throwWarning: tr("addr:street={0} contains ' Gr. ', should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gr. ", " Grove "));
group: tr("addr:street contains Gr, should likely be expanded to Grove");
}

*["addr:street"]["addr:street"=~/ Gro\. /] {
assertNoMatch: "way \"addr:street\"=Main Grove East";
assertMatch: "way \"addr:street\"=Main Gro East";
throwWarning: tr("addr:street={0} contains ' Gro. ', should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gro. ", " Grove "));
group: tr("addr:street contains Gro, should likely be expanded to Grove");
}

*["addr:street"]["addr:street"=~/ Grv\. /] {
assertNoMatch: "way \"addr:street\"=Main Grove East";
assertMatch: "way \"addr:street\"=Main Grv East";
throwWarning: tr("addr:street={0} contains ' Grv. ', should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Grv. ", " Grove "));
group: tr("addr:street contains Grv, should likely be expanded to Grove");
}

*["addr:street"]["addr:street"=~/ Hbr\. /] {
assertNoMatch: "way \"addr:street\"=Main Harbor East";
assertMatch: "way \"addr:street\"=Main Hbr East";
throwWarning: tr("addr:street={0} contains ' Hbr. ', should likely be expanded to Harbor","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hbr. ", " Harbor "));
group: tr("addr:street contains Hbr, should likely be expanded to Harbor");
}

*["addr:street"]["addr:street"=~/ Hl\. /] {
assertNoMatch: "way \"addr:street\"=Main Hill East";
assertMatch: "way \"addr:street\"=Main Hl East";
throwWarning: tr("addr:street={0} contains ' Hl. ', should likely be expanded to Hill","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hl. ", " Hill "));
group: tr("addr:street contains Hl, should likely be expanded to Hill");
}

*["addr:street"]["addr:street"=~/ Hls\. /] {
assertNoMatch: "way \"addr:street\"=Main Hills East";
assertMatch: "way \"addr:street\"=Main Hls East";
throwWarning: tr("addr:street={0} contains ' Hls. ', should likely be expanded to Hills","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hls. ", " Hills "));
group: tr("addr:street contains Hls, should likely be expanded to Hills");
}

*["addr:street"]["addr:street"=~/ Holw\. /] {
assertNoMatch: "way \"addr:street\"=Main Hollow East";
assertMatch: "way \"addr:street\"=Main Holw East";
throwWarning: tr("addr:street={0} contains ' Holw. ', should likely be expanded to Hollow","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Holw. ", " Hollow "));
group: tr("addr:street contains Holw, should likely be expanded to Hollow");
}

*["addr:street"]["addr:street"=~/ Hts\. /] {
assertNoMatch: "way \"addr:street\"=Main Heights East";
assertMatch: "way \"addr:street\"=Main Hts East";
throwWarning: tr("addr:street={0} contains ' Hts. ', should likely be expanded to Heights","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hts. ", " Heights "));
group: tr("addr:street contains Hts, should likely be expanded to Heights");
}

*["addr:street"]["addr:street"=~/ Hw\. /] {
assertNoMatch: "way \"addr:street\"=Main Highway East";
assertMatch: "way \"addr:street\"=Main Hw East";
throwWarning: tr("addr:street={0} contains ' Hw. ', should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hw. ", " Highway "));
group: tr("addr:street contains Hw, should likely be expanded to Highway");
}

*["addr:street"]["addr:street"=~/ Hwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Highway East";
assertMatch: "way \"addr:street\"=Main Hwy East";
throwWarning: tr("addr:street={0} contains ' Hwy. ', should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hwy. ", " Highway "));
group: tr("addr:street contains Hwy, should likely be expanded to Highway");
}

*["addr:street"]["addr:street"=~/ Hvn\. /] {
assertNoMatch: "way \"addr:street\"=Main Haven East";
assertMatch: "way \"addr:street\"=Main Hvn East";
throwWarning: tr("addr:street={0} contains ' Hvn. ', should likely be expanded to Haven","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hvn. ", " Haven "));
group: tr("addr:street contains Hvn, should likely be expanded to Haven");
}

*["addr:street"]["addr:street"=~/ Intg\. /] {
assertNoMatch: "way \"addr:street\"=Main Interchange East";
assertMatch: "way \"addr:street\"=Main Intg East";
throwWarning: tr("addr:street={0} contains ' Intg. ', should likely be expanded to Interchange","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Intg. ", " Interchange "));
group: tr("addr:street contains Intg, should likely be expanded to Interchange");
}

*["addr:street"]["addr:street"=~/ Iss\. /] {
assertNoMatch: "way \"addr:street\"=Main Islands East";
assertMatch: "way \"addr:street\"=Main Iss East";
throwWarning: tr("addr:street={0} contains ' Iss. ', should likely be expanded to Islands","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Iss. ", " Islands "));
group: tr("addr:street contains Iss, should likely be expanded to Islands");
}

*["addr:street"]["addr:street"=~/ Jct\. /] {
assertNoMatch: "way \"addr:street\"=Main Junction East";
assertMatch: "way \"addr:street\"=Main Jct East";
throwWarning: tr("addr:street={0} contains ' Jct. ', should likely be expanded to Junction","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Jct. ", " Junction "));
group: tr("addr:street contains Jct, should likely be expanded to Junction");
}

*["addr:street"]["addr:street"=~/ Jn\. /] {
assertNoMatch: "way \"addr:street\"=Main Junction East";
assertMatch: "way \"addr:street\"=Main Jn East";
throwWarning: tr("addr:street={0} contains ' Jn. ', should likely be expanded to Junction","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Jn. ", " Junction "));
group: tr("addr:street contains Jn, should likely be expanded to Junction");
}

*["addr:street"]["addr:street"=~/ Jnc\. /] {
assertNoMatch: "way \"addr:street\"=Main Junction East";
assertMatch: "way \"addr:street\"=Main Jnc East";
throwWarning: tr("addr:street={0} contains ' Jnc. ', should likely be expanded to Junction","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Jnc. ", " Junction "));
group: tr("addr:street contains Jnc, should likely be expanded to Junction");
}

*["addr:street"]["addr:street"=~/ Knl\. /] {
assertNoMatch: "way \"addr:street\"=Main Knoll East";
assertMatch: "way \"addr:street\"=Main Knl East";
throwWarning: tr("addr:street={0} contains ' Knl. ', should likely be expanded to Knoll","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Knl. ", " Knoll "));
group: tr("addr:street contains Knl, should likely be expanded to Knoll");
}

*["addr:street"]["addr:street"=~/ Knls\. /] {
assertNoMatch: "way \"addr:street\"=Main Knolls East";
assertMatch: "way \"addr:street\"=Main Knls East";
throwWarning: tr("addr:street={0} contains ' Knls. ', should likely be expanded to Knolls","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Knls. ", " Knolls "));
group: tr("addr:street contains Knls, should likely be expanded to Knolls");
}

*["addr:street"]["addr:street"=~/ Ky\. /] {
assertNoMatch: "way \"addr:street\"=Main Key East";
assertMatch: "way \"addr:street\"=Main Ky East";
throwWarning: tr("addr:street={0} contains ' Ky. ', should likely be expanded to Key","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ky. ", " Key "));
group: tr("addr:street contains Ky, should likely be expanded to Key");
}

*["addr:street"]["addr:street"=~/ Kys\. /] {
assertNoMatch: "way \"addr:street\"=Main Keys East";
assertMatch: "way \"addr:street\"=Main Kys East";
throwWarning: tr("addr:street={0} contains ' Kys. ', should likely be expanded to Keys","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Kys. ", " Keys "));
group: tr("addr:street contains Kys, should likely be expanded to Keys");
}

*["addr:street"]["addr:street"=~/ Lck\. /] {
assertNoMatch: "way \"addr:street\"=Main Lock East";
assertMatch: "way \"addr:street\"=Main Lck East";
throwWarning: tr("addr:street={0} contains ' Lck. ', should likely be expanded to Lock","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lck. ", " Lock "));
group: tr("addr:street contains Lck, should likely be expanded to Lock");
}

*["addr:street"]["addr:street"=~/ Lcks\. /] {
assertNoMatch: "way \"addr:street\"=Main Locks East";
assertMatch: "way \"addr:street\"=Main Lcks East";
throwWarning: tr("addr:street={0} contains ' Lcks. ', should likely be expanded to Locks","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lcks. ", " Locks "));
group: tr("addr:street contains Lcks, should likely be expanded to Locks");
}

*["addr:street"]["addr:street"=~/ Ldg\. /] {
assertNoMatch: "way \"addr:street\"=Main Lodge East";
assertMatch: "way \"addr:street\"=Main Ldg East";
throwWarning: tr("addr:street={0} contains ' Ldg. ', should likely be expanded to Lodge","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ldg. ", " Lodge "));
group: tr("addr:street contains Ldg, should likely be expanded to Lodge");
}

*["addr:street"]["addr:street"=~/ Lk\. /] {
assertNoMatch: "way \"addr:street\"=Main Lake East";
assertMatch: "way \"addr:street\"=Main Lk East";
throwWarning: tr("addr:street={0} contains ' Lk. ', should likely be expanded to Lake","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lk. ", " Lake "));
group: tr("addr:street contains Lk, should likely be expanded to Lake");
}

*["addr:street"]["addr:street"=~/ Lks\. /] {
assertNoMatch: "way \"addr:street\"=Main Lakes East";
assertMatch: "way \"addr:street\"=Main Lks East";
throwWarning: tr("addr:street={0} contains ' Lks. ', should likely be expanded to Lakes","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lks. ", " Lakes "));
group: tr("addr:street contains Lks, should likely be expanded to Lakes");
}

*["addr:street"]["addr:street"=~/ Lkt\. /] {
assertNoMatch: "way \"addr:street\"=Main Lookout East";
assertMatch: "way \"addr:street\"=Main Lkt East";
throwWarning: tr("addr:street={0} contains ' Lkt. ', should likely be expanded to Lookout","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lkt. ", " Lookout "));
group: tr("addr:street contains Lkt, should likely be expanded to Lookout");
}

*["addr:street"]["addr:street"=~/ Ln\. /] {
assertNoMatch: "way \"addr:street\"=Main Lane East";
assertMatch: "way \"addr:street\"=Main Ln East";
throwWarning: tr("addr:street={0} contains ' Ln. ', should likely be expanded to Lane","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ln. ", " Lane "));
group: tr("addr:street contains Ln, should likely be expanded to Lane");
}

*["addr:street"]["addr:street"=~/ Lndg\. /] {
assertNoMatch: "way \"addr:street\"=Main Landing East";
assertMatch: "way \"addr:street\"=Main Lndg East";
throwWarning: tr("addr:street={0} contains ' Lndg. ', should likely be expanded to Landing","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lndg. ", " Landing "));
group: tr("addr:street contains Lndg, should likely be expanded to Landing");
}

*["addr:street"]["addr:street"=~/ Lp\. /] {
assertNoMatch: "way \"addr:street\"=Main Loop East";
assertMatch: "way \"addr:street\"=Main Lp East";
throwWarning: tr("addr:street={0} contains ' Lp. ', should likely be expanded to Loop","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lp. ", " Loop "));
group: tr("addr:street contains Lp, should likely be expanded to Loop");
}

*["addr:street"]["addr:street"=~/ Mal\. /] {
assertNoMatch: "way \"addr:street\"=Main Mall East";
assertMatch: "way \"addr:street\"=Main Mal East";
throwWarning: tr("addr:street={0} contains ' Mal. ', should likely be expanded to Mall","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mal. ", " Mall "));
group: tr("addr:street contains Mal, should likely be expanded to Mall");
}

*["addr:street"]["addr:street"=~/ Mdw\. /] {
assertNoMatch: "way \"addr:street\"=Main Meadow East";
assertMatch: "way \"addr:street\"=Main Mdw East";
throwWarning: tr("addr:street={0} contains ' Mdw. ', should likely be expanded to Meadow","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mdw. ", " Meadow "));
group: tr("addr:street contains Mdw, should likely be expanded to Meadow");
}

*["addr:street"]["addr:street"=~/ Mdws\. /] {
assertNoMatch: "way \"addr:street\"=Main Meadows East";
assertMatch: "way \"addr:street\"=Main Mdws East";
throwWarning: tr("addr:street={0} contains ' Mdws. ', should likely be expanded to Meadows","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mdws. ", " Meadows "));
group: tr("addr:street contains Mdws, should likely be expanded to Meadows");
}

*["addr:street"]["addr:street"=~/ Mkt\. /] {
assertNoMatch: "way \"addr:street\"=Main Market East";
assertMatch: "way \"addr:street\"=Main Mkt East";
throwWarning: tr("addr:street={0} contains ' Mkt. ', should likely be expanded to Market","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mkt. ", " Market "));
group: tr("addr:street contains Mkt, should likely be expanded to Market");
}

*["addr:street"]["addr:street"=~/ Ml\. /] {
assertNoMatch: "way \"addr:street\"=Main Mill East";
assertMatch: "way \"addr:street\"=Main Ml East";
throwWarning: tr("addr:street={0} contains ' Ml. ', should likely be expanded to Mill","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ml. ", " Mill "));
group: tr("addr:street contains Ml, should likely be expanded to Mill");
}

*["addr:street"]["addr:street"=~/ Mt\. /] {
assertNoMatch: "way \"addr:street\"=Main Mount East";
assertMatch: "way \"addr:street\"=Main Mt East";
throwWarning: tr("addr:street={0} contains ' Mt. ', should likely be expanded to Mount","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mt. ", " Mount "));
group: tr("addr:street contains Mt, should likely be expanded to Mount");
}

*["addr:street"]["addr:street"=~/ Mtn\. /] {
assertNoMatch: "way \"addr:street\"=Main Mountain East";
assertMatch: "way \"addr:street\"=Main Mtn East";
throwWarning: tr("addr:street={0} contains ' Mtn. ', should likely be expanded to Mountain","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mtn. ", " Mountain "));
group: tr("addr:street contains Mtn, should likely be expanded to Mountain");
}

*["addr:street"]["addr:street"=~/ Mtwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Motorway East";
assertMatch: "way \"addr:street\"=Main Mtwy East";
throwWarning: tr("addr:street={0} contains ' Mtwy. ', should likely be expanded to Motorway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mtwy. ", " Motorway "));
group: tr("addr:street contains Mtwy, should likely be expanded to Motorway");
}

*["addr:street"]["addr:street"=~/ Orch\. /] {
assertNoMatch: "way \"addr:street\"=Main Orchard East";
assertMatch: "way \"addr:street\"=Main Orch East";
throwWarning: tr("addr:street={0} contains ' Orch. ', should likely be expanded to Orchard","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Orch. ", " Orchard "));
group: tr("addr:street contains Orch, should likely be expanded to Orchard");
}

*["addr:street"]["addr:street"=~/ Ovps\. /] {
assertNoMatch: "way \"addr:street\"=Main Overpass East";
assertMatch: "way \"addr:street\"=Main Ovps East";
throwWarning: tr("addr:street={0} contains ' Ovps. ', should likely be expanded to Overpass","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ovps. ", " Overpass "));
group: tr("addr:street contains Ovps, should likely be expanded to Overpass");
}

*["addr:street"]["addr:street"=~/ Piaz\. /] {
assertNoMatch: "way \"addr:street\"=Main Piazza East";
assertMatch: "way \"addr:street\"=Main Piaz East";
throwWarning: tr("addr:street={0} contains ' Piaz. ', should likely be expanded to Piazza","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Piaz. ", " Piazza "));
group: tr("addr:street contains Piaz, should likely be expanded to Piazza");
}

*["addr:street"]["addr:street"=~/ Pk\. /] {
assertNoMatch: "way \"addr:street\"=Main Peak East";
assertMatch: "way \"addr:street\"=Main Pk East";
throwWarning: tr("addr:street={0} contains ' Pk. ', should likely be expanded to Peak","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pk. ", " Peak "));
group: tr("addr:street contains Pk, should likely be expanded to Peak");
}

*["addr:street"]["addr:street"=~/ Pky\. /] {
assertNoMatch: "way \"addr:street\"=Main Parkway East";
assertMatch: "way \"addr:street\"=Main Pky East";
throwWarning: tr("addr:street={0} contains ' Pky. ', should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pky. ", " Parkway "));
group: tr("addr:street contains Pky, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pkwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Parkway East";
assertMatch: "way \"addr:street\"=Main Pkwy East";
throwWarning: tr("addr:street={0} contains ' Pkwy. ', should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pkwy. ", " Parkway "));
group: tr("addr:street contains Pkwy, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pl\. /] {
assertNoMatch: "way \"addr:street\"=Main Place East";
assertMatch: "way \"addr:street\"=Main Pl East";
throwWarning: tr("addr:street={0} contains ' Pl. ', should likely be expanded to Place","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pl. ", " Place "));
group: tr("addr:street contains Pl, should likely be expanded to Place");
}

*["addr:street"]["addr:street"=~/ Pln\. /] {
assertNoMatch: "way \"addr:street\"=Main Plain East";
assertMatch: "way \"addr:street\"=Main Pln East";
throwWarning: tr("addr:street={0} contains ' Pln. ', should likely be expanded to Plain","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pln. ", " Plain "));
group: tr("addr:street contains Pln, should likely be expanded to Plain");
}

*["addr:street"]["addr:street"=~/ Plns\. /] {
assertNoMatch: "way \"addr:street\"=Main Plains East";
assertMatch: "way \"addr:street\"=Main Plns East";
throwWarning: tr("addr:street={0} contains ' Plns. ', should likely be expanded to Plains","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Plns. ", " Plains "));
group: tr("addr:street contains Plns, should likely be expanded to Plains");
}

*["addr:street"]["addr:street"=~/ Plz\. /] {
assertNoMatch: "way \"addr:street\"=Main Plaza East";
assertMatch: "way \"addr:street\"=Main Plz East";
throwWarning: tr("addr:street={0} contains ' Plz. ', should likely be expanded to Plaza","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Plz. ", " Plaza "));
group: tr("addr:street contains Plz, should likely be expanded to Plaza");
}

*["addr:street"]["addr:street"=~/ Pnt\. /] {
assertNoMatch: "way \"addr:street\"=Main Point East";
assertMatch: "way \"addr:street\"=Main Pnt East";
throwWarning: tr("addr:street={0} contains ' Pnt. ', should likely be expanded to Point","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pnt. ", " Point "));
group: tr("addr:street contains Pnt, should likely be expanded to Point");
}

*["addr:street"]["addr:street"=~/ Prkwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Parkway East";
assertMatch: "way \"addr:street\"=Main Prkwy East";
throwWarning: tr("addr:street={0} contains ' Prkwy. ', should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Prkwy. ", " Parkway "));
group: tr("addr:street contains Prkwy, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pt\. /] {
assertNoMatch: "way \"addr:street\"=Main Point East";
assertMatch: "way \"addr:street\"=Main Pt East";
throwWarning: tr("addr:street={0} contains ' Pt. ', should likely be expanded to Point","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pt. ", " Point "));
group: tr("addr:street contains Pt, should likely be expanded to Point");
}

*["addr:street"]["addr:street"=~/ Pvt\. /] {
assertNoMatch: "way \"addr:street\"=Main Private East";
assertMatch: "way \"addr:street\"=Main Pvt East";
throwWarning: tr("addr:street={0} contains ' Pvt. ', should likely be expanded to Private","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pvt. ", " Private "));
group: tr("addr:street contains Pvt, should likely be expanded to Private");
}

*["addr:street"]["addr:street"=~/ Qdrt\. /] {
assertNoMatch: "way \"addr:street\"=Main Quadrant East";
assertMatch: "way \"addr:street\"=Main Qdrt East";
throwWarning: tr("addr:street={0} contains ' Qdrt. ', should likely be expanded to Quadrant","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Qdrt. ", " Quadrant "));
group: tr("addr:street contains Qdrt, should likely be expanded to Quadrant");
}

*["addr:street"]["addr:street"=~/ Qtrs\. /] {
assertNoMatch: "way \"addr:street\"=Main Quarters East";
assertMatch: "way \"addr:street\"=Main Qtrs East";
throwWarning: tr("addr:street={0} contains ' Qtrs. ', should likely be expanded to Quarters","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Qtrs. ", " Quarters "));
group: tr("addr:street contains Qtrs, should likely be expanded to Quarters");
}

*["addr:street"]["addr:street"=~/ Qy\. /] {
assertNoMatch: "way \"addr:street\"=Main Quay East";
assertMatch: "way \"addr:street\"=Main Qy East";
throwWarning: tr("addr:street={0} contains ' Qy. ', should likely be expanded to Quay","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Qy. ", " Quay "));
group: tr("addr:street contains Qy, should likely be expanded to Quay");
}

*["addr:street"]["addr:street"=~/ Qys\. /] {
assertNoMatch: "way \"addr:street\"=Main Quays East";
assertMatch: "way \"addr:street\"=Main Qys East";
throwWarning: tr("addr:street={0} contains ' Qys. ', should likely be expanded to Quays","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Qys. ", " Quays "));
group: tr("addr:street contains Qys, should likely be expanded to Quays");
}

*["addr:street"]["addr:street"=~/ Rd\. /] {
assertNoMatch: "way \"addr:street\"=Main Road East";
assertMatch: "way \"addr:street\"=Main Rd East";
throwWarning: tr("addr:street={0} contains ' Rd. ', should likely be expanded to Road","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rd. ", " Road "));
group: tr("addr:street contains Rd, should likely be expanded to Road");
}

*["addr:street"]["addr:street"=~/ Rds\. /] {
assertNoMatch: "way \"addr:street\"=Main Roads East";
assertMatch: "way \"addr:street\"=Main Rds East";
throwWarning: tr("addr:street={0} contains ' Rds. ', should likely be expanded to Roads","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rds. ", " Roads "));
group: tr("addr:street contains Rds, should likely be expanded to Roads");
}

*["addr:street"]["addr:street"=~/ Rdg\. /] {
assertNoMatch: "way \"addr:street\"=Main Ridge East";
assertMatch: "way \"addr:street\"=Main Rdg East";
throwWarning: tr("addr:street={0} contains ' Rdg. ', should likely be expanded to Ridge","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rdg. ", " Ridge "));
group: tr("addr:street contains Rdg, should likely be expanded to Ridge");
}

*["addr:street"]["addr:street"=~/ Rdge\. /] {
assertNoMatch: "way \"addr:street\"=Main Ridge East";
assertMatch: "way \"addr:street\"=Main Rdge East";
throwWarning: tr("addr:street={0} contains ' Rdge. ', should likely be expanded to Ridge","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rdge. ", " Ridge "));
group: tr("addr:street contains Rdge, should likely be expanded to Ridge");
}

*["addr:street"]["addr:street"=~/ Rdgs\. /] {
assertNoMatch: "way \"addr:street\"=Main Ridges East";
assertMatch: "way \"addr:street\"=Main Rdgs East";
throwWarning: tr("addr:street={0} contains ' Rdgs. ', should likely be expanded to Ridges","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rdgs. ", " Ridges "));
group: tr("addr:street contains Rdgs, should likely be expanded to Ridges");
}

*["addr:street"]["addr:street"=~/ Rw\. /] {
assertNoMatch: "way \"addr:street\"=Main Row East";
assertMatch: "way \"addr:street\"=Main Rw East";
throwWarning: tr("addr:street={0} contains ' Rw. ', should likely be expanded to Row","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rw. ", " Row "));
group: tr("addr:street contains Rw, should likely be expanded to Row");
}

*["addr:street"]["addr:street"=~/ Rmrd\. /] {
assertNoMatch: "way \"addr:street\"=Main Ranch to Market Road East";
assertMatch: "way \"addr:street\"=Main Rmrd East";
throwWarning: tr("addr:street={0} contains ' Rmrd. ', should likely be expanded to Ranch to Market Road","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rmrd. ", " Ranch to Market Road "));
group: tr("addr:street contains Rmrd, should likely be expanded to Ranch to Market Road");
}

*["addr:street"]["addr:street"=~/ Rt\. /] {
assertNoMatch: "way \"addr:street\"=Main Route East";
assertMatch: "way \"addr:street\"=Main Rt East";
throwWarning: tr("addr:street={0} contains ' Rt. ', should likely be expanded to Route","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rt. ", " Route "));
group: tr("addr:street contains Rt, should likely be expanded to Route");
}

*["addr:street"]["addr:street"=~/ Rte\. /] {
assertNoMatch: "way \"addr:street\"=Main Route East";
assertMatch: "way \"addr:street\"=Main Rte East";
throwWarning: tr("addr:street={0} contains ' Rte. ', should likely be expanded to Route","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rte. ", " Route "));
group: tr("addr:street contains Rte, should likely be expanded to Route");
}

*["addr:street"]["addr:street"=~/ Rty\. /] {
assertNoMatch: "way \"addr:street\"=Main Rotary East";
assertMatch: "way \"addr:street\"=Main Rty East";
throwWarning: tr("addr:street={0} contains ' Rty. ', should likely be expanded to Rotary","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rty. ", " Rotary "));
group: tr("addr:street contains Rty, should likely be expanded to Rotary");
}

*["addr:street"]["addr:street"=~/ Shl\. /] {
assertNoMatch: "way \"addr:street\"=Main Shoal East";
assertMatch: "way \"addr:street\"=Main Shl East";
throwWarning: tr("addr:street={0} contains ' Shl. ', should likely be expanded to Shoal","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Shl. ", " Shoal "));
group: tr("addr:street contains Shl, should likely be expanded to Shoal");
}

*["addr:street"]["addr:street"=~/ Shls\. /] {
assertNoMatch: "way \"addr:street\"=Main Shoals East";
assertMatch: "way \"addr:street\"=Main Shls East";
throwWarning: tr("addr:street={0} contains ' Shls. ', should likely be expanded to Shoals","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Shls. ", " Shoals "));
group: tr("addr:street contains Shls, should likely be expanded to Shoals");
}

*["addr:street"]["addr:street"=~/ Shr\. /] {
assertNoMatch: "way \"addr:street\"=Main Shore East";
assertMatch: "way \"addr:street\"=Main Shr East";
throwWarning: tr("addr:street={0} contains ' Shr. ', should likely be expanded to Shore","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Shr. ", " Shore "));
group: tr("addr:street contains Shr, should likely be expanded to Shore");
}

*["addr:street"]["addr:street"=~/ Shrs\. /] {
assertNoMatch: "way \"addr:street\"=Main Shores East";
assertMatch: "way \"addr:street\"=Main Shrs East";
throwWarning: tr("addr:street={0} contains ' Shrs. ', should likely be expanded to Shores","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Shrs. ", " Shores "));
group: tr("addr:street contains Shrs, should likely be expanded to Shores");
}

*["addr:street"]["addr:street"=~/ Skwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Skyway East";
assertMatch: "way \"addr:street\"=Main Skwy East";
throwWarning: tr("addr:street={0} contains ' Skwy. ', should likely be expanded to Skyway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Skwy. ", " Skyway "));
group: tr("addr:street contains Skwy, should likely be expanded to Skyway");
}

*["addr:street"]["addr:street"=~/ Smt\. /] {
assertNoMatch: "way \"addr:street\"=Main Summit East";
assertMatch: "way \"addr:street\"=Main Smt East";
throwWarning: tr("addr:street={0} contains ' Smt. ', should likely be expanded to Summit","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Smt. ", " Summit "));
group: tr("addr:street contains Smt, should likely be expanded to Summit");
}

*["addr:street"]["addr:street"=~/ Spg\. /] {
assertNoMatch: "way \"addr:street\"=Main Spring East";
assertMatch: "way \"addr:street\"=Main Spg East";
throwWarning: tr("addr:street={0} contains ' Spg. ', should likely be expanded to Spring","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Spg. ", " Spring "));
group: tr("addr:street contains Spg, should likely be expanded to Spring");
}

*["addr:street"]["addr:street"=~/ Spgs\. /] {
assertNoMatch: "way \"addr:street\"=Main Springs East";
assertMatch: "way \"addr:street\"=Main Spgs East";
throwWarning: tr("addr:street={0} contains ' Spgs. ', should likely be expanded to Springs","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Spgs. ", " Springs "));
group: tr("addr:street contains Spgs, should likely be expanded to Springs");
}

*["addr:street"]["addr:street"=~/ Sq\. /] {
assertNoMatch: "way \"addr:street\"=Main Square East";
assertMatch: "way \"addr:street\"=Main Sq East";
throwWarning: tr("addr:street={0} contains ' Sq. ', should likely be expanded to Square","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Sq. ", " Square "));
group: tr("addr:street contains Sq, should likely be expanded to Square");
}

*["addr:street"]["addr:street"=~/ Sqs\. /] {
assertNoMatch: "way \"addr:street\"=Main Squares East";
assertMatch: "way \"addr:street\"=Main Sqs East";
throwWarning: tr("addr:street={0} contains ' Sqs. ', should likely be expanded to Squares","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Sqs. ", " Squares "));
group: tr("addr:street contains Sqs, should likely be expanded to Squares");
}

*["addr:street"]["addr:street"=~/ Srvc\. /] {
assertNoMatch: "way \"addr:street\"=Main Service East";
assertMatch: "way \"addr:street\"=Main Srvc East";
throwWarning: tr("addr:street={0} contains ' Srvc. ', should likely be expanded to Service","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Srvc. ", " Service "));
group: tr("addr:street contains Srvc, should likely be expanded to Service");
}

*["addr:street"]["addr:street"=~/ St\. /] {
assertNoMatch: "way \"addr:street\"=Main Street East";
assertMatch: "way \"addr:street\"=Main St East";
throwWarning: tr("addr:street={0} contains ' St. ', should likely be expanded to Street","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," St. ", " Street "));
group: tr("addr:street contains St, should likely be expanded to Street");
}

*["addr:street"]["addr:street"=~/ Tce\. /] {
assertNoMatch: "way \"addr:street\"=Main Terrace East";
assertMatch: "way \"addr:street\"=Main Tce East";
throwWarning: tr("addr:street={0} contains ' Tce. ', should likely be expanded to Terrace","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tce. ", " Terrace "));
group: tr("addr:street contains Tce, should likely be expanded to Terrace");
}

*["addr:street"]["addr:street"=~/ Ter\. /] {
assertNoMatch: "way \"addr:street\"=Main Terrace East";
assertMatch: "way \"addr:street\"=Main Ter East";
throwWarning: tr("addr:street={0} contains ' Ter. ', should likely be expanded to Terrace","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ter. ", " Terrace "));
group: tr("addr:street contains Ter, should likely be expanded to Terrace");
}

*["addr:street"]["addr:street"=~/ Tfwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Trafficway East";
assertMatch: "way \"addr:street\"=Main Tfwy East";
throwWarning: tr("addr:street={0} contains ' Tfwy. ', should likely be expanded to Trafficway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tfwy. ", " Trafficway "));
group: tr("addr:street contains Tfwy, should likely be expanded to Trafficway");
}

*["addr:street"]["addr:street"=~/ Thfr\. /] {
assertNoMatch: "way \"addr:street\"=Main Thoroughfare East";
assertMatch: "way \"addr:street\"=Main Thfr East";
throwWarning: tr("addr:street={0} contains ' Thfr. ', should likely be expanded to Thoroughfare","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Thfr. ", " Thoroughfare "));
group: tr("addr:street contains Thfr, should likely be expanded to Thoroughfare");
}

*["addr:street"]["addr:street"=~/ Thwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Throughway East";
assertMatch: "way \"addr:street\"=Main Thwy East";
throwWarning: tr("addr:street={0} contains ' Thwy. ', should likely be expanded to Throughway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Thwy. ", " Throughway "));
group: tr("addr:street contains Thwy, should likely be expanded to Throughway");
}

*["addr:street"]["addr:street"=~/ Tl\. /] {
assertNoMatch: "way \"addr:street\"=Main Trail East";
assertMatch: "way \"addr:street\"=Main Tl East";
throwWarning: tr("addr:street={0} contains ' Tl. ', should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tl. ", " Trail "));
group: tr("addr:street contains Tl, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Tlwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Tollway East";
assertMatch: "way \"addr:street\"=Main Tlwy East";
throwWarning: tr("addr:street={0} contains ' Tlwy. ', should likely be expanded to Tollway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tlwy. ", " Tollway "));
group: tr("addr:street contains Tlwy, should likely be expanded to Tollway");
}

*["addr:street"]["addr:street"=~/ Tpke\. /] {
assertNoMatch: "way \"addr:street\"=Main Turnpike East";
assertMatch: "way \"addr:street\"=Main Tpke East";
throwWarning: tr("addr:street={0} contains ' Tpke. ', should likely be expanded to Turnpike","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tpke. ", " Turnpike "));
group: tr("addr:street contains Tpke, should likely be expanded to Turnpike");
}

*["addr:street"]["addr:street"=~/ Trce\. /] {
assertNoMatch: "way \"addr:street\"=Main Trace East";
assertMatch: "way \"addr:street\"=Main Trce East";
throwWarning: tr("addr:street={0} contains ' Trce. ', should likely be expanded to Trace","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Trce. ", " Trace "));
group: tr("addr:street contains Trce, should likely be expanded to Trace");
}

*["addr:street"]["addr:street"=~/ Tr\. /] {
assertNoMatch: "way \"addr:street\"=Main Trail East";
assertMatch: "way \"addr:street\"=Main Tr East";
throwWarning: tr("addr:street={0} contains ' Tr. ', should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tr. ", " Trail "));
group: tr("addr:street contains Tr, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Trk\. /] {
assertNoMatch: "way \"addr:street\"=Main Track East";
assertMatch: "way \"addr:street\"=Main Trk East";
throwWarning: tr("addr:street={0} contains ' Trk. ', should likely be expanded to Track","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Trk. ", " Track "));
group: tr("addr:street contains Trk, should likely be expanded to Track");
}

*["addr:street"]["addr:street"=~/ Trl\. /] {
assertNoMatch: "way \"addr:street\"=Main Trail East";
assertMatch: "way \"addr:street\"=Main Trl East";
throwWarning: tr("addr:street={0} contains ' Trl. ', should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Trl. ", " Trail "));
group: tr("addr:street contains Trl, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Tunl\. /] {
assertNoMatch: "way \"addr:street\"=Main Tunnel East";
assertMatch: "way \"addr:street\"=Main Tunl East";
throwWarning: tr("addr:street={0} contains ' Tunl. ', should likely be expanded to Tunnel","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tunl. ", " Tunnel "));
group: tr("addr:street contains Tunl, should likely be expanded to Tunnel");
}

*["addr:street"]["addr:street"=~/ Unp\. /] {
assertNoMatch: "way \"addr:street\"=Main Underpass East";
assertMatch: "way \"addr:street\"=Main Unp East";
throwWarning: tr("addr:street={0} contains ' Unp. ', should likely be expanded to Underpass","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Unp. ", " Underpass "));
group: tr("addr:street contains Unp, should likely be expanded to Underpass");
}

*["addr:street"]["addr:street"=~/ Vl\. /] {
assertNoMatch: "way \"addr:street\"=Main Villa East";
assertMatch: "way \"addr:street\"=Main Vl East";
throwWarning: tr("addr:street={0} contains ' Vl. ', should likely be expanded to Villa","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vl. ", " Villa "));
group: tr("addr:street contains Vl, should likely be expanded to Villa");
}

*["addr:street"]["addr:street"=~/ Vlg\. /] {
assertNoMatch: "way \"addr:street\"=Main Village East";
assertMatch: "way \"addr:street\"=Main Vlg East";
throwWarning: tr("addr:street={0} contains ' Vlg. ', should likely be expanded to Village","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vlg. ", " Village "));
group: tr("addr:street contains Vlg, should likely be expanded to Village");
}

*["addr:street"]["addr:street"=~/ Vlgs\. /] {
assertNoMatch: "way \"addr:street\"=Main Villages East";
assertMatch: "way \"addr:street\"=Main Vlgs East";
throwWarning: tr("addr:street={0} contains ' Vlgs. ', should likely be expanded to Villages","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vlgs. ", " Villages "));
group: tr("addr:street contains Vlgs, should likely be expanded to Villages");
}

*["addr:street"]["addr:street"=~/ Vly\. /] {
assertNoMatch: "way \"addr:street\"=Main Valley East";
assertMatch: "way \"addr:street\"=Main Vly East";
throwWarning: tr("addr:street={0} contains ' Vly. ', should likely be expanded to Valley","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vly. ", " Valley "));
group: tr("addr:street contains Vly, should likely be expanded to Valley");
}

*["addr:street"]["addr:street"=~/ Vw\. /] {
assertNoMatch: "way \"addr:street\"=Main View East";
assertMatch: "way \"addr:street\"=Main Vw East";
throwWarning: tr("addr:street={0} contains ' Vw. ', should likely be expanded to View","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vw. ", " View "));
group: tr("addr:street contains Vw, should likely be expanded to View");
}

*["addr:street"]["addr:street"=~/ Wd\. /] {
assertNoMatch: "way \"addr:street\"=Main Wood East";
assertMatch: "way \"addr:street\"=Main Wd East";
throwWarning: tr("addr:street={0} contains ' Wd. ', should likely be expanded to Wood","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Wd. ", " Wood "));
group: tr("addr:street contains Wd, should likely be expanded to Wood");
}

*["addr:street"]["addr:street"=~/ Whrf\. /] {
assertNoMatch: "way \"addr:street\"=Main Wharf East";
assertMatch: "way \"addr:street\"=Main Whrf East";
throwWarning: tr("addr:street={0} contains ' Whrf. ', should likely be expanded to Wharf","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Whrf. ", " Wharf "));
group: tr("addr:street contains Whrf, should likely be expanded to Wharf");
}

*["addr:street"]["addr:street"=~/ Wkwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Walkway East";
assertMatch: "way \"addr:street\"=Main Wkwy East";
throwWarning: tr("addr:street={0} contains ' Wkwy. ', should likely be expanded to Walkway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Wkwy. ", " Walkway "));
group: tr("addr:street contains Wkwy, should likely be expanded to Walkway");
}

*["addr:street"]["addr:street"=~/ Wlk\. /] {
assertNoMatch: "way \"addr:street\"=Main Walk East";
assertMatch: "way \"addr:street\"=Main Wlk East";
throwWarning: tr("addr:street={0} contains ' Wlk. ', should likely be expanded to Walk","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Wlk. ", " Walk "));
group: tr("addr:street contains Wlk, should likely be expanded to Walk");
}

*["addr:street"]["addr:street"=~/ Wy\. /] {
assertNoMatch: "way \"addr:street\"=Main Way East";
assertMatch: "way \"addr:street\"=Main Wy East";
throwWarning: tr("addr:street={0} contains ' Wy. ', should likely be expanded to Way","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Wy. ", " Way "));
group: tr("addr:street contains Wy, should likely be expanded to Way");
}

*["addr:street"]["addr:street"=~/ Xing\. /] {
assertNoMatch: "way \"addr:street\"=Main Crossing East";
assertMatch: "way \"addr:street\"=Main Xing East";
throwWarning: tr("addr:street={0} contains ' Xing. ', should likely be expanded to Crossing","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Xing. ", " Crossing "));
group: tr("addr:street contains Xing, should likely be expanded to Crossing");
}

*["name"=~/ Acc\. /].highway_name {
assertNoMatch: "way \"name\"=Main Access East";
assertMatch: "way \"name\"=Main Acc East";
throwWarning: tr("Highway name contains Acc., may need to be expanded to Access");
fixAdd: concat("name=", replace(tag("name")," Acc. ", " Access "));
}

*["name"=~/ Aly\. /].highway_name {
assertNoMatch: "way \"name\"=Main Alley East";
assertMatch: "way \"name\"=Main Aly East";
throwWarning: tr("Highway name contains Aly., may need to be expanded to Alley");
fixAdd: concat("name=", replace(tag("name")," Aly. ", " Alley "));
}

*["name"=~/ Ambl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Amble East";
assertMatch: "way \"name\"=Main Ambl East";
throwWarning: tr("Highway name contains Ambl., may need to be expanded to Amble");
fixAdd: concat("name=", replace(tag("name")," Ambl. ", " Amble "));
}

*["name"=~/ App\. /].highway_name {
assertNoMatch: "way \"name\"=Main Approach East";
assertMatch: "way \"name\"=Main App East";
throwWarning: tr("Highway name contains App., may need to be expanded to Approach");
fixAdd: concat("name=", replace(tag("name")," App. ", " Approach "));
}

*["name"=~/ Arc\. /].highway_name {
assertNoMatch: "way \"name\"=Main Arcade East";
assertMatch: "way \"name\"=Main Arc East";
throwWarning: tr("Highway name contains Arc., may need to be expanded to Arcade");
fixAdd: concat("name=", replace(tag("name")," Arc. ", " Arcade "));
}

*["name"=~/ Artl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Arterial East";
assertMatch: "way \"name\"=Main Artl East";
throwWarning: tr("Highway name contains Artl., may need to be expanded to Arterial");
fixAdd: concat("name=", replace(tag("name")," Artl. ", " Arterial "));
}

*["name"=~/ Arty\. /].highway_name {
assertNoMatch: "way \"name\"=Main Artery East";
assertMatch: "way \"name\"=Main Arty East";
throwWarning: tr("Highway name contains Arty., may need to be expanded to Artery");
fixAdd: concat("name=", replace(tag("name")," Arty. ", " Artery "));
}

*["name"=~/ Av\. /].highway_name {
assertNoMatch: "way \"name\"=Main Avenue East";
assertMatch: "way \"name\"=Main Av East";
throwWarning: tr("Highway name contains Av., may need to be expanded to Avenue");
fixAdd: concat("name=", replace(tag("name")," Av. ", " Avenue "));
}

*["name"=~/ Ave\. /].highway_name {
assertNoMatch: "way \"name\"=Main Avenue East";
assertMatch: "way \"name\"=Main Ave East";
throwWarning: tr("Highway name contains Ave., may need to be expanded to Avenue");
fixAdd: concat("name=", replace(tag("name")," Ave. ", " Avenue "));
}

*["name"=~/ Bch\. /].highway_name {
assertNoMatch: "way \"name\"=Main Beach East";
assertMatch: "way \"name\"=Main Bch East";
throwWarning: tr("Highway name contains Bch., may need to be expanded to Beach");
fixAdd: concat("name=", replace(tag("name")," Bch. ", " Beach "));
}

*["name"=~/ Bg\. /].highway_name {
assertNoMatch: "way \"name\"=Main Burg East";
assertMatch: "way \"name\"=Main Bg East";
throwWarning: tr("Highway name contains Bg., may need to be expanded to Burg");
fixAdd: concat("name=", replace(tag("name")," Bg. ", " Burg "));
}

*["name"=~/ Bgs\. /].highway_name {
assertNoMatch: "way \"name\"=Main Burgs East";
assertMatch: "way \"name\"=Main Bgs East";
throwWarning: tr("Highway name contains Bgs., may need to be expanded to Burgs");
fixAdd: concat("name=", replace(tag("name")," Bgs. ", " Burgs "));
}

*["name"=~/ Blf\. /].highway_name {
assertNoMatch: "way \"name\"=Main Bluff East";
assertMatch: "way \"name\"=Main Blf East";
throwWarning: tr("Highway name contains Blf., may need to be expanded to Bluff");
fixAdd: concat("name=", replace(tag("name")," Blf. ", " Bluff "));
}

*["name"=~/ Blk\. /].highway_name {
assertNoMatch: "way \"name\"=Main Block East";
assertMatch: "way \"name\"=Main Blk East";
throwWarning: tr("Highway name contains Blk., may need to be expanded to Block");
fixAdd: concat("name=", replace(tag("name")," Blk. ", " Block "));
}

*["name"=~/ Blv\. /].highway_name {
assertNoMatch: "way \"name\"=Main Boulevard East";
assertMatch: "way \"name\"=Main Blv East";
throwWarning: tr("Highway name contains Blv., may need to be expanded to Boulevard");
fixAdd: concat("name=", replace(tag("name")," Blv. ", " Boulevard "));
}

*["name"=~/ Blvd\. /].highway_name {
assertNoMatch: "way \"name\"=Main Boulevard East";
assertMatch: "way \"name\"=Main Blvd East";
throwWarning: tr("Highway name contains Blvd., may need to be expanded to Boulevard");
fixAdd: concat("name=", replace(tag("name")," Blvd. ", " Boulevard "));
}

*["name"=~/ Bnd\. /].highway_name {
assertNoMatch: "way \"name\"=Main Bend East";
assertMatch: "way \"name\"=Main Bnd East";
throwWarning: tr("Highway name contains Bnd., may need to be expanded to Bend");
fixAdd: concat("name=", replace(tag("name")," Bnd. ", " Bend "));
}

*["name"=~/ Br\. /].highway_name {
assertNoMatch: "way \"name\"=Main Bridge East";
assertMatch: "way \"name\"=Main Br East";
throwWarning: tr("Highway name contains Br., may need to be expanded to Bridge");
fixAdd: concat("name=", replace(tag("name")," Br. ", " Bridge "));
}

*["name"=~/ Brg\. /].highway_name {
assertNoMatch: "way \"name\"=Main Bridge East";
assertMatch: "way \"name\"=Main Brg East";
throwWarning: tr("Highway name contains Brg., may need to be expanded to Bridge");
fixAdd: concat("name=", replace(tag("name")," Brg. ", " Bridge "));
}

*["name"=~/ Btm\. /].highway_name {
assertNoMatch: "way \"name\"=Main Bottom East";
assertMatch: "way \"name\"=Main Btm East";
throwWarning: tr("Highway name contains Btm., may need to be expanded to Bottom");
fixAdd: concat("name=", replace(tag("name")," Btm. ", " Bottom "));
}

*["name"=~/ Bwlk\. /].highway_name {
assertNoMatch: "way \"name\"=Main Boardwalk East";
assertMatch: "way \"name\"=Main Bwlk East";
throwWarning: tr("Highway name contains Bwlk., may need to be expanded to Boardwalk");
fixAdd: concat("name=", replace(tag("name")," Bwlk. ", " Boardwalk "));
}

*["name"=~/ Byp\. /].highway_name {
assertNoMatch: "way \"name\"=Main Bypass East";
assertMatch: "way \"name\"=Main Byp East";
throwWarning: tr("Highway name contains Byp., may need to be expanded to Bypass");
fixAdd: concat("name=", replace(tag("name")," Byp. ", " Bypass "));
}

*["name"=~/ Bypa\. /].highway_name {
assertNoMatch: "way \"name\"=Main Bypass East";
assertMatch: "way \"name\"=Main Bypa East";
throwWarning: tr("Highway name contains Bypa., may need to be expanded to Bypass");
fixAdd: concat("name=", replace(tag("name")," Bypa. ", " Bypass "));
}

*["name"=~/ Byu\. /].highway_name {
assertNoMatch: "way \"name\"=Main Byou East";
assertMatch: "way \"name\"=Main Byu East";
throwWarning: tr("Highway name contains Byu., may need to be expanded to Byou");
fixAdd: concat("name=", replace(tag("name")," Byu. ", " Byou "));
}

*["name"=~/ Bywy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Byway East";
assertMatch: "way \"name\"=Main Bywy East";
throwWarning: tr("Highway name contains Bywy., may need to be expanded to Byway");
fixAdd: concat("name=", replace(tag("name")," Bywy. ", " Byway "));
}

*["name"=~/ Bzr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Bazaar East";
assertMatch: "way \"name\"=Main Bzr East";
throwWarning: tr("Highway name contains Bzr., may need to be expanded to Bazaar");
fixAdd: concat("name=", replace(tag("name")," Bzr. ", " Bazaar "));
}

*["name"=~/ Cct\. /].highway_name {
assertNoMatch: "way \"name\"=Main Circuit East";
assertMatch: "way \"name\"=Main Cct East";
throwWarning: tr("Highway name contains Cct., may need to be expanded to Circuit");
fixAdd: concat("name=", replace(tag("name")," Cct. ", " Circuit "));
}

*["name"=~/ Ch\. /].highway_name {
assertNoMatch: "way \"name\"=Main Chase East";
assertMatch: "way \"name\"=Main Ch East";
throwWarning: tr("Highway name contains Ch., may need to be expanded to Chase");
fixAdd: concat("name=", replace(tag("name")," Ch. ", " Chase "));
}

*["name"=~/ Cir\. /].highway_name {
assertNoMatch: "way \"name\"=Main Circle East";
assertMatch: "way \"name\"=Main Cir East";
throwWarning: tr("Highway name contains Cir., may need to be expanded to Circle");
fixAdd: concat("name=", replace(tag("name")," Cir. ", " Circle "));
}

*["name"=~/ Cirs\. /].highway_name {
assertNoMatch: "way \"name\"=Main Circles East";
assertMatch: "way \"name\"=Main Cirs East";
throwWarning: tr("Highway name contains Cirs., may need to be expanded to Circles");
fixAdd: concat("name=", replace(tag("name")," Cirs. ", " Circles "));
}

*["name"=~/ Clf\. /].highway_name {
assertNoMatch: "way \"name\"=Main Cliff East";
assertMatch: "way \"name\"=Main Clf East";
throwWarning: tr("Highway name contains Clf., may need to be expanded to Cliff");
fixAdd: concat("name=", replace(tag("name")," Clf. ", " Cliff "));
}

*["name"=~/ Clfs\. /].highway_name {
assertNoMatch: "way \"name\"=Main Cliffs East";
assertMatch: "way \"name\"=Main Clfs East";
throwWarning: tr("Highway name contains Clfs., may need to be expanded to Cliffs");
fixAdd: concat("name=", replace(tag("name")," Clfs. ", " Cliffs "));
}

*["name"=~/ Cly\. /].highway_name {
assertNoMatch: "way \"name\"=Main Colony East";
assertMatch: "way \"name\"=Main Cly East";
throwWarning: tr("Highway name contains Cly., may need to be expanded to Colony");
fixAdd: concat("name=", replace(tag("name")," Cly. ", " Colony "));
}

*["name"=~/ Cmn\. /].highway_name {
assertNoMatch: "way \"name\"=Main Common East";
assertMatch: "way \"name\"=Main Cmn East";
throwWarning: tr("Highway name contains Cmn., may need to be expanded to Common");
fixAdd: concat("name=", replace(tag("name")," Cmn. ", " Common "));
}

*["name"=~/ Cnl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Canal East";
assertMatch: "way \"name\"=Main Cnl East";
throwWarning: tr("Highway name contains Cnl., may need to be expanded to Canal");
fixAdd: concat("name=", replace(tag("name")," Cnl. ", " Canal "));
}

*["name"=~/ Cnr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Corner East";
assertMatch: "way \"name\"=Main Cnr East";
throwWarning: tr("Highway name contains Cnr., may need to be expanded to Corner");
fixAdd: concat("name=", replace(tag("name")," Cnr. ", " Corner "));
}

*["name"=~/ Coll\. /].highway_name {
assertNoMatch: "way \"name\"=Main College East";
assertMatch: "way \"name\"=Main Coll East";
throwWarning: tr("Highway name contains Coll., may need to be expanded to College");
fixAdd: concat("name=", replace(tag("name")," Coll. ", " College "));
}

*["name"=~/ Cpe\. /].highway_name {
assertNoMatch: "way \"name\"=Main Cape East";
assertMatch: "way \"name\"=Main Cpe East";
throwWarning: tr("Highway name contains Cpe., may need to be expanded to Cape");
fixAdd: concat("name=", replace(tag("name")," Cpe. ", " Cape "));
}

*["name"=~/ Cr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Creek East";
assertMatch: "way \"name\"=Main Cr East";
throwWarning: tr("Highway name contains Cr., may need to be expanded to Creek");
fixAdd: concat("name=", replace(tag("name")," Cr. ", " Creek "));
}

*["name"=~/ Crk\. /].highway_name {
assertNoMatch: "way \"name\"=Main Creek East";
assertMatch: "way \"name\"=Main Crk East";
throwWarning: tr("Highway name contains Crk., may need to be expanded to Creek");
fixAdd: concat("name=", replace(tag("name")," Crk. ", " Creek "));
}

*["name"=~/ Cres\. /].highway_name {
assertNoMatch: "way \"name\"=Main Crescent East";
assertMatch: "way \"name\"=Main Cres East";
throwWarning: tr("Highway name contains Cres., may need to be expanded to Crescent");
fixAdd: concat("name=", replace(tag("name")," Cres. ", " Crescent "));
}

*["name"=~/ Crst\. /].highway_name {
assertNoMatch: "way \"name\"=Main Crest East";
assertMatch: "way \"name\"=Main Crst East";
throwWarning: tr("Highway name contains Crst., may need to be expanded to Crest");
fixAdd: concat("name=", replace(tag("name")," Crst. ", " Crest "));
}

*["name"=~/ Cswy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Causeway East";
assertMatch: "way \"name\"=Main Cswy East";
throwWarning: tr("Highway name contains Cswy., may need to be expanded to Causeway");
fixAdd: concat("name=", replace(tag("name")," Cswy. ", " Causeway "));
}

*["name"=~/ Ct\. /].highway_name {
assertNoMatch: "way \"name\"=Main Court East";
assertMatch: "way \"name\"=Main Ct East";
throwWarning: tr("Highway name contains Ct., may need to be expanded to Court");
fixAdd: concat("name=", replace(tag("name")," Ct. ", " Court "));
}

*["name"=~/ Ctr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Center East";
assertMatch: "way \"name\"=Main Ctr East";
throwWarning: tr("Highway name contains Ctr., may need to be expanded to Center");
fixAdd: concat("name=", replace(tag("name")," Ctr. ", " Center "));
}

*["name"=~/ Cts\. /].highway_name {
assertNoMatch: "way \"name\"=Main Courts East";
assertMatch: "way \"name\"=Main Cts East";
throwWarning: tr("Highway name contains Cts., may need to be expanded to Courts");
fixAdd: concat("name=", replace(tag("name")," Cts. ", " Courts "));
}

*["name"=~/ Ctyd\. /].highway_name {
assertNoMatch: "way \"name\"=Main Courtyard East";
assertMatch: "way \"name\"=Main Ctyd East";
throwWarning: tr("Highway name contains Ctyd., may need to be expanded to Courtyard");
fixAdd: concat("name=", replace(tag("name")," Ctyd. ", " Courtyard "));
}

*["name"=~/ Curv\. /].highway_name {
assertNoMatch: "way \"name\"=Main Curve East";
assertMatch: "way \"name\"=Main Curv East";
throwWarning: tr("Highway name contains Curv., may need to be expanded to Curve");
fixAdd: concat("name=", replace(tag("name")," Curv. ", " Curve "));
}

*["name"=~/ Cutt\. /].highway_name {
assertNoMatch: "way \"name\"=Main Cutting East";
assertMatch: "way \"name\"=Main Cutt East";
throwWarning: tr("Highway name contains Cutt., may need to be expanded to Cutting");
fixAdd: concat("name=", replace(tag("name")," Cutt. ", " Cutting "));
}

*["name"=~/ Cv\. /].highway_name {
assertNoMatch: "way \"name\"=Main Cove East";
assertMatch: "way \"name\"=Main Cv East";
throwWarning: tr("Highway name contains Cv., may need to be expanded to Cove");
fixAdd: concat("name=", replace(tag("name")," Cv. ", " Cove "));
}

*["name"=~/ Cyn\. /].highway_name {
assertNoMatch: "way \"name\"=Main Canyon East";
assertMatch: "way \"name\"=Main Cyn East";
throwWarning: tr("Highway name contains Cyn., may need to be expanded to Canyon");
fixAdd: concat("name=", replace(tag("name")," Cyn. ", " Canyon "));
}

*["name"=~/ Dl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Dale East";
assertMatch: "way \"name\"=Main Dl East";
throwWarning: tr("Highway name contains Dl., may need to be expanded to Dale");
fixAdd: concat("name=", replace(tag("name")," Dl. ", " Dale "));
}

*["name"=~/ Dr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Drive East";
assertMatch: "way \"name\"=Main Dr East";
throwWarning: tr("Highway name contains Dr., may need to be expanded to Drive");
fixAdd: concat("name=", replace(tag("name")," Dr. ", " Drive "));
}

*["name"=~/ Dv\. /].highway_name {
assertNoMatch: "way \"name\"=Main Drive East";
assertMatch: "way \"name\"=Main Dv East";
throwWarning: tr("Highway name contains Dv., may need to be expanded to Drive");
fixAdd: concat("name=", replace(tag("name")," Dv. ", " Drive "));
}

*["name"=~/ Dvwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Driveway East";
assertMatch: "way \"name\"=Main Dvwy East";
throwWarning: tr("Highway name contains Dvwy., may need to be expanded to Driveway");
fixAdd: concat("name=", replace(tag("name")," Dvwy. ", " Driveway "));
}

*["name"=~/ Elb\. /].highway_name {
assertNoMatch: "way \"name\"=Main Elbow East";
assertMatch: "way \"name\"=Main Elb East";
throwWarning: tr("Highway name contains Elb., may need to be expanded to Elbow");
fixAdd: concat("name=", replace(tag("name")," Elb. ", " Elbow "));
}

*["name"=~/ Est\. /].highway_name {
assertNoMatch: "way \"name\"=Main Estate East";
assertMatch: "way \"name\"=Main Est East";
throwWarning: tr("Highway name contains Est., may need to be expanded to Estate");
fixAdd: concat("name=", replace(tag("name")," Est. ", " Estate "));
}

*["name"=~/ Ests\. /].highway_name {
assertNoMatch: "way \"name\"=Main Estates East";
assertMatch: "way \"name\"=Main Ests East";
throwWarning: tr("Highway name contains Ests., may need to be expanded to Estates");
fixAdd: concat("name=", replace(tag("name")," Ests. ", " Estates "));
}

*["name"=~/ Expy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Expressway East";
assertMatch: "way \"name\"=Main Expy East";
throwWarning: tr("Highway name contains Expy., may need to be expanded to Expressway");
fixAdd: concat("name=", replace(tag("name")," Expy. ", " Expressway "));
}

*["name"=~/ Expwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Expressway East";
assertMatch: "way \"name\"=Main Expwy East";
throwWarning: tr("Highway name contains Expwy., may need to be expanded to Expressway");
fixAdd: concat("name=", replace(tag("name")," Expwy. ", " Expressway "));
}

*["name"=~/ Fawy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Fairway East";
assertMatch: "way \"name\"=Main Fawy East";
throwWarning: tr("Highway name contains Fawy., may need to be expanded to Fairway");
fixAdd: concat("name=", replace(tag("name")," Fawy. ", " Fairway "));
}

*["name"=~/ Fld\. /].highway_name {
assertNoMatch: "way \"name\"=Main Field East";
assertMatch: "way \"name\"=Main Fld East";
throwWarning: tr("Highway name contains Fld., may need to be expanded to Field");
fixAdd: concat("name=", replace(tag("name")," Fld. ", " Field "));
}

*["name"=~/ Flds\. /].highway_name {
assertNoMatch: "way \"name\"=Main Fields East";
assertMatch: "way \"name\"=Main Flds East";
throwWarning: tr("Highway name contains Flds., may need to be expanded to Fields");
fixAdd: concat("name=", replace(tag("name")," Flds. ", " Fields "));
}

*["name"=~/ Fmrd\. /].highway_name {
assertNoMatch: "way \"name\"=Main Farm to Market Road East";
assertMatch: "way \"name\"=Main Fmrd East";
throwWarning: tr("Highway name contains Fmrd., may need to be expanded to Farm to Market Road");
fixAdd: concat("name=", replace(tag("name")," Fmrd. ", " Farm to Market Road "));
}

*["name"=~/ Ftrl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Firetrail East";
assertMatch: "way \"name\"=Main Ftrl East";
throwWarning: tr("Highway name contains Ftrl., may need to be expanded to Firetrail");
fixAdd: concat("name=", replace(tag("name")," Ftrl. ", " Firetrail "));
}

*["name"=~/ Frk\. /].highway_name {
assertNoMatch: "way \"name\"=Main Fork East";
assertMatch: "way \"name\"=Main Frk East";
throwWarning: tr("Highway name contains Frk., may need to be expanded to Fork");
fixAdd: concat("name=", replace(tag("name")," Frk. ", " Fork "));
}

*["name"=~/ Fry\. /].highway_name {
assertNoMatch: "way \"name\"=Main Ferry East";
assertMatch: "way \"name\"=Main Fry East";
throwWarning: tr("Highway name contains Fry., may need to be expanded to Ferry");
fixAdd: concat("name=", replace(tag("name")," Fry. ", " Ferry "));
}

*["name"=~/ Fwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Freeway East";
assertMatch: "way \"name\"=Main Fwy East";
throwWarning: tr("Highway name contains Fwy., may need to be expanded to Freeway");
fixAdd: concat("name=", replace(tag("name")," Fwy. ", " Freeway "));
}

*["name"=~/ Gd\. /].highway_name {
assertNoMatch: "way \"name\"=Main Grade East";
assertMatch: "way \"name\"=Main Gd East";
throwWarning: tr("Highway name contains Gd., may need to be expanded to Grade");
fixAdd: concat("name=", replace(tag("name")," Gd. ", " Grade "));
}

*["name"=~/ Gdns\. /].highway_name {
assertNoMatch: "way \"name\"=Main Gardens East";
assertMatch: "way \"name\"=Main Gdns East";
throwWarning: tr("Highway name contains Gdns., may need to be expanded to Gardens");
fixAdd: concat("name=", replace(tag("name")," Gdns. ", " Gardens "));
}

*["name"=~/ Gr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Grove East";
assertMatch: "way \"name\"=Main Gr East";
throwWarning: tr("Highway name contains Gr., may need to be expanded to Grove");
fixAdd: concat("name=", replace(tag("name")," Gr. ", " Grove "));
}

*["name"=~/ Gro\. /].highway_name {
assertNoMatch: "way \"name\"=Main Grove East";
assertMatch: "way \"name\"=Main Gro East";
throwWarning: tr("Highway name contains Gro., may need to be expanded to Grove");
fixAdd: concat("name=", replace(tag("name")," Gro. ", " Grove "));
}

*["name"=~/ Grv\. /].highway_name {
assertNoMatch: "way \"name\"=Main Grove East";
assertMatch: "way \"name\"=Main Grv East";
throwWarning: tr("Highway name contains Grv., may need to be expanded to Grove");
fixAdd: concat("name=", replace(tag("name")," Grv. ", " Grove "));
}

*["name"=~/ Hbr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Harbor East";
assertMatch: "way \"name\"=Main Hbr East";
throwWarning: tr("Highway name contains Hbr., may need to be expanded to Harbor");
fixAdd: concat("name=", replace(tag("name")," Hbr. ", " Harbor "));
}

*["name"=~/ Hl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Hill East";
assertMatch: "way \"name\"=Main Hl East";
throwWarning: tr("Highway name contains Hl., may need to be expanded to Hill");
fixAdd: concat("name=", replace(tag("name")," Hl. ", " Hill "));
}

*["name"=~/ Hls\. /].highway_name {
assertNoMatch: "way \"name\"=Main Hills East";
assertMatch: "way \"name\"=Main Hls East";
throwWarning: tr("Highway name contains Hls., may need to be expanded to Hills");
fixAdd: concat("name=", replace(tag("name")," Hls. ", " Hills "));
}

*["name"=~/ Holw\. /].highway_name {
assertNoMatch: "way \"name\"=Main Hollow East";
assertMatch: "way \"name\"=Main Holw East";
throwWarning: tr("Highway name contains Holw., may need to be expanded to Hollow");
fixAdd: concat("name=", replace(tag("name")," Holw. ", " Hollow "));
}

*["name"=~/ Hts\. /].highway_name {
assertNoMatch: "way \"name\"=Main Heights East";
assertMatch: "way \"name\"=Main Hts East";
throwWarning: tr("Highway name contains Hts., may need to be expanded to Heights");
fixAdd: concat("name=", replace(tag("name")," Hts. ", " Heights "));
}

*["name"=~/ Hw\. /].highway_name {
assertNoMatch: "way \"name\"=Main Highway East";
assertMatch: "way \"name\"=Main Hw East";
throwWarning: tr("Highway name contains Hw., may need to be expanded to Highway");
fixAdd: concat("name=", replace(tag("name")," Hw. ", " Highway "));
}

*["name"=~/ Hwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Highway East";
assertMatch: "way \"name\"=Main Hwy East";
throwWarning: tr("Highway name contains Hwy., may need to be expanded to Highway");
fixAdd: concat("name=", replace(tag("name")," Hwy. ", " Highway "));
}

*["name"=~/ Hvn\. /].highway_name {
assertNoMatch: "way \"name\"=Main Haven East";
assertMatch: "way \"name\"=Main Hvn East";
throwWarning: tr("Highway name contains Hvn., may need to be expanded to Haven");
fixAdd: concat("name=", replace(tag("name")," Hvn. ", " Haven "));
}

*["name"=~/ Intg\. /].highway_name {
assertNoMatch: "way \"name\"=Main Interchange East";
assertMatch: "way \"name\"=Main Intg East";
throwWarning: tr("Highway name contains Intg., may need to be expanded to Interchange");
fixAdd: concat("name=", replace(tag("name")," Intg. ", " Interchange "));
}

*["name"=~/ Iss\. /].highway_name {
assertNoMatch: "way \"name\"=Main Islands East";
assertMatch: "way \"name\"=Main Iss East";
throwWarning: tr("Highway name contains Iss., may need to be expanded to Islands");
fixAdd: concat("name=", replace(tag("name")," Iss. ", " Islands "));
}

*["name"=~/ Jct\. /].highway_name {
assertNoMatch: "way \"name\"=Main Junction East";
assertMatch: "way \"name\"=Main Jct East";
throwWarning: tr("Highway name contains Jct., may need to be expanded to Junction");
fixAdd: concat("name=", replace(tag("name")," Jct. ", " Junction "));
}

*["name"=~/ Jn\. /].highway_name {
assertNoMatch: "way \"name\"=Main Junction East";
assertMatch: "way \"name\"=Main Jn East";
throwWarning: tr("Highway name contains Jn., may need to be expanded to Junction");
fixAdd: concat("name=", replace(tag("name")," Jn. ", " Junction "));
}

*["name"=~/ Jnc\. /].highway_name {
assertNoMatch: "way \"name\"=Main Junction East";
assertMatch: "way \"name\"=Main Jnc East";
throwWarning: tr("Highway name contains Jnc., may need to be expanded to Junction");
fixAdd: concat("name=", replace(tag("name")," Jnc. ", " Junction "));
}

*["name"=~/ Knl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Knoll East";
assertMatch: "way \"name\"=Main Knl East";
throwWarning: tr("Highway name contains Knl., may need to be expanded to Knoll");
fixAdd: concat("name=", replace(tag("name")," Knl. ", " Knoll "));
}

*["name"=~/ Knls\. /].highway_name {
assertNoMatch: "way \"name\"=Main Knolls East";
assertMatch: "way \"name\"=Main Knls East";
throwWarning: tr("Highway name contains Knls., may need to be expanded to Knolls");
fixAdd: concat("name=", replace(tag("name")," Knls. ", " Knolls "));
}

*["name"=~/ Ky\. /].highway_name {
assertNoMatch: "way \"name\"=Main Key East";
assertMatch: "way \"name\"=Main Ky East";
throwWarning: tr("Highway name contains Ky., may need to be expanded to Key");
fixAdd: concat("name=", replace(tag("name")," Ky. ", " Key "));
}

*["name"=~/ Kys\. /].highway_name {
assertNoMatch: "way \"name\"=Main Keys East";
assertMatch: "way \"name\"=Main Kys East";
throwWarning: tr("Highway name contains Kys., may need to be expanded to Keys");
fixAdd: concat("name=", replace(tag("name")," Kys. ", " Keys "));
}

*["name"=~/ Lck\. /].highway_name {
assertNoMatch: "way \"name\"=Main Lock East";
assertMatch: "way \"name\"=Main Lck East";
throwWarning: tr("Highway name contains Lck., may need to be expanded to Lock");
fixAdd: concat("name=", replace(tag("name")," Lck. ", " Lock "));
}

*["name"=~/ Lcks\. /].highway_name {
assertNoMatch: "way \"name\"=Main Locks East";
assertMatch: "way \"name\"=Main Lcks East";
throwWarning: tr("Highway name contains Lcks., may need to be expanded to Locks");
fixAdd: concat("name=", replace(tag("name")," Lcks. ", " Locks "));
}

*["name"=~/ Ldg\. /].highway_name {
assertNoMatch: "way \"name\"=Main Lodge East";
assertMatch: "way \"name\"=Main Ldg East";
throwWarning: tr("Highway name contains Ldg., may need to be expanded to Lodge");
fixAdd: concat("name=", replace(tag("name")," Ldg. ", " Lodge "));
}

*["name"=~/ Lk\. /].highway_name {
assertNoMatch: "way \"name\"=Main Lake East";
assertMatch: "way \"name\"=Main Lk East";
throwWarning: tr("Highway name contains Lk., may need to be expanded to Lake");
fixAdd: concat("name=", replace(tag("name")," Lk. ", " Lake "));
}

*["name"=~/ Lks\. /].highway_name {
assertNoMatch: "way \"name\"=Main Lakes East";
assertMatch: "way \"name\"=Main Lks East";
throwWarning: tr("Highway name contains Lks., may need to be expanded to Lakes");
fixAdd: concat("name=", replace(tag("name")," Lks. ", " Lakes "));
}

*["name"=~/ Lkt\. /].highway_name {
assertNoMatch: "way \"name\"=Main Lookout East";
assertMatch: "way \"name\"=Main Lkt East";
throwWarning: tr("Highway name contains Lkt., may need to be expanded to Lookout");
fixAdd: concat("name=", replace(tag("name")," Lkt. ", " Lookout "));
}

*["name"=~/ Ln\. /].highway_name {
assertNoMatch: "way \"name\"=Main Lane East";
assertMatch: "way \"name\"=Main Ln East";
throwWarning: tr("Highway name contains Ln., may need to be expanded to Lane");
fixAdd: concat("name=", replace(tag("name")," Ln. ", " Lane "));
}

*["name"=~/ Lndg\. /].highway_name {
assertNoMatch: "way \"name\"=Main Landing East";
assertMatch: "way \"name\"=Main Lndg East";
throwWarning: tr("Highway name contains Lndg., may need to be expanded to Landing");
fixAdd: concat("name=", replace(tag("name")," Lndg. ", " Landing "));
}

*["name"=~/ Lp\. /].highway_name {
assertNoMatch: "way \"name\"=Main Loop East";
assertMatch: "way \"name\"=Main Lp East";
throwWarning: tr("Highway name contains Lp., may need to be expanded to Loop");
fixAdd: concat("name=", replace(tag("name")," Lp. ", " Loop "));
}

*["name"=~/ Mal\. /].highway_name {
assertNoMatch: "way \"name\"=Main Mall East";
assertMatch: "way \"name\"=Main Mal East";
throwWarning: tr("Highway name contains Mal., may need to be expanded to Mall");
fixAdd: concat("name=", replace(tag("name")," Mal. ", " Mall "));
}

*["name"=~/ Mdw\. /].highway_name {
assertNoMatch: "way \"name\"=Main Meadow East";
assertMatch: "way \"name\"=Main Mdw East";
throwWarning: tr("Highway name contains Mdw., may need to be expanded to Meadow");
fixAdd: concat("name=", replace(tag("name")," Mdw. ", " Meadow "));
}

*["name"=~/ Mdws\. /].highway_name {
assertNoMatch: "way \"name\"=Main Meadows East";
assertMatch: "way \"name\"=Main Mdws East";
throwWarning: tr("Highway name contains Mdws., may need to be expanded to Meadows");
fixAdd: concat("name=", replace(tag("name")," Mdws. ", " Meadows "));
}

*["name"=~/ Mkt\. /].highway_name {
assertNoMatch: "way \"name\"=Main Market East";
assertMatch: "way \"name\"=Main Mkt East";
throwWarning: tr("Highway name contains Mkt., may need to be expanded to Market");
fixAdd: concat("name=", replace(tag("name")," Mkt. ", " Market "));
}

*["name"=~/ Ml\. /].highway_name {
assertNoMatch: "way \"name\"=Main Mill East";
assertMatch: "way \"name\"=Main Ml East";
throwWarning: tr("Highway name contains Ml., may need to be expanded to Mill");
fixAdd: concat("name=", replace(tag("name")," Ml. ", " Mill "));
}

*["name"=~/ Mt\. /].highway_name {
assertNoMatch: "way \"name\"=Main Mount East";
assertMatch: "way \"name\"=Main Mt East";
throwWarning: tr("Highway name contains Mt., may need to be expanded to Mount");
fixAdd: concat("name=", replace(tag("name")," Mt. ", " Mount "));
}

*["name"=~/ Mtn\. /].highway_name {
assertNoMatch: "way \"name\"=Main Mountain East";
assertMatch: "way \"name\"=Main Mtn East";
throwWarning: tr("Highway name contains Mtn., may need to be expanded to Mountain");
fixAdd: concat("name=", replace(tag("name")," Mtn. ", " Mountain "));
}

*["name"=~/ Mtwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Motorway East";
assertMatch: "way \"name\"=Main Mtwy East";
throwWarning: tr("Highway name contains Mtwy., may need to be expanded to Motorway");
fixAdd: concat("name=", replace(tag("name")," Mtwy. ", " Motorway "));
}

*["name"=~/ Orch\. /].highway_name {
assertNoMatch: "way \"name\"=Main Orchard East";
assertMatch: "way \"name\"=Main Orch East";
throwWarning: tr("Highway name contains Orch., may need to be expanded to Orchard");
fixAdd: concat("name=", replace(tag("name")," Orch. ", " Orchard "));
}

*["name"=~/ Ovps\. /].highway_name {
assertNoMatch: "way \"name\"=Main Overpass East";
assertMatch: "way \"name\"=Main Ovps East";
throwWarning: tr("Highway name contains Ovps., may need to be expanded to Overpass");
fixAdd: concat("name=", replace(tag("name")," Ovps. ", " Overpass "));
}

*["name"=~/ Piaz\. /].highway_name {
assertNoMatch: "way \"name\"=Main Piazza East";
assertMatch: "way \"name\"=Main Piaz East";
throwWarning: tr("Highway name contains Piaz., may need to be expanded to Piazza");
fixAdd: concat("name=", replace(tag("name")," Piaz. ", " Piazza "));
}

*["name"=~/ Pk\. /].highway_name {
assertNoMatch: "way \"name\"=Main Peak East";
assertMatch: "way \"name\"=Main Pk East";
throwWarning: tr("Highway name contains Pk., may need to be expanded to Peak");
fixAdd: concat("name=", replace(tag("name")," Pk. ", " Peak "));
}

*["name"=~/ Pky\. /].highway_name {
assertNoMatch: "way \"name\"=Main Parkway East";
assertMatch: "way \"name\"=Main Pky East";
throwWarning: tr("Highway name contains Pky., may need to be expanded to Parkway");
fixAdd: concat("name=", replace(tag("name")," Pky. ", " Parkway "));
}

*["name"=~/ Pkwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Parkway East";
assertMatch: "way \"name\"=Main Pkwy East";
throwWarning: tr("Highway name contains Pkwy., may need to be expanded to Parkway");
fixAdd: concat("name=", replace(tag("name")," Pkwy. ", " Parkway "));
}

*["name"=~/ Pl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Place East";
assertMatch: "way \"name\"=Main Pl East";
throwWarning: tr("Highway name contains Pl., may need to be expanded to Place");
fixAdd: concat("name=", replace(tag("name")," Pl. ", " Place "));
}

*["name"=~/ Pln\. /].highway_name {
assertNoMatch: "way \"name\"=Main Plain East";
assertMatch: "way \"name\"=Main Pln East";
throwWarning: tr("Highway name contains Pln., may need to be expanded to Plain");
fixAdd: concat("name=", replace(tag("name")," Pln. ", " Plain "));
}

*["name"=~/ Plns\. /].highway_name {
assertNoMatch: "way \"name\"=Main Plains East";
assertMatch: "way \"name\"=Main Plns East";
throwWarning: tr("Highway name contains Plns., may need to be expanded to Plains");
fixAdd: concat("name=", replace(tag("name")," Plns. ", " Plains "));
}

*["name"=~/ Plz\. /].highway_name {
assertNoMatch: "way \"name\"=Main Plaza East";
assertMatch: "way \"name\"=Main Plz East";
throwWarning: tr("Highway name contains Plz., may need to be expanded to Plaza");
fixAdd: concat("name=", replace(tag("name")," Plz. ", " Plaza "));
}

*["name"=~/ Pnt\. /].highway_name {
assertNoMatch: "way \"name\"=Main Point East";
assertMatch: "way \"name\"=Main Pnt East";
throwWarning: tr("Highway name contains Pnt., may need to be expanded to Point");
fixAdd: concat("name=", replace(tag("name")," Pnt. ", " Point "));
}

*["name"=~/ Prkwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Parkway East";
assertMatch: "way \"name\"=Main Prkwy East";
throwWarning: tr("Highway name contains Prkwy., may need to be expanded to Parkway");
fixAdd: concat("name=", replace(tag("name")," Prkwy. ", " Parkway "));
}

*["name"=~/ Pt\. /].highway_name {
assertNoMatch: "way \"name\"=Main Point East";
assertMatch: "way \"name\"=Main Pt East";
throwWarning: tr("Highway name contains Pt., may need to be expanded to Point");
fixAdd: concat("name=", replace(tag("name")," Pt. ", " Point "));
}

*["name"=~/ Pvt\. /].highway_name {
assertNoMatch: "way \"name\"=Main Private East";
assertMatch: "way \"name\"=Main Pvt East";
throwWarning: tr("Highway name contains Pvt., may need to be expanded to Private");
fixAdd: concat("name=", replace(tag("name")," Pvt. ", " Private "));
}

*["name"=~/ Qdrt\. /].highway_name {
assertNoMatch: "way \"name\"=Main Quadrant East";
assertMatch: "way \"name\"=Main Qdrt East";
throwWarning: tr("Highway name contains Qdrt., may need to be expanded to Quadrant");
fixAdd: concat("name=", replace(tag("name")," Qdrt. ", " Quadrant "));
}

*["name"=~/ Qtrs\. /].highway_name {
assertNoMatch: "way \"name\"=Main Quarters East";
assertMatch: "way \"name\"=Main Qtrs East";
throwWarning: tr("Highway name contains Qtrs., may need to be expanded to Quarters");
fixAdd: concat("name=", replace(tag("name")," Qtrs. ", " Quarters "));
}

*["name"=~/ Qy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Quay East";
assertMatch: "way \"name\"=Main Qy East";
throwWarning: tr("Highway name contains Qy., may need to be expanded to Quay");
fixAdd: concat("name=", replace(tag("name")," Qy. ", " Quay "));
}

*["name"=~/ Qys\. /].highway_name {
assertNoMatch: "way \"name\"=Main Quays East";
assertMatch: "way \"name\"=Main Qys East";
throwWarning: tr("Highway name contains Qys., may need to be expanded to Quays");
fixAdd: concat("name=", replace(tag("name")," Qys. ", " Quays "));
}

*["name"=~/ Rd\. /].highway_name {
assertNoMatch: "way \"name\"=Main Road East";
assertMatch: "way \"name\"=Main Rd East";
throwWarning: tr("Highway name contains Rd., may need to be expanded to Road");
fixAdd: concat("name=", replace(tag("name")," Rd. ", " Road "));
}

*["name"=~/ Rds\. /].highway_name {
assertNoMatch: "way \"name\"=Main Roads East";
assertMatch: "way \"name\"=Main Rds East";
throwWarning: tr("Highway name contains Rds., may need to be expanded to Roads");
fixAdd: concat("name=", replace(tag("name")," Rds. ", " Roads "));
}

*["name"=~/ Rdg\. /].highway_name {
assertNoMatch: "way \"name\"=Main Ridge East";
assertMatch: "way \"name\"=Main Rdg East";
throwWarning: tr("Highway name contains Rdg., may need to be expanded to Ridge");
fixAdd: concat("name=", replace(tag("name")," Rdg. ", " Ridge "));
}

*["name"=~/ Rdge\. /].highway_name {
assertNoMatch: "way \"name\"=Main Ridge East";
assertMatch: "way \"name\"=Main Rdge East";
throwWarning: tr("Highway name contains Rdge., may need to be expanded to Ridge");
fixAdd: concat("name=", replace(tag("name")," Rdge. ", " Ridge "));
}

*["name"=~/ Rdgs\. /].highway_name {
assertNoMatch: "way \"name\"=Main Ridges East";
assertMatch: "way \"name\"=Main Rdgs East";
throwWarning: tr("Highway name contains Rdgs., may need to be expanded to Ridges");
fixAdd: concat("name=", replace(tag("name")," Rdgs. ", " Ridges "));
}

*["name"=~/ Rw\. /].highway_name {
assertNoMatch: "way \"name\"=Main Row East";
assertMatch: "way \"name\"=Main Rw East";
throwWarning: tr("Highway name contains Rw., may need to be expanded to Row");
fixAdd: concat("name=", replace(tag("name")," Rw. ", " Row "));
}

*["name"=~/ Rmrd\. /].highway_name {
assertNoMatch: "way \"name\"=Main Ranch to Market Road East";
assertMatch: "way \"name\"=Main Rmrd East";
throwWarning: tr("Highway name contains Rmrd., may need to be expanded to Ranch to Market Road");
fixAdd: concat("name=", replace(tag("name")," Rmrd. ", " Ranch to Market Road "));
}

*["name"=~/ Rt\. /].highway_name {
assertNoMatch: "way \"name\"=Main Route East";
assertMatch: "way \"name\"=Main Rt East";
throwWarning: tr("Highway name contains Rt., may need to be expanded to Route");
fixAdd: concat("name=", replace(tag("name")," Rt. ", " Route "));
}

*["name"=~/ Rte\. /].highway_name {
assertNoMatch: "way \"name\"=Main Route East";
assertMatch: "way \"name\"=Main Rte East";
throwWarning: tr("Highway name contains Rte., may need to be expanded to Route");
fixAdd: concat("name=", replace(tag("name")," Rte. ", " Route "));
}

*["name"=~/ Rty\. /].highway_name {
assertNoMatch: "way \"name\"=Main Rotary East";
assertMatch: "way \"name\"=Main Rty East";
throwWarning: tr("Highway name contains Rty., may need to be expanded to Rotary");
fixAdd: concat("name=", replace(tag("name")," Rty. ", " Rotary "));
}

*["name"=~/ Shl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Shoal East";
assertMatch: "way \"name\"=Main Shl East";
throwWarning: tr("Highway name contains Shl., may need to be expanded to Shoal");
fixAdd: concat("name=", replace(tag("name")," Shl. ", " Shoal "));
}

*["name"=~/ Shls\. /].highway_name {
assertNoMatch: "way \"name\"=Main Shoals East";
assertMatch: "way \"name\"=Main Shls East";
throwWarning: tr("Highway name contains Shls., may need to be expanded to Shoals");
fixAdd: concat("name=", replace(tag("name")," Shls. ", " Shoals "));
}

*["name"=~/ Shr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Shore East";
assertMatch: "way \"name\"=Main Shr East";
throwWarning: tr("Highway name contains Shr., may need to be expanded to Shore");
fixAdd: concat("name=", replace(tag("name")," Shr. ", " Shore "));
}

*["name"=~/ Shrs\. /].highway_name {
assertNoMatch: "way \"name\"=Main Shores East";
assertMatch: "way \"name\"=Main Shrs East";
throwWarning: tr("Highway name contains Shrs., may need to be expanded to Shores");
fixAdd: concat("name=", replace(tag("name")," Shrs. ", " Shores "));
}

*["name"=~/ Skwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Skyway East";
assertMatch: "way \"name\"=Main Skwy East";
throwWarning: tr("Highway name contains Skwy., may need to be expanded to Skyway");
fixAdd: concat("name=", replace(tag("name")," Skwy. ", " Skyway "));
}

*["name"=~/ Smt\. /].highway_name {
assertNoMatch: "way \"name\"=Main Summit East";
assertMatch: "way \"name\"=Main Smt East";
throwWarning: tr("Highway name contains Smt., may need to be expanded to Summit");
fixAdd: concat("name=", replace(tag("name")," Smt. ", " Summit "));
}

*["name"=~/ Spg\. /].highway_name {
assertNoMatch: "way \"name\"=Main Spring East";
assertMatch: "way \"name\"=Main Spg East";
throwWarning: tr("Highway name contains Spg., may need to be expanded to Spring");
fixAdd: concat("name=", replace(tag("name")," Spg. ", " Spring "));
}

*["name"=~/ Spgs\. /].highway_name {
assertNoMatch: "way \"name\"=Main Springs East";
assertMatch: "way \"name\"=Main Spgs East";
throwWarning: tr("Highway name contains Spgs., may need to be expanded to Springs");
fixAdd: concat("name=", replace(tag("name")," Spgs. ", " Springs "));
}

*["name"=~/ Sq\. /].highway_name {
assertNoMatch: "way \"name\"=Main Square East";
assertMatch: "way \"name\"=Main Sq East";
throwWarning: tr("Highway name contains Sq., may need to be expanded to Square");
fixAdd: concat("name=", replace(tag("name")," Sq. ", " Square "));
}

*["name"=~/ Sqs\. /].highway_name {
assertNoMatch: "way \"name\"=Main Squares East";
assertMatch: "way \"name\"=Main Sqs East";
throwWarning: tr("Highway name contains Sqs., may need to be expanded to Squares");
fixAdd: concat("name=", replace(tag("name")," Sqs. ", " Squares "));
}

*["name"=~/ Srvc\. /].highway_name {
assertNoMatch: "way \"name\"=Main Service East";
assertMatch: "way \"name\"=Main Srvc East";
throwWarning: tr("Highway name contains Srvc., may need to be expanded to Service");
fixAdd: concat("name=", replace(tag("name")," Srvc. ", " Service "));
}

*["name"=~/ St\. /].highway_name {
assertNoMatch: "way \"name\"=Main Street East";
assertMatch: "way \"name\"=Main St East";
throwWarning: tr("Highway name contains St., may need to be expanded to Street");
fixAdd: concat("name=", replace(tag("name")," St. ", " Street "));
}

*["name"=~/ Tce\. /].highway_name {
assertNoMatch: "way \"name\"=Main Terrace East";
assertMatch: "way \"name\"=Main Tce East";
throwWarning: tr("Highway name contains Tce., may need to be expanded to Terrace");
fixAdd: concat("name=", replace(tag("name")," Tce. ", " Terrace "));
}

*["name"=~/ Ter\. /].highway_name {
assertNoMatch: "way \"name\"=Main Terrace East";
assertMatch: "way \"name\"=Main Ter East";
throwWarning: tr("Highway name contains Ter., may need to be expanded to Terrace");
fixAdd: concat("name=", replace(tag("name")," Ter. ", " Terrace "));
}

*["name"=~/ Tfwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Trafficway East";
assertMatch: "way \"name\"=Main Tfwy East";
throwWarning: tr("Highway name contains Tfwy., may need to be expanded to Trafficway");
fixAdd: concat("name=", replace(tag("name")," Tfwy. ", " Trafficway "));
}

*["name"=~/ Thfr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Thoroughfare East";
assertMatch: "way \"name\"=Main Thfr East";
throwWarning: tr("Highway name contains Thfr., may need to be expanded to Thoroughfare");
fixAdd: concat("name=", replace(tag("name")," Thfr. ", " Thoroughfare "));
}

*["name"=~/ Thwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Throughway East";
assertMatch: "way \"name\"=Main Thwy East";
throwWarning: tr("Highway name contains Thwy., may need to be expanded to Throughway");
fixAdd: concat("name=", replace(tag("name")," Thwy. ", " Throughway "));
}

*["name"=~/ Tl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Trail East";
assertMatch: "way \"name\"=Main Tl East";
throwWarning: tr("Highway name contains Tl., may need to be expanded to Trail");
fixAdd: concat("name=", replace(tag("name")," Tl. ", " Trail "));
}

*["name"=~/ Tlwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Tollway East";
assertMatch: "way \"name\"=Main Tlwy East";
throwWarning: tr("Highway name contains Tlwy., may need to be expanded to Tollway");
fixAdd: concat("name=", replace(tag("name")," Tlwy. ", " Tollway "));
}

*["name"=~/ Tpke\. /].highway_name {
assertNoMatch: "way \"name\"=Main Turnpike East";
assertMatch: "way \"name\"=Main Tpke East";
throwWarning: tr("Highway name contains Tpke., may need to be expanded to Turnpike");
fixAdd: concat("name=", replace(tag("name")," Tpke. ", " Turnpike "));
}

*["name"=~/ Trce\. /].highway_name {
assertNoMatch: "way \"name\"=Main Trace East";
assertMatch: "way \"name\"=Main Trce East";
throwWarning: tr("Highway name contains Trce., may need to be expanded to Trace");
fixAdd: concat("name=", replace(tag("name")," Trce. ", " Trace "));
}

*["name"=~/ Tr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Trail East";
assertMatch: "way \"name\"=Main Tr East";
throwWarning: tr("Highway name contains Tr., may need to be expanded to Trail");
fixAdd: concat("name=", replace(tag("name")," Tr. ", " Trail "));
}

*["name"=~/ Trk\. /].highway_name {
assertNoMatch: "way \"name\"=Main Track East";
assertMatch: "way \"name\"=Main Trk East";
throwWarning: tr("Highway name contains Trk., may need to be expanded to Track");
fixAdd: concat("name=", replace(tag("name")," Trk. ", " Track "));
}

*["name"=~/ Trl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Trail East";
assertMatch: "way \"name\"=Main Trl East";
throwWarning: tr("Highway name contains Trl., may need to be expanded to Trail");
fixAdd: concat("name=", replace(tag("name")," Trl. ", " Trail "));
}

*["name"=~/ Tunl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Tunnel East";
assertMatch: "way \"name\"=Main Tunl East";
throwWarning: tr("Highway name contains Tunl., may need to be expanded to Tunnel");
fixAdd: concat("name=", replace(tag("name")," Tunl. ", " Tunnel "));
}

*["name"=~/ Unp\. /].highway_name {
assertNoMatch: "way \"name\"=Main Underpass East";
assertMatch: "way \"name\"=Main Unp East";
throwWarning: tr("Highway name contains Unp., may need to be expanded to Underpass");
fixAdd: concat("name=", replace(tag("name")," Unp. ", " Underpass "));
}

*["name"=~/ Vl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Villa East";
assertMatch: "way \"name\"=Main Vl East";
throwWarning: tr("Highway name contains Vl., may need to be expanded to Villa");
fixAdd: concat("name=", replace(tag("name")," Vl. ", " Villa "));
}

*["name"=~/ Vlg\. /].highway_name {
assertNoMatch: "way \"name\"=Main Village East";
assertMatch: "way \"name\"=Main Vlg East";
throwWarning: tr("Highway name contains Vlg., may need to be expanded to Village");
fixAdd: concat("name=", replace(tag("name")," Vlg. ", " Village "));
}

*["name"=~/ Vlgs\. /].highway_name {
assertNoMatch: "way \"name\"=Main Villages East";
assertMatch: "way \"name\"=Main Vlgs East";
throwWarning: tr("Highway name contains Vlgs., may need to be expanded to Villages");
fixAdd: concat("name=", replace(tag("name")," Vlgs. ", " Villages "));
}

*["name"=~/ Vly\. /].highway_name {
assertNoMatch: "way \"name\"=Main Valley East";
assertMatch: "way \"name\"=Main Vly East";
throwWarning: tr("Highway name contains Vly., may need to be expanded to Valley");
fixAdd: concat("name=", replace(tag("name")," Vly. ", " Valley "));
}

*["name"=~/ Vw\. /].highway_name {
assertNoMatch: "way \"name\"=Main View East";
assertMatch: "way \"name\"=Main Vw East";
throwWarning: tr("Highway name contains Vw., may need to be expanded to View");
fixAdd: concat("name=", replace(tag("name")," Vw. ", " View "));
}

*["name"=~/ Wd\. /].highway_name {
assertNoMatch: "way \"name\"=Main Wood East";
assertMatch: "way \"name\"=Main Wd East";
throwWarning: tr("Highway name contains Wd., may need to be expanded to Wood");
fixAdd: concat("name=", replace(tag("name")," Wd. ", " Wood "));
}

*["name"=~/ Whrf\. /].highway_name {
assertNoMatch: "way \"name\"=Main Wharf East";
assertMatch: "way \"name\"=Main Whrf East";
throwWarning: tr("Highway name contains Whrf., may need to be expanded to Wharf");
fixAdd: concat("name=", replace(tag("name")," Whrf. ", " Wharf "));
}

*["name"=~/ Wkwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Walkway East";
assertMatch: "way \"name\"=Main Wkwy East";
throwWarning: tr("Highway name contains Wkwy., may need to be expanded to Walkway");
fixAdd: concat("name=", replace(tag("name")," Wkwy. ", " Walkway "));
}

*["name"=~/ Wlk\. /].highway_name {
assertNoMatch: "way \"name\"=Main Walk East";
assertMatch: "way \"name\"=Main Wlk East";
throwWarning: tr("Highway name contains Wlk., may need to be expanded to Walk");
fixAdd: concat("name=", replace(tag("name")," Wlk. ", " Walk "));
}

*["name"=~/ Wy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Way East";
assertMatch: "way \"name\"=Main Wy East";
throwWarning: tr("Highway name contains Wy., may need to be expanded to Way");
fixAdd: concat("name=", replace(tag("name")," Wy. ", " Way "));
}

*["name"=~/ Xing\. /].highway_name {
assertNoMatch: "way \"name\"=Main Crossing East";
assertMatch: "way \"name\"=Main Xing East";
throwWarning: tr("Highway name contains Xing., may need to be expanded to Crossing");
fixAdd: concat("name=", replace(tag("name")," Xing. ", " Crossing "));
}

*["addr:street"]["addr:street"=~/^Acc /] {
assertNoMatch: "way \"addr:street\"=Access Foo";
assertMatch: "way \"addr:street\"=Acc Foo";
throwWarning: tr("addr:street={0} begins with Acc, should likely be expanded to Access","{0.value}");
fixAdd: concat("addr:street=", "Access", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Acc, may need to be expanded to Access");
}

*["addr:street"]["addr:street"=~/^Aly /] {
assertNoMatch: "way \"addr:street\"=Alley Foo";
assertMatch: "way \"addr:street\"=Aly Foo";
throwWarning: tr("addr:street={0} begins with Aly, should likely be expanded to Alley","{0.value}");
fixAdd: concat("addr:street=", "Alley", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Aly, may need to be expanded to Alley");
}

*["addr:street"]["addr:street"=~/^Ambl /] {
assertNoMatch: "way \"addr:street\"=Amble Foo";
assertMatch: "way \"addr:street\"=Ambl Foo";
throwWarning: tr("addr:street={0} begins with Ambl, should likely be expanded to Amble","{0.value}");
fixAdd: concat("addr:street=", "Amble", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Ambl, may need to be expanded to Amble");
}

*["addr:street"]["addr:street"=~/^App /] {
assertNoMatch: "way \"addr:street\"=Approach Foo";
assertMatch: "way \"addr:street\"=App Foo";
throwWarning: tr("addr:street={0} begins with App, should likely be expanded to Approach","{0.value}");
fixAdd: concat("addr:street=", "Approach", substring(tag("addr:street"), 3));
group: tr("addr:street begins with App, may need to be expanded to Approach");
}

*["addr:street"]["addr:street"=~/^Arc /] {
assertNoMatch: "way \"addr:street\"=Arcade Foo";
assertMatch: "way \"addr:street\"=Arc Foo";
throwWarning: tr("addr:street={0} begins with Arc, should likely be expanded to Arcade","{0.value}");
fixAdd: concat("addr:street=", "Arcade", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Arc, may need to be expanded to Arcade");
}

*["addr:street"]["addr:street"=~/^Artl /] {
assertNoMatch: "way \"addr:street\"=Arterial Foo";
assertMatch: "way \"addr:street\"=Artl Foo";
throwWarning: tr("addr:street={0} begins with Artl, should likely be expanded to Arterial","{0.value}");
fixAdd: concat("addr:street=", "Arterial", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Artl, may need to be expanded to Arterial");
}

*["addr:street"]["addr:street"=~/^Arty /] {
assertNoMatch: "way \"addr:street\"=Artery Foo";
assertMatch: "way \"addr:street\"=Arty Foo";
throwWarning: tr("addr:street={0} begins with Arty, should likely be expanded to Artery","{0.value}");
fixAdd: concat("addr:street=", "Artery", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Arty, may need to be expanded to Artery");
}

*["addr:street"]["addr:street"=~/^Av /] {
assertNoMatch: "way \"addr:street\"=Avenue Foo";
assertMatch: "way \"addr:street\"=Av Foo";
throwWarning: tr("addr:street={0} begins with Av, should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", "Avenue", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Av, may need to be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/^Ave /] {
assertNoMatch: "way \"addr:street\"=Avenue Foo";
assertMatch: "way \"addr:street\"=Ave Foo";
throwWarning: tr("addr:street={0} begins with Ave, should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", "Avenue", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Ave, may need to be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/^Bch /] {
assertNoMatch: "way \"addr:street\"=Beach Foo";
assertMatch: "way \"addr:street\"=Bch Foo";
throwWarning: tr("addr:street={0} begins with Bch, should likely be expanded to Beach","{0.value}");
fixAdd: concat("addr:street=", "Beach", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Bch, may need to be expanded to Beach");
}

*["addr:street"]["addr:street"=~/^Bg /] {
assertNoMatch: "way \"addr:street\"=Burg Foo";
assertMatch: "way \"addr:street\"=Bg Foo";
throwWarning: tr("addr:street={0} begins with Bg, should likely be expanded to Burg","{0.value}");
fixAdd: concat("addr:street=", "Burg", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Bg, may need to be expanded to Burg");
}

*["addr:street"]["addr:street"=~/^Bgs /] {
assertNoMatch: "way \"addr:street\"=Burgs Foo";
assertMatch: "way \"addr:street\"=Bgs Foo";
throwWarning: tr("addr:street={0} begins with Bgs, should likely be expanded to Burgs","{0.value}");
fixAdd: concat("addr:street=", "Burgs", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Bgs, may need to be expanded to Burgs");
}

*["addr:street"]["addr:street"=~/^Blf /] {
assertNoMatch: "way \"addr:street\"=Bluff Foo";
assertMatch: "way \"addr:street\"=Blf Foo";
throwWarning: tr("addr:street={0} begins with Blf, should likely be expanded to Bluff","{0.value}");
fixAdd: concat("addr:street=", "Bluff", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Blf, may need to be expanded to Bluff");
}

*["addr:street"]["addr:street"=~/^Blk /] {
assertNoMatch: "way \"addr:street\"=Block Foo";
assertMatch: "way \"addr:street\"=Blk Foo";
throwWarning: tr("addr:street={0} begins with Blk, should likely be expanded to Block","{0.value}");
fixAdd: concat("addr:street=", "Block", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Blk, may need to be expanded to Block");
}

*["addr:street"]["addr:street"=~/^Blv /] {
assertNoMatch: "way \"addr:street\"=Boulevard Foo";
assertMatch: "way \"addr:street\"=Blv Foo";
throwWarning: tr("addr:street={0} begins with Blv, should likely be expanded to Boulevard","{0.value}");
fixAdd: concat("addr:street=", "Boulevard", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Blv, may need to be expanded to Boulevard");
}

*["addr:street"]["addr:street"=~/^Blvd /] {
assertNoMatch: "way \"addr:street\"=Boulevard Foo";
assertMatch: "way \"addr:street\"=Blvd Foo";
throwWarning: tr("addr:street={0} begins with Blvd, should likely be expanded to Boulevard","{0.value}");
fixAdd: concat("addr:street=", "Boulevard", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Blvd, may need to be expanded to Boulevard");
}

*["addr:street"]["addr:street"=~/^Bnd /] {
assertNoMatch: "way \"addr:street\"=Bend Foo";
assertMatch: "way \"addr:street\"=Bnd Foo";
throwWarning: tr("addr:street={0} begins with Bnd, should likely be expanded to Bend","{0.value}");
fixAdd: concat("addr:street=", "Bend", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Bnd, may need to be expanded to Bend");
}

*["addr:street"]["addr:street"=~/^Br /] {
assertNoMatch: "way \"addr:street\"=Bridge Foo";
assertMatch: "way \"addr:street\"=Br Foo";
throwWarning: tr("addr:street={0} begins with Br, should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", "Bridge", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Br, may need to be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/^Brg /] {
assertNoMatch: "way \"addr:street\"=Bridge Foo";
assertMatch: "way \"addr:street\"=Brg Foo";
throwWarning: tr("addr:street={0} begins with Brg, should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", "Bridge", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Brg, may need to be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/^Btm /] {
assertNoMatch: "way \"addr:street\"=Bottom Foo";
assertMatch: "way \"addr:street\"=Btm Foo";
throwWarning: tr("addr:street={0} begins with Btm, should likely be expanded to Bottom","{0.value}");
fixAdd: concat("addr:street=", "Bottom", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Btm, may need to be expanded to Bottom");
}

*["addr:street"]["addr:street"=~/^Bwlk /] {
assertNoMatch: "way \"addr:street\"=Boardwalk Foo";
assertMatch: "way \"addr:street\"=Bwlk Foo";
throwWarning: tr("addr:street={0} begins with Bwlk, should likely be expanded to Boardwalk","{0.value}");
fixAdd: concat("addr:street=", "Boardwalk", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Bwlk, may need to be expanded to Boardwalk");
}

*["addr:street"]["addr:street"=~/^Byp /] {
assertNoMatch: "way \"addr:street\"=Bypass Foo";
assertMatch: "way \"addr:street\"=Byp Foo";
throwWarning: tr("addr:street={0} begins with Byp, should likely be expanded to Bypass","{0.value}");
fixAdd: concat("addr:street=", "Bypass", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Byp, may need to be expanded to Bypass");
}

*["addr:street"]["addr:street"=~/^Bypa /] {
assertNoMatch: "way \"addr:street\"=Bypass Foo";
assertMatch: "way \"addr:street\"=Bypa Foo";
throwWarning: tr("addr:street={0} begins with Bypa, should likely be expanded to Bypass","{0.value}");
fixAdd: concat("addr:street=", "Bypass", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Bypa, may need to be expanded to Bypass");
}

*["addr:street"]["addr:street"=~/^Byu /] {
assertNoMatch: "way \"addr:street\"=Byou Foo";
assertMatch: "way \"addr:street\"=Byu Foo";
throwWarning: tr("addr:street={0} begins with Byu, should likely be expanded to Byou","{0.value}");
fixAdd: concat("addr:street=", "Byou", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Byu, may need to be expanded to Byou");
}

*["addr:street"]["addr:street"=~/^Bywy /] {
assertNoMatch: "way \"addr:street\"=Byway Foo";
assertMatch: "way \"addr:street\"=Bywy Foo";
throwWarning: tr("addr:street={0} begins with Bywy, should likely be expanded to Byway","{0.value}");
fixAdd: concat("addr:street=", "Byway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Bywy, may need to be expanded to Byway");
}

*["addr:street"]["addr:street"=~/^Bzr /] {
assertNoMatch: "way \"addr:street\"=Bazaar Foo";
assertMatch: "way \"addr:street\"=Bzr Foo";
throwWarning: tr("addr:street={0} begins with Bzr, should likely be expanded to Bazaar","{0.value}");
fixAdd: concat("addr:street=", "Bazaar", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Bzr, may need to be expanded to Bazaar");
}

*["addr:street"]["addr:street"=~/^Cct /] {
assertNoMatch: "way \"addr:street\"=Circuit Foo";
assertMatch: "way \"addr:street\"=Cct Foo";
throwWarning: tr("addr:street={0} begins with Cct, should likely be expanded to Circuit","{0.value}");
fixAdd: concat("addr:street=", "Circuit", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Cct, may need to be expanded to Circuit");
}

*["addr:street"]["addr:street"=~/^Ch /] {
assertNoMatch: "way \"addr:street\"=Chase Foo";
assertMatch: "way \"addr:street\"=Ch Foo";
throwWarning: tr("addr:street={0} begins with Ch, should likely be expanded to Chase","{0.value}");
fixAdd: concat("addr:street=", "Chase", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Ch, may need to be expanded to Chase");
}

*["addr:street"]["addr:street"=~/^Cir /] {
assertNoMatch: "way \"addr:street\"=Circle Foo";
assertMatch: "way \"addr:street\"=Cir Foo";
throwWarning: tr("addr:street={0} begins with Cir, should likely be expanded to Circle","{0.value}");
fixAdd: concat("addr:street=", "Circle", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Cir, may need to be expanded to Circle");
}

*["addr:street"]["addr:street"=~/^Cirs /] {
assertNoMatch: "way \"addr:street\"=Circles Foo";
assertMatch: "way \"addr:street\"=Cirs Foo";
throwWarning: tr("addr:street={0} begins with Cirs, should likely be expanded to Circles","{0.value}");
fixAdd: concat("addr:street=", "Circles", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Cirs, may need to be expanded to Circles");
}

*["addr:street"]["addr:street"=~/^Clf /] {
assertNoMatch: "way \"addr:street\"=Cliff Foo";
assertMatch: "way \"addr:street\"=Clf Foo";
throwWarning: tr("addr:street={0} begins with Clf, should likely be expanded to Cliff","{0.value}");
fixAdd: concat("addr:street=", "Cliff", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Clf, may need to be expanded to Cliff");
}

*["addr:street"]["addr:street"=~/^Clfs /] {
assertNoMatch: "way \"addr:street\"=Cliffs Foo";
assertMatch: "way \"addr:street\"=Clfs Foo";
throwWarning: tr("addr:street={0} begins with Clfs, should likely be expanded to Cliffs","{0.value}");
fixAdd: concat("addr:street=", "Cliffs", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Clfs, may need to be expanded to Cliffs");
}

*["addr:street"]["addr:street"=~/^Cly /] {
assertNoMatch: "way \"addr:street\"=Colony Foo";
assertMatch: "way \"addr:street\"=Cly Foo";
throwWarning: tr("addr:street={0} begins with Cly, should likely be expanded to Colony","{0.value}");
fixAdd: concat("addr:street=", "Colony", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Cly, may need to be expanded to Colony");
}

*["addr:street"]["addr:street"=~/^Cmn /] {
assertNoMatch: "way \"addr:street\"=Common Foo";
assertMatch: "way \"addr:street\"=Cmn Foo";
throwWarning: tr("addr:street={0} begins with Cmn, should likely be expanded to Common","{0.value}");
fixAdd: concat("addr:street=", "Common", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Cmn, may need to be expanded to Common");
}

*["addr:street"]["addr:street"=~/^Cnl /] {
assertNoMatch: "way \"addr:street\"=Canal Foo";
assertMatch: "way \"addr:street\"=Cnl Foo";
throwWarning: tr("addr:street={0} begins with Cnl, should likely be expanded to Canal","{0.value}");
fixAdd: concat("addr:street=", "Canal", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Cnl, may need to be expanded to Canal");
}

*["addr:street"]["addr:street"=~/^Cnr /] {
assertNoMatch: "way \"addr:street\"=Corner Foo";
assertMatch: "way \"addr:street\"=Cnr Foo";
throwWarning: tr("addr:street={0} begins with Cnr, should likely be expanded to Corner","{0.value}");
fixAdd: concat("addr:street=", "Corner", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Cnr, may need to be expanded to Corner");
}

*["addr:street"]["addr:street"=~/^Coll /] {
assertNoMatch: "way \"addr:street\"=College Foo";
assertMatch: "way \"addr:street\"=Coll Foo";
throwWarning: tr("addr:street={0} begins with Coll, should likely be expanded to College","{0.value}");
fixAdd: concat("addr:street=", "College", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Coll, may need to be expanded to College");
}

*["addr:street"]["addr:street"=~/^Cpe /] {
assertNoMatch: "way \"addr:street\"=Cape Foo";
assertMatch: "way \"addr:street\"=Cpe Foo";
throwWarning: tr("addr:street={0} begins with Cpe, should likely be expanded to Cape","{0.value}");
fixAdd: concat("addr:street=", "Cape", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Cpe, may need to be expanded to Cape");
}

*["addr:street"]["addr:street"=~/^Cr /] {
assertNoMatch: "way \"addr:street\"=Creek Foo";
assertMatch: "way \"addr:street\"=Cr Foo";
throwWarning: tr("addr:street={0} begins with Cr, should likely be expanded to Creek","{0.value}");
fixAdd: concat("addr:street=", "Creek", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Cr, may need to be expanded to Creek");
}

*["addr:street"]["addr:street"=~/^Crk /] {
assertNoMatch: "way \"addr:street\"=Creek Foo";
assertMatch: "way \"addr:street\"=Crk Foo";
throwWarning: tr("addr:street={0} begins with Crk, should likely be expanded to Creek","{0.value}");
fixAdd: concat("addr:street=", "Creek", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Crk, may need to be expanded to Creek");
}

*["addr:street"]["addr:street"=~/^Cres /] {
assertNoMatch: "way \"addr:street\"=Crescent Foo";
assertMatch: "way \"addr:street\"=Cres Foo";
throwWarning: tr("addr:street={0} begins with Cres, should likely be expanded to Crescent","{0.value}");
fixAdd: concat("addr:street=", "Crescent", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Cres, may need to be expanded to Crescent");
}

*["addr:street"]["addr:street"=~/^Crst /] {
assertNoMatch: "way \"addr:street\"=Crest Foo";
assertMatch: "way \"addr:street\"=Crst Foo";
throwWarning: tr("addr:street={0} begins with Crst, should likely be expanded to Crest","{0.value}");
fixAdd: concat("addr:street=", "Crest", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Crst, may need to be expanded to Crest");
}

*["addr:street"]["addr:street"=~/^Cswy /] {
assertNoMatch: "way \"addr:street\"=Causeway Foo";
assertMatch: "way \"addr:street\"=Cswy Foo";
throwWarning: tr("addr:street={0} begins with Cswy, should likely be expanded to Causeway","{0.value}");
fixAdd: concat("addr:street=", "Causeway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Cswy, may need to be expanded to Causeway");
}

*["addr:street"]["addr:street"=~/^Ct /] {
assertNoMatch: "way \"addr:street\"=Court Foo";
assertMatch: "way \"addr:street\"=Ct Foo";
throwWarning: tr("addr:street={0} begins with Ct, should likely be expanded to Court","{0.value}");
fixAdd: concat("addr:street=", "Court", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Ct, may need to be expanded to Court");
}

*["addr:street"]["addr:street"=~/^Ctr /] {
assertNoMatch: "way \"addr:street\"=Center Foo";
assertMatch: "way \"addr:street\"=Ctr Foo";
throwWarning: tr("addr:street={0} begins with Ctr, should likely be expanded to Center","{0.value}");
fixAdd: concat("addr:street=", "Center", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Ctr, may need to be expanded to Center");
}

*["addr:street"]["addr:street"=~/^Cts /] {
assertNoMatch: "way \"addr:street\"=Courts Foo";
assertMatch: "way \"addr:street\"=Cts Foo";
throwWarning: tr("addr:street={0} begins with Cts, should likely be expanded to Courts","{0.value}");
fixAdd: concat("addr:street=", "Courts", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Cts, may need to be expanded to Courts");
}

*["addr:street"]["addr:street"=~/^Ctyd /] {
assertNoMatch: "way \"addr:street\"=Courtyard Foo";
assertMatch: "way \"addr:street\"=Ctyd Foo";
throwWarning: tr("addr:street={0} begins with Ctyd, should likely be expanded to Courtyard","{0.value}");
fixAdd: concat("addr:street=", "Courtyard", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Ctyd, may need to be expanded to Courtyard");
}

*["addr:street"]["addr:street"=~/^Curv /] {
assertNoMatch: "way \"addr:street\"=Curve Foo";
assertMatch: "way \"addr:street\"=Curv Foo";
throwWarning: tr("addr:street={0} begins with Curv, should likely be expanded to Curve","{0.value}");
fixAdd: concat("addr:street=", "Curve", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Curv, may need to be expanded to Curve");
}

*["addr:street"]["addr:street"=~/^Cutt /] {
assertNoMatch: "way \"addr:street\"=Cutting Foo";
assertMatch: "way \"addr:street\"=Cutt Foo";
throwWarning: tr("addr:street={0} begins with Cutt, should likely be expanded to Cutting","{0.value}");
fixAdd: concat("addr:street=", "Cutting", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Cutt, may need to be expanded to Cutting");
}

*["addr:street"]["addr:street"=~/^Cv /] {
assertNoMatch: "way \"addr:street\"=Cove Foo";
assertMatch: "way \"addr:street\"=Cv Foo";
throwWarning: tr("addr:street={0} begins with Cv, should likely be expanded to Cove","{0.value}");
fixAdd: concat("addr:street=", "Cove", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Cv, may need to be expanded to Cove");
}

*["addr:street"]["addr:street"=~/^Cyn /] {
assertNoMatch: "way \"addr:street\"=Canyon Foo";
assertMatch: "way \"addr:street\"=Cyn Foo";
throwWarning: tr("addr:street={0} begins with Cyn, should likely be expanded to Canyon","{0.value}");
fixAdd: concat("addr:street=", "Canyon", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Cyn, may need to be expanded to Canyon");
}

*["addr:street"]["addr:street"=~/^Dl /] {
assertNoMatch: "way \"addr:street\"=Dale Foo";
assertMatch: "way \"addr:street\"=Dl Foo";
throwWarning: tr("addr:street={0} begins with Dl, should likely be expanded to Dale","{0.value}");
fixAdd: concat("addr:street=", "Dale", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Dl, may need to be expanded to Dale");
}

*["addr:street"]["addr:street"=~/^Dr /] {
assertNoMatch: "way \"addr:street\"=Drive Foo";
assertMatch: "way \"addr:street\"=Dr Foo";
throwWarning: tr("addr:street={0} begins with Dr, should likely be expanded to Drive","{0.value}");
fixAdd: concat("addr:street=", "Drive", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Dr, may need to be expanded to Drive");
}

*["addr:street"]["addr:street"=~/^Dv /] {
assertNoMatch: "way \"addr:street\"=Drive Foo";
assertMatch: "way \"addr:street\"=Dv Foo";
throwWarning: tr("addr:street={0} begins with Dv, should likely be expanded to Drive","{0.value}");
fixAdd: concat("addr:street=", "Drive", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Dv, may need to be expanded to Drive");
}

*["addr:street"]["addr:street"=~/^Dvwy /] {
assertNoMatch: "way \"addr:street\"=Driveway Foo";
assertMatch: "way \"addr:street\"=Dvwy Foo";
throwWarning: tr("addr:street={0} begins with Dvwy, should likely be expanded to Driveway","{0.value}");
fixAdd: concat("addr:street=", "Driveway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Dvwy, may need to be expanded to Driveway");
}

*["addr:street"]["addr:street"=~/^Elb /] {
assertNoMatch: "way \"addr:street\"=Elbow Foo";
assertMatch: "way \"addr:street\"=Elb Foo";
throwWarning: tr("addr:street={0} begins with Elb, should likely be expanded to Elbow","{0.value}");
fixAdd: concat("addr:street=", "Elbow", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Elb, may need to be expanded to Elbow");
}

*["addr:street"]["addr:street"=~/^Est /] {
assertNoMatch: "way \"addr:street\"=Estate Foo";
assertMatch: "way \"addr:street\"=Est Foo";
throwWarning: tr("addr:street={0} begins with Est, should likely be expanded to Estate","{0.value}");
fixAdd: concat("addr:street=", "Estate", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Est, may need to be expanded to Estate");
}

*["addr:street"]["addr:street"=~/^Ests /] {
assertNoMatch: "way \"addr:street\"=Estates Foo";
assertMatch: "way \"addr:street\"=Ests Foo";
throwWarning: tr("addr:street={0} begins with Ests, should likely be expanded to Estates","{0.value}");
fixAdd: concat("addr:street=", "Estates", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Ests, may need to be expanded to Estates");
}

*["addr:street"]["addr:street"=~/^Expy /] {
assertNoMatch: "way \"addr:street\"=Expressway Foo";
assertMatch: "way \"addr:street\"=Expy Foo";
throwWarning: tr("addr:street={0} begins with Expy, should likely be expanded to Expressway","{0.value}");
fixAdd: concat("addr:street=", "Expressway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Expy, may need to be expanded to Expressway");
}

*["addr:street"]["addr:street"=~/^Expwy /] {
assertNoMatch: "way \"addr:street\"=Expressway Foo";
assertMatch: "way \"addr:street\"=Expwy Foo";
throwWarning: tr("addr:street={0} begins with Expwy, should likely be expanded to Expressway","{0.value}");
fixAdd: concat("addr:street=", "Expressway", substring(tag("addr:street"), 5));
group: tr("addr:street begins with Expwy, may need to be expanded to Expressway");
}

*["addr:street"]["addr:street"=~/^Fawy /] {
assertNoMatch: "way \"addr:street\"=Fairway Foo";
assertMatch: "way \"addr:street\"=Fawy Foo";
throwWarning: tr("addr:street={0} begins with Fawy, should likely be expanded to Fairway","{0.value}");
fixAdd: concat("addr:street=", "Fairway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Fawy, may need to be expanded to Fairway");
}

*["addr:street"]["addr:street"=~/^Fld /] {
assertNoMatch: "way \"addr:street\"=Field Foo";
assertMatch: "way \"addr:street\"=Fld Foo";
throwWarning: tr("addr:street={0} begins with Fld, should likely be expanded to Field","{0.value}");
fixAdd: concat("addr:street=", "Field", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Fld, may need to be expanded to Field");
}

*["addr:street"]["addr:street"=~/^Flds /] {
assertNoMatch: "way \"addr:street\"=Fields Foo";
assertMatch: "way \"addr:street\"=Flds Foo";
throwWarning: tr("addr:street={0} begins with Flds, should likely be expanded to Fields","{0.value}");
fixAdd: concat("addr:street=", "Fields", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Flds, may need to be expanded to Fields");
}

*["addr:street"]["addr:street"=~/^Fmrd /] {
assertNoMatch: "way \"addr:street\"=Farm to Market Road Foo";
assertMatch: "way \"addr:street\"=Fmrd Foo";
throwWarning: tr("addr:street={0} begins with Fmrd, should likely be expanded to Farm to Market Road","{0.value}");
fixAdd: concat("addr:street=", "Farm to Market Road", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Fmrd, may need to be expanded to Farm to Market Road");
}

*["addr:street"]["addr:street"=~/^Ftrl /] {
assertNoMatch: "way \"addr:street\"=Firetrail Foo";
assertMatch: "way \"addr:street\"=Ftrl Foo";
throwWarning: tr("addr:street={0} begins with Ftrl, should likely be expanded to Firetrail","{0.value}");
fixAdd: concat("addr:street=", "Firetrail", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Ftrl, may need to be expanded to Firetrail");
}

*["addr:street"]["addr:street"=~/^Frk /] {
assertNoMatch: "way \"addr:street\"=Fork Foo";
assertMatch: "way \"addr:street\"=Frk Foo";
throwWarning: tr("addr:street={0} begins with Frk, should likely be expanded to Fork","{0.value}");
fixAdd: concat("addr:street=", "Fork", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Frk, may need to be expanded to Fork");
}

*["addr:street"]["addr:street"=~/^Fry /] {
assertNoMatch: "way \"addr:street\"=Ferry Foo";
assertMatch: "way \"addr:street\"=Fry Foo";
throwWarning: tr("addr:street={0} begins with Fry, should likely be expanded to Ferry","{0.value}");
fixAdd: concat("addr:street=", "Ferry", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Fry, may need to be expanded to Ferry");
}

*["addr:street"]["addr:street"=~/^Fwy /] {
assertNoMatch: "way \"addr:street\"=Freeway Foo";
assertMatch: "way \"addr:street\"=Fwy Foo";
throwWarning: tr("addr:street={0} begins with Fwy, should likely be expanded to Freeway","{0.value}");
fixAdd: concat("addr:street=", "Freeway", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Fwy, may need to be expanded to Freeway");
}

*["addr:street"]["addr:street"=~/^Gd /] {
assertNoMatch: "way \"addr:street\"=Grade Foo";
assertMatch: "way \"addr:street\"=Gd Foo";
throwWarning: tr("addr:street={0} begins with Gd, should likely be expanded to Grade","{0.value}");
fixAdd: concat("addr:street=", "Grade", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Gd, may need to be expanded to Grade");
}

*["addr:street"]["addr:street"=~/^Gdns /] {
assertNoMatch: "way \"addr:street\"=Gardens Foo";
assertMatch: "way \"addr:street\"=Gdns Foo";
throwWarning: tr("addr:street={0} begins with Gdns, should likely be expanded to Gardens","{0.value}");
fixAdd: concat("addr:street=", "Gardens", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Gdns, may need to be expanded to Gardens");
}

*["addr:street"]["addr:street"=~/^Gr /] {
assertNoMatch: "way \"addr:street\"=Grove Foo";
assertMatch: "way \"addr:street\"=Gr Foo";
throwWarning: tr("addr:street={0} begins with Gr, should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", "Grove", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Gr, may need to be expanded to Grove");
}

*["addr:street"]["addr:street"=~/^Gro /] {
assertNoMatch: "way \"addr:street\"=Grove Foo";
assertMatch: "way \"addr:street\"=Gro Foo";
throwWarning: tr("addr:street={0} begins with Gro, should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", "Grove", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Gro, may need to be expanded to Grove");
}

*["addr:street"]["addr:street"=~/^Grv /] {
assertNoMatch: "way \"addr:street\"=Grove Foo";
assertMatch: "way \"addr:street\"=Grv Foo";
throwWarning: tr("addr:street={0} begins with Grv, should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", "Grove", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Grv, may need to be expanded to Grove");
}

*["addr:street"]["addr:street"=~/^Hbr /] {
assertNoMatch: "way \"addr:street\"=Harbor Foo";
assertMatch: "way \"addr:street\"=Hbr Foo";
throwWarning: tr("addr:street={0} begins with Hbr, should likely be expanded to Harbor","{0.value}");
fixAdd: concat("addr:street=", "Harbor", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Hbr, may need to be expanded to Harbor");
}

*["addr:street"]["addr:street"=~/^Hl /] {
assertNoMatch: "way \"addr:street\"=Hill Foo";
assertMatch: "way \"addr:street\"=Hl Foo";
throwWarning: tr("addr:street={0} begins with Hl, should likely be expanded to Hill","{0.value}");
fixAdd: concat("addr:street=", "Hill", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Hl, may need to be expanded to Hill");
}

*["addr:street"]["addr:street"=~/^Hls /] {
assertNoMatch: "way \"addr:street\"=Hills Foo";
assertMatch: "way \"addr:street\"=Hls Foo";
throwWarning: tr("addr:street={0} begins with Hls, should likely be expanded to Hills","{0.value}");
fixAdd: concat("addr:street=", "Hills", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Hls, may need to be expanded to Hills");
}

*["addr:street"]["addr:street"=~/^Holw /] {
assertNoMatch: "way \"addr:street\"=Hollow Foo";
assertMatch: "way \"addr:street\"=Holw Foo";
throwWarning: tr("addr:street={0} begins with Holw, should likely be expanded to Hollow","{0.value}");
fixAdd: concat("addr:street=", "Hollow", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Holw, may need to be expanded to Hollow");
}

*["addr:street"]["addr:street"=~/^Hts /] {
assertNoMatch: "way \"addr:street\"=Heights Foo";
assertMatch: "way \"addr:street\"=Hts Foo";
throwWarning: tr("addr:street={0} begins with Hts, should likely be expanded to Heights","{0.value}");
fixAdd: concat("addr:street=", "Heights", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Hts, may need to be expanded to Heights");
}

*["addr:street"]["addr:street"=~/^Hw /] {
assertNoMatch: "way \"addr:street\"=Highway Foo";
assertMatch: "way \"addr:street\"=Hw Foo";
throwWarning: tr("addr:street={0} begins with Hw, should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", "Highway", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Hw, may need to be expanded to Highway");
}

*["addr:street"]["addr:street"=~/^Hwy /] {
assertNoMatch: "way \"addr:street\"=Highway Foo";
assertMatch: "way \"addr:street\"=Hwy Foo";
throwWarning: tr("addr:street={0} begins with Hwy, should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", "Highway", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Hwy, may need to be expanded to Highway");
}

*["addr:street"]["addr:street"=~/^Hvn /] {
assertNoMatch: "way \"addr:street\"=Haven Foo";
assertMatch: "way \"addr:street\"=Hvn Foo";
throwWarning: tr("addr:street={0} begins with Hvn, should likely be expanded to Haven","{0.value}");
fixAdd: concat("addr:street=", "Haven", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Hvn, may need to be expanded to Haven");
}

*["addr:street"]["addr:street"=~/^Intg /] {
assertNoMatch: "way \"addr:street\"=Interchange Foo";
assertMatch: "way \"addr:street\"=Intg Foo";
throwWarning: tr("addr:street={0} begins with Intg, should likely be expanded to Interchange","{0.value}");
fixAdd: concat("addr:street=", "Interchange", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Intg, may need to be expanded to Interchange");
}

*["addr:street"]["addr:street"=~/^Iss /] {
assertNoMatch: "way \"addr:street\"=Islands Foo";
assertMatch: "way \"addr:street\"=Iss Foo";
throwWarning: tr("addr:street={0} begins with Iss, should likely be expanded to Islands","{0.value}");
fixAdd: concat("addr:street=", "Islands", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Iss, may need to be expanded to Islands");
}

*["addr:street"]["addr:street"=~/^Jct /] {
assertNoMatch: "way \"addr:street\"=Junction Foo";
assertMatch: "way \"addr:street\"=Jct Foo";
throwWarning: tr("addr:street={0} begins with Jct, should likely be expanded to Junction","{0.value}");
fixAdd: concat("addr:street=", "Junction", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Jct, may need to be expanded to Junction");
}

*["addr:street"]["addr:street"=~/^Jn /] {
assertNoMatch: "way \"addr:street\"=Junction Foo";
assertMatch: "way \"addr:street\"=Jn Foo";
throwWarning: tr("addr:street={0} begins with Jn, should likely be expanded to Junction","{0.value}");
fixAdd: concat("addr:street=", "Junction", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Jn, may need to be expanded to Junction");
}

*["addr:street"]["addr:street"=~/^Jnc /] {
assertNoMatch: "way \"addr:street\"=Junction Foo";
assertMatch: "way \"addr:street\"=Jnc Foo";
throwWarning: tr("addr:street={0} begins with Jnc, should likely be expanded to Junction","{0.value}");
fixAdd: concat("addr:street=", "Junction", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Jnc, may need to be expanded to Junction");
}

*["addr:street"]["addr:street"=~/^Knl /] {
assertNoMatch: "way \"addr:street\"=Knoll Foo";
assertMatch: "way \"addr:street\"=Knl Foo";
throwWarning: tr("addr:street={0} begins with Knl, should likely be expanded to Knoll","{0.value}");
fixAdd: concat("addr:street=", "Knoll", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Knl, may need to be expanded to Knoll");
}

*["addr:street"]["addr:street"=~/^Knls /] {
assertNoMatch: "way \"addr:street\"=Knolls Foo";
assertMatch: "way \"addr:street\"=Knls Foo";
throwWarning: tr("addr:street={0} begins with Knls, should likely be expanded to Knolls","{0.value}");
fixAdd: concat("addr:street=", "Knolls", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Knls, may need to be expanded to Knolls");
}

*["addr:street"]["addr:street"=~/^Ky /] {
assertNoMatch: "way \"addr:street\"=Key Foo";
assertMatch: "way \"addr:street\"=Ky Foo";
throwWarning: tr("addr:street={0} begins with Ky, should likely be expanded to Key","{0.value}");
fixAdd: concat("addr:street=", "Key", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Ky, may need to be expanded to Key");
}

*["addr:street"]["addr:street"=~/^Kys /] {
assertNoMatch: "way \"addr:street\"=Keys Foo";
assertMatch: "way \"addr:street\"=Kys Foo";
throwWarning: tr("addr:street={0} begins with Kys, should likely be expanded to Keys","{0.value}");
fixAdd: concat("addr:street=", "Keys", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Kys, may need to be expanded to Keys");
}

*["addr:street"]["addr:street"=~/^Lck /] {
assertNoMatch: "way \"addr:street\"=Lock Foo";
assertMatch: "way \"addr:street\"=Lck Foo";
throwWarning: tr("addr:street={0} begins with Lck, should likely be expanded to Lock","{0.value}");
fixAdd: concat("addr:street=", "Lock", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Lck, may need to be expanded to Lock");
}

*["addr:street"]["addr:street"=~/^Lcks /] {
assertNoMatch: "way \"addr:street\"=Locks Foo";
assertMatch: "way \"addr:street\"=Lcks Foo";
throwWarning: tr("addr:street={0} begins with Lcks, should likely be expanded to Locks","{0.value}");
fixAdd: concat("addr:street=", "Locks", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Lcks, may need to be expanded to Locks");
}

*["addr:street"]["addr:street"=~/^Ldg /] {
assertNoMatch: "way \"addr:street\"=Lodge Foo";
assertMatch: "way \"addr:street\"=Ldg Foo";
throwWarning: tr("addr:street={0} begins with Ldg, should likely be expanded to Lodge","{0.value}");
fixAdd: concat("addr:street=", "Lodge", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Ldg, may need to be expanded to Lodge");
}

*["addr:street"]["addr:street"=~/^Lk /] {
assertNoMatch: "way \"addr:street\"=Lake Foo";
assertMatch: "way \"addr:street\"=Lk Foo";
throwWarning: tr("addr:street={0} begins with Lk, should likely be expanded to Lake","{0.value}");
fixAdd: concat("addr:street=", "Lake", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Lk, may need to be expanded to Lake");
}

*["addr:street"]["addr:street"=~/^Lks /] {
assertNoMatch: "way \"addr:street\"=Lakes Foo";
assertMatch: "way \"addr:street\"=Lks Foo";
throwWarning: tr("addr:street={0} begins with Lks, should likely be expanded to Lakes","{0.value}");
fixAdd: concat("addr:street=", "Lakes", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Lks, may need to be expanded to Lakes");
}

*["addr:street"]["addr:street"=~/^Lkt /] {
assertNoMatch: "way \"addr:street\"=Lookout Foo";
assertMatch: "way \"addr:street\"=Lkt Foo";
throwWarning: tr("addr:street={0} begins with Lkt, should likely be expanded to Lookout","{0.value}");
fixAdd: concat("addr:street=", "Lookout", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Lkt, may need to be expanded to Lookout");
}

*["addr:street"]["addr:street"=~/^Ln /] {
assertNoMatch: "way \"addr:street\"=Lane Foo";
assertMatch: "way \"addr:street\"=Ln Foo";
throwWarning: tr("addr:street={0} begins with Ln, should likely be expanded to Lane","{0.value}");
fixAdd: concat("addr:street=", "Lane", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Ln, may need to be expanded to Lane");
}

*["addr:street"]["addr:street"=~/^Lndg /] {
assertNoMatch: "way \"addr:street\"=Landing Foo";
assertMatch: "way \"addr:street\"=Lndg Foo";
throwWarning: tr("addr:street={0} begins with Lndg, should likely be expanded to Landing","{0.value}");
fixAdd: concat("addr:street=", "Landing", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Lndg, may need to be expanded to Landing");
}

*["addr:street"]["addr:street"=~/^Lp /] {
assertNoMatch: "way \"addr:street\"=Loop Foo";
assertMatch: "way \"addr:street\"=Lp Foo";
throwWarning: tr("addr:street={0} begins with Lp, should likely be expanded to Loop","{0.value}");
fixAdd: concat("addr:street=", "Loop", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Lp, may need to be expanded to Loop");
}

*["addr:street"]["addr:street"=~/^Mal /] {
assertNoMatch: "way \"addr:street\"=Mall Foo";
assertMatch: "way \"addr:street\"=Mal Foo";
throwWarning: tr("addr:street={0} begins with Mal, should likely be expanded to Mall","{0.value}");
fixAdd: concat("addr:street=", "Mall", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Mal, may need to be expanded to Mall");
}

*["addr:street"]["addr:street"=~/^Mdw /] {
assertNoMatch: "way \"addr:street\"=Meadow Foo";
assertMatch: "way \"addr:street\"=Mdw Foo";
throwWarning: tr("addr:street={0} begins with Mdw, should likely be expanded to Meadow","{0.value}");
fixAdd: concat("addr:street=", "Meadow", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Mdw, may need to be expanded to Meadow");
}

*["addr:street"]["addr:street"=~/^Mdws /] {
assertNoMatch: "way \"addr:street\"=Meadows Foo";
assertMatch: "way \"addr:street\"=Mdws Foo";
throwWarning: tr("addr:street={0} begins with Mdws, should likely be expanded to Meadows","{0.value}");
fixAdd: concat("addr:street=", "Meadows", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Mdws, may need to be expanded to Meadows");
}

*["addr:street"]["addr:street"=~/^Mkt /] {
assertNoMatch: "way \"addr:street\"=Market Foo";
assertMatch: "way \"addr:street\"=Mkt Foo";
throwWarning: tr("addr:street={0} begins with Mkt, should likely be expanded to Market","{0.value}");
fixAdd: concat("addr:street=", "Market", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Mkt, may need to be expanded to Market");
}

*["addr:street"]["addr:street"=~/^Ml /] {
assertNoMatch: "way \"addr:street\"=Mill Foo";
assertMatch: "way \"addr:street\"=Ml Foo";
throwWarning: tr("addr:street={0} begins with Ml, should likely be expanded to Mill","{0.value}");
fixAdd: concat("addr:street=", "Mill", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Ml, may need to be expanded to Mill");
}

*["addr:street"]["addr:street"=~/^Mt /] {
assertNoMatch: "way \"addr:street\"=Mount Foo";
assertMatch: "way \"addr:street\"=Mt Foo";
throwWarning: tr("addr:street={0} begins with Mt, should likely be expanded to Mount","{0.value}");
fixAdd: concat("addr:street=", "Mount", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Mt, may need to be expanded to Mount");
}

*["addr:street"]["addr:street"=~/^Mtn /] {
assertNoMatch: "way \"addr:street\"=Mountain Foo";
assertMatch: "way \"addr:street\"=Mtn Foo";
throwWarning: tr("addr:street={0} begins with Mtn, should likely be expanded to Mountain","{0.value}");
fixAdd: concat("addr:street=", "Mountain", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Mtn, may need to be expanded to Mountain");
}

*["addr:street"]["addr:street"=~/^Mtwy /] {
assertNoMatch: "way \"addr:street\"=Motorway Foo";
assertMatch: "way \"addr:street\"=Mtwy Foo";
throwWarning: tr("addr:street={0} begins with Mtwy, should likely be expanded to Motorway","{0.value}");
fixAdd: concat("addr:street=", "Motorway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Mtwy, may need to be expanded to Motorway");
}

*["addr:street"]["addr:street"=~/^Orch /] {
assertNoMatch: "way \"addr:street\"=Orchard Foo";
assertMatch: "way \"addr:street\"=Orch Foo";
throwWarning: tr("addr:street={0} begins with Orch, should likely be expanded to Orchard","{0.value}");
fixAdd: concat("addr:street=", "Orchard", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Orch, may need to be expanded to Orchard");
}

*["addr:street"]["addr:street"=~/^Ovps /] {
assertNoMatch: "way \"addr:street\"=Overpass Foo";
assertMatch: "way \"addr:street\"=Ovps Foo";
throwWarning: tr("addr:street={0} begins with Ovps, should likely be expanded to Overpass","{0.value}");
fixAdd: concat("addr:street=", "Overpass", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Ovps, may need to be expanded to Overpass");
}

*["addr:street"]["addr:street"=~/^Piaz /] {
assertNoMatch: "way \"addr:street\"=Piazza Foo";
assertMatch: "way \"addr:street\"=Piaz Foo";
throwWarning: tr("addr:street={0} begins with Piaz, should likely be expanded to Piazza","{0.value}");
fixAdd: concat("addr:street=", "Piazza", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Piaz, may need to be expanded to Piazza");
}

*["addr:street"]["addr:street"=~/^Pk /] {
assertNoMatch: "way \"addr:street\"=Peak Foo";
assertMatch: "way \"addr:street\"=Pk Foo";
throwWarning: tr("addr:street={0} begins with Pk, should likely be expanded to Peak","{0.value}");
fixAdd: concat("addr:street=", "Peak", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Pk, may need to be expanded to Peak");
}

*["addr:street"]["addr:street"=~/^Pky /] {
assertNoMatch: "way \"addr:street\"=Parkway Foo";
assertMatch: "way \"addr:street\"=Pky Foo";
throwWarning: tr("addr:street={0} begins with Pky, should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", "Parkway", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Pky, may need to be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/^Pkwy /] {
assertNoMatch: "way \"addr:street\"=Parkway Foo";
assertMatch: "way \"addr:street\"=Pkwy Foo";
throwWarning: tr("addr:street={0} begins with Pkwy, should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", "Parkway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Pkwy, may need to be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/^Pl /] {
assertNoMatch: "way \"addr:street\"=Place Foo";
assertMatch: "way \"addr:street\"=Pl Foo";
throwWarning: tr("addr:street={0} begins with Pl, should likely be expanded to Place","{0.value}");
fixAdd: concat("addr:street=", "Place", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Pl, may need to be expanded to Place");
}

*["addr:street"]["addr:street"=~/^Pln /] {
assertNoMatch: "way \"addr:street\"=Plain Foo";
assertMatch: "way \"addr:street\"=Pln Foo";
throwWarning: tr("addr:street={0} begins with Pln, should likely be expanded to Plain","{0.value}");
fixAdd: concat("addr:street=", "Plain", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Pln, may need to be expanded to Plain");
}

*["addr:street"]["addr:street"=~/^Plns /] {
assertNoMatch: "way \"addr:street\"=Plains Foo";
assertMatch: "way \"addr:street\"=Plns Foo";
throwWarning: tr("addr:street={0} begins with Plns, should likely be expanded to Plains","{0.value}");
fixAdd: concat("addr:street=", "Plains", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Plns, may need to be expanded to Plains");
}

*["addr:street"]["addr:street"=~/^Plz /] {
assertNoMatch: "way \"addr:street\"=Plaza Foo";
assertMatch: "way \"addr:street\"=Plz Foo";
throwWarning: tr("addr:street={0} begins with Plz, should likely be expanded to Plaza","{0.value}");
fixAdd: concat("addr:street=", "Plaza", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Plz, may need to be expanded to Plaza");
}

*["addr:street"]["addr:street"=~/^Pnt /] {
assertNoMatch: "way \"addr:street\"=Point Foo";
assertMatch: "way \"addr:street\"=Pnt Foo";
throwWarning: tr("addr:street={0} begins with Pnt, should likely be expanded to Point","{0.value}");
fixAdd: concat("addr:street=", "Point", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Pnt, may need to be expanded to Point");
}

*["addr:street"]["addr:street"=~/^Prkwy /] {
assertNoMatch: "way \"addr:street\"=Parkway Foo";
assertMatch: "way \"addr:street\"=Prkwy Foo";
throwWarning: tr("addr:street={0} begins with Prkwy, should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", "Parkway", substring(tag("addr:street"), 5));
group: tr("addr:street begins with Prkwy, may need to be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/^Pt /] {
assertNoMatch: "way \"addr:street\"=Point Foo";
assertMatch: "way \"addr:street\"=Pt Foo";
throwWarning: tr("addr:street={0} begins with Pt, should likely be expanded to Point","{0.value}");
fixAdd: concat("addr:street=", "Point", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Pt, may need to be expanded to Point");
}

*["addr:street"]["addr:street"=~/^Pvt /] {
assertNoMatch: "way \"addr:street\"=Private Foo";
assertMatch: "way \"addr:street\"=Pvt Foo";
throwWarning: tr("addr:street={0} begins with Pvt, should likely be expanded to Private","{0.value}");
fixAdd: concat("addr:street=", "Private", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Pvt, may need to be expanded to Private");
}

*["addr:street"]["addr:street"=~/^Qdrt /] {
assertNoMatch: "way \"addr:street\"=Quadrant Foo";
assertMatch: "way \"addr:street\"=Qdrt Foo";
throwWarning: tr("addr:street={0} begins with Qdrt, should likely be expanded to Quadrant","{0.value}");
fixAdd: concat("addr:street=", "Quadrant", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Qdrt, may need to be expanded to Quadrant");
}

*["addr:street"]["addr:street"=~/^Qtrs /] {
assertNoMatch: "way \"addr:street\"=Quarters Foo";
assertMatch: "way \"addr:street\"=Qtrs Foo";
throwWarning: tr("addr:street={0} begins with Qtrs, should likely be expanded to Quarters","{0.value}");
fixAdd: concat("addr:street=", "Quarters", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Qtrs, may need to be expanded to Quarters");
}

*["addr:street"]["addr:street"=~/^Qy /] {
assertNoMatch: "way \"addr:street\"=Quay Foo";
assertMatch: "way \"addr:street\"=Qy Foo";
throwWarning: tr("addr:street={0} begins with Qy, should likely be expanded to Quay","{0.value}");
fixAdd: concat("addr:street=", "Quay", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Qy, may need to be expanded to Quay");
}

*["addr:street"]["addr:street"=~/^Qys /] {
assertNoMatch: "way \"addr:street\"=Quays Foo";
assertMatch: "way \"addr:street\"=Qys Foo";
throwWarning: tr("addr:street={0} begins with Qys, should likely be expanded to Quays","{0.value}");
fixAdd: concat("addr:street=", "Quays", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Qys, may need to be expanded to Quays");
}

*["addr:street"]["addr:street"=~/^Rd /] {
assertNoMatch: "way \"addr:street\"=Road Foo";
assertMatch: "way \"addr:street\"=Rd Foo";
throwWarning: tr("addr:street={0} begins with Rd, should likely be expanded to Road","{0.value}");
fixAdd: concat("addr:street=", "Road", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Rd, may need to be expanded to Road");
}

*["addr:street"]["addr:street"=~/^Rds /] {
assertNoMatch: "way \"addr:street\"=Roads Foo";
assertMatch: "way \"addr:street\"=Rds Foo";
throwWarning: tr("addr:street={0} begins with Rds, should likely be expanded to Roads","{0.value}");
fixAdd: concat("addr:street=", "Roads", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Rds, may need to be expanded to Roads");
}

*["addr:street"]["addr:street"=~/^Rdg /] {
assertNoMatch: "way \"addr:street\"=Ridge Foo";
assertMatch: "way \"addr:street\"=Rdg Foo";
throwWarning: tr("addr:street={0} begins with Rdg, should likely be expanded to Ridge","{0.value}");
fixAdd: concat("addr:street=", "Ridge", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Rdg, may need to be expanded to Ridge");
}

*["addr:street"]["addr:street"=~/^Rdge /] {
assertNoMatch: "way \"addr:street\"=Ridge Foo";
assertMatch: "way \"addr:street\"=Rdge Foo";
throwWarning: tr("addr:street={0} begins with Rdge, should likely be expanded to Ridge","{0.value}");
fixAdd: concat("addr:street=", "Ridge", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Rdge, may need to be expanded to Ridge");
}

*["addr:street"]["addr:street"=~/^Rdgs /] {
assertNoMatch: "way \"addr:street\"=Ridges Foo";
assertMatch: "way \"addr:street\"=Rdgs Foo";
throwWarning: tr("addr:street={0} begins with Rdgs, should likely be expanded to Ridges","{0.value}");
fixAdd: concat("addr:street=", "Ridges", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Rdgs, may need to be expanded to Ridges");
}

*["addr:street"]["addr:street"=~/^Rw /] {
assertNoMatch: "way \"addr:street\"=Row Foo";
assertMatch: "way \"addr:street\"=Rw Foo";
throwWarning: tr("addr:street={0} begins with Rw, should likely be expanded to Row","{0.value}");
fixAdd: concat("addr:street=", "Row", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Rw, may need to be expanded to Row");
}

*["addr:street"]["addr:street"=~/^Rmrd /] {
assertNoMatch: "way \"addr:street\"=Ranch to Market Road Foo";
assertMatch: "way \"addr:street\"=Rmrd Foo";
throwWarning: tr("addr:street={0} begins with Rmrd, should likely be expanded to Ranch to Market Road","{0.value}");
fixAdd: concat("addr:street=", "Ranch to Market Road", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Rmrd, may need to be expanded to Ranch to Market Road");
}

*["addr:street"]["addr:street"=~/^Rt /] {
assertNoMatch: "way \"addr:street\"=Route Foo";
assertMatch: "way \"addr:street\"=Rt Foo";
throwWarning: tr("addr:street={0} begins with Rt, should likely be expanded to Route","{0.value}");
fixAdd: concat("addr:street=", "Route", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Rt, may need to be expanded to Route");
}

*["addr:street"]["addr:street"=~/^Rte /] {
assertNoMatch: "way \"addr:street\"=Route Foo";
assertMatch: "way \"addr:street\"=Rte Foo";
throwWarning: tr("addr:street={0} begins with Rte, should likely be expanded to Route","{0.value}");
fixAdd: concat("addr:street=", "Route", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Rte, may need to be expanded to Route");
}

*["addr:street"]["addr:street"=~/^Rty /] {
assertNoMatch: "way \"addr:street\"=Rotary Foo";
assertMatch: "way \"addr:street\"=Rty Foo";
throwWarning: tr("addr:street={0} begins with Rty, should likely be expanded to Rotary","{0.value}");
fixAdd: concat("addr:street=", "Rotary", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Rty, may need to be expanded to Rotary");
}

*["addr:street"]["addr:street"=~/^Shl /] {
assertNoMatch: "way \"addr:street\"=Shoal Foo";
assertMatch: "way \"addr:street\"=Shl Foo";
throwWarning: tr("addr:street={0} begins with Shl, should likely be expanded to Shoal","{0.value}");
fixAdd: concat("addr:street=", "Shoal", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Shl, may need to be expanded to Shoal");
}

*["addr:street"]["addr:street"=~/^Shls /] {
assertNoMatch: "way \"addr:street\"=Shoals Foo";
assertMatch: "way \"addr:street\"=Shls Foo";
throwWarning: tr("addr:street={0} begins with Shls, should likely be expanded to Shoals","{0.value}");
fixAdd: concat("addr:street=", "Shoals", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Shls, may need to be expanded to Shoals");
}

*["addr:street"]["addr:street"=~/^Shr /] {
assertNoMatch: "way \"addr:street\"=Shore Foo";
assertMatch: "way \"addr:street\"=Shr Foo";
throwWarning: tr("addr:street={0} begins with Shr, should likely be expanded to Shore","{0.value}");
fixAdd: concat("addr:street=", "Shore", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Shr, may need to be expanded to Shore");
}

*["addr:street"]["addr:street"=~/^Shrs /] {
assertNoMatch: "way \"addr:street\"=Shores Foo";
assertMatch: "way \"addr:street\"=Shrs Foo";
throwWarning: tr("addr:street={0} begins with Shrs, should likely be expanded to Shores","{0.value}");
fixAdd: concat("addr:street=", "Shores", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Shrs, may need to be expanded to Shores");
}

*["addr:street"]["addr:street"=~/^Skwy /] {
assertNoMatch: "way \"addr:street\"=Skyway Foo";
assertMatch: "way \"addr:street\"=Skwy Foo";
throwWarning: tr("addr:street={0} begins with Skwy, should likely be expanded to Skyway","{0.value}");
fixAdd: concat("addr:street=", "Skyway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Skwy, may need to be expanded to Skyway");
}

*["addr:street"]["addr:street"=~/^Smt /] {
assertNoMatch: "way \"addr:street\"=Summit Foo";
assertMatch: "way \"addr:street\"=Smt Foo";
throwWarning: tr("addr:street={0} begins with Smt, should likely be expanded to Summit","{0.value}");
fixAdd: concat("addr:street=", "Summit", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Smt, may need to be expanded to Summit");
}

*["addr:street"]["addr:street"=~/^Spg /] {
assertNoMatch: "way \"addr:street\"=Spring Foo";
assertMatch: "way \"addr:street\"=Spg Foo";
throwWarning: tr("addr:street={0} begins with Spg, should likely be expanded to Spring","{0.value}");
fixAdd: concat("addr:street=", "Spring", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Spg, may need to be expanded to Spring");
}

*["addr:street"]["addr:street"=~/^Spgs /] {
assertNoMatch: "way \"addr:street\"=Springs Foo";
assertMatch: "way \"addr:street\"=Spgs Foo";
throwWarning: tr("addr:street={0} begins with Spgs, should likely be expanded to Springs","{0.value}");
fixAdd: concat("addr:street=", "Springs", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Spgs, may need to be expanded to Springs");
}

*["addr:street"]["addr:street"=~/^Sq /] {
assertNoMatch: "way \"addr:street\"=Square Foo";
assertMatch: "way \"addr:street\"=Sq Foo";
throwWarning: tr("addr:street={0} begins with Sq, should likely be expanded to Square","{0.value}");
fixAdd: concat("addr:street=", "Square", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Sq, may need to be expanded to Square");
}

*["addr:street"]["addr:street"=~/^Sqs /] {
assertNoMatch: "way \"addr:street\"=Squares Foo";
assertMatch: "way \"addr:street\"=Sqs Foo";
throwWarning: tr("addr:street={0} begins with Sqs, should likely be expanded to Squares","{0.value}");
fixAdd: concat("addr:street=", "Squares", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Sqs, may need to be expanded to Squares");
}

*["addr:street"]["addr:street"=~/^Srvc /] {
assertNoMatch: "way \"addr:street\"=Service Foo";
assertMatch: "way \"addr:street\"=Srvc Foo";
throwWarning: tr("addr:street={0} begins with Srvc, should likely be expanded to Service","{0.value}");
fixAdd: concat("addr:street=", "Service", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Srvc, may need to be expanded to Service");
}

*["addr:street"]["addr:street"=~/^St /] {
assertNoMatch: "way \"addr:street\"=Street Foo";
assertMatch: "way \"addr:street\"=St Foo";
throwWarning: tr("addr:street={0} begins with St, should likely be expanded to Street","{0.value}");
fixAdd: concat("addr:street=", "Street", substring(tag("addr:street"), 2));
group: tr("addr:street begins with St, may need to be expanded to Street");
}

*["addr:street"]["addr:street"=~/^Tce /] {
assertNoMatch: "way \"addr:street\"=Terrace Foo";
assertMatch: "way \"addr:street\"=Tce Foo";
throwWarning: tr("addr:street={0} begins with Tce, should likely be expanded to Terrace","{0.value}");
fixAdd: concat("addr:street=", "Terrace", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Tce, may need to be expanded to Terrace");
}

*["addr:street"]["addr:street"=~/^Ter /] {
assertNoMatch: "way \"addr:street\"=Terrace Foo";
assertMatch: "way \"addr:street\"=Ter Foo";
throwWarning: tr("addr:street={0} begins with Ter, should likely be expanded to Terrace","{0.value}");
fixAdd: concat("addr:street=", "Terrace", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Ter, may need to be expanded to Terrace");
}

*["addr:street"]["addr:street"=~/^Tfwy /] {
assertNoMatch: "way \"addr:street\"=Trafficway Foo";
assertMatch: "way \"addr:street\"=Tfwy Foo";
throwWarning: tr("addr:street={0} begins with Tfwy, should likely be expanded to Trafficway","{0.value}");
fixAdd: concat("addr:street=", "Trafficway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Tfwy, may need to be expanded to Trafficway");
}

*["addr:street"]["addr:street"=~/^Thfr /] {
assertNoMatch: "way \"addr:street\"=Thoroughfare Foo";
assertMatch: "way \"addr:street\"=Thfr Foo";
throwWarning: tr("addr:street={0} begins with Thfr, should likely be expanded to Thoroughfare","{0.value}");
fixAdd: concat("addr:street=", "Thoroughfare", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Thfr, may need to be expanded to Thoroughfare");
}

*["addr:street"]["addr:street"=~/^Thwy /] {
assertNoMatch: "way \"addr:street\"=Throughway Foo";
assertMatch: "way \"addr:street\"=Thwy Foo";
throwWarning: tr("addr:street={0} begins with Thwy, should likely be expanded to Throughway","{0.value}");
fixAdd: concat("addr:street=", "Throughway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Thwy, may need to be expanded to Throughway");
}

*["addr:street"]["addr:street"=~/^Tl /] {
assertNoMatch: "way \"addr:street\"=Trail Foo";
assertMatch: "way \"addr:street\"=Tl Foo";
throwWarning: tr("addr:street={0} begins with Tl, should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", "Trail", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Tl, may need to be expanded to Trail");
}

*["addr:street"]["addr:street"=~/^Tlwy /] {
assertNoMatch: "way \"addr:street\"=Tollway Foo";
assertMatch: "way \"addr:street\"=Tlwy Foo";
throwWarning: tr("addr:street={0} begins with Tlwy, should likely be expanded to Tollway","{0.value}");
fixAdd: concat("addr:street=", "Tollway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Tlwy, may need to be expanded to Tollway");
}

*["addr:street"]["addr:street"=~/^Tpke /] {
assertNoMatch: "way \"addr:street\"=Turnpike Foo";
assertMatch: "way \"addr:street\"=Tpke Foo";
throwWarning: tr("addr:street={0} begins with Tpke, should likely be expanded to Turnpike","{0.value}");
fixAdd: concat("addr:street=", "Turnpike", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Tpke, may need to be expanded to Turnpike");
}

*["addr:street"]["addr:street"=~/^Trce /] {
assertNoMatch: "way \"addr:street\"=Trace Foo";
assertMatch: "way \"addr:street\"=Trce Foo";
throwWarning: tr("addr:street={0} begins with Trce, should likely be expanded to Trace","{0.value}");
fixAdd: concat("addr:street=", "Trace", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Trce, may need to be expanded to Trace");
}

*["addr:street"]["addr:street"=~/^Tr /] {
assertNoMatch: "way \"addr:street\"=Trail Foo";
assertMatch: "way \"addr:street\"=Tr Foo";
throwWarning: tr("addr:street={0} begins with Tr, should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", "Trail", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Tr, may need to be expanded to Trail");
}

*["addr:street"]["addr:street"=~/^Trk /] {
assertNoMatch: "way \"addr:street\"=Track Foo";
assertMatch: "way \"addr:street\"=Trk Foo";
throwWarning: tr("addr:street={0} begins with Trk, should likely be expanded to Track","{0.value}");
fixAdd: concat("addr:street=", "Track", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Trk, may need to be expanded to Track");
}

*["addr:street"]["addr:street"=~/^Trl /] {
assertNoMatch: "way \"addr:street\"=Trail Foo";
assertMatch: "way \"addr:street\"=Trl Foo";
throwWarning: tr("addr:street={0} begins with Trl, should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", "Trail", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Trl, may need to be expanded to Trail");
}

*["addr:street"]["addr:street"=~/^Tunl /] {
assertNoMatch: "way \"addr:street\"=Tunnel Foo";
assertMatch: "way \"addr:street\"=Tunl Foo";
throwWarning: tr("addr:street={0} begins with Tunl, should likely be expanded to Tunnel","{0.value}");
fixAdd: concat("addr:street=", "Tunnel", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Tunl, may need to be expanded to Tunnel");
}

*["addr:street"]["addr:street"=~/^Unp /] {
assertNoMatch: "way \"addr:street\"=Underpass Foo";
assertMatch: "way \"addr:street\"=Unp Foo";
throwWarning: tr("addr:street={0} begins with Unp, should likely be expanded to Underpass","{0.value}");
fixAdd: concat("addr:street=", "Underpass", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Unp, may need to be expanded to Underpass");
}

*["addr:street"]["addr:street"=~/^Vl /] {
assertNoMatch: "way \"addr:street\"=Villa Foo";
assertMatch: "way \"addr:street\"=Vl Foo";
throwWarning: tr("addr:street={0} begins with Vl, should likely be expanded to Villa","{0.value}");
fixAdd: concat("addr:street=", "Villa", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Vl, may need to be expanded to Villa");
}

*["addr:street"]["addr:street"=~/^Vlg /] {
assertNoMatch: "way \"addr:street\"=Village Foo";
assertMatch: "way \"addr:street\"=Vlg Foo";
throwWarning: tr("addr:street={0} begins with Vlg, should likely be expanded to Village","{0.value}");
fixAdd: concat("addr:street=", "Village", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Vlg, may need to be expanded to Village");
}

*["addr:street"]["addr:street"=~/^Vlgs /] {
assertNoMatch: "way \"addr:street\"=Villages Foo";
assertMatch: "way \"addr:street\"=Vlgs Foo";
throwWarning: tr("addr:street={0} begins with Vlgs, should likely be expanded to Villages","{0.value}");
fixAdd: concat("addr:street=", "Villages", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Vlgs, may need to be expanded to Villages");
}

*["addr:street"]["addr:street"=~/^Vly /] {
assertNoMatch: "way \"addr:street\"=Valley Foo";
assertMatch: "way \"addr:street\"=Vly Foo";
throwWarning: tr("addr:street={0} begins with Vly, should likely be expanded to Valley","{0.value}");
fixAdd: concat("addr:street=", "Valley", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Vly, may need to be expanded to Valley");
}

*["addr:street"]["addr:street"=~/^Vw /] {
assertNoMatch: "way \"addr:street\"=View Foo";
assertMatch: "way \"addr:street\"=Vw Foo";
throwWarning: tr("addr:street={0} begins with Vw, should likely be expanded to View","{0.value}");
fixAdd: concat("addr:street=", "View", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Vw, may need to be expanded to View");
}

*["addr:street"]["addr:street"=~/^Wd /] {
assertNoMatch: "way \"addr:street\"=Wood Foo";
assertMatch: "way \"addr:street\"=Wd Foo";
throwWarning: tr("addr:street={0} begins with Wd, should likely be expanded to Wood","{0.value}");
fixAdd: concat("addr:street=", "Wood", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Wd, may need to be expanded to Wood");
}

*["addr:street"]["addr:street"=~/^Whrf /] {
assertNoMatch: "way \"addr:street\"=Wharf Foo";
assertMatch: "way \"addr:street\"=Whrf Foo";
throwWarning: tr("addr:street={0} begins with Whrf, should likely be expanded to Wharf","{0.value}");
fixAdd: concat("addr:street=", "Wharf", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Whrf, may need to be expanded to Wharf");
}

*["addr:street"]["addr:street"=~/^Wkwy /] {
assertNoMatch: "way \"addr:street\"=Walkway Foo";
assertMatch: "way \"addr:street\"=Wkwy Foo";
throwWarning: tr("addr:street={0} begins with Wkwy, should likely be expanded to Walkway","{0.value}");
fixAdd: concat("addr:street=", "Walkway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Wkwy, may need to be expanded to Walkway");
}

*["addr:street"]["addr:street"=~/^Wlk /] {
assertNoMatch: "way \"addr:street\"=Walk Foo";
assertMatch: "way \"addr:street\"=Wlk Foo";
throwWarning: tr("addr:street={0} begins with Wlk, should likely be expanded to Walk","{0.value}");
fixAdd: concat("addr:street=", "Walk", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Wlk, may need to be expanded to Walk");
}

*["addr:street"]["addr:street"=~/^Wy /] {
assertNoMatch: "way \"addr:street\"=Way Foo";
assertMatch: "way \"addr:street\"=Wy Foo";
throwWarning: tr("addr:street={0} begins with Wy, should likely be expanded to Way","{0.value}");
fixAdd: concat("addr:street=", "Way", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Wy, may need to be expanded to Way");
}

*["addr:street"]["addr:street"=~/^Xing /] {
assertNoMatch: "way \"addr:street\"=Crossing Foo";
assertMatch: "way \"addr:street\"=Xing Foo";
throwWarning: tr("addr:street={0} begins with Xing, should likely be expanded to Crossing","{0.value}");
fixAdd: concat("addr:street=", "Crossing", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Xing, may need to be expanded to Crossing");
}

*["name"=~/^Acc /].highway_name {
assertNoMatch: "way \"name\"=Access Foo";
assertMatch: "way \"name\"=Acc Foo";
throwWarning: tr("Highway name begins with Acc, may need to be expanded to Access");
fixAdd: concat("name=", "Access", substring(tag("name"), 3));
}

*["name"=~/^Aly /].highway_name {
assertNoMatch: "way \"name\"=Alley Foo";
assertMatch: "way \"name\"=Aly Foo";
throwWarning: tr("Highway name begins with Aly, may need to be expanded to Alley");
fixAdd: concat("name=", "Alley", substring(tag("name"), 3));
}

*["name"=~/^Ambl /].highway_name {
assertNoMatch: "way \"name\"=Amble Foo";
assertMatch: "way \"name\"=Ambl Foo";
throwWarning: tr("Highway name begins with Ambl, may need to be expanded to Amble");
fixAdd: concat("name=", "Amble", substring(tag("name"), 4));
}

*["name"=~/^App /].highway_name {
assertNoMatch: "way \"name\"=Approach Foo";
assertMatch: "way \"name\"=App Foo";
throwWarning: tr("Highway name begins with App, may need to be expanded to Approach");
fixAdd: concat("name=", "Approach", substring(tag("name"), 3));
}

*["name"=~/^Arc /].highway_name {
assertNoMatch: "way \"name\"=Arcade Foo";
assertMatch: "way \"name\"=Arc Foo";
throwWarning: tr("Highway name begins with Arc, may need to be expanded to Arcade");
fixAdd: concat("name=", "Arcade", substring(tag("name"), 3));
}

*["name"=~/^Artl /].highway_name {
assertNoMatch: "way \"name\"=Arterial Foo";
assertMatch: "way \"name\"=Artl Foo";
throwWarning: tr("Highway name begins with Artl, may need to be expanded to Arterial");
fixAdd: concat("name=", "Arterial", substring(tag("name"), 4));
}

*["name"=~/^Arty /].highway_name {
assertNoMatch: "way \"name\"=Artery Foo";
assertMatch: "way \"name\"=Arty Foo";
throwWarning: tr("Highway name begins with Arty, may need to be expanded to Artery");
fixAdd: concat("name=", "Artery", substring(tag("name"), 4));
}

*["name"=~/^Av /].highway_name {
assertNoMatch: "way \"name\"=Avenue Foo";
assertMatch: "way \"name\"=Av Foo";
throwWarning: tr("Highway name begins with Av, may need to be expanded to Avenue");
fixAdd: concat("name=", "Avenue", substring(tag("name"), 2));
}

*["name"=~/^Ave /].highway_name {
assertNoMatch: "way \"name\"=Avenue Foo";
assertMatch: "way \"name\"=Ave Foo";
throwWarning: tr("Highway name begins with Ave, may need to be expanded to Avenue");
fixAdd: concat("name=", "Avenue", substring(tag("name"), 3));
}

*["name"=~/^Bch /].highway_name {
assertNoMatch: "way \"name\"=Beach Foo";
assertMatch: "way \"name\"=Bch Foo";
throwWarning: tr("Highway name begins with Bch, may need to be expanded to Beach");
fixAdd: concat("name=", "Beach", substring(tag("name"), 3));
}

*["name"=~/^Bg /].highway_name {
assertNoMatch: "way \"name\"=Burg Foo";
assertMatch: "way \"name\"=Bg Foo";
throwWarning: tr("Highway name begins with Bg, may need to be expanded to Burg");
fixAdd: concat("name=", "Burg", substring(tag("name"), 2));
}

*["name"=~/^Bgs /].highway_name {
assertNoMatch: "way \"name\"=Burgs Foo";
assertMatch: "way \"name\"=Bgs Foo";
throwWarning: tr("Highway name begins with Bgs, may need to be expanded to Burgs");
fixAdd: concat("name=", "Burgs", substring(tag("name"), 3));
}

*["name"=~/^Blf /].highway_name {
assertNoMatch: "way \"name\"=Bluff Foo";
assertMatch: "way \"name\"=Blf Foo";
throwWarning: tr("Highway name begins with Blf, may need to be expanded to Bluff");
fixAdd: concat("name=", "Bluff", substring(tag("name"), 3));
}

*["name"=~/^Blk /].highway_name {
assertNoMatch: "way \"name\"=Block Foo";
assertMatch: "way \"name\"=Blk Foo";
throwWarning: tr("Highway name begins with Blk, may need to be expanded to Block");
fixAdd: concat("name=", "Block", substring(tag("name"), 3));
}

*["name"=~/^Blv /].highway_name {
assertNoMatch: "way \"name\"=Boulevard Foo";
assertMatch: "way \"name\"=Blv Foo";
throwWarning: tr("Highway name begins with Blv, may need to be expanded to Boulevard");
fixAdd: concat("name=", "Boulevard", substring(tag("name"), 3));
}

*["name"=~/^Blvd /].highway_name {
assertNoMatch: "way \"name\"=Boulevard Foo";
assertMatch: "way \"name\"=Blvd Foo";
throwWarning: tr("Highway name begins with Blvd, may need to be expanded to Boulevard");
fixAdd: concat("name=", "Boulevard", substring(tag("name"), 4));
}

*["name"=~/^Bnd /].highway_name {
assertNoMatch: "way \"name\"=Bend Foo";
assertMatch: "way \"name\"=Bnd Foo";
throwWarning: tr("Highway name begins with Bnd, may need to be expanded to Bend");
fixAdd: concat("name=", "Bend", substring(tag("name"), 3));
}

*["name"=~/^Br /].highway_name {
assertNoMatch: "way \"name\"=Bridge Foo";
assertMatch: "way \"name\"=Br Foo";
throwWarning: tr("Highway name begins with Br, may need to be expanded to Bridge");
fixAdd: concat("name=", "Bridge", substring(tag("name"), 2));
}

*["name"=~/^Brg /].highway_name {
assertNoMatch: "way \"name\"=Bridge Foo";
assertMatch: "way \"name\"=Brg Foo";
throwWarning: tr("Highway name begins with Brg, may need to be expanded to Bridge");
fixAdd: concat("name=", "Bridge", substring(tag("name"), 3));
}

*["name"=~/^Btm /].highway_name {
assertNoMatch: "way \"name\"=Bottom Foo";
assertMatch: "way \"name\"=Btm Foo";
throwWarning: tr("Highway name begins with Btm, may need to be expanded to Bottom");
fixAdd: concat("name=", "Bottom", substring(tag("name"), 3));
}

*["name"=~/^Bwlk /].highway_name {
assertNoMatch: "way \"name\"=Boardwalk Foo";
assertMatch: "way \"name\"=Bwlk Foo";
throwWarning: tr("Highway name begins with Bwlk, may need to be expanded to Boardwalk");
fixAdd: concat("name=", "Boardwalk", substring(tag("name"), 4));
}

*["name"=~/^Byp /].highway_name {
assertNoMatch: "way \"name\"=Bypass Foo";
assertMatch: "way \"name\"=Byp Foo";
throwWarning: tr("Highway name begins with Byp, may need to be expanded to Bypass");
fixAdd: concat("name=", "Bypass", substring(tag("name"), 3));
}

*["name"=~/^Bypa /].highway_name {
assertNoMatch: "way \"name\"=Bypass Foo";
assertMatch: "way \"name\"=Bypa Foo";
throwWarning: tr("Highway name begins with Bypa, may need to be expanded to Bypass");
fixAdd: concat("name=", "Bypass", substring(tag("name"), 4));
}

*["name"=~/^Byu /].highway_name {
assertNoMatch: "way \"name\"=Byou Foo";
assertMatch: "way \"name\"=Byu Foo";
throwWarning: tr("Highway name begins with Byu, may need to be expanded to Byou");
fixAdd: concat("name=", "Byou", substring(tag("name"), 3));
}

*["name"=~/^Bywy /].highway_name {
assertNoMatch: "way \"name\"=Byway Foo";
assertMatch: "way \"name\"=Bywy Foo";
throwWarning: tr("Highway name begins with Bywy, may need to be expanded to Byway");
fixAdd: concat("name=", "Byway", substring(tag("name"), 4));
}

*["name"=~/^Bzr /].highway_name {
assertNoMatch: "way \"name\"=Bazaar Foo";
assertMatch: "way \"name\"=Bzr Foo";
throwWarning: tr("Highway name begins with Bzr, may need to be expanded to Bazaar");
fixAdd: concat("name=", "Bazaar", substring(tag("name"), 3));
}

*["name"=~/^Cct /].highway_name {
assertNoMatch: "way \"name\"=Circuit Foo";
assertMatch: "way \"name\"=Cct Foo";
throwWarning: tr("Highway name begins with Cct, may need to be expanded to Circuit");
fixAdd: concat("name=", "Circuit", substring(tag("name"), 3));
}

*["name"=~/^Ch /].highway_name {
assertNoMatch: "way \"name\"=Chase Foo";
assertMatch: "way \"name\"=Ch Foo";
throwWarning: tr("Highway name begins with Ch, may need to be expanded to Chase");
fixAdd: concat("name=", "Chase", substring(tag("name"), 2));
}

*["name"=~/^Cir /].highway_name {
assertNoMatch: "way \"name\"=Circle Foo";
assertMatch: "way \"name\"=Cir Foo";
throwWarning: tr("Highway name begins with Cir, may need to be expanded to Circle");
fixAdd: concat("name=", "Circle", substring(tag("name"), 3));
}

*["name"=~/^Cirs /].highway_name {
assertNoMatch: "way \"name\"=Circles Foo";
assertMatch: "way \"name\"=Cirs Foo";
throwWarning: tr("Highway name begins with Cirs, may need to be expanded to Circles");
fixAdd: concat("name=", "Circles", substring(tag("name"), 4));
}

*["name"=~/^Clf /].highway_name {
assertNoMatch: "way \"name\"=Cliff Foo";
assertMatch: "way \"name\"=Clf Foo";
throwWarning: tr("Highway name begins with Clf, may need to be expanded to Cliff");
fixAdd: concat("name=", "Cliff", substring(tag("name"), 3));
}

*["name"=~/^Clfs /].highway_name {
assertNoMatch: "way \"name\"=Cliffs Foo";
assertMatch: "way \"name\"=Clfs Foo";
throwWarning: tr("Highway name begins with Clfs, may need to be expanded to Cliffs");
fixAdd: concat("name=", "Cliffs", substring(tag("name"), 4));
}

*["name"=~/^Cly /].highway_name {
assertNoMatch: "way \"name\"=Colony Foo";
assertMatch: "way \"name\"=Cly Foo";
throwWarning: tr("Highway name begins with Cly, may need to be expanded to Colony");
fixAdd: concat("name=", "Colony", substring(tag("name"), 3));
}

*["name"=~/^Cmn /].highway_name {
assertNoMatch: "way \"name\"=Common Foo";
assertMatch: "way \"name\"=Cmn Foo";
throwWarning: tr("Highway name begins with Cmn, may need to be expanded to Common");
fixAdd: concat("name=", "Common", substring(tag("name"), 3));
}

*["name"=~/^Cnl /].highway_name {
assertNoMatch: "way \"name\"=Canal Foo";
assertMatch: "way \"name\"=Cnl Foo";
throwWarning: tr("Highway name begins with Cnl, may need to be expanded to Canal");
fixAdd: concat("name=", "Canal", substring(tag("name"), 3));
}

*["name"=~/^Cnr /].highway_name {
assertNoMatch: "way \"name\"=Corner Foo";
assertMatch: "way \"name\"=Cnr Foo";
throwWarning: tr("Highway name begins with Cnr, may need to be expanded to Corner");
fixAdd: concat("name=", "Corner", substring(tag("name"), 3));
}

*["name"=~/^Coll /].highway_name {
assertNoMatch: "way \"name\"=College Foo";
assertMatch: "way \"name\"=Coll Foo";
throwWarning: tr("Highway name begins with Coll, may need to be expanded to College");
fixAdd: concat("name=", "College", substring(tag("name"), 4));
}

*["name"=~/^Cpe /].highway_name {
assertNoMatch: "way \"name\"=Cape Foo";
assertMatch: "way \"name\"=Cpe Foo";
throwWarning: tr("Highway name begins with Cpe, may need to be expanded to Cape");
fixAdd: concat("name=", "Cape", substring(tag("name"), 3));
}

*["name"=~/^Cr /].highway_name {
assertNoMatch: "way \"name\"=Creek Foo";
assertMatch: "way \"name\"=Cr Foo";
throwWarning: tr("Highway name begins with Cr, may need to be expanded to Creek");
fixAdd: concat("name=", "Creek", substring(tag("name"), 2));
}

*["name"=~/^Crk /].highway_name {
assertNoMatch: "way \"name\"=Creek Foo";
assertMatch: "way \"name\"=Crk Foo";
throwWarning: tr("Highway name begins with Crk, may need to be expanded to Creek");
fixAdd: concat("name=", "Creek", substring(tag("name"), 3));
}

*["name"=~/^Cres /].highway_name {
assertNoMatch: "way \"name\"=Crescent Foo";
assertMatch: "way \"name\"=Cres Foo";
throwWarning: tr("Highway name begins with Cres, may need to be expanded to Crescent");
fixAdd: concat("name=", "Crescent", substring(tag("name"), 4));
}

*["name"=~/^Crst /].highway_name {
assertNoMatch: "way \"name\"=Crest Foo";
assertMatch: "way \"name\"=Crst Foo";
throwWarning: tr("Highway name begins with Crst, may need to be expanded to Crest");
fixAdd: concat("name=", "Crest", substring(tag("name"), 4));
}

*["name"=~/^Cswy /].highway_name {
assertNoMatch: "way \"name\"=Causeway Foo";
assertMatch: "way \"name\"=Cswy Foo";
throwWarning: tr("Highway name begins with Cswy, may need to be expanded to Causeway");
fixAdd: concat("name=", "Causeway", substring(tag("name"), 4));
}

*["name"=~/^Ct /].highway_name {
assertNoMatch: "way \"name\"=Court Foo";
assertMatch: "way \"name\"=Ct Foo";
throwWarning: tr("Highway name begins with Ct, may need to be expanded to Court");
fixAdd: concat("name=", "Court", substring(tag("name"), 2));
}

*["name"=~/^Ctr /].highway_name {
assertNoMatch: "way \"name\"=Center Foo";
assertMatch: "way \"name\"=Ctr Foo";
throwWarning: tr("Highway name begins with Ctr, may need to be expanded to Center");
fixAdd: concat("name=", "Center", substring(tag("name"), 3));
}

*["name"=~/^Cts /].highway_name {
assertNoMatch: "way \"name\"=Courts Foo";
assertMatch: "way \"name\"=Cts Foo";
throwWarning: tr("Highway name begins with Cts, may need to be expanded to Courts");
fixAdd: concat("name=", "Courts", substring(tag("name"), 3));
}

*["name"=~/^Ctyd /].highway_name {
assertNoMatch: "way \"name\"=Courtyard Foo";
assertMatch: "way \"name\"=Ctyd Foo";
throwWarning: tr("Highway name begins with Ctyd, may need to be expanded to Courtyard");
fixAdd: concat("name=", "Courtyard", substring(tag("name"), 4));
}

*["name"=~/^Curv /].highway_name {
assertNoMatch: "way \"name\"=Curve Foo";
assertMatch: "way \"name\"=Curv Foo";
throwWarning: tr("Highway name begins with Curv, may need to be expanded to Curve");
fixAdd: concat("name=", "Curve", substring(tag("name"), 4));
}

*["name"=~/^Cutt /].highway_name {
assertNoMatch: "way \"name\"=Cutting Foo";
assertMatch: "way \"name\"=Cutt Foo";
throwWarning: tr("Highway name begins with Cutt, may need to be expanded to Cutting");
fixAdd: concat("name=", "Cutting", substring(tag("name"), 4));
}

*["name"=~/^Cv /].highway_name {
assertNoMatch: "way \"name\"=Cove Foo";
assertMatch: "way \"name\"=Cv Foo";
throwWarning: tr("Highway name begins with Cv, may need to be expanded to Cove");
fixAdd: concat("name=", "Cove", substring(tag("name"), 2));
}

*["name"=~/^Cyn /].highway_name {
assertNoMatch: "way \"name\"=Canyon Foo";
assertMatch: "way \"name\"=Cyn Foo";
throwWarning: tr("Highway name begins with Cyn, may need to be expanded to Canyon");
fixAdd: concat("name=", "Canyon", substring(tag("name"), 3));
}

*["name"=~/^Dl /].highway_name {
assertNoMatch: "way \"name\"=Dale Foo";
assertMatch: "way \"name\"=Dl Foo";
throwWarning: tr("Highway name begins with Dl, may need to be expanded to Dale");
fixAdd: concat("name=", "Dale", substring(tag("name"), 2));
}

*["name"=~/^Dr /].highway_name {
assertNoMatch: "way \"name\"=Drive Foo";
assertMatch: "way \"name\"=Dr Foo";
throwWarning: tr("Highway name begins with Dr, may need to be expanded to Drive");
fixAdd: concat("name=", "Drive", substring(tag("name"), 2));
}

*["name"=~/^Dv /].highway_name {
assertNoMatch: "way \"name\"=Drive Foo";
assertMatch: "way \"name\"=Dv Foo";
throwWarning: tr("Highway name begins with Dv, may need to be expanded to Drive");
fixAdd: concat("name=", "Drive", substring(tag("name"), 2));
}

*["name"=~/^Dvwy /].highway_name {
assertNoMatch: "way \"name\"=Driveway Foo";
assertMatch: "way \"name\"=Dvwy Foo";
throwWarning: tr("Highway name begins with Dvwy, may need to be expanded to Driveway");
fixAdd: concat("name=", "Driveway", substring(tag("name"), 4));
}

*["name"=~/^Elb /].highway_name {
assertNoMatch: "way \"name\"=Elbow Foo";
assertMatch: "way \"name\"=Elb Foo";
throwWarning: tr("Highway name begins with Elb, may need to be expanded to Elbow");
fixAdd: concat("name=", "Elbow", substring(tag("name"), 3));
}

*["name"=~/^Est /].highway_name {
assertNoMatch: "way \"name\"=Estate Foo";
assertMatch: "way \"name\"=Est Foo";
throwWarning: tr("Highway name begins with Est, may need to be expanded to Estate");
fixAdd: concat("name=", "Estate", substring(tag("name"), 3));
}

*["name"=~/^Ests /].highway_name {
assertNoMatch: "way \"name\"=Estates Foo";
assertMatch: "way \"name\"=Ests Foo";
throwWarning: tr("Highway name begins with Ests, may need to be expanded to Estates");
fixAdd: concat("name=", "Estates", substring(tag("name"), 4));
}

*["name"=~/^Expy /].highway_name {
assertNoMatch: "way \"name\"=Expressway Foo";
assertMatch: "way \"name\"=Expy Foo";
throwWarning: tr("Highway name begins with Expy, may need to be expanded to Expressway");
fixAdd: concat("name=", "Expressway", substring(tag("name"), 4));
}

*["name"=~/^Expwy /].highway_name {
assertNoMatch: "way \"name\"=Expressway Foo";
assertMatch: "way \"name\"=Expwy Foo";
throwWarning: tr("Highway name begins with Expwy, may need to be expanded to Expressway");
fixAdd: concat("name=", "Expressway", substring(tag("name"), 5));
}

*["name"=~/^Fawy /].highway_name {
assertNoMatch: "way \"name\"=Fairway Foo";
assertMatch: "way \"name\"=Fawy Foo";
throwWarning: tr("Highway name begins with Fawy, may need to be expanded to Fairway");
fixAdd: concat("name=", "Fairway", substring(tag("name"), 4));
}

*["name"=~/^Fld /].highway_name {
assertNoMatch: "way \"name\"=Field Foo";
assertMatch: "way \"name\"=Fld Foo";
throwWarning: tr("Highway name begins with Fld, may need to be expanded to Field");
fixAdd: concat("name=", "Field", substring(tag("name"), 3));
}

*["name"=~/^Flds /].highway_name {
assertNoMatch: "way \"name\"=Fields Foo";
assertMatch: "way \"name\"=Flds Foo";
throwWarning: tr("Highway name begins with Flds, may need to be expanded to Fields");
fixAdd: concat("name=", "Fields", substring(tag("name"), 4));
}

*["name"=~/^Fmrd /].highway_name {
assertNoMatch: "way \"name\"=Farm to Market Road Foo";
assertMatch: "way \"name\"=Fmrd Foo";
throwWarning: tr("Highway name begins with Fmrd, may need to be expanded to Farm to Market Road");
fixAdd: concat("name=", "Farm to Market Road", substring(tag("name"), 4));
}

*["name"=~/^Ftrl /].highway_name {
assertNoMatch: "way \"name\"=Firetrail Foo";
assertMatch: "way \"name\"=Ftrl Foo";
throwWarning: tr("Highway name begins with Ftrl, may need to be expanded to Firetrail");
fixAdd: concat("name=", "Firetrail", substring(tag("name"), 4));
}

*["name"=~/^Frk /].highway_name {
assertNoMatch: "way \"name\"=Fork Foo";
assertMatch: "way \"name\"=Frk Foo";
throwWarning: tr("Highway name begins with Frk, may need to be expanded to Fork");
fixAdd: concat("name=", "Fork", substring(tag("name"), 3));
}

*["name"=~/^Fry /].highway_name {
assertNoMatch: "way \"name\"=Ferry Foo";
assertMatch: "way \"name\"=Fry Foo";
throwWarning: tr("Highway name begins with Fry, may need to be expanded to Ferry");
fixAdd: concat("name=", "Ferry", substring(tag("name"), 3));
}

*["name"=~/^Fwy /].highway_name {
assertNoMatch: "way \"name\"=Freeway Foo";
assertMatch: "way \"name\"=Fwy Foo";
throwWarning: tr("Highway name begins with Fwy, may need to be expanded to Freeway");
fixAdd: concat("name=", "Freeway", substring(tag("name"), 3));
}

*["name"=~/^Gd /].highway_name {
assertNoMatch: "way \"name\"=Grade Foo";
assertMatch: "way \"name\"=Gd Foo";
throwWarning: tr("Highway name begins with Gd, may need to be expanded to Grade");
fixAdd: concat("name=", "Grade", substring(tag("name"), 2));
}

*["name"=~/^Gdns /].highway_name {
assertNoMatch: "way \"name\"=Gardens Foo";
assertMatch: "way \"name\"=Gdns Foo";
throwWarning: tr("Highway name begins with Gdns, may need to be expanded to Gardens");
fixAdd: concat("name=", "Gardens", substring(tag("name"), 4));
}

*["name"=~/^Gr /].highway_name {
assertNoMatch: "way \"name\"=Grove Foo";
assertMatch: "way \"name\"=Gr Foo";
throwWarning: tr("Highway name begins with Gr, may need to be expanded to Grove");
fixAdd: concat("name=", "Grove", substring(tag("name"), 2));
}

*["name"=~/^Gro /].highway_name {
assertNoMatch: "way \"name\"=Grove Foo";
assertMatch: "way \"name\"=Gro Foo";
throwWarning: tr("Highway name begins with Gro, may need to be expanded to Grove");
fixAdd: concat("name=", "Grove", substring(tag("name"), 3));
}

*["name"=~/^Grv /].highway_name {
assertNoMatch: "way \"name\"=Grove Foo";
assertMatch: "way \"name\"=Grv Foo";
throwWarning: tr("Highway name begins with Grv, may need to be expanded to Grove");
fixAdd: concat("name=", "Grove", substring(tag("name"), 3));
}

*["name"=~/^Hbr /].highway_name {
assertNoMatch: "way \"name\"=Harbor Foo";
assertMatch: "way \"name\"=Hbr Foo";
throwWarning: tr("Highway name begins with Hbr, may need to be expanded to Harbor");
fixAdd: concat("name=", "Harbor", substring(tag("name"), 3));
}

*["name"=~/^Hl /].highway_name {
assertNoMatch: "way \"name\"=Hill Foo";
assertMatch: "way \"name\"=Hl Foo";
throwWarning: tr("Highway name begins with Hl, may need to be expanded to Hill");
fixAdd: concat("name=", "Hill", substring(tag("name"), 2));
}

*["name"=~/^Hls /].highway_name {
assertNoMatch: "way \"name\"=Hills Foo";
assertMatch: "way \"name\"=Hls Foo";
throwWarning: tr("Highway name begins with Hls, may need to be expanded to Hills");
fixAdd: concat("name=", "Hills", substring(tag("name"), 3));
}

*["name"=~/^Holw /].highway_name {
assertNoMatch: "way \"name\"=Hollow Foo";
assertMatch: "way \"name\"=Holw Foo";
throwWarning: tr("Highway name begins with Holw, may need to be expanded to Hollow");
fixAdd: concat("name=", "Hollow", substring(tag("name"), 4));
}

*["name"=~/^Hts /].highway_name {
assertNoMatch: "way \"name\"=Heights Foo";
assertMatch: "way \"name\"=Hts Foo";
throwWarning: tr("Highway name begins with Hts, may need to be expanded to Heights");
fixAdd: concat("name=", "Heights", substring(tag("name"), 3));
}

*["name"=~/^Hw /].highway_name {
assertNoMatch: "way \"name\"=Highway Foo";
assertMatch: "way \"name\"=Hw Foo";
throwWarning: tr("Highway name begins with Hw, may need to be expanded to Highway");
fixAdd: concat("name=", "Highway", substring(tag("name"), 2));
}

*["name"=~/^Hwy /].highway_name {
assertNoMatch: "way \"name\"=Highway Foo";
assertMatch: "way \"name\"=Hwy Foo";
throwWarning: tr("Highway name begins with Hwy, may need to be expanded to Highway");
fixAdd: concat("name=", "Highway", substring(tag("name"), 3));
}

*["name"=~/^Hvn /].highway_name {
assertNoMatch: "way \"name\"=Haven Foo";
assertMatch: "way \"name\"=Hvn Foo";
throwWarning: tr("Highway name begins with Hvn, may need to be expanded to Haven");
fixAdd: concat("name=", "Haven", substring(tag("name"), 3));
}

*["name"=~/^Intg /].highway_name {
assertNoMatch: "way \"name\"=Interchange Foo";
assertMatch: "way \"name\"=Intg Foo";
throwWarning: tr("Highway name begins with Intg, may need to be expanded to Interchange");
fixAdd: concat("name=", "Interchange", substring(tag("name"), 4));
}

*["name"=~/^Iss /].highway_name {
assertNoMatch: "way \"name\"=Islands Foo";
assertMatch: "way \"name\"=Iss Foo";
throwWarning: tr("Highway name begins with Iss, may need to be expanded to Islands");
fixAdd: concat("name=", "Islands", substring(tag("name"), 3));
}

*["name"=~/^Jct /].highway_name {
assertNoMatch: "way \"name\"=Junction Foo";
assertMatch: "way \"name\"=Jct Foo";
throwWarning: tr("Highway name begins with Jct, may need to be expanded to Junction");
fixAdd: concat("name=", "Junction", substring(tag("name"), 3));
}

*["name"=~/^Jn /].highway_name {
assertNoMatch: "way \"name\"=Junction Foo";
assertMatch: "way \"name\"=Jn Foo";
throwWarning: tr("Highway name begins with Jn, may need to be expanded to Junction");
fixAdd: concat("name=", "Junction", substring(tag("name"), 2));
}

*["name"=~/^Jnc /].highway_name {
assertNoMatch: "way \"name\"=Junction Foo";
assertMatch: "way \"name\"=Jnc Foo";
throwWarning: tr("Highway name begins with Jnc, may need to be expanded to Junction");
fixAdd: concat("name=", "Junction", substring(tag("name"), 3));
}

*["name"=~/^Knl /].highway_name {
assertNoMatch: "way \"name\"=Knoll Foo";
assertMatch: "way \"name\"=Knl Foo";
throwWarning: tr("Highway name begins with Knl, may need to be expanded to Knoll");
fixAdd: concat("name=", "Knoll", substring(tag("name"), 3));
}

*["name"=~/^Knls /].highway_name {
assertNoMatch: "way \"name\"=Knolls Foo";
assertMatch: "way \"name\"=Knls Foo";
throwWarning: tr("Highway name begins with Knls, may need to be expanded to Knolls");
fixAdd: concat("name=", "Knolls", substring(tag("name"), 4));
}

*["name"=~/^Ky /].highway_name {
assertNoMatch: "way \"name\"=Key Foo";
assertMatch: "way \"name\"=Ky Foo";
throwWarning: tr("Highway name begins with Ky, may need to be expanded to Key");
fixAdd: concat("name=", "Key", substring(tag("name"), 2));
}

*["name"=~/^Kys /].highway_name {
assertNoMatch: "way \"name\"=Keys Foo";
assertMatch: "way \"name\"=Kys Foo";
throwWarning: tr("Highway name begins with Kys, may need to be expanded to Keys");
fixAdd: concat("name=", "Keys", substring(tag("name"), 3));
}

*["name"=~/^Lck /].highway_name {
assertNoMatch: "way \"name\"=Lock Foo";
assertMatch: "way \"name\"=Lck Foo";
throwWarning: tr("Highway name begins with Lck, may need to be expanded to Lock");
fixAdd: concat("name=", "Lock", substring(tag("name"), 3));
}

*["name"=~/^Lcks /].highway_name {
assertNoMatch: "way \"name\"=Locks Foo";
assertMatch: "way \"name\"=Lcks Foo";
throwWarning: tr("Highway name begins with Lcks, may need to be expanded to Locks");
fixAdd: concat("name=", "Locks", substring(tag("name"), 4));
}

*["name"=~/^Ldg /].highway_name {
assertNoMatch: "way \"name\"=Lodge Foo";
assertMatch: "way \"name\"=Ldg Foo";
throwWarning: tr("Highway name begins with Ldg, may need to be expanded to Lodge");
fixAdd: concat("name=", "Lodge", substring(tag("name"), 3));
}

*["name"=~/^Lk /].highway_name {
assertNoMatch: "way \"name\"=Lake Foo";
assertMatch: "way \"name\"=Lk Foo";
throwWarning: tr("Highway name begins with Lk, may need to be expanded to Lake");
fixAdd: concat("name=", "Lake", substring(tag("name"), 2));
}

*["name"=~/^Lks /].highway_name {
assertNoMatch: "way \"name\"=Lakes Foo";
assertMatch: "way \"name\"=Lks Foo";
throwWarning: tr("Highway name begins with Lks, may need to be expanded to Lakes");
fixAdd: concat("name=", "Lakes", substring(tag("name"), 3));
}

*["name"=~/^Lkt /].highway_name {
assertNoMatch: "way \"name\"=Lookout Foo";
assertMatch: "way \"name\"=Lkt Foo";
throwWarning: tr("Highway name begins with Lkt, may need to be expanded to Lookout");
fixAdd: concat("name=", "Lookout", substring(tag("name"), 3));
}

*["name"=~/^Ln /].highway_name {
assertNoMatch: "way \"name\"=Lane Foo";
assertMatch: "way \"name\"=Ln Foo";
throwWarning: tr("Highway name begins with Ln, may need to be expanded to Lane");
fixAdd: concat("name=", "Lane", substring(tag("name"), 2));
}

*["name"=~/^Lndg /].highway_name {
assertNoMatch: "way \"name\"=Landing Foo";
assertMatch: "way \"name\"=Lndg Foo";
throwWarning: tr("Highway name begins with Lndg, may need to be expanded to Landing");
fixAdd: concat("name=", "Landing", substring(tag("name"), 4));
}

*["name"=~/^Lp /].highway_name {
assertNoMatch: "way \"name\"=Loop Foo";
assertMatch: "way \"name\"=Lp Foo";
throwWarning: tr("Highway name begins with Lp, may need to be expanded to Loop");
fixAdd: concat("name=", "Loop", substring(tag("name"), 2));
}

*["name"=~/^Mal /].highway_name {
assertNoMatch: "way \"name\"=Mall Foo";
assertMatch: "way \"name\"=Mal Foo";
throwWarning: tr("Highway name begins with Mal, may need to be expanded to Mall");
fixAdd: concat("name=", "Mall", substring(tag("name"), 3));
}

*["name"=~/^Mdw /].highway_name {
assertNoMatch: "way \"name\"=Meadow Foo";
assertMatch: "way \"name\"=Mdw Foo";
throwWarning: tr("Highway name begins with Mdw, may need to be expanded to Meadow");
fixAdd: concat("name=", "Meadow", substring(tag("name"), 3));
}

*["name"=~/^Mdws /].highway_name {
assertNoMatch: "way \"name\"=Meadows Foo";
assertMatch: "way \"name\"=Mdws Foo";
throwWarning: tr("Highway name begins with Mdws, may need to be expanded to Meadows");
fixAdd: concat("name=", "Meadows", substring(tag("name"), 4));
}

*["name"=~/^Mkt /].highway_name {
assertNoMatch: "way \"name\"=Market Foo";
assertMatch: "way \"name\"=Mkt Foo";
throwWarning: tr("Highway name begins with Mkt, may need to be expanded to Market");
fixAdd: concat("name=", "Market", substring(tag("name"), 3));
}

*["name"=~/^Ml /].highway_name {
assertNoMatch: "way \"name\"=Mill Foo";
assertMatch: "way \"name\"=Ml Foo";
throwWarning: tr("Highway name begins with Ml, may need to be expanded to Mill");
fixAdd: concat("name=", "Mill", substring(tag("name"), 2));
}

*["name"=~/^Mt /].highway_name {
assertNoMatch: "way \"name\"=Mount Foo";
assertMatch: "way \"name\"=Mt Foo";
throwWarning: tr("Highway name begins with Mt, may need to be expanded to Mount");
fixAdd: concat("name=", "Mount", substring(tag("name"), 2));
}

*["name"=~/^Mtn /].highway_name {
assertNoMatch: "way \"name\"=Mountain Foo";
assertMatch: "way \"name\"=Mtn Foo";
throwWarning: tr("Highway name begins with Mtn, may need to be expanded to Mountain");
fixAdd: concat("name=", "Mountain", substring(tag("name"), 3));
}

*["name"=~/^Mtwy /].highway_name {
assertNoMatch: "way \"name\"=Motorway Foo";
assertMatch: "way \"name\"=Mtwy Foo";
throwWarning: tr("Highway name begins with Mtwy, may need to be expanded to Motorway");
fixAdd: concat("name=", "Motorway", substring(tag("name"), 4));
}

*["name"=~/^Orch /].highway_name {
assertNoMatch: "way \"name\"=Orchard Foo";
assertMatch: "way \"name\"=Orch Foo";
throwWarning: tr("Highway name begins with Orch, may need to be expanded to Orchard");
fixAdd: concat("name=", "Orchard", substring(tag("name"), 4));
}

*["name"=~/^Ovps /].highway_name {
assertNoMatch: "way \"name\"=Overpass Foo";
assertMatch: "way \"name\"=Ovps Foo";
throwWarning: tr("Highway name begins with Ovps, may need to be expanded to Overpass");
fixAdd: concat("name=", "Overpass", substring(tag("name"), 4));
}

*["name"=~/^Piaz /].highway_name {
assertNoMatch: "way \"name\"=Piazza Foo";
assertMatch: "way \"name\"=Piaz Foo";
throwWarning: tr("Highway name begins with Piaz, may need to be expanded to Piazza");
fixAdd: concat("name=", "Piazza", substring(tag("name"), 4));
}

*["name"=~/^Pk /].highway_name {
assertNoMatch: "way \"name\"=Peak Foo";
assertMatch: "way \"name\"=Pk Foo";
throwWarning: tr("Highway name begins with Pk, may need to be expanded to Peak");
fixAdd: concat("name=", "Peak", substring(tag("name"), 2));
}

*["name"=~/^Pky /].highway_name {
assertNoMatch: "way \"name\"=Parkway Foo";
assertMatch: "way \"name\"=Pky Foo";
throwWarning: tr("Highway name begins with Pky, may need to be expanded to Parkway");
fixAdd: concat("name=", "Parkway", substring(tag("name"), 3));
}

*["name"=~/^Pkwy /].highway_name {
assertNoMatch: "way \"name\"=Parkway Foo";
assertMatch: "way \"name\"=Pkwy Foo";
throwWarning: tr("Highway name begins with Pkwy, may need to be expanded to Parkway");
fixAdd: concat("name=", "Parkway", substring(tag("name"), 4));
}

*["name"=~/^Pl /].highway_name {
assertNoMatch: "way \"name\"=Place Foo";
assertMatch: "way \"name\"=Pl Foo";
throwWarning: tr("Highway name begins with Pl, may need to be expanded to Place");
fixAdd: concat("name=", "Place", substring(tag("name"), 2));
}

*["name"=~/^Pln /].highway_name {
assertNoMatch: "way \"name\"=Plain Foo";
assertMatch: "way \"name\"=Pln Foo";
throwWarning: tr("Highway name begins with Pln, may need to be expanded to Plain");
fixAdd: concat("name=", "Plain", substring(tag("name"), 3));
}

*["name"=~/^Plns /].highway_name {
assertNoMatch: "way \"name\"=Plains Foo";
assertMatch: "way \"name\"=Plns Foo";
throwWarning: tr("Highway name begins with Plns, may need to be expanded to Plains");
fixAdd: concat("name=", "Plains", substring(tag("name"), 4));
}

*["name"=~/^Plz /].highway_name {
assertNoMatch: "way \"name\"=Plaza Foo";
assertMatch: "way \"name\"=Plz Foo";
throwWarning: tr("Highway name begins with Plz, may need to be expanded to Plaza");
fixAdd: concat("name=", "Plaza", substring(tag("name"), 3));
}

*["name"=~/^Pnt /].highway_name {
assertNoMatch: "way \"name\"=Point Foo";
assertMatch: "way \"name\"=Pnt Foo";
throwWarning: tr("Highway name begins with Pnt, may need to be expanded to Point");
fixAdd: concat("name=", "Point", substring(tag("name"), 3));
}

*["name"=~/^Prkwy /].highway_name {
assertNoMatch: "way \"name\"=Parkway Foo";
assertMatch: "way \"name\"=Prkwy Foo";
throwWarning: tr("Highway name begins with Prkwy, may need to be expanded to Parkway");
fixAdd: concat("name=", "Parkway", substring(tag("name"), 5));
}

*["name"=~/^Pt /].highway_name {
assertNoMatch: "way \"name\"=Point Foo";
assertMatch: "way \"name\"=Pt Foo";
throwWarning: tr("Highway name begins with Pt, may need to be expanded to Point");
fixAdd: concat("name=", "Point", substring(tag("name"), 2));
}

*["name"=~/^Pvt /].highway_name {
assertNoMatch: "way \"name\"=Private Foo";
assertMatch: "way \"name\"=Pvt Foo";
throwWarning: tr("Highway name begins with Pvt, may need to be expanded to Private");
fixAdd: concat("name=", "Private", substring(tag("name"), 3));
}

*["name"=~/^Qdrt /].highway_name {
assertNoMatch: "way \"name\"=Quadrant Foo";
assertMatch: "way \"name\"=Qdrt Foo";
throwWarning: tr("Highway name begins with Qdrt, may need to be expanded to Quadrant");
fixAdd: concat("name=", "Quadrant", substring(tag("name"), 4));
}

*["name"=~/^Qtrs /].highway_name {
assertNoMatch: "way \"name\"=Quarters Foo";
assertMatch: "way \"name\"=Qtrs Foo";
throwWarning: tr("Highway name begins with Qtrs, may need to be expanded to Quarters");
fixAdd: concat("name=", "Quarters", substring(tag("name"), 4));
}

*["name"=~/^Qy /].highway_name {
assertNoMatch: "way \"name\"=Quay Foo";
assertMatch: "way \"name\"=Qy Foo";
throwWarning: tr("Highway name begins with Qy, may need to be expanded to Quay");
fixAdd: concat("name=", "Quay", substring(tag("name"), 2));
}

*["name"=~/^Qys /].highway_name {
assertNoMatch: "way \"name\"=Quays Foo";
assertMatch: "way \"name\"=Qys Foo";
throwWarning: tr("Highway name begins with Qys, may need to be expanded to Quays");
fixAdd: concat("name=", "Quays", substring(tag("name"), 3));
}

*["name"=~/^Rd /].highway_name {
assertNoMatch: "way \"name\"=Road Foo";
assertMatch: "way \"name\"=Rd Foo";
throwWarning: tr("Highway name begins with Rd, may need to be expanded to Road");
fixAdd: concat("name=", "Road", substring(tag("name"), 2));
}

*["name"=~/^Rds /].highway_name {
assertNoMatch: "way \"name\"=Roads Foo";
assertMatch: "way \"name\"=Rds Foo";
throwWarning: tr("Highway name begins with Rds, may need to be expanded to Roads");
fixAdd: concat("name=", "Roads", substring(tag("name"), 3));
}

*["name"=~/^Rdg /].highway_name {
assertNoMatch: "way \"name\"=Ridge Foo";
assertMatch: "way \"name\"=Rdg Foo";
throwWarning: tr("Highway name begins with Rdg, may need to be expanded to Ridge");
fixAdd: concat("name=", "Ridge", substring(tag("name"), 3));
}

*["name"=~/^Rdge /].highway_name {
assertNoMatch: "way \"name\"=Ridge Foo";
assertMatch: "way \"name\"=Rdge Foo";
throwWarning: tr("Highway name begins with Rdge, may need to be expanded to Ridge");
fixAdd: concat("name=", "Ridge", substring(tag("name"), 4));
}

*["name"=~/^Rdgs /].highway_name {
assertNoMatch: "way \"name\"=Ridges Foo";
assertMatch: "way \"name\"=Rdgs Foo";
throwWarning: tr("Highway name begins with Rdgs, may need to be expanded to Ridges");
fixAdd: concat("name=", "Ridges", substring(tag("name"), 4));
}

*["name"=~/^Rw /].highway_name {
assertNoMatch: "way \"name\"=Row Foo";
assertMatch: "way \"name\"=Rw Foo";
throwWarning: tr("Highway name begins with Rw, may need to be expanded to Row");
fixAdd: concat("name=", "Row", substring(tag("name"), 2));
}

*["name"=~/^Rmrd /].highway_name {
assertNoMatch: "way \"name\"=Ranch to Market Road Foo";
assertMatch: "way \"name\"=Rmrd Foo";
throwWarning: tr("Highway name begins with Rmrd, may need to be expanded to Ranch to Market Road");
fixAdd: concat("name=", "Ranch to Market Road", substring(tag("name"), 4));
}

*["name"=~/^Rt /].highway_name {
assertNoMatch: "way \"name\"=Route Foo";
assertMatch: "way \"name\"=Rt Foo";
throwWarning: tr("Highway name begins with Rt, may need to be expanded to Route");
fixAdd: concat("name=", "Route", substring(tag("name"), 2));
}

*["name"=~/^Rte /].highway_name {
assertNoMatch: "way \"name\"=Route Foo";
assertMatch: "way \"name\"=Rte Foo";
throwWarning: tr("Highway name begins with Rte, may need to be expanded to Route");
fixAdd: concat("name=", "Route", substring(tag("name"), 3));
}

*["name"=~/^Rty /].highway_name {
assertNoMatch: "way \"name\"=Rotary Foo";
assertMatch: "way \"name\"=Rty Foo";
throwWarning: tr("Highway name begins with Rty, may need to be expanded to Rotary");
fixAdd: concat("name=", "Rotary", substring(tag("name"), 3));
}

*["name"=~/^Shl /].highway_name {
assertNoMatch: "way \"name\"=Shoal Foo";
assertMatch: "way \"name\"=Shl Foo";
throwWarning: tr("Highway name begins with Shl, may need to be expanded to Shoal");
fixAdd: concat("name=", "Shoal", substring(tag("name"), 3));
}

*["name"=~/^Shls /].highway_name {
assertNoMatch: "way \"name\"=Shoals Foo";
assertMatch: "way \"name\"=Shls Foo";
throwWarning: tr("Highway name begins with Shls, may need to be expanded to Shoals");
fixAdd: concat("name=", "Shoals", substring(tag("name"), 4));
}

*["name"=~/^Shr /].highway_name {
assertNoMatch: "way \"name\"=Shore Foo";
assertMatch: "way \"name\"=Shr Foo";
throwWarning: tr("Highway name begins with Shr, may need to be expanded to Shore");
fixAdd: concat("name=", "Shore", substring(tag("name"), 3));
}

*["name"=~/^Shrs /].highway_name {
assertNoMatch: "way \"name\"=Shores Foo";
assertMatch: "way \"name\"=Shrs Foo";
throwWarning: tr("Highway name begins with Shrs, may need to be expanded to Shores");
fixAdd: concat("name=", "Shores", substring(tag("name"), 4));
}

*["name"=~/^Skwy /].highway_name {
assertNoMatch: "way \"name\"=Skyway Foo";
assertMatch: "way \"name\"=Skwy Foo";
throwWarning: tr("Highway name begins with Skwy, may need to be expanded to Skyway");
fixAdd: concat("name=", "Skyway", substring(tag("name"), 4));
}

*["name"=~/^Smt /].highway_name {
assertNoMatch: "way \"name\"=Summit Foo";
assertMatch: "way \"name\"=Smt Foo";
throwWarning: tr("Highway name begins with Smt, may need to be expanded to Summit");
fixAdd: concat("name=", "Summit", substring(tag("name"), 3));
}

*["name"=~/^Spg /].highway_name {
assertNoMatch: "way \"name\"=Spring Foo";
assertMatch: "way \"name\"=Spg Foo";
throwWarning: tr("Highway name begins with Spg, may need to be expanded to Spring");
fixAdd: concat("name=", "Spring", substring(tag("name"), 3));
}

*["name"=~/^Spgs /].highway_name {
assertNoMatch: "way \"name\"=Springs Foo";
assertMatch: "way \"name\"=Spgs Foo";
throwWarning: tr("Highway name begins with Spgs, may need to be expanded to Springs");
fixAdd: concat("name=", "Springs", substring(tag("name"), 4));
}

*["name"=~/^Sq /].highway_name {
assertNoMatch: "way \"name\"=Square Foo";
assertMatch: "way \"name\"=Sq Foo";
throwWarning: tr("Highway name begins with Sq, may need to be expanded to Square");
fixAdd: concat("name=", "Square", substring(tag("name"), 2));
}

*["name"=~/^Sqs /].highway_name {
assertNoMatch: "way \"name\"=Squares Foo";
assertMatch: "way \"name\"=Sqs Foo";
throwWarning: tr("Highway name begins with Sqs, may need to be expanded to Squares");
fixAdd: concat("name=", "Squares", substring(tag("name"), 3));
}

*["name"=~/^Srvc /].highway_name {
assertNoMatch: "way \"name\"=Service Foo";
assertMatch: "way \"name\"=Srvc Foo";
throwWarning: tr("Highway name begins with Srvc, may need to be expanded to Service");
fixAdd: concat("name=", "Service", substring(tag("name"), 4));
}

*["name"=~/^St /].highway_name {
assertNoMatch: "way \"name\"=Street Foo";
assertMatch: "way \"name\"=St Foo";
throwWarning: tr("Highway name begins with St, may need to be expanded to Street");
fixAdd: concat("name=", "Street", substring(tag("name"), 2));
}

*["name"=~/^Tce /].highway_name {
assertNoMatch: "way \"name\"=Terrace Foo";
assertMatch: "way \"name\"=Tce Foo";
throwWarning: tr("Highway name begins with Tce, may need to be expanded to Terrace");
fixAdd: concat("name=", "Terrace", substring(tag("name"), 3));
}

*["name"=~/^Ter /].highway_name {
assertNoMatch: "way \"name\"=Terrace Foo";
assertMatch: "way \"name\"=Ter Foo";
throwWarning: tr("Highway name begins with Ter, may need to be expanded to Terrace");
fixAdd: concat("name=", "Terrace", substring(tag("name"), 3));
}

*["name"=~/^Tfwy /].highway_name {
assertNoMatch: "way \"name\"=Trafficway Foo";
assertMatch: "way \"name\"=Tfwy Foo";
throwWarning: tr("Highway name begins with Tfwy, may need to be expanded to Trafficway");
fixAdd: concat("name=", "Trafficway", substring(tag("name"), 4));
}

*["name"=~/^Thfr /].highway_name {
assertNoMatch: "way \"name\"=Thoroughfare Foo";
assertMatch: "way \"name\"=Thfr Foo";
throwWarning: tr("Highway name begins with Thfr, may need to be expanded to Thoroughfare");
fixAdd: concat("name=", "Thoroughfare", substring(tag("name"), 4));
}

*["name"=~/^Thwy /].highway_name {
assertNoMatch: "way \"name\"=Throughway Foo";
assertMatch: "way \"name\"=Thwy Foo";
throwWarning: tr("Highway name begins with Thwy, may need to be expanded to Throughway");
fixAdd: concat("name=", "Throughway", substring(tag("name"), 4));
}

*["name"=~/^Tl /].highway_name {
assertNoMatch: "way \"name\"=Trail Foo";
assertMatch: "way \"name\"=Tl Foo";
throwWarning: tr("Highway name begins with Tl, may need to be expanded to Trail");
fixAdd: concat("name=", "Trail", substring(tag("name"), 2));
}

*["name"=~/^Tlwy /].highway_name {
assertNoMatch: "way \"name\"=Tollway Foo";
assertMatch: "way \"name\"=Tlwy Foo";
throwWarning: tr("Highway name begins with Tlwy, may need to be expanded to Tollway");
fixAdd: concat("name=", "Tollway", substring(tag("name"), 4));
}

*["name"=~/^Tpke /].highway_name {
assertNoMatch: "way \"name\"=Turnpike Foo";
assertMatch: "way \"name\"=Tpke Foo";
throwWarning: tr("Highway name begins with Tpke, may need to be expanded to Turnpike");
fixAdd: concat("name=", "Turnpike", substring(tag("name"), 4));
}

*["name"=~/^Trce /].highway_name {
assertNoMatch: "way \"name\"=Trace Foo";
assertMatch: "way \"name\"=Trce Foo";
throwWarning: tr("Highway name begins with Trce, may need to be expanded to Trace");
fixAdd: concat("name=", "Trace", substring(tag("name"), 4));
}

*["name"=~/^Tr /].highway_name {
assertNoMatch: "way \"name\"=Trail Foo";
assertMatch: "way \"name\"=Tr Foo";
throwWarning: tr("Highway name begins with Tr, may need to be expanded to Trail");
fixAdd: concat("name=", "Trail", substring(tag("name"), 2));
}

*["name"=~/^Trk /].highway_name {
assertNoMatch: "way \"name\"=Track Foo";
assertMatch: "way \"name\"=Trk Foo";
throwWarning: tr("Highway name begins with Trk, may need to be expanded to Track");
fixAdd: concat("name=", "Track", substring(tag("name"), 3));
}

*["name"=~/^Trl /].highway_name {
assertNoMatch: "way \"name\"=Trail Foo";
assertMatch: "way \"name\"=Trl Foo";
throwWarning: tr("Highway name begins with Trl, may need to be expanded to Trail");
fixAdd: concat("name=", "Trail", substring(tag("name"), 3));
}

*["name"=~/^Tunl /].highway_name {
assertNoMatch: "way \"name\"=Tunnel Foo";
assertMatch: "way \"name\"=Tunl Foo";
throwWarning: tr("Highway name begins with Tunl, may need to be expanded to Tunnel");
fixAdd: concat("name=", "Tunnel", substring(tag("name"), 4));
}

*["name"=~/^Unp /].highway_name {
assertNoMatch: "way \"name\"=Underpass Foo";
assertMatch: "way \"name\"=Unp Foo";
throwWarning: tr("Highway name begins with Unp, may need to be expanded to Underpass");
fixAdd: concat("name=", "Underpass", substring(tag("name"), 3));
}

*["name"=~/^Vl /].highway_name {
assertNoMatch: "way \"name\"=Villa Foo";
assertMatch: "way \"name\"=Vl Foo";
throwWarning: tr("Highway name begins with Vl, may need to be expanded to Villa");
fixAdd: concat("name=", "Villa", substring(tag("name"), 2));
}

*["name"=~/^Vlg /].highway_name {
assertNoMatch: "way \"name\"=Village Foo";
assertMatch: "way \"name\"=Vlg Foo";
throwWarning: tr("Highway name begins with Vlg, may need to be expanded to Village");
fixAdd: concat("name=", "Village", substring(tag("name"), 3));
}

*["name"=~/^Vlgs /].highway_name {
assertNoMatch: "way \"name\"=Villages Foo";
assertMatch: "way \"name\"=Vlgs Foo";
throwWarning: tr("Highway name begins with Vlgs, may need to be expanded to Villages");
fixAdd: concat("name=", "Villages", substring(tag("name"), 4));
}

*["name"=~/^Vly /].highway_name {
assertNoMatch: "way \"name\"=Valley Foo";
assertMatch: "way \"name\"=Vly Foo";
throwWarning: tr("Highway name begins with Vly, may need to be expanded to Valley");
fixAdd: concat("name=", "Valley", substring(tag("name"), 3));
}

*["name"=~/^Vw /].highway_name {
assertNoMatch: "way \"name\"=View Foo";
assertMatch: "way \"name\"=Vw Foo";
throwWarning: tr("Highway name begins with Vw, may need to be expanded to View");
fixAdd: concat("name=", "View", substring(tag("name"), 2));
}

*["name"=~/^Wd /].highway_name {
assertNoMatch: "way \"name\"=Wood Foo";
assertMatch: "way \"name\"=Wd Foo";
throwWarning: tr("Highway name begins with Wd, may need to be expanded to Wood");
fixAdd: concat("name=", "Wood", substring(tag("name"), 2));
}

*["name"=~/^Whrf /].highway_name {
assertNoMatch: "way \"name\"=Wharf Foo";
assertMatch: "way \"name\"=Whrf Foo";
throwWarning: tr("Highway name begins with Whrf, may need to be expanded to Wharf");
fixAdd: concat("name=", "Wharf", substring(tag("name"), 4));
}

*["name"=~/^Wkwy /].highway_name {
assertNoMatch: "way \"name\"=Walkway Foo";
assertMatch: "way \"name\"=Wkwy Foo";
throwWarning: tr("Highway name begins with Wkwy, may need to be expanded to Walkway");
fixAdd: concat("name=", "Walkway", substring(tag("name"), 4));
}

*["name"=~/^Wlk /].highway_name {
assertNoMatch: "way \"name\"=Walk Foo";
assertMatch: "way \"name\"=Wlk Foo";
throwWarning: tr("Highway name begins with Wlk, may need to be expanded to Walk");
fixAdd: concat("name=", "Walk", substring(tag("name"), 3));
}

*["name"=~/^Wy /].highway_name {
assertNoMatch: "way \"name\"=Way Foo";
assertMatch: "way \"name\"=Wy Foo";
throwWarning: tr("Highway name begins with Wy, may need to be expanded to Way");
fixAdd: concat("name=", "Way", substring(tag("name"), 2));
}

*["name"=~/^Xing /].highway_name {
assertNoMatch: "way \"name\"=Crossing Foo";
assertMatch: "way \"name\"=Xing Foo";
throwWarning: tr("Highway name begins with Xing, may need to be expanded to Crossing");
fixAdd: concat("name=", "Crossing", substring(tag("name"), 4));
}


meta
{
    title: "(US) Abbreviated Streetname Fixup";
    version: "0,1_9/9/2024";
    description: "Expands common street name abbreviations in the US";
    author: "watmildon";
    link: "https://github.com/watmildon/josm-validator-rules/blob/main/rules/USStreetNameExpander.validator.mapcss";
    baselanguage: "en";
    min-josm-version: 14481;
}

/*
[out:json][timeout:300];
{{geocodeArea:"United States of America"}}->.a;
(
  wr[highway][highway!=platform][highway!="bus_stop"][amenity!=shelter][!bus][name~" Acc$| Arc$| Av$| Ave$| Blf$| Blvd$| Bnd$| Br$| Brg$| Byp$| Cir$| Cr$| Cres$| Cswy$| Ct$| Ctr$| Cv$| Dr$| Expy$| Expwy$| Flds$| Fmrd$| Fwy$| Gd$| Grv$| Hbr$| Holw$| Hts$| Hw$| Hwy$| Lk$| Ln$| Lndg$| Lp$| Mal$| Mt$| Mtwy$| Ovps$| Pky$| Pkwy$| Pl$| Plz$| Pvt$| Rd$| Rdg$| Rmrd$| Rte$| Skwy$| Sq$| Srvc$| St$| Ter$| Tfwy$| Thfr$| Thwy$| Tl$| Tpke$| Trce$| Tr$| Trl$| Tunl$| Unp$| Vly$| Vw$| Wkwy$| Wy$| Xing$"](area.a);
  wr[highway][highway!=platform][highway!="bus_stop"][amenity!=shelter][!bus][name~" Acc.$| Arc.$| Av.$| Ave.$| Blf.$| Blvd.$| Bnd.$| Br.$| Brg.$| Byp.$| Cir.$| Cr.$| Cres.$| Cswy.$| Ct.$| Ctr.$| Cv.$| Dr.$| Expy.$| Expwy.$| Flds.$| Fmrd.$| Fwy.$| Gd.$| Grv.$| Hbr.$| Holw.$| Hts.$| Hw.$| Hwy.$| Lk.$| Ln.$| Lndg.$| Lp.$| Mal.$| Mt.$| Mtwy.$| Ovps.$| Pky.$| Pkwy.$| Pl.$| Plz.$| Pvt.$| Rd.$| Rdg.$| Rmrd.$| Rte.$| Skwy.$| Sq.$| Srvc.$| St.$| Ter.$| Tfwy.$| Thfr.$| Thwy.$| Tl.$| Tpke.$| Trce.$| Tr.$| Trl.$| Tunl.$| Unp.$| Vly.$| Vw.$| Wkwy.$| Wy.$| Xing.$"](area.a);
  wr[highway][highway!=platform][highway!="bus_stop"][amenity!=shelter][!bus][name~"^Acc |^Arc |^Av |^Ave |^Blf |^Blvd |^Bnd |^Br |^Brg |^Byp |^Cir |^Cr |^Cres |^Cswy |^Ct |^Ctr |^Cv |^Dr |^Expy |^Expwy |^Flds |^Fmrd |^Fwy |^Gd |^Grv |^Hbr |^Holw |^Hts |^Hw |^Hwy |^Lk |^Ln |^Lndg |^Lp |^Mal |^Mt |^Mtwy |^Ovps |^Pky |^Pkwy |^Pl |^Plz |^Pvt |^Rd |^Rdg |^Rmrd |^Rte |^Skwy |^Sq |^Srvc |^St |^Ter |^Tfwy |^Thfr |^Thwy |^Tl |^Tpke |^Trce |^Tr |^Trl |^Tunl |^Unp |^Vly |^Vw |^Wkwy |^Wy |^Xing "](area.a);
  wr[highway][highway!=platform][highway!="bus_stop"][amenity!=shelter][!bus][name~" Acc | Arc | Av | Ave | Blf | Blvd | Bnd | Br | Brg | Byp | Cir | Cr | Cres | Cswy | Ct | Ctr | Cv | Dr | Expy | Expwy | Flds | Fmrd | Fwy | Gd | Grv | Hbr | Holw | Hts | Hw | Hwy | Lk | Ln | Lndg | Lp | Mal | Mt | Mtwy | Ovps | Pky | Pkwy | Pl | Plz | Pvt | Rd | Rdg | Rmrd | Rte | Skwy | Sq | Srvc | St | Ter | Tfwy | Thfr | Thwy | Tl | Tpke | Trce | Tr | Trl | Tunl | Unp | Vly | Vw | Wkwy | Wy | Xing "](area.a);
  nwr["addr:street"~" Acc$| Arc$| Av$| Ave$| Blf$| Blvd$| Bnd$| Br$| Brg$| Byp$| Cir$| Cr$| Cres$| Cswy$| Ct$| Ctr$| Cv$| Dr$| Expy$| Expwy$| Flds$| Fmrd$| Fwy$| Gd$| Grv$| Hbr$| Holw$| Hts$| Hw$| Hwy$| Lk$| Ln$| Lndg$| Lp$| Mal$| Mt$| Mtwy$| Ovps$| Pky$| Pkwy$| Pl$| Plz$| Pvt$| Rd$| Rdg$| Rmrd$| Rte$| Skwy$| Sq$| Srvc$| St$| Ter$| Tfwy$| Thfr$| Thwy$| Tl$| Tpke$| Trce$| Tr$| Trl$| Tunl$| Unp$| Vly$| Vw$| Wkwy$| Wy$| Xing$"](area.a);
  nwr["addr:street"~" Acc.$| Arc.$| Av.$| Ave.$| Blf.$| Blvd.$| Bnd.$| Br.$| Brg.$| Byp.$| Cir.$| Cr.$| Cres.$| Cswy.$| Ct.$| Ctr.$| Cv.$| Dr.$| Expy.$| Expwy.$| Flds.$| Fmrd.$| Fwy.$| Gd.$| Grv.$| Hbr.$| Holw.$| Hts.$| Hw.$| Hwy.$| Lk.$| Ln.$| Lndg.$| Lp.$| Mal.$| Mt.$| Mtwy.$| Ovps.$| Pky.$| Pkwy.$| Pl.$| Plz.$| Pvt.$| Rd.$| Rdg.$| Rmrd.$| Rte.$| Skwy.$| Sq.$| Srvc.$| St.$| Ter.$| Tfwy.$| Thfr.$| Thwy.$| Tl.$| Tpke.$| Trce.$| Tr.$| Trl.$| Tunl.$| Unp.$| Vly.$| Vw.$| Wkwy.$| Wy.$| Xing.$"](area.a);
  nwr["addr:street"~"^Acc |^Arc |^Av |^Ave |^Blf |^Blvd |^Bnd |^Br |^Brg |^Byp |^Cir |^Cr |^Cres |^Cswy |^Ct |^Ctr |^Cv |^Dr |^Expy |^Expwy |^Flds |^Fmrd |^Fwy |^Gd |^Grv |^Hbr |^Holw |^Hts |^Hw |^Hwy |^Lk |^Ln |^Lndg |^Lp |^Mal |^Mt |^Mtwy |^Ovps |^Pky |^Pkwy |^Pl |^Plz |^Pvt |^Rd |^Rdg |^Rmrd |^Rte |^Skwy |^Sq |^Srvc |^St |^Ter |^Tfwy |^Thfr |^Thwy |^Tl |^Tpke |^Trce |^Tr |^Trl |^Tunl |^Unp |^Vly |^Vw |^Wkwy |^Wy |^Xing "](area.a);
  nwr["addr:street"~" Acc | Arc | Av | Ave | Blf | Blvd | Bnd | Br | Brg | Byp | Cir | Cr | Cres | Cswy | Ct | Ctr | Cv | Dr | Expy | Expwy | Flds | Fmrd | Fwy | Gd | Grv | Hbr | Holw | Hts | Hw | Hwy | Lk | Ln | Lndg | Lp | Mal | Mt | Mtwy | Ovps | Pky | Pkwy | Pl | Plz | Pvt | Rd | Rdg | Rmrd | Rte | Skwy | Sq | Srvc | St | Ter | Tfwy | Thfr | Thwy | Tl | Tpke | Trce | Tr | Trl | Tunl | Unp | Vly | Vw | Wkwy | Wy | Xing "](area.a);
);
out body;
>;
out skel qt;
*/

*["highway"]["name"]["highway"!="bus_stop"] {
    set highway_name;
}

*["addr:street"]["addr:street"=~/ Acc$/] {
assertNoMatch: "way \"addr:street\"=Main Access";
assertMatch: "way \"addr:street\"=Main Acc";
throwWarning: tr("addr:street={0} contains postfix Acc, should likely be expanded to Access","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Access");
group: tr("addr:street contains postfix Acc, should likely be expanded to Access");
}

*["addr:street"]["addr:street"=~/ Arc$/] {
assertNoMatch: "way \"addr:street\"=Main Arcade";
assertMatch: "way \"addr:street\"=Main Arc";
throwWarning: tr("addr:street={0} contains postfix Arc, should likely be expanded to Arcade","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Arcade");
group: tr("addr:street contains postfix Arc, should likely be expanded to Arcade");
}

*["addr:street"]["addr:street"=~/ Av$/] {
assertNoMatch: "way \"addr:street\"=Main Avenue";
assertMatch: "way \"addr:street\"=Main Av";
throwWarning: tr("addr:street={0} contains postfix Av, should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Avenue");
group: tr("addr:street contains postfix Av, should likely be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/ Ave$/] {
assertNoMatch: "way \"addr:street\"=Main Avenue";
assertMatch: "way \"addr:street\"=Main Ave";
throwWarning: tr("addr:street={0} contains postfix Ave, should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Avenue");
group: tr("addr:street contains postfix Ave, should likely be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/ Blf$/] {
assertNoMatch: "way \"addr:street\"=Main Bluff";
assertMatch: "way \"addr:street\"=Main Blf";
throwWarning: tr("addr:street={0} contains postfix Blf, should likely be expanded to Bluff","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Bluff");
group: tr("addr:street contains postfix Blf, should likely be expanded to Bluff");
}

*["addr:street"]["addr:street"=~/ Blvd$/] {
assertNoMatch: "way \"addr:street\"=Main Boulevard";
assertMatch: "way \"addr:street\"=Main Blvd";
throwWarning: tr("addr:street={0} contains postfix Blvd, should likely be expanded to Boulevard","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Boulevard");
group: tr("addr:street contains postfix Blvd, should likely be expanded to Boulevard");
}

*["addr:street"]["addr:street"=~/ Bnd$/] {
assertNoMatch: "way \"addr:street\"=Main Bend";
assertMatch: "way \"addr:street\"=Main Bnd";
throwWarning: tr("addr:street={0} contains postfix Bnd, should likely be expanded to Bend","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Bend");
group: tr("addr:street contains postfix Bnd, should likely be expanded to Bend");
}

*["addr:street"]["addr:street"=~/ Br$/] {
assertNoMatch: "way \"addr:street\"=Main Bridge";
assertMatch: "way \"addr:street\"=Main Br";
throwWarning: tr("addr:street={0} contains postfix Br, should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Bridge");
group: tr("addr:street contains postfix Br, should likely be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/ Brg$/] {
assertNoMatch: "way \"addr:street\"=Main Bridge";
assertMatch: "way \"addr:street\"=Main Brg";
throwWarning: tr("addr:street={0} contains postfix Brg, should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Bridge");
group: tr("addr:street contains postfix Brg, should likely be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/ Byp$/] {
assertNoMatch: "way \"addr:street\"=Main Bypass";
assertMatch: "way \"addr:street\"=Main Byp";
throwWarning: tr("addr:street={0} contains postfix Byp, should likely be expanded to Bypass","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Bypass");
group: tr("addr:street contains postfix Byp, should likely be expanded to Bypass");
}

*["addr:street"]["addr:street"=~/ Cir$/] {
assertNoMatch: "way \"addr:street\"=Main Circle";
assertMatch: "way \"addr:street\"=Main Cir";
throwWarning: tr("addr:street={0} contains postfix Cir, should likely be expanded to Circle","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Circle");
group: tr("addr:street contains postfix Cir, should likely be expanded to Circle");
}

*["addr:street"]["addr:street"=~/ Cr$/] {
assertNoMatch: "way \"addr:street\"=Main Creek";
assertMatch: "way \"addr:street\"=Main Cr";
throwWarning: tr("addr:street={0} contains postfix Cr, should likely be expanded to Creek","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Creek");
group: tr("addr:street contains postfix Cr, should likely be expanded to Creek");
}

*["addr:street"]["addr:street"=~/ Cres$/] {
assertNoMatch: "way \"addr:street\"=Main Crescent";
assertMatch: "way \"addr:street\"=Main Cres";
throwWarning: tr("addr:street={0} contains postfix Cres, should likely be expanded to Crescent","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Crescent");
group: tr("addr:street contains postfix Cres, should likely be expanded to Crescent");
}

*["addr:street"]["addr:street"=~/ Cswy$/] {
assertNoMatch: "way \"addr:street\"=Main Causeway";
assertMatch: "way \"addr:street\"=Main Cswy";
throwWarning: tr("addr:street={0} contains postfix Cswy, should likely be expanded to Causeway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Causeway");
group: tr("addr:street contains postfix Cswy, should likely be expanded to Causeway");
}

*["addr:street"]["addr:street"=~/ Ct$/] {
assertNoMatch: "way \"addr:street\"=Main Court";
assertMatch: "way \"addr:street\"=Main Ct";
throwWarning: tr("addr:street={0} contains postfix Ct, should likely be expanded to Court","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Court");
group: tr("addr:street contains postfix Ct, should likely be expanded to Court");
}

*["addr:street"]["addr:street"=~/ Ctr$/] {
assertNoMatch: "way \"addr:street\"=Main Center";
assertMatch: "way \"addr:street\"=Main Ctr";
throwWarning: tr("addr:street={0} contains postfix Ctr, should likely be expanded to Center","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Center");
group: tr("addr:street contains postfix Ctr, should likely be expanded to Center");
}

*["addr:street"]["addr:street"=~/ Cv$/] {
assertNoMatch: "way \"addr:street\"=Main Cove";
assertMatch: "way \"addr:street\"=Main Cv";
throwWarning: tr("addr:street={0} contains postfix Cv, should likely be expanded to Cove","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Cove");
group: tr("addr:street contains postfix Cv, should likely be expanded to Cove");
}

*["addr:street"]["addr:street"=~/ Dr$/] {
assertNoMatch: "way \"addr:street\"=Main Drive";
assertMatch: "way \"addr:street\"=Main Dr";
throwWarning: tr("addr:street={0} contains postfix Dr, should likely be expanded to Drive","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Drive");
group: tr("addr:street contains postfix Dr, should likely be expanded to Drive");
}

*["addr:street"]["addr:street"=~/ Expy$/] {
assertNoMatch: "way \"addr:street\"=Main Expressway";
assertMatch: "way \"addr:street\"=Main Expy";
throwWarning: tr("addr:street={0} contains postfix Expy, should likely be expanded to Expressway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Expressway");
group: tr("addr:street contains postfix Expy, should likely be expanded to Expressway");
}

*["addr:street"]["addr:street"=~/ Expwy$/] {
assertNoMatch: "way \"addr:street\"=Main Expressway";
assertMatch: "way \"addr:street\"=Main Expwy";
throwWarning: tr("addr:street={0} contains postfix Expwy, should likely be expanded to Expressway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Expressway");
group: tr("addr:street contains postfix Expwy, should likely be expanded to Expressway");
}

*["addr:street"]["addr:street"=~/ Flds$/] {
assertNoMatch: "way \"addr:street\"=Main Fields";
assertMatch: "way \"addr:street\"=Main Flds";
throwWarning: tr("addr:street={0} contains postfix Flds, should likely be expanded to Fields","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Fields");
group: tr("addr:street contains postfix Flds, should likely be expanded to Fields");
}

*["addr:street"]["addr:street"=~/ Fmrd$/] {
assertNoMatch: "way \"addr:street\"=Main Farm to Market Road";
assertMatch: "way \"addr:street\"=Main Fmrd";
throwWarning: tr("addr:street={0} contains postfix Fmrd, should likely be expanded to Farm to Market Road","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Farm to Market Road");
group: tr("addr:street contains postfix Fmrd, should likely be expanded to Farm to Market Road");
}

*["addr:street"]["addr:street"=~/ Fwy$/] {
assertNoMatch: "way \"addr:street\"=Main Freeway";
assertMatch: "way \"addr:street\"=Main Fwy";
throwWarning: tr("addr:street={0} contains postfix Fwy, should likely be expanded to Freeway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Freeway");
group: tr("addr:street contains postfix Fwy, should likely be expanded to Freeway");
}

*["addr:street"]["addr:street"=~/ Gd$/] {
assertNoMatch: "way \"addr:street\"=Main Grade";
assertMatch: "way \"addr:street\"=Main Gd";
throwWarning: tr("addr:street={0} contains postfix Gd, should likely be expanded to Grade","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Grade");
group: tr("addr:street contains postfix Gd, should likely be expanded to Grade");
}

*["addr:street"]["addr:street"=~/ Grv$/] {
assertNoMatch: "way \"addr:street\"=Main Grove";
assertMatch: "way \"addr:street\"=Main Grv";
throwWarning: tr("addr:street={0} contains postfix Grv, should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Grove");
group: tr("addr:street contains postfix Grv, should likely be expanded to Grove");
}

*["addr:street"]["addr:street"=~/ Hbr$/] {
assertNoMatch: "way \"addr:street\"=Main Harbor";
assertMatch: "way \"addr:street\"=Main Hbr";
throwWarning: tr("addr:street={0} contains postfix Hbr, should likely be expanded to Harbor","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Harbor");
group: tr("addr:street contains postfix Hbr, should likely be expanded to Harbor");
}

*["addr:street"]["addr:street"=~/ Holw$/] {
assertNoMatch: "way \"addr:street\"=Main Hollow";
assertMatch: "way \"addr:street\"=Main Holw";
throwWarning: tr("addr:street={0} contains postfix Holw, should likely be expanded to Hollow","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Hollow");
group: tr("addr:street contains postfix Holw, should likely be expanded to Hollow");
}

*["addr:street"]["addr:street"=~/ Hts$/] {
assertNoMatch: "way \"addr:street\"=Main Heights";
assertMatch: "way \"addr:street\"=Main Hts";
throwWarning: tr("addr:street={0} contains postfix Hts, should likely be expanded to Heights","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Heights");
group: tr("addr:street contains postfix Hts, should likely be expanded to Heights");
}

*["addr:street"]["addr:street"=~/ Hw$/] {
assertNoMatch: "way \"addr:street\"=Main Highway";
assertMatch: "way \"addr:street\"=Main Hw";
throwWarning: tr("addr:street={0} contains postfix Hw, should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Highway");
group: tr("addr:street contains postfix Hw, should likely be expanded to Highway");
}

*["addr:street"]["addr:street"=~/ Hwy$/] {
assertNoMatch: "way \"addr:street\"=Main Highway";
assertMatch: "way \"addr:street\"=Main Hwy";
throwWarning: tr("addr:street={0} contains postfix Hwy, should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Highway");
group: tr("addr:street contains postfix Hwy, should likely be expanded to Highway");
}

*["addr:street"]["addr:street"=~/ Lk$/] {
assertNoMatch: "way \"addr:street\"=Main Lake";
assertMatch: "way \"addr:street\"=Main Lk";
throwWarning: tr("addr:street={0} contains postfix Lk, should likely be expanded to Lake","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Lake");
group: tr("addr:street contains postfix Lk, should likely be expanded to Lake");
}

*["addr:street"]["addr:street"=~/ Ln$/] {
assertNoMatch: "way \"addr:street\"=Main Lane";
assertMatch: "way \"addr:street\"=Main Ln";
throwWarning: tr("addr:street={0} contains postfix Ln, should likely be expanded to Lane","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Lane");
group: tr("addr:street contains postfix Ln, should likely be expanded to Lane");
}

*["addr:street"]["addr:street"=~/ Lndg$/] {
assertNoMatch: "way \"addr:street\"=Main Landing";
assertMatch: "way \"addr:street\"=Main Lndg";
throwWarning: tr("addr:street={0} contains postfix Lndg, should likely be expanded to Landing","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Landing");
group: tr("addr:street contains postfix Lndg, should likely be expanded to Landing");
}

*["addr:street"]["addr:street"=~/ Lp$/] {
assertNoMatch: "way \"addr:street\"=Main Loop";
assertMatch: "way \"addr:street\"=Main Lp";
throwWarning: tr("addr:street={0} contains postfix Lp, should likely be expanded to Loop","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Loop");
group: tr("addr:street contains postfix Lp, should likely be expanded to Loop");
}

*["addr:street"]["addr:street"=~/ Mal$/] {
assertNoMatch: "way \"addr:street\"=Main Mall";
assertMatch: "way \"addr:street\"=Main Mal";
throwWarning: tr("addr:street={0} contains postfix Mal, should likely be expanded to Mall","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Mall");
group: tr("addr:street contains postfix Mal, should likely be expanded to Mall");
}

*["addr:street"]["addr:street"=~/ Mt$/] {
assertNoMatch: "way \"addr:street\"=Main Mount";
assertMatch: "way \"addr:street\"=Main Mt";
throwWarning: tr("addr:street={0} contains postfix Mt, should likely be expanded to Mount","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Mount");
group: tr("addr:street contains postfix Mt, should likely be expanded to Mount");
}

*["addr:street"]["addr:street"=~/ Mtwy$/] {
assertNoMatch: "way \"addr:street\"=Main Motorway";
assertMatch: "way \"addr:street\"=Main Mtwy";
throwWarning: tr("addr:street={0} contains postfix Mtwy, should likely be expanded to Motorway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Motorway");
group: tr("addr:street contains postfix Mtwy, should likely be expanded to Motorway");
}

*["addr:street"]["addr:street"=~/ Ovps$/] {
assertNoMatch: "way \"addr:street\"=Main Overpass";
assertMatch: "way \"addr:street\"=Main Ovps";
throwWarning: tr("addr:street={0} contains postfix Ovps, should likely be expanded to Overpass","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Overpass");
group: tr("addr:street contains postfix Ovps, should likely be expanded to Overpass");
}

*["addr:street"]["addr:street"=~/ Pky$/] {
assertNoMatch: "way \"addr:street\"=Main Parkway";
assertMatch: "way \"addr:street\"=Main Pky";
throwWarning: tr("addr:street={0} contains postfix Pky, should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Parkway");
group: tr("addr:street contains postfix Pky, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pkwy$/] {
assertNoMatch: "way \"addr:street\"=Main Parkway";
assertMatch: "way \"addr:street\"=Main Pkwy";
throwWarning: tr("addr:street={0} contains postfix Pkwy, should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Parkway");
group: tr("addr:street contains postfix Pkwy, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pl$/] {
assertNoMatch: "way \"addr:street\"=Main Place";
assertMatch: "way \"addr:street\"=Main Pl";
throwWarning: tr("addr:street={0} contains postfix Pl, should likely be expanded to Place","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Place");
group: tr("addr:street contains postfix Pl, should likely be expanded to Place");
}

*["addr:street"]["addr:street"=~/ Plz$/] {
assertNoMatch: "way \"addr:street\"=Main Plaza";
assertMatch: "way \"addr:street\"=Main Plz";
throwWarning: tr("addr:street={0} contains postfix Plz, should likely be expanded to Plaza","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Plaza");
group: tr("addr:street contains postfix Plz, should likely be expanded to Plaza");
}

*["addr:street"]["addr:street"=~/ Pvt$/] {
assertNoMatch: "way \"addr:street\"=Main Private";
assertMatch: "way \"addr:street\"=Main Pvt";
throwWarning: tr("addr:street={0} contains postfix Pvt, should likely be expanded to Private","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Private");
group: tr("addr:street contains postfix Pvt, should likely be expanded to Private");
}

*["addr:street"]["addr:street"=~/ Rd$/] {
assertNoMatch: "way \"addr:street\"=Main Road";
assertMatch: "way \"addr:street\"=Main Rd";
throwWarning: tr("addr:street={0} contains postfix Rd, should likely be expanded to Road","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Road");
group: tr("addr:street contains postfix Rd, should likely be expanded to Road");
}

*["addr:street"]["addr:street"=~/ Rdg$/] {
assertNoMatch: "way \"addr:street\"=Main Ridge";
assertMatch: "way \"addr:street\"=Main Rdg";
throwWarning: tr("addr:street={0} contains postfix Rdg, should likely be expanded to Ridge","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Ridge");
group: tr("addr:street contains postfix Rdg, should likely be expanded to Ridge");
}

*["addr:street"]["addr:street"=~/ Rmrd$/] {
assertNoMatch: "way \"addr:street\"=Main Ranch to Market Road";
assertMatch: "way \"addr:street\"=Main Rmrd";
throwWarning: tr("addr:street={0} contains postfix Rmrd, should likely be expanded to Ranch to Market Road","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Ranch to Market Road");
group: tr("addr:street contains postfix Rmrd, should likely be expanded to Ranch to Market Road");
}

*["addr:street"]["addr:street"=~/ Rte$/] {
assertNoMatch: "way \"addr:street\"=Main Route";
assertMatch: "way \"addr:street\"=Main Rte";
throwWarning: tr("addr:street={0} contains postfix Rte, should likely be expanded to Route","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Route");
group: tr("addr:street contains postfix Rte, should likely be expanded to Route");
}

*["addr:street"]["addr:street"=~/ Skwy$/] {
assertNoMatch: "way \"addr:street\"=Main Skyway";
assertMatch: "way \"addr:street\"=Main Skwy";
throwWarning: tr("addr:street={0} contains postfix Skwy, should likely be expanded to Skyway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Skyway");
group: tr("addr:street contains postfix Skwy, should likely be expanded to Skyway");
}

*["addr:street"]["addr:street"=~/ Sq$/] {
assertNoMatch: "way \"addr:street\"=Main Square";
assertMatch: "way \"addr:street\"=Main Sq";
throwWarning: tr("addr:street={0} contains postfix Sq, should likely be expanded to Square","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Square");
group: tr("addr:street contains postfix Sq, should likely be expanded to Square");
}

*["addr:street"]["addr:street"=~/ Srvc$/] {
assertNoMatch: "way \"addr:street\"=Main Service";
assertMatch: "way \"addr:street\"=Main Srvc";
throwWarning: tr("addr:street={0} contains postfix Srvc, should likely be expanded to Service","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Service");
group: tr("addr:street contains postfix Srvc, should likely be expanded to Service");
}

*["addr:street"]["addr:street"=~/ St$/] {
assertNoMatch: "way \"addr:street\"=Main Street";
assertMatch: "way \"addr:street\"=Main St";
throwWarning: tr("addr:street={0} contains postfix St, should likely be expanded to Street","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Street");
group: tr("addr:street contains postfix St, should likely be expanded to Street");
}

*["addr:street"]["addr:street"=~/ Ter$/] {
assertNoMatch: "way \"addr:street\"=Main Terrace";
assertMatch: "way \"addr:street\"=Main Ter";
throwWarning: tr("addr:street={0} contains postfix Ter, should likely be expanded to Terrace","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Terrace");
group: tr("addr:street contains postfix Ter, should likely be expanded to Terrace");
}

*["addr:street"]["addr:street"=~/ Tfwy$/] {
assertNoMatch: "way \"addr:street\"=Main Trafficway";
assertMatch: "way \"addr:street\"=Main Tfwy";
throwWarning: tr("addr:street={0} contains postfix Tfwy, should likely be expanded to Trafficway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Trafficway");
group: tr("addr:street contains postfix Tfwy, should likely be expanded to Trafficway");
}

*["addr:street"]["addr:street"=~/ Thfr$/] {
assertNoMatch: "way \"addr:street\"=Main Thoroughfare";
assertMatch: "way \"addr:street\"=Main Thfr";
throwWarning: tr("addr:street={0} contains postfix Thfr, should likely be expanded to Thoroughfare","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Thoroughfare");
group: tr("addr:street contains postfix Thfr, should likely be expanded to Thoroughfare");
}

*["addr:street"]["addr:street"=~/ Thwy$/] {
assertNoMatch: "way \"addr:street\"=Main Throughway";
assertMatch: "way \"addr:street\"=Main Thwy";
throwWarning: tr("addr:street={0} contains postfix Thwy, should likely be expanded to Throughway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Throughway");
group: tr("addr:street contains postfix Thwy, should likely be expanded to Throughway");
}

*["addr:street"]["addr:street"=~/ Tl$/] {
assertNoMatch: "way \"addr:street\"=Main Trail";
assertMatch: "way \"addr:street\"=Main Tl";
throwWarning: tr("addr:street={0} contains postfix Tl, should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Trail");
group: tr("addr:street contains postfix Tl, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Tpke$/] {
assertNoMatch: "way \"addr:street\"=Main Turnpike";
assertMatch: "way \"addr:street\"=Main Tpke";
throwWarning: tr("addr:street={0} contains postfix Tpke, should likely be expanded to Turnpike","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Turnpike");
group: tr("addr:street contains postfix Tpke, should likely be expanded to Turnpike");
}

*["addr:street"]["addr:street"=~/ Trce$/] {
assertNoMatch: "way \"addr:street\"=Main Trace";
assertMatch: "way \"addr:street\"=Main Trce";
throwWarning: tr("addr:street={0} contains postfix Trce, should likely be expanded to Trace","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Trace");
group: tr("addr:street contains postfix Trce, should likely be expanded to Trace");
}

*["addr:street"]["addr:street"=~/ Tr$/] {
assertNoMatch: "way \"addr:street\"=Main Trail";
assertMatch: "way \"addr:street\"=Main Tr";
throwWarning: tr("addr:street={0} contains postfix Tr, should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Trail");
group: tr("addr:street contains postfix Tr, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Trl$/] {
assertNoMatch: "way \"addr:street\"=Main Trail";
assertMatch: "way \"addr:street\"=Main Trl";
throwWarning: tr("addr:street={0} contains postfix Trl, should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Trail");
group: tr("addr:street contains postfix Trl, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Tunl$/] {
assertNoMatch: "way \"addr:street\"=Main Tunnel";
assertMatch: "way \"addr:street\"=Main Tunl";
throwWarning: tr("addr:street={0} contains postfix Tunl, should likely be expanded to Tunnel","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Tunnel");
group: tr("addr:street contains postfix Tunl, should likely be expanded to Tunnel");
}

*["addr:street"]["addr:street"=~/ Unp$/] {
assertNoMatch: "way \"addr:street\"=Main Underpass";
assertMatch: "way \"addr:street\"=Main Unp";
throwWarning: tr("addr:street={0} contains postfix Unp, should likely be expanded to Underpass","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Underpass");
group: tr("addr:street contains postfix Unp, should likely be expanded to Underpass");
}

*["addr:street"]["addr:street"=~/ Vly$/] {
assertNoMatch: "way \"addr:street\"=Main Valley";
assertMatch: "way \"addr:street\"=Main Vly";
throwWarning: tr("addr:street={0} contains postfix Vly, should likely be expanded to Valley","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Valley");
group: tr("addr:street contains postfix Vly, should likely be expanded to Valley");
}

*["addr:street"]["addr:street"=~/ Vw$/] {
assertNoMatch: "way \"addr:street\"=Main View";
assertMatch: "way \"addr:street\"=Main Vw";
throwWarning: tr("addr:street={0} contains postfix Vw, should likely be expanded to View","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "View");
group: tr("addr:street contains postfix Vw, should likely be expanded to View");
}

*["addr:street"]["addr:street"=~/ Wkwy$/] {
assertNoMatch: "way \"addr:street\"=Main Walkway";
assertMatch: "way \"addr:street\"=Main Wkwy";
throwWarning: tr("addr:street={0} contains postfix Wkwy, should likely be expanded to Walkway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Walkway");
group: tr("addr:street contains postfix Wkwy, should likely be expanded to Walkway");
}

*["addr:street"]["addr:street"=~/ Wy$/] {
assertNoMatch: "way \"addr:street\"=Main Way";
assertMatch: "way \"addr:street\"=Main Wy";
throwWarning: tr("addr:street={0} contains postfix Wy, should likely be expanded to Way","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-2), "Way");
group: tr("addr:street contains postfix Wy, should likely be expanded to Way");
}

*["addr:street"]["addr:street"=~/ Xing$/] {
assertNoMatch: "way \"addr:street\"=Main Crossing";
assertMatch: "way \"addr:street\"=Main Xing";
throwWarning: tr("addr:street={0} contains postfix Xing, should likely be expanded to Crossing","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Crossing");
group: tr("addr:street contains postfix Xing, should likely be expanded to Crossing");
}

*["name"=~/ Acc$/].highway_name {
assertNoMatch: "way \"name\"=Main Access";
assertMatch: "way \"name\"=Main Acc";
throwWarning: tr("Highway name contains postfix Acc, should likely be expanded to Access");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Access");
}

*["name"=~/ Arc$/].highway_name {
assertNoMatch: "way \"name\"=Main Arcade";
assertMatch: "way \"name\"=Main Arc";
throwWarning: tr("Highway name contains postfix Arc, should likely be expanded to Arcade");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Arcade");
}

*["name"=~/ Av$/].highway_name {
assertNoMatch: "way \"name\"=Main Avenue";
assertMatch: "way \"name\"=Main Av";
throwWarning: tr("Highway name contains postfix Av, should likely be expanded to Avenue");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Avenue");
}

*["name"=~/ Ave$/].highway_name {
assertNoMatch: "way \"name\"=Main Avenue";
assertMatch: "way \"name\"=Main Ave";
throwWarning: tr("Highway name contains postfix Ave, should likely be expanded to Avenue");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Avenue");
}

*["name"=~/ Blf$/].highway_name {
assertNoMatch: "way \"name\"=Main Bluff";
assertMatch: "way \"name\"=Main Blf";
throwWarning: tr("Highway name contains postfix Blf, should likely be expanded to Bluff");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Bluff");
}

*["name"=~/ Blvd$/].highway_name {
assertNoMatch: "way \"name\"=Main Boulevard";
assertMatch: "way \"name\"=Main Blvd";
throwWarning: tr("Highway name contains postfix Blvd, should likely be expanded to Boulevard");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Boulevard");
}

*["name"=~/ Bnd$/].highway_name {
assertNoMatch: "way \"name\"=Main Bend";
assertMatch: "way \"name\"=Main Bnd";
throwWarning: tr("Highway name contains postfix Bnd, should likely be expanded to Bend");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Bend");
}

*["name"=~/ Br$/].highway_name {
assertNoMatch: "way \"name\"=Main Bridge";
assertMatch: "way \"name\"=Main Br";
throwWarning: tr("Highway name contains postfix Br, should likely be expanded to Bridge");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Bridge");
}

*["name"=~/ Brg$/].highway_name {
assertNoMatch: "way \"name\"=Main Bridge";
assertMatch: "way \"name\"=Main Brg";
throwWarning: tr("Highway name contains postfix Brg, should likely be expanded to Bridge");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Bridge");
}

*["name"=~/ Byp$/].highway_name {
assertNoMatch: "way \"name\"=Main Bypass";
assertMatch: "way \"name\"=Main Byp";
throwWarning: tr("Highway name contains postfix Byp, should likely be expanded to Bypass");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Bypass");
}

*["name"=~/ Cir$/].highway_name {
assertNoMatch: "way \"name\"=Main Circle";
assertMatch: "way \"name\"=Main Cir";
throwWarning: tr("Highway name contains postfix Cir, should likely be expanded to Circle");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Circle");
}

*["name"=~/ Cr$/].highway_name {
assertNoMatch: "way \"name\"=Main Creek";
assertMatch: "way \"name\"=Main Cr";
throwWarning: tr("Highway name contains postfix Cr, should likely be expanded to Creek");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Creek");
}

*["name"=~/ Cres$/].highway_name {
assertNoMatch: "way \"name\"=Main Crescent";
assertMatch: "way \"name\"=Main Cres";
throwWarning: tr("Highway name contains postfix Cres, should likely be expanded to Crescent");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Crescent");
}

*["name"=~/ Cswy$/].highway_name {
assertNoMatch: "way \"name\"=Main Causeway";
assertMatch: "way \"name\"=Main Cswy";
throwWarning: tr("Highway name contains postfix Cswy, should likely be expanded to Causeway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Causeway");
}

*["name"=~/ Ct$/].highway_name {
assertNoMatch: "way \"name\"=Main Court";
assertMatch: "way \"name\"=Main Ct";
throwWarning: tr("Highway name contains postfix Ct, should likely be expanded to Court");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Court");
}

*["name"=~/ Ctr$/].highway_name {
assertNoMatch: "way \"name\"=Main Center";
assertMatch: "way \"name\"=Main Ctr";
throwWarning: tr("Highway name contains postfix Ctr, should likely be expanded to Center");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Center");
}

*["name"=~/ Cv$/].highway_name {
assertNoMatch: "way \"name\"=Main Cove";
assertMatch: "way \"name\"=Main Cv";
throwWarning: tr("Highway name contains postfix Cv, should likely be expanded to Cove");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Cove");
}

*["name"=~/ Dr$/].highway_name {
assertNoMatch: "way \"name\"=Main Drive";
assertMatch: "way \"name\"=Main Dr";
throwWarning: tr("Highway name contains postfix Dr, should likely be expanded to Drive");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Drive");
}

*["name"=~/ Expy$/].highway_name {
assertNoMatch: "way \"name\"=Main Expressway";
assertMatch: "way \"name\"=Main Expy";
throwWarning: tr("Highway name contains postfix Expy, should likely be expanded to Expressway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Expressway");
}

*["name"=~/ Expwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Expressway";
assertMatch: "way \"name\"=Main Expwy";
throwWarning: tr("Highway name contains postfix Expwy, should likely be expanded to Expressway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Expressway");
}

*["name"=~/ Flds$/].highway_name {
assertNoMatch: "way \"name\"=Main Fields";
assertMatch: "way \"name\"=Main Flds";
throwWarning: tr("Highway name contains postfix Flds, should likely be expanded to Fields");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Fields");
}

*["name"=~/ Fmrd$/].highway_name {
assertNoMatch: "way \"name\"=Main Farm to Market Road";
assertMatch: "way \"name\"=Main Fmrd";
throwWarning: tr("Highway name contains postfix Fmrd, should likely be expanded to Farm to Market Road");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Farm to Market Road");
}

*["name"=~/ Fwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Freeway";
assertMatch: "way \"name\"=Main Fwy";
throwWarning: tr("Highway name contains postfix Fwy, should likely be expanded to Freeway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Freeway");
}

*["name"=~/ Gd$/].highway_name {
assertNoMatch: "way \"name\"=Main Grade";
assertMatch: "way \"name\"=Main Gd";
throwWarning: tr("Highway name contains postfix Gd, should likely be expanded to Grade");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Grade");
}

*["name"=~/ Grv$/].highway_name {
assertNoMatch: "way \"name\"=Main Grove";
assertMatch: "way \"name\"=Main Grv";
throwWarning: tr("Highway name contains postfix Grv, should likely be expanded to Grove");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Grove");
}

*["name"=~/ Hbr$/].highway_name {
assertNoMatch: "way \"name\"=Main Harbor";
assertMatch: "way \"name\"=Main Hbr";
throwWarning: tr("Highway name contains postfix Hbr, should likely be expanded to Harbor");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Harbor");
}

*["name"=~/ Holw$/].highway_name {
assertNoMatch: "way \"name\"=Main Hollow";
assertMatch: "way \"name\"=Main Holw";
throwWarning: tr("Highway name contains postfix Holw, should likely be expanded to Hollow");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Hollow");
}

*["name"=~/ Hts$/].highway_name {
assertNoMatch: "way \"name\"=Main Heights";
assertMatch: "way \"name\"=Main Hts";
throwWarning: tr("Highway name contains postfix Hts, should likely be expanded to Heights");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Heights");
}

*["name"=~/ Hw$/].highway_name {
assertNoMatch: "way \"name\"=Main Highway";
assertMatch: "way \"name\"=Main Hw";
throwWarning: tr("Highway name contains postfix Hw, should likely be expanded to Highway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Highway");
}

*["name"=~/ Hwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Highway";
assertMatch: "way \"name\"=Main Hwy";
throwWarning: tr("Highway name contains postfix Hwy, should likely be expanded to Highway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Highway");
}

*["name"=~/ Lk$/].highway_name {
assertNoMatch: "way \"name\"=Main Lake";
assertMatch: "way \"name\"=Main Lk";
throwWarning: tr("Highway name contains postfix Lk, should likely be expanded to Lake");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Lake");
}

*["name"=~/ Ln$/].highway_name {
assertNoMatch: "way \"name\"=Main Lane";
assertMatch: "way \"name\"=Main Ln";
throwWarning: tr("Highway name contains postfix Ln, should likely be expanded to Lane");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Lane");
}

*["name"=~/ Lndg$/].highway_name {
assertNoMatch: "way \"name\"=Main Landing";
assertMatch: "way \"name\"=Main Lndg";
throwWarning: tr("Highway name contains postfix Lndg, should likely be expanded to Landing");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Landing");
}

*["name"=~/ Lp$/].highway_name {
assertNoMatch: "way \"name\"=Main Loop";
assertMatch: "way \"name\"=Main Lp";
throwWarning: tr("Highway name contains postfix Lp, should likely be expanded to Loop");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Loop");
}

*["name"=~/ Mal$/].highway_name {
assertNoMatch: "way \"name\"=Main Mall";
assertMatch: "way \"name\"=Main Mal";
throwWarning: tr("Highway name contains postfix Mal, should likely be expanded to Mall");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Mall");
}

*["name"=~/ Mt$/].highway_name {
assertNoMatch: "way \"name\"=Main Mount";
assertMatch: "way \"name\"=Main Mt";
throwWarning: tr("Highway name contains postfix Mt, should likely be expanded to Mount");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Mount");
}

*["name"=~/ Mtwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Motorway";
assertMatch: "way \"name\"=Main Mtwy";
throwWarning: tr("Highway name contains postfix Mtwy, should likely be expanded to Motorway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Motorway");
}

*["name"=~/ Ovps$/].highway_name {
assertNoMatch: "way \"name\"=Main Overpass";
assertMatch: "way \"name\"=Main Ovps";
throwWarning: tr("Highway name contains postfix Ovps, should likely be expanded to Overpass");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Overpass");
}

*["name"=~/ Pky$/].highway_name {
assertNoMatch: "way \"name\"=Main Parkway";
assertMatch: "way \"name\"=Main Pky";
throwWarning: tr("Highway name contains postfix Pky, should likely be expanded to Parkway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Parkway");
}

*["name"=~/ Pkwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Parkway";
assertMatch: "way \"name\"=Main Pkwy";
throwWarning: tr("Highway name contains postfix Pkwy, should likely be expanded to Parkway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Parkway");
}

*["name"=~/ Pl$/].highway_name {
assertNoMatch: "way \"name\"=Main Place";
assertMatch: "way \"name\"=Main Pl";
throwWarning: tr("Highway name contains postfix Pl, should likely be expanded to Place");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Place");
}

*["name"=~/ Plz$/].highway_name {
assertNoMatch: "way \"name\"=Main Plaza";
assertMatch: "way \"name\"=Main Plz";
throwWarning: tr("Highway name contains postfix Plz, should likely be expanded to Plaza");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Plaza");
}

*["name"=~/ Pvt$/].highway_name {
assertNoMatch: "way \"name\"=Main Private";
assertMatch: "way \"name\"=Main Pvt";
throwWarning: tr("Highway name contains postfix Pvt, should likely be expanded to Private");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Private");
}

*["name"=~/ Rd$/].highway_name {
assertNoMatch: "way \"name\"=Main Road";
assertMatch: "way \"name\"=Main Rd";
throwWarning: tr("Highway name contains postfix Rd, should likely be expanded to Road");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Road");
}

*["name"=~/ Rdg$/].highway_name {
assertNoMatch: "way \"name\"=Main Ridge";
assertMatch: "way \"name\"=Main Rdg";
throwWarning: tr("Highway name contains postfix Rdg, should likely be expanded to Ridge");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Ridge");
}

*["name"=~/ Rmrd$/].highway_name {
assertNoMatch: "way \"name\"=Main Ranch to Market Road";
assertMatch: "way \"name\"=Main Rmrd";
throwWarning: tr("Highway name contains postfix Rmrd, should likely be expanded to Ranch to Market Road");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Ranch to Market Road");
}

*["name"=~/ Rte$/].highway_name {
assertNoMatch: "way \"name\"=Main Route";
assertMatch: "way \"name\"=Main Rte";
throwWarning: tr("Highway name contains postfix Rte, should likely be expanded to Route");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Route");
}

*["name"=~/ Skwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Skyway";
assertMatch: "way \"name\"=Main Skwy";
throwWarning: tr("Highway name contains postfix Skwy, should likely be expanded to Skyway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Skyway");
}

*["name"=~/ Sq$/].highway_name {
assertNoMatch: "way \"name\"=Main Square";
assertMatch: "way \"name\"=Main Sq";
throwWarning: tr("Highway name contains postfix Sq, should likely be expanded to Square");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Square");
}

*["name"=~/ Srvc$/].highway_name {
assertNoMatch: "way \"name\"=Main Service";
assertMatch: "way \"name\"=Main Srvc";
throwWarning: tr("Highway name contains postfix Srvc, should likely be expanded to Service");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Service");
}

*["name"=~/ St$/].highway_name {
assertNoMatch: "way \"name\"=Main Street";
assertMatch: "way \"name\"=Main St";
throwWarning: tr("Highway name contains postfix St, should likely be expanded to Street");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Street");
}

*["name"=~/ Ter$/].highway_name {
assertNoMatch: "way \"name\"=Main Terrace";
assertMatch: "way \"name\"=Main Ter";
throwWarning: tr("Highway name contains postfix Ter, should likely be expanded to Terrace");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Terrace");
}

*["name"=~/ Tfwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Trafficway";
assertMatch: "way \"name\"=Main Tfwy";
throwWarning: tr("Highway name contains postfix Tfwy, should likely be expanded to Trafficway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Trafficway");
}

*["name"=~/ Thfr$/].highway_name {
assertNoMatch: "way \"name\"=Main Thoroughfare";
assertMatch: "way \"name\"=Main Thfr";
throwWarning: tr("Highway name contains postfix Thfr, should likely be expanded to Thoroughfare");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Thoroughfare");
}

*["name"=~/ Thwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Throughway";
assertMatch: "way \"name\"=Main Thwy";
throwWarning: tr("Highway name contains postfix Thwy, should likely be expanded to Throughway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Throughway");
}

*["name"=~/ Tl$/].highway_name {
assertNoMatch: "way \"name\"=Main Trail";
assertMatch: "way \"name\"=Main Tl";
throwWarning: tr("Highway name contains postfix Tl, should likely be expanded to Trail");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Trail");
}

*["name"=~/ Tpke$/].highway_name {
assertNoMatch: "way \"name\"=Main Turnpike";
assertMatch: "way \"name\"=Main Tpke";
throwWarning: tr("Highway name contains postfix Tpke, should likely be expanded to Turnpike");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Turnpike");
}

*["name"=~/ Trce$/].highway_name {
assertNoMatch: "way \"name\"=Main Trace";
assertMatch: "way \"name\"=Main Trce";
throwWarning: tr("Highway name contains postfix Trce, should likely be expanded to Trace");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Trace");
}

*["name"=~/ Tr$/].highway_name {
assertNoMatch: "way \"name\"=Main Trail";
assertMatch: "way \"name\"=Main Tr";
throwWarning: tr("Highway name contains postfix Tr, should likely be expanded to Trail");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Trail");
}

*["name"=~/ Trl$/].highway_name {
assertNoMatch: "way \"name\"=Main Trail";
assertMatch: "way \"name\"=Main Trl";
throwWarning: tr("Highway name contains postfix Trl, should likely be expanded to Trail");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Trail");
}

*["name"=~/ Tunl$/].highway_name {
assertNoMatch: "way \"name\"=Main Tunnel";
assertMatch: "way \"name\"=Main Tunl";
throwWarning: tr("Highway name contains postfix Tunl, should likely be expanded to Tunnel");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Tunnel");
}

*["name"=~/ Unp$/].highway_name {
assertNoMatch: "way \"name\"=Main Underpass";
assertMatch: "way \"name\"=Main Unp";
throwWarning: tr("Highway name contains postfix Unp, should likely be expanded to Underpass");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Underpass");
}

*["name"=~/ Vly$/].highway_name {
assertNoMatch: "way \"name\"=Main Valley";
assertMatch: "way \"name\"=Main Vly";
throwWarning: tr("Highway name contains postfix Vly, should likely be expanded to Valley");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Valley");
}

*["name"=~/ Vw$/].highway_name {
assertNoMatch: "way \"name\"=Main View";
assertMatch: "way \"name\"=Main Vw";
throwWarning: tr("Highway name contains postfix Vw, should likely be expanded to View");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "View");
}

*["name"=~/ Wkwy$/].highway_name {
assertNoMatch: "way \"name\"=Main Walkway";
assertMatch: "way \"name\"=Main Wkwy";
throwWarning: tr("Highway name contains postfix Wkwy, should likely be expanded to Walkway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Walkway");
}

*["name"=~/ Wy$/].highway_name {
assertNoMatch: "way \"name\"=Main Way";
assertMatch: "way \"name\"=Main Wy";
throwWarning: tr("Highway name contains postfix Wy, should likely be expanded to Way");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-2), "Way");
}

*["name"=~/ Xing$/].highway_name {
assertNoMatch: "way \"name\"=Main Crossing";
assertMatch: "way \"name\"=Main Xing";
throwWarning: tr("Highway name contains postfix Xing, should likely be expanded to Crossing");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Crossing");
}

*["addr:street"]["addr:street"=~/ Acc\.$/] {
assertNoMatch: "way \"addr:street\"=Main Access";
assertMatch: "way \"addr:street\"=Main Acc.";
throwWarning: tr("addr:street={0} contains prefix Acc., should likely be expanded to Access","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Access");
group: tr("addr:street contains postfix Acc, should likely be expanded to Access");
}

*["addr:street"]["addr:street"=~/ Arc\.$/] {
assertNoMatch: "way \"addr:street\"=Main Arcade";
assertMatch: "way \"addr:street\"=Main Arc.";
throwWarning: tr("addr:street={0} contains prefix Arc., should likely be expanded to Arcade","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Arcade");
group: tr("addr:street contains postfix Arc, should likely be expanded to Arcade");
}

*["addr:street"]["addr:street"=~/ Av\.$/] {
assertNoMatch: "way \"addr:street\"=Main Avenue";
assertMatch: "way \"addr:street\"=Main Av.";
throwWarning: tr("addr:street={0} contains prefix Av., should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Avenue");
group: tr("addr:street contains postfix Av, should likely be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/ Ave\.$/] {
assertNoMatch: "way \"addr:street\"=Main Avenue";
assertMatch: "way \"addr:street\"=Main Ave.";
throwWarning: tr("addr:street={0} contains prefix Ave., should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Avenue");
group: tr("addr:street contains postfix Ave, should likely be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/ Blf\.$/] {
assertNoMatch: "way \"addr:street\"=Main Bluff";
assertMatch: "way \"addr:street\"=Main Blf.";
throwWarning: tr("addr:street={0} contains prefix Blf., should likely be expanded to Bluff","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Bluff");
group: tr("addr:street contains postfix Blf, should likely be expanded to Bluff");
}

*["addr:street"]["addr:street"=~/ Blvd\.$/] {
assertNoMatch: "way \"addr:street\"=Main Boulevard";
assertMatch: "way \"addr:street\"=Main Blvd.";
throwWarning: tr("addr:street={0} contains prefix Blvd., should likely be expanded to Boulevard","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Boulevard");
group: tr("addr:street contains postfix Blvd, should likely be expanded to Boulevard");
}

*["addr:street"]["addr:street"=~/ Bnd\.$/] {
assertNoMatch: "way \"addr:street\"=Main Bend";
assertMatch: "way \"addr:street\"=Main Bnd.";
throwWarning: tr("addr:street={0} contains prefix Bnd., should likely be expanded to Bend","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Bend");
group: tr("addr:street contains postfix Bnd, should likely be expanded to Bend");
}

*["addr:street"]["addr:street"=~/ Br\.$/] {
assertNoMatch: "way \"addr:street\"=Main Bridge";
assertMatch: "way \"addr:street\"=Main Br.";
throwWarning: tr("addr:street={0} contains prefix Br., should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Bridge");
group: tr("addr:street contains postfix Br, should likely be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/ Brg\.$/] {
assertNoMatch: "way \"addr:street\"=Main Bridge";
assertMatch: "way \"addr:street\"=Main Brg.";
throwWarning: tr("addr:street={0} contains prefix Brg., should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Bridge");
group: tr("addr:street contains postfix Brg, should likely be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/ Byp\.$/] {
assertNoMatch: "way \"addr:street\"=Main Bypass";
assertMatch: "way \"addr:street\"=Main Byp.";
throwWarning: tr("addr:street={0} contains prefix Byp., should likely be expanded to Bypass","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Bypass");
group: tr("addr:street contains postfix Byp, should likely be expanded to Bypass");
}

*["addr:street"]["addr:street"=~/ Cir\.$/] {
assertNoMatch: "way \"addr:street\"=Main Circle";
assertMatch: "way \"addr:street\"=Main Cir.";
throwWarning: tr("addr:street={0} contains prefix Cir., should likely be expanded to Circle","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Circle");
group: tr("addr:street contains postfix Cir, should likely be expanded to Circle");
}

*["addr:street"]["addr:street"=~/ Cr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Creek";
assertMatch: "way \"addr:street\"=Main Cr.";
throwWarning: tr("addr:street={0} contains prefix Cr., should likely be expanded to Creek","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Creek");
group: tr("addr:street contains postfix Cr, should likely be expanded to Creek");
}

*["addr:street"]["addr:street"=~/ Cres\.$/] {
assertNoMatch: "way \"addr:street\"=Main Crescent";
assertMatch: "way \"addr:street\"=Main Cres.";
throwWarning: tr("addr:street={0} contains prefix Cres., should likely be expanded to Crescent","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Crescent");
group: tr("addr:street contains postfix Cres, should likely be expanded to Crescent");
}

*["addr:street"]["addr:street"=~/ Cswy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Causeway";
assertMatch: "way \"addr:street\"=Main Cswy.";
throwWarning: tr("addr:street={0} contains prefix Cswy., should likely be expanded to Causeway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Causeway");
group: tr("addr:street contains postfix Cswy, should likely be expanded to Causeway");
}

*["addr:street"]["addr:street"=~/ Ct\.$/] {
assertNoMatch: "way \"addr:street\"=Main Court";
assertMatch: "way \"addr:street\"=Main Ct.";
throwWarning: tr("addr:street={0} contains prefix Ct., should likely be expanded to Court","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Court");
group: tr("addr:street contains postfix Ct, should likely be expanded to Court");
}

*["addr:street"]["addr:street"=~/ Ctr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Center";
assertMatch: "way \"addr:street\"=Main Ctr.";
throwWarning: tr("addr:street={0} contains prefix Ctr., should likely be expanded to Center","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Center");
group: tr("addr:street contains postfix Ctr, should likely be expanded to Center");
}

*["addr:street"]["addr:street"=~/ Cv\.$/] {
assertNoMatch: "way \"addr:street\"=Main Cove";
assertMatch: "way \"addr:street\"=Main Cv.";
throwWarning: tr("addr:street={0} contains prefix Cv., should likely be expanded to Cove","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Cove");
group: tr("addr:street contains postfix Cv, should likely be expanded to Cove");
}

*["addr:street"]["addr:street"=~/ Dr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Drive";
assertMatch: "way \"addr:street\"=Main Dr.";
throwWarning: tr("addr:street={0} contains prefix Dr., should likely be expanded to Drive","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Drive");
group: tr("addr:street contains postfix Dr, should likely be expanded to Drive");
}

*["addr:street"]["addr:street"=~/ Expy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Expressway";
assertMatch: "way \"addr:street\"=Main Expy.";
throwWarning: tr("addr:street={0} contains prefix Expy., should likely be expanded to Expressway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Expressway");
group: tr("addr:street contains postfix Expy, should likely be expanded to Expressway");
}

*["addr:street"]["addr:street"=~/ Expwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Expressway";
assertMatch: "way \"addr:street\"=Main Expwy.";
throwWarning: tr("addr:street={0} contains prefix Expwy., should likely be expanded to Expressway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-6), "Expressway");
group: tr("addr:street contains postfix Expwy, should likely be expanded to Expressway");
}

*["addr:street"]["addr:street"=~/ Flds\.$/] {
assertNoMatch: "way \"addr:street\"=Main Fields";
assertMatch: "way \"addr:street\"=Main Flds.";
throwWarning: tr("addr:street={0} contains prefix Flds., should likely be expanded to Fields","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Fields");
group: tr("addr:street contains postfix Flds, should likely be expanded to Fields");
}

*["addr:street"]["addr:street"=~/ Fmrd\.$/] {
assertNoMatch: "way \"addr:street\"=Main Farm to Market Road";
assertMatch: "way \"addr:street\"=Main Fmrd.";
throwWarning: tr("addr:street={0} contains prefix Fmrd., should likely be expanded to Farm to Market Road","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Farm to Market Road");
group: tr("addr:street contains postfix Fmrd, should likely be expanded to Farm to Market Road");
}

*["addr:street"]["addr:street"=~/ Fwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Freeway";
assertMatch: "way \"addr:street\"=Main Fwy.";
throwWarning: tr("addr:street={0} contains prefix Fwy., should likely be expanded to Freeway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Freeway");
group: tr("addr:street contains postfix Fwy, should likely be expanded to Freeway");
}

*["addr:street"]["addr:street"=~/ Gd\.$/] {
assertNoMatch: "way \"addr:street\"=Main Grade";
assertMatch: "way \"addr:street\"=Main Gd.";
throwWarning: tr("addr:street={0} contains prefix Gd., should likely be expanded to Grade","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Grade");
group: tr("addr:street contains postfix Gd, should likely be expanded to Grade");
}

*["addr:street"]["addr:street"=~/ Grv\.$/] {
assertNoMatch: "way \"addr:street\"=Main Grove";
assertMatch: "way \"addr:street\"=Main Grv.";
throwWarning: tr("addr:street={0} contains prefix Grv., should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Grove");
group: tr("addr:street contains postfix Grv, should likely be expanded to Grove");
}

*["addr:street"]["addr:street"=~/ Hbr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Harbor";
assertMatch: "way \"addr:street\"=Main Hbr.";
throwWarning: tr("addr:street={0} contains prefix Hbr., should likely be expanded to Harbor","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Harbor");
group: tr("addr:street contains postfix Hbr, should likely be expanded to Harbor");
}

*["addr:street"]["addr:street"=~/ Holw\.$/] {
assertNoMatch: "way \"addr:street\"=Main Hollow";
assertMatch: "way \"addr:street\"=Main Holw.";
throwWarning: tr("addr:street={0} contains prefix Holw., should likely be expanded to Hollow","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Hollow");
group: tr("addr:street contains postfix Holw, should likely be expanded to Hollow");
}

*["addr:street"]["addr:street"=~/ Hts\.$/] {
assertNoMatch: "way \"addr:street\"=Main Heights";
assertMatch: "way \"addr:street\"=Main Hts.";
throwWarning: tr("addr:street={0} contains prefix Hts., should likely be expanded to Heights","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Heights");
group: tr("addr:street contains postfix Hts, should likely be expanded to Heights");
}

*["addr:street"]["addr:street"=~/ Hw\.$/] {
assertNoMatch: "way \"addr:street\"=Main Highway";
assertMatch: "way \"addr:street\"=Main Hw.";
throwWarning: tr("addr:street={0} contains prefix Hw., should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Highway");
group: tr("addr:street contains postfix Hw, should likely be expanded to Highway");
}

*["addr:street"]["addr:street"=~/ Hwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Highway";
assertMatch: "way \"addr:street\"=Main Hwy.";
throwWarning: tr("addr:street={0} contains prefix Hwy., should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Highway");
group: tr("addr:street contains postfix Hwy, should likely be expanded to Highway");
}

*["addr:street"]["addr:street"=~/ Lk\.$/] {
assertNoMatch: "way \"addr:street\"=Main Lake";
assertMatch: "way \"addr:street\"=Main Lk.";
throwWarning: tr("addr:street={0} contains prefix Lk., should likely be expanded to Lake","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Lake");
group: tr("addr:street contains postfix Lk, should likely be expanded to Lake");
}

*["addr:street"]["addr:street"=~/ Ln\.$/] {
assertNoMatch: "way \"addr:street\"=Main Lane";
assertMatch: "way \"addr:street\"=Main Ln.";
throwWarning: tr("addr:street={0} contains prefix Ln., should likely be expanded to Lane","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Lane");
group: tr("addr:street contains postfix Ln, should likely be expanded to Lane");
}

*["addr:street"]["addr:street"=~/ Lndg\.$/] {
assertNoMatch: "way \"addr:street\"=Main Landing";
assertMatch: "way \"addr:street\"=Main Lndg.";
throwWarning: tr("addr:street={0} contains prefix Lndg., should likely be expanded to Landing","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Landing");
group: tr("addr:street contains postfix Lndg, should likely be expanded to Landing");
}

*["addr:street"]["addr:street"=~/ Lp\.$/] {
assertNoMatch: "way \"addr:street\"=Main Loop";
assertMatch: "way \"addr:street\"=Main Lp.";
throwWarning: tr("addr:street={0} contains prefix Lp., should likely be expanded to Loop","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Loop");
group: tr("addr:street contains postfix Lp, should likely be expanded to Loop");
}

*["addr:street"]["addr:street"=~/ Mal\.$/] {
assertNoMatch: "way \"addr:street\"=Main Mall";
assertMatch: "way \"addr:street\"=Main Mal.";
throwWarning: tr("addr:street={0} contains prefix Mal., should likely be expanded to Mall","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Mall");
group: tr("addr:street contains postfix Mal, should likely be expanded to Mall");
}

*["addr:street"]["addr:street"=~/ Mt\.$/] {
assertNoMatch: "way \"addr:street\"=Main Mount";
assertMatch: "way \"addr:street\"=Main Mt.";
throwWarning: tr("addr:street={0} contains prefix Mt., should likely be expanded to Mount","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Mount");
group: tr("addr:street contains postfix Mt, should likely be expanded to Mount");
}

*["addr:street"]["addr:street"=~/ Mtwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Motorway";
assertMatch: "way \"addr:street\"=Main Mtwy.";
throwWarning: tr("addr:street={0} contains prefix Mtwy., should likely be expanded to Motorway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Motorway");
group: tr("addr:street contains postfix Mtwy, should likely be expanded to Motorway");
}

*["addr:street"]["addr:street"=~/ Ovps\.$/] {
assertNoMatch: "way \"addr:street\"=Main Overpass";
assertMatch: "way \"addr:street\"=Main Ovps.";
throwWarning: tr("addr:street={0} contains prefix Ovps., should likely be expanded to Overpass","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Overpass");
group: tr("addr:street contains postfix Ovps, should likely be expanded to Overpass");
}

*["addr:street"]["addr:street"=~/ Pky\.$/] {
assertNoMatch: "way \"addr:street\"=Main Parkway";
assertMatch: "way \"addr:street\"=Main Pky.";
throwWarning: tr("addr:street={0} contains prefix Pky., should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Parkway");
group: tr("addr:street contains postfix Pky, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pkwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Parkway";
assertMatch: "way \"addr:street\"=Main Pkwy.";
throwWarning: tr("addr:street={0} contains prefix Pkwy., should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Parkway");
group: tr("addr:street contains postfix Pkwy, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Place";
assertMatch: "way \"addr:street\"=Main Pl.";
throwWarning: tr("addr:street={0} contains prefix Pl., should likely be expanded to Place","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Place");
group: tr("addr:street contains postfix Pl, should likely be expanded to Place");
}

*["addr:street"]["addr:street"=~/ Plz\.$/] {
assertNoMatch: "way \"addr:street\"=Main Plaza";
assertMatch: "way \"addr:street\"=Main Plz.";
throwWarning: tr("addr:street={0} contains prefix Plz., should likely be expanded to Plaza","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Plaza");
group: tr("addr:street contains postfix Plz, should likely be expanded to Plaza");
}

*["addr:street"]["addr:street"=~/ Pvt\.$/] {
assertNoMatch: "way \"addr:street\"=Main Private";
assertMatch: "way \"addr:street\"=Main Pvt.";
throwWarning: tr("addr:street={0} contains prefix Pvt., should likely be expanded to Private","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Private");
group: tr("addr:street contains postfix Pvt, should likely be expanded to Private");
}

*["addr:street"]["addr:street"=~/ Rd\.$/] {
assertNoMatch: "way \"addr:street\"=Main Road";
assertMatch: "way \"addr:street\"=Main Rd.";
throwWarning: tr("addr:street={0} contains prefix Rd., should likely be expanded to Road","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Road");
group: tr("addr:street contains postfix Rd, should likely be expanded to Road");
}

*["addr:street"]["addr:street"=~/ Rdg\.$/] {
assertNoMatch: "way \"addr:street\"=Main Ridge";
assertMatch: "way \"addr:street\"=Main Rdg.";
throwWarning: tr("addr:street={0} contains prefix Rdg., should likely be expanded to Ridge","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Ridge");
group: tr("addr:street contains postfix Rdg, should likely be expanded to Ridge");
}

*["addr:street"]["addr:street"=~/ Rmrd\.$/] {
assertNoMatch: "way \"addr:street\"=Main Ranch to Market Road";
assertMatch: "way \"addr:street\"=Main Rmrd.";
throwWarning: tr("addr:street={0} contains prefix Rmrd., should likely be expanded to Ranch to Market Road","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Ranch to Market Road");
group: tr("addr:street contains postfix Rmrd, should likely be expanded to Ranch to Market Road");
}

*["addr:street"]["addr:street"=~/ Rte\.$/] {
assertNoMatch: "way \"addr:street\"=Main Route";
assertMatch: "way \"addr:street\"=Main Rte.";
throwWarning: tr("addr:street={0} contains prefix Rte., should likely be expanded to Route","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Route");
group: tr("addr:street contains postfix Rte, should likely be expanded to Route");
}

*["addr:street"]["addr:street"=~/ Skwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Skyway";
assertMatch: "way \"addr:street\"=Main Skwy.";
throwWarning: tr("addr:street={0} contains prefix Skwy., should likely be expanded to Skyway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Skyway");
group: tr("addr:street contains postfix Skwy, should likely be expanded to Skyway");
}

*["addr:street"]["addr:street"=~/ Sq\.$/] {
assertNoMatch: "way \"addr:street\"=Main Square";
assertMatch: "way \"addr:street\"=Main Sq.";
throwWarning: tr("addr:street={0} contains prefix Sq., should likely be expanded to Square","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Square");
group: tr("addr:street contains postfix Sq, should likely be expanded to Square");
}

*["addr:street"]["addr:street"=~/ Srvc\.$/] {
assertNoMatch: "way \"addr:street\"=Main Service";
assertMatch: "way \"addr:street\"=Main Srvc.";
throwWarning: tr("addr:street={0} contains prefix Srvc., should likely be expanded to Service","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Service");
group: tr("addr:street contains postfix Srvc, should likely be expanded to Service");
}

*["addr:street"]["addr:street"=~/ St\.$/] {
assertNoMatch: "way \"addr:street\"=Main Street";
assertMatch: "way \"addr:street\"=Main St.";
throwWarning: tr("addr:street={0} contains prefix St., should likely be expanded to Street","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Street");
group: tr("addr:street contains postfix St, should likely be expanded to Street");
}

*["addr:street"]["addr:street"=~/ Ter\.$/] {
assertNoMatch: "way \"addr:street\"=Main Terrace";
assertMatch: "way \"addr:street\"=Main Ter.";
throwWarning: tr("addr:street={0} contains prefix Ter., should likely be expanded to Terrace","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Terrace");
group: tr("addr:street contains postfix Ter, should likely be expanded to Terrace");
}

*["addr:street"]["addr:street"=~/ Tfwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Trafficway";
assertMatch: "way \"addr:street\"=Main Tfwy.";
throwWarning: tr("addr:street={0} contains prefix Tfwy., should likely be expanded to Trafficway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Trafficway");
group: tr("addr:street contains postfix Tfwy, should likely be expanded to Trafficway");
}

*["addr:street"]["addr:street"=~/ Thfr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Thoroughfare";
assertMatch: "way \"addr:street\"=Main Thfr.";
throwWarning: tr("addr:street={0} contains prefix Thfr., should likely be expanded to Thoroughfare","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Thoroughfare");
group: tr("addr:street contains postfix Thfr, should likely be expanded to Thoroughfare");
}

*["addr:street"]["addr:street"=~/ Thwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Throughway";
assertMatch: "way \"addr:street\"=Main Thwy.";
throwWarning: tr("addr:street={0} contains prefix Thwy., should likely be expanded to Throughway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Throughway");
group: tr("addr:street contains postfix Thwy, should likely be expanded to Throughway");
}

*["addr:street"]["addr:street"=~/ Tl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Trail";
assertMatch: "way \"addr:street\"=Main Tl.";
throwWarning: tr("addr:street={0} contains prefix Tl., should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Trail");
group: tr("addr:street contains postfix Tl, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Tpke\.$/] {
assertNoMatch: "way \"addr:street\"=Main Turnpike";
assertMatch: "way \"addr:street\"=Main Tpke.";
throwWarning: tr("addr:street={0} contains prefix Tpke., should likely be expanded to Turnpike","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Turnpike");
group: tr("addr:street contains postfix Tpke, should likely be expanded to Turnpike");
}

*["addr:street"]["addr:street"=~/ Trce\.$/] {
assertNoMatch: "way \"addr:street\"=Main Trace";
assertMatch: "way \"addr:street\"=Main Trce.";
throwWarning: tr("addr:street={0} contains prefix Trce., should likely be expanded to Trace","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Trace");
group: tr("addr:street contains postfix Trce, should likely be expanded to Trace");
}

*["addr:street"]["addr:street"=~/ Tr\.$/] {
assertNoMatch: "way \"addr:street\"=Main Trail";
assertMatch: "way \"addr:street\"=Main Tr.";
throwWarning: tr("addr:street={0} contains prefix Tr., should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Trail");
group: tr("addr:street contains postfix Tr, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Trl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Trail";
assertMatch: "way \"addr:street\"=Main Trl.";
throwWarning: tr("addr:street={0} contains prefix Trl., should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Trail");
group: tr("addr:street contains postfix Trl, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Tunl\.$/] {
assertNoMatch: "way \"addr:street\"=Main Tunnel";
assertMatch: "way \"addr:street\"=Main Tunl.";
throwWarning: tr("addr:street={0} contains prefix Tunl., should likely be expanded to Tunnel","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Tunnel");
group: tr("addr:street contains postfix Tunl, should likely be expanded to Tunnel");
}

*["addr:street"]["addr:street"=~/ Unp\.$/] {
assertNoMatch: "way \"addr:street\"=Main Underpass";
assertMatch: "way \"addr:street\"=Main Unp.";
throwWarning: tr("addr:street={0} contains prefix Unp., should likely be expanded to Underpass","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Underpass");
group: tr("addr:street contains postfix Unp, should likely be expanded to Underpass");
}

*["addr:street"]["addr:street"=~/ Vly\.$/] {
assertNoMatch: "way \"addr:street\"=Main Valley";
assertMatch: "way \"addr:street\"=Main Vly.";
throwWarning: tr("addr:street={0} contains prefix Vly., should likely be expanded to Valley","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-4), "Valley");
group: tr("addr:street contains postfix Vly, should likely be expanded to Valley");
}

*["addr:street"]["addr:street"=~/ Vw\.$/] {
assertNoMatch: "way \"addr:street\"=Main View";
assertMatch: "way \"addr:street\"=Main Vw.";
throwWarning: tr("addr:street={0} contains prefix Vw., should likely be expanded to View","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "View");
group: tr("addr:street contains postfix Vw, should likely be expanded to View");
}

*["addr:street"]["addr:street"=~/ Wkwy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Walkway";
assertMatch: "way \"addr:street\"=Main Wkwy.";
throwWarning: tr("addr:street={0} contains prefix Wkwy., should likely be expanded to Walkway","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Walkway");
group: tr("addr:street contains postfix Wkwy, should likely be expanded to Walkway");
}

*["addr:street"]["addr:street"=~/ Wy\.$/] {
assertNoMatch: "way \"addr:street\"=Main Way";
assertMatch: "way \"addr:street\"=Main Wy.";
throwWarning: tr("addr:street={0} contains prefix Wy., should likely be expanded to Way","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-3), "Way");
group: tr("addr:street contains postfix Wy, should likely be expanded to Way");
}

*["addr:street"]["addr:street"=~/ Xing\.$/] {
assertNoMatch: "way \"addr:street\"=Main Crossing";
assertMatch: "way \"addr:street\"=Main Xing.";
throwWarning: tr("addr:street={0} contains prefix Xing., should likely be expanded to Crossing","{0.value}");
fixAdd: concat("addr:street=", substring(tag("addr:street"), 0, length(tag("addr:street"))-5), "Crossing");
group: tr("addr:street contains postfix Xing, should likely be expanded to Crossing");
}

*["name"=~/ Acc\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Access";
assertMatch: "way \"name\"=Main Acc.";
throwWarning: tr("Highway name contains postfix Acc., should likely be expanded to Access");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Access");
}

*["name"=~/ Arc\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Arcade";
assertMatch: "way \"name\"=Main Arc.";
throwWarning: tr("Highway name contains postfix Arc., should likely be expanded to Arcade");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Arcade");
}

*["name"=~/ Av\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Avenue";
assertMatch: "way \"name\"=Main Av.";
throwWarning: tr("Highway name contains postfix Av., should likely be expanded to Avenue");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Avenue");
}

*["name"=~/ Ave\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Avenue";
assertMatch: "way \"name\"=Main Ave.";
throwWarning: tr("Highway name contains postfix Ave., should likely be expanded to Avenue");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Avenue");
}

*["name"=~/ Blf\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Bluff";
assertMatch: "way \"name\"=Main Blf.";
throwWarning: tr("Highway name contains postfix Blf., should likely be expanded to Bluff");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Bluff");
}

*["name"=~/ Blvd\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Boulevard";
assertMatch: "way \"name\"=Main Blvd.";
throwWarning: tr("Highway name contains postfix Blvd., should likely be expanded to Boulevard");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Boulevard");
}

*["name"=~/ Bnd\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Bend";
assertMatch: "way \"name\"=Main Bnd.";
throwWarning: tr("Highway name contains postfix Bnd., should likely be expanded to Bend");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Bend");
}

*["name"=~/ Br\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Bridge";
assertMatch: "way \"name\"=Main Br.";
throwWarning: tr("Highway name contains postfix Br., should likely be expanded to Bridge");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Bridge");
}

*["name"=~/ Brg\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Bridge";
assertMatch: "way \"name\"=Main Brg.";
throwWarning: tr("Highway name contains postfix Brg., should likely be expanded to Bridge");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Bridge");
}

*["name"=~/ Byp\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Bypass";
assertMatch: "way \"name\"=Main Byp.";
throwWarning: tr("Highway name contains postfix Byp., should likely be expanded to Bypass");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Bypass");
}

*["name"=~/ Cir\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Circle";
assertMatch: "way \"name\"=Main Cir.";
throwWarning: tr("Highway name contains postfix Cir., should likely be expanded to Circle");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Circle");
}

*["name"=~/ Cr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Creek";
assertMatch: "way \"name\"=Main Cr.";
throwWarning: tr("Highway name contains postfix Cr., should likely be expanded to Creek");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Creek");
}

*["name"=~/ Cres\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Crescent";
assertMatch: "way \"name\"=Main Cres.";
throwWarning: tr("Highway name contains postfix Cres., should likely be expanded to Crescent");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Crescent");
}

*["name"=~/ Cswy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Causeway";
assertMatch: "way \"name\"=Main Cswy.";
throwWarning: tr("Highway name contains postfix Cswy., should likely be expanded to Causeway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Causeway");
}

*["name"=~/ Ct\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Court";
assertMatch: "way \"name\"=Main Ct.";
throwWarning: tr("Highway name contains postfix Ct., should likely be expanded to Court");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Court");
}

*["name"=~/ Ctr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Center";
assertMatch: "way \"name\"=Main Ctr.";
throwWarning: tr("Highway name contains postfix Ctr., should likely be expanded to Center");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Center");
}

*["name"=~/ Cv\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Cove";
assertMatch: "way \"name\"=Main Cv.";
throwWarning: tr("Highway name contains postfix Cv., should likely be expanded to Cove");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Cove");
}

*["name"=~/ Dr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Drive";
assertMatch: "way \"name\"=Main Dr.";
throwWarning: tr("Highway name contains postfix Dr., should likely be expanded to Drive");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Drive");
}

*["name"=~/ Expy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Expressway";
assertMatch: "way \"name\"=Main Expy.";
throwWarning: tr("Highway name contains postfix Expy., should likely be expanded to Expressway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Expressway");
}

*["name"=~/ Expwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Expressway";
assertMatch: "way \"name\"=Main Expwy.";
throwWarning: tr("Highway name contains postfix Expwy., should likely be expanded to Expressway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-6), "Expressway");
}

*["name"=~/ Flds\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Fields";
assertMatch: "way \"name\"=Main Flds.";
throwWarning: tr("Highway name contains postfix Flds., should likely be expanded to Fields");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Fields");
}

*["name"=~/ Fmrd\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Farm to Market Road";
assertMatch: "way \"name\"=Main Fmrd.";
throwWarning: tr("Highway name contains postfix Fmrd., should likely be expanded to Farm to Market Road");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Farm to Market Road");
}

*["name"=~/ Fwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Freeway";
assertMatch: "way \"name\"=Main Fwy.";
throwWarning: tr("Highway name contains postfix Fwy., should likely be expanded to Freeway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Freeway");
}

*["name"=~/ Gd\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Grade";
assertMatch: "way \"name\"=Main Gd.";
throwWarning: tr("Highway name contains postfix Gd., should likely be expanded to Grade");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Grade");
}

*["name"=~/ Grv\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Grove";
assertMatch: "way \"name\"=Main Grv.";
throwWarning: tr("Highway name contains postfix Grv., should likely be expanded to Grove");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Grove");
}

*["name"=~/ Hbr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Harbor";
assertMatch: "way \"name\"=Main Hbr.";
throwWarning: tr("Highway name contains postfix Hbr., should likely be expanded to Harbor");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Harbor");
}

*["name"=~/ Holw\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Hollow";
assertMatch: "way \"name\"=Main Holw.";
throwWarning: tr("Highway name contains postfix Holw., should likely be expanded to Hollow");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Hollow");
}

*["name"=~/ Hts\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Heights";
assertMatch: "way \"name\"=Main Hts.";
throwWarning: tr("Highway name contains postfix Hts., should likely be expanded to Heights");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Heights");
}

*["name"=~/ Hw\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Highway";
assertMatch: "way \"name\"=Main Hw.";
throwWarning: tr("Highway name contains postfix Hw., should likely be expanded to Highway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Highway");
}

*["name"=~/ Hwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Highway";
assertMatch: "way \"name\"=Main Hwy.";
throwWarning: tr("Highway name contains postfix Hwy., should likely be expanded to Highway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Highway");
}

*["name"=~/ Lk\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Lake";
assertMatch: "way \"name\"=Main Lk.";
throwWarning: tr("Highway name contains postfix Lk., should likely be expanded to Lake");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Lake");
}

*["name"=~/ Ln\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Lane";
assertMatch: "way \"name\"=Main Ln.";
throwWarning: tr("Highway name contains postfix Ln., should likely be expanded to Lane");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Lane");
}

*["name"=~/ Lndg\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Landing";
assertMatch: "way \"name\"=Main Lndg.";
throwWarning: tr("Highway name contains postfix Lndg., should likely be expanded to Landing");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Landing");
}

*["name"=~/ Lp\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Loop";
assertMatch: "way \"name\"=Main Lp.";
throwWarning: tr("Highway name contains postfix Lp., should likely be expanded to Loop");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Loop");
}

*["name"=~/ Mal\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Mall";
assertMatch: "way \"name\"=Main Mal.";
throwWarning: tr("Highway name contains postfix Mal., should likely be expanded to Mall");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Mall");
}

*["name"=~/ Mt\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Mount";
assertMatch: "way \"name\"=Main Mt.";
throwWarning: tr("Highway name contains postfix Mt., should likely be expanded to Mount");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Mount");
}

*["name"=~/ Mtwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Motorway";
assertMatch: "way \"name\"=Main Mtwy.";
throwWarning: tr("Highway name contains postfix Mtwy., should likely be expanded to Motorway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Motorway");
}

*["name"=~/ Ovps\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Overpass";
assertMatch: "way \"name\"=Main Ovps.";
throwWarning: tr("Highway name contains postfix Ovps., should likely be expanded to Overpass");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Overpass");
}

*["name"=~/ Pky\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Parkway";
assertMatch: "way \"name\"=Main Pky.";
throwWarning: tr("Highway name contains postfix Pky., should likely be expanded to Parkway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Parkway");
}

*["name"=~/ Pkwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Parkway";
assertMatch: "way \"name\"=Main Pkwy.";
throwWarning: tr("Highway name contains postfix Pkwy., should likely be expanded to Parkway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Parkway");
}

*["name"=~/ Pl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Place";
assertMatch: "way \"name\"=Main Pl.";
throwWarning: tr("Highway name contains postfix Pl., should likely be expanded to Place");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Place");
}

*["name"=~/ Plz\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Plaza";
assertMatch: "way \"name\"=Main Plz.";
throwWarning: tr("Highway name contains postfix Plz., should likely be expanded to Plaza");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Plaza");
}

*["name"=~/ Pvt\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Private";
assertMatch: "way \"name\"=Main Pvt.";
throwWarning: tr("Highway name contains postfix Pvt., should likely be expanded to Private");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Private");
}

*["name"=~/ Rd\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Road";
assertMatch: "way \"name\"=Main Rd.";
throwWarning: tr("Highway name contains postfix Rd., should likely be expanded to Road");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Road");
}

*["name"=~/ Rdg\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Ridge";
assertMatch: "way \"name\"=Main Rdg.";
throwWarning: tr("Highway name contains postfix Rdg., should likely be expanded to Ridge");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Ridge");
}

*["name"=~/ Rmrd\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Ranch to Market Road";
assertMatch: "way \"name\"=Main Rmrd.";
throwWarning: tr("Highway name contains postfix Rmrd., should likely be expanded to Ranch to Market Road");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Ranch to Market Road");
}

*["name"=~/ Rte\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Route";
assertMatch: "way \"name\"=Main Rte.";
throwWarning: tr("Highway name contains postfix Rte., should likely be expanded to Route");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Route");
}

*["name"=~/ Skwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Skyway";
assertMatch: "way \"name\"=Main Skwy.";
throwWarning: tr("Highway name contains postfix Skwy., should likely be expanded to Skyway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Skyway");
}

*["name"=~/ Sq\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Square";
assertMatch: "way \"name\"=Main Sq.";
throwWarning: tr("Highway name contains postfix Sq., should likely be expanded to Square");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Square");
}

*["name"=~/ Srvc\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Service";
assertMatch: "way \"name\"=Main Srvc.";
throwWarning: tr("Highway name contains postfix Srvc., should likely be expanded to Service");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Service");
}

*["name"=~/ St\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Street";
assertMatch: "way \"name\"=Main St.";
throwWarning: tr("Highway name contains postfix St., should likely be expanded to Street");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Street");
}

*["name"=~/ Ter\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Terrace";
assertMatch: "way \"name\"=Main Ter.";
throwWarning: tr("Highway name contains postfix Ter., should likely be expanded to Terrace");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Terrace");
}

*["name"=~/ Tfwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Trafficway";
assertMatch: "way \"name\"=Main Tfwy.";
throwWarning: tr("Highway name contains postfix Tfwy., should likely be expanded to Trafficway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Trafficway");
}

*["name"=~/ Thfr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Thoroughfare";
assertMatch: "way \"name\"=Main Thfr.";
throwWarning: tr("Highway name contains postfix Thfr., should likely be expanded to Thoroughfare");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Thoroughfare");
}

*["name"=~/ Thwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Throughway";
assertMatch: "way \"name\"=Main Thwy.";
throwWarning: tr("Highway name contains postfix Thwy., should likely be expanded to Throughway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Throughway");
}

*["name"=~/ Tl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Trail";
assertMatch: "way \"name\"=Main Tl.";
throwWarning: tr("Highway name contains postfix Tl., should likely be expanded to Trail");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Trail");
}

*["name"=~/ Tpke\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Turnpike";
assertMatch: "way \"name\"=Main Tpke.";
throwWarning: tr("Highway name contains postfix Tpke., should likely be expanded to Turnpike");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Turnpike");
}

*["name"=~/ Trce\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Trace";
assertMatch: "way \"name\"=Main Trce.";
throwWarning: tr("Highway name contains postfix Trce., should likely be expanded to Trace");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Trace");
}

*["name"=~/ Tr\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Trail";
assertMatch: "way \"name\"=Main Tr.";
throwWarning: tr("Highway name contains postfix Tr., should likely be expanded to Trail");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Trail");
}

*["name"=~/ Trl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Trail";
assertMatch: "way \"name\"=Main Trl.";
throwWarning: tr("Highway name contains postfix Trl., should likely be expanded to Trail");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Trail");
}

*["name"=~/ Tunl\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Tunnel";
assertMatch: "way \"name\"=Main Tunl.";
throwWarning: tr("Highway name contains postfix Tunl., should likely be expanded to Tunnel");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Tunnel");
}

*["name"=~/ Unp\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Underpass";
assertMatch: "way \"name\"=Main Unp.";
throwWarning: tr("Highway name contains postfix Unp., should likely be expanded to Underpass");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Underpass");
}

*["name"=~/ Vly\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Valley";
assertMatch: "way \"name\"=Main Vly.";
throwWarning: tr("Highway name contains postfix Vly., should likely be expanded to Valley");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-4), "Valley");
}

*["name"=~/ Vw\.$/].highway_name {
assertNoMatch: "way \"name\"=Main View";
assertMatch: "way \"name\"=Main Vw.";
throwWarning: tr("Highway name contains postfix Vw., should likely be expanded to View");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "View");
}

*["name"=~/ Wkwy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Walkway";
assertMatch: "way \"name\"=Main Wkwy.";
throwWarning: tr("Highway name contains postfix Wkwy., should likely be expanded to Walkway");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Walkway");
}

*["name"=~/ Wy\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Way";
assertMatch: "way \"name\"=Main Wy.";
throwWarning: tr("Highway name contains postfix Wy., should likely be expanded to Way");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-3), "Way");
}

*["name"=~/ Xing\.$/].highway_name {
assertNoMatch: "way \"name\"=Main Crossing";
assertMatch: "way \"name\"=Main Xing.";
throwWarning: tr("Highway name contains postfix Xing., should likely be expanded to Crossing");
fixAdd: concat("name=", substring(tag("name"), 0, length(tag("name"))-5), "Crossing");
}

*["addr:street"]["addr:street"=~/ Acc /] {
assertNoMatch: "way \"addr:street\"=Main Access East";
assertMatch: "way \"addr:street\"=Main Acc East";
throwWarning: tr("addr:street={0} contains ' Acc ', should likely be expanded to Access","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Acc ", " Access "));
group: tr("addr:street contains Acc, should likely be expanded to Access");
}

*["addr:street"]["addr:street"=~/ Arc /] {
assertNoMatch: "way \"addr:street\"=Main Arcade East";
assertMatch: "way \"addr:street\"=Main Arc East";
throwWarning: tr("addr:street={0} contains ' Arc ', should likely be expanded to Arcade","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Arc ", " Arcade "));
group: tr("addr:street contains Arc, should likely be expanded to Arcade");
}

*["addr:street"]["addr:street"=~/ Av /] {
assertNoMatch: "way \"addr:street\"=Main Avenue East";
assertMatch: "way \"addr:street\"=Main Av East";
throwWarning: tr("addr:street={0} contains ' Av ', should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Av ", " Avenue "));
group: tr("addr:street contains Av, should likely be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/ Ave /] {
assertNoMatch: "way \"addr:street\"=Main Avenue East";
assertMatch: "way \"addr:street\"=Main Ave East";
throwWarning: tr("addr:street={0} contains ' Ave ', should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ave ", " Avenue "));
group: tr("addr:street contains Ave, should likely be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/ Blf /] {
assertNoMatch: "way \"addr:street\"=Main Bluff East";
assertMatch: "way \"addr:street\"=Main Blf East";
throwWarning: tr("addr:street={0} contains ' Blf ', should likely be expanded to Bluff","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Blf ", " Bluff "));
group: tr("addr:street contains Blf, should likely be expanded to Bluff");
}

*["addr:street"]["addr:street"=~/ Blvd /] {
assertNoMatch: "way \"addr:street\"=Main Boulevard East";
assertMatch: "way \"addr:street\"=Main Blvd East";
throwWarning: tr("addr:street={0} contains ' Blvd ', should likely be expanded to Boulevard","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Blvd ", " Boulevard "));
group: tr("addr:street contains Blvd, should likely be expanded to Boulevard");
}

*["addr:street"]["addr:street"=~/ Bnd /] {
assertNoMatch: "way \"addr:street\"=Main Bend East";
assertMatch: "way \"addr:street\"=Main Bnd East";
throwWarning: tr("addr:street={0} contains ' Bnd ', should likely be expanded to Bend","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bnd ", " Bend "));
group: tr("addr:street contains Bnd, should likely be expanded to Bend");
}

*["addr:street"]["addr:street"=~/ Br /] {
assertNoMatch: "way \"addr:street\"=Main Bridge East";
assertMatch: "way \"addr:street\"=Main Br East";
throwWarning: tr("addr:street={0} contains ' Br ', should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Br ", " Bridge "));
group: tr("addr:street contains Br, should likely be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/ Brg /] {
assertNoMatch: "way \"addr:street\"=Main Bridge East";
assertMatch: "way \"addr:street\"=Main Brg East";
throwWarning: tr("addr:street={0} contains ' Brg ', should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Brg ", " Bridge "));
group: tr("addr:street contains Brg, should likely be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/ Byp /] {
assertNoMatch: "way \"addr:street\"=Main Bypass East";
assertMatch: "way \"addr:street\"=Main Byp East";
throwWarning: tr("addr:street={0} contains ' Byp ', should likely be expanded to Bypass","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Byp ", " Bypass "));
group: tr("addr:street contains Byp, should likely be expanded to Bypass");
}

*["addr:street"]["addr:street"=~/ Cir /] {
assertNoMatch: "way \"addr:street\"=Main Circle East";
assertMatch: "way \"addr:street\"=Main Cir East";
throwWarning: tr("addr:street={0} contains ' Cir ', should likely be expanded to Circle","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cir ", " Circle "));
group: tr("addr:street contains Cir, should likely be expanded to Circle");
}

*["addr:street"]["addr:street"=~/ Cr /] {
assertNoMatch: "way \"addr:street\"=Main Creek East";
assertMatch: "way \"addr:street\"=Main Cr East";
throwWarning: tr("addr:street={0} contains ' Cr ', should likely be expanded to Creek","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cr ", " Creek "));
group: tr("addr:street contains Cr, should likely be expanded to Creek");
}

*["addr:street"]["addr:street"=~/ Cres /] {
assertNoMatch: "way \"addr:street\"=Main Crescent East";
assertMatch: "way \"addr:street\"=Main Cres East";
throwWarning: tr("addr:street={0} contains ' Cres ', should likely be expanded to Crescent","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cres ", " Crescent "));
group: tr("addr:street contains Cres, should likely be expanded to Crescent");
}

*["addr:street"]["addr:street"=~/ Cswy /] {
assertNoMatch: "way \"addr:street\"=Main Causeway East";
assertMatch: "way \"addr:street\"=Main Cswy East";
throwWarning: tr("addr:street={0} contains ' Cswy ', should likely be expanded to Causeway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cswy ", " Causeway "));
group: tr("addr:street contains Cswy, should likely be expanded to Causeway");
}

*["addr:street"]["addr:street"=~/ Ct /] {
assertNoMatch: "way \"addr:street\"=Main Court East";
assertMatch: "way \"addr:street\"=Main Ct East";
throwWarning: tr("addr:street={0} contains ' Ct ', should likely be expanded to Court","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ct ", " Court "));
group: tr("addr:street contains Ct, should likely be expanded to Court");
}

*["addr:street"]["addr:street"=~/ Ctr /] {
assertNoMatch: "way \"addr:street\"=Main Center East";
assertMatch: "way \"addr:street\"=Main Ctr East";
throwWarning: tr("addr:street={0} contains ' Ctr ', should likely be expanded to Center","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ctr ", " Center "));
group: tr("addr:street contains Ctr, should likely be expanded to Center");
}

*["addr:street"]["addr:street"=~/ Cv /] {
assertNoMatch: "way \"addr:street\"=Main Cove East";
assertMatch: "way \"addr:street\"=Main Cv East";
throwWarning: tr("addr:street={0} contains ' Cv ', should likely be expanded to Cove","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cv ", " Cove "));
group: tr("addr:street contains Cv, should likely be expanded to Cove");
}

*["addr:street"]["addr:street"=~/ Dr /] {
assertNoMatch: "way \"addr:street\"=Main Drive East";
assertMatch: "way \"addr:street\"=Main Dr East";
throwWarning: tr("addr:street={0} contains ' Dr ', should likely be expanded to Drive","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Dr ", " Drive "));
group: tr("addr:street contains Dr, should likely be expanded to Drive");
}

*["addr:street"]["addr:street"=~/ Expy /] {
assertNoMatch: "way \"addr:street\"=Main Expressway East";
assertMatch: "way \"addr:street\"=Main Expy East";
throwWarning: tr("addr:street={0} contains ' Expy ', should likely be expanded to Expressway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Expy ", " Expressway "));
group: tr("addr:street contains Expy, should likely be expanded to Expressway");
}

*["addr:street"]["addr:street"=~/ Expwy /] {
assertNoMatch: "way \"addr:street\"=Main Expressway East";
assertMatch: "way \"addr:street\"=Main Expwy East";
throwWarning: tr("addr:street={0} contains ' Expwy ', should likely be expanded to Expressway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Expwy ", " Expressway "));
group: tr("addr:street contains Expwy, should likely be expanded to Expressway");
}

*["addr:street"]["addr:street"=~/ Flds /] {
assertNoMatch: "way \"addr:street\"=Main Fields East";
assertMatch: "way \"addr:street\"=Main Flds East";
throwWarning: tr("addr:street={0} contains ' Flds ', should likely be expanded to Fields","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Flds ", " Fields "));
group: tr("addr:street contains Flds, should likely be expanded to Fields");
}

*["addr:street"]["addr:street"=~/ Fmrd /] {
assertNoMatch: "way \"addr:street\"=Main Farm to Market Road East";
assertMatch: "way \"addr:street\"=Main Fmrd East";
throwWarning: tr("addr:street={0} contains ' Fmrd ', should likely be expanded to Farm to Market Road","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fmrd ", " Farm to Market Road "));
group: tr("addr:street contains Fmrd, should likely be expanded to Farm to Market Road");
}

*["addr:street"]["addr:street"=~/ Fwy /] {
assertNoMatch: "way \"addr:street\"=Main Freeway East";
assertMatch: "way \"addr:street\"=Main Fwy East";
throwWarning: tr("addr:street={0} contains ' Fwy ', should likely be expanded to Freeway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fwy ", " Freeway "));
group: tr("addr:street contains Fwy, should likely be expanded to Freeway");
}

*["addr:street"]["addr:street"=~/ Gd /] {
assertNoMatch: "way \"addr:street\"=Main Grade East";
assertMatch: "way \"addr:street\"=Main Gd East";
throwWarning: tr("addr:street={0} contains ' Gd ', should likely be expanded to Grade","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gd ", " Grade "));
group: tr("addr:street contains Gd, should likely be expanded to Grade");
}

*["addr:street"]["addr:street"=~/ Grv /] {
assertNoMatch: "way \"addr:street\"=Main Grove East";
assertMatch: "way \"addr:street\"=Main Grv East";
throwWarning: tr("addr:street={0} contains ' Grv ', should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Grv ", " Grove "));
group: tr("addr:street contains Grv, should likely be expanded to Grove");
}

*["addr:street"]["addr:street"=~/ Hbr /] {
assertNoMatch: "way \"addr:street\"=Main Harbor East";
assertMatch: "way \"addr:street\"=Main Hbr East";
throwWarning: tr("addr:street={0} contains ' Hbr ', should likely be expanded to Harbor","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hbr ", " Harbor "));
group: tr("addr:street contains Hbr, should likely be expanded to Harbor");
}

*["addr:street"]["addr:street"=~/ Holw /] {
assertNoMatch: "way \"addr:street\"=Main Hollow East";
assertMatch: "way \"addr:street\"=Main Holw East";
throwWarning: tr("addr:street={0} contains ' Holw ', should likely be expanded to Hollow","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Holw ", " Hollow "));
group: tr("addr:street contains Holw, should likely be expanded to Hollow");
}

*["addr:street"]["addr:street"=~/ Hts /] {
assertNoMatch: "way \"addr:street\"=Main Heights East";
assertMatch: "way \"addr:street\"=Main Hts East";
throwWarning: tr("addr:street={0} contains ' Hts ', should likely be expanded to Heights","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hts ", " Heights "));
group: tr("addr:street contains Hts, should likely be expanded to Heights");
}

*["addr:street"]["addr:street"=~/ Hw /] {
assertNoMatch: "way \"addr:street\"=Main Highway East";
assertMatch: "way \"addr:street\"=Main Hw East";
throwWarning: tr("addr:street={0} contains ' Hw ', should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hw ", " Highway "));
group: tr("addr:street contains Hw, should likely be expanded to Highway");
}

*["addr:street"]["addr:street"=~/ Hwy /] {
assertNoMatch: "way \"addr:street\"=Main Highway East";
assertMatch: "way \"addr:street\"=Main Hwy East";
throwWarning: tr("addr:street={0} contains ' Hwy ', should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hwy ", " Highway "));
group: tr("addr:street contains Hwy, should likely be expanded to Highway");
}

*["addr:street"]["addr:street"=~/ Lk /] {
assertNoMatch: "way \"addr:street\"=Main Lake East";
assertMatch: "way \"addr:street\"=Main Lk East";
throwWarning: tr("addr:street={0} contains ' Lk ', should likely be expanded to Lake","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lk ", " Lake "));
group: tr("addr:street contains Lk, should likely be expanded to Lake");
}

*["addr:street"]["addr:street"=~/ Ln /] {
assertNoMatch: "way \"addr:street\"=Main Lane East";
assertMatch: "way \"addr:street\"=Main Ln East";
throwWarning: tr("addr:street={0} contains ' Ln ', should likely be expanded to Lane","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ln ", " Lane "));
group: tr("addr:street contains Ln, should likely be expanded to Lane");
}

*["addr:street"]["addr:street"=~/ Lndg /] {
assertNoMatch: "way \"addr:street\"=Main Landing East";
assertMatch: "way \"addr:street\"=Main Lndg East";
throwWarning: tr("addr:street={0} contains ' Lndg ', should likely be expanded to Landing","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lndg ", " Landing "));
group: tr("addr:street contains Lndg, should likely be expanded to Landing");
}

*["addr:street"]["addr:street"=~/ Lp /] {
assertNoMatch: "way \"addr:street\"=Main Loop East";
assertMatch: "way \"addr:street\"=Main Lp East";
throwWarning: tr("addr:street={0} contains ' Lp ', should likely be expanded to Loop","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lp ", " Loop "));
group: tr("addr:street contains Lp, should likely be expanded to Loop");
}

*["addr:street"]["addr:street"=~/ Mal /] {
assertNoMatch: "way \"addr:street\"=Main Mall East";
assertMatch: "way \"addr:street\"=Main Mal East";
throwWarning: tr("addr:street={0} contains ' Mal ', should likely be expanded to Mall","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mal ", " Mall "));
group: tr("addr:street contains Mal, should likely be expanded to Mall");
}

*["addr:street"]["addr:street"=~/ Mt /] {
assertNoMatch: "way \"addr:street\"=Main Mount East";
assertMatch: "way \"addr:street\"=Main Mt East";
throwWarning: tr("addr:street={0} contains ' Mt ', should likely be expanded to Mount","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mt ", " Mount "));
group: tr("addr:street contains Mt, should likely be expanded to Mount");
}

*["addr:street"]["addr:street"=~/ Mtwy /] {
assertNoMatch: "way \"addr:street\"=Main Motorway East";
assertMatch: "way \"addr:street\"=Main Mtwy East";
throwWarning: tr("addr:street={0} contains ' Mtwy ', should likely be expanded to Motorway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mtwy ", " Motorway "));
group: tr("addr:street contains Mtwy, should likely be expanded to Motorway");
}

*["addr:street"]["addr:street"=~/ Ovps /] {
assertNoMatch: "way \"addr:street\"=Main Overpass East";
assertMatch: "way \"addr:street\"=Main Ovps East";
throwWarning: tr("addr:street={0} contains ' Ovps ', should likely be expanded to Overpass","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ovps ", " Overpass "));
group: tr("addr:street contains Ovps, should likely be expanded to Overpass");
}

*["addr:street"]["addr:street"=~/ Pky /] {
assertNoMatch: "way \"addr:street\"=Main Parkway East";
assertMatch: "way \"addr:street\"=Main Pky East";
throwWarning: tr("addr:street={0} contains ' Pky ', should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pky ", " Parkway "));
group: tr("addr:street contains Pky, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pkwy /] {
assertNoMatch: "way \"addr:street\"=Main Parkway East";
assertMatch: "way \"addr:street\"=Main Pkwy East";
throwWarning: tr("addr:street={0} contains ' Pkwy ', should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pkwy ", " Parkway "));
group: tr("addr:street contains Pkwy, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pl /] {
assertNoMatch: "way \"addr:street\"=Main Place East";
assertMatch: "way \"addr:street\"=Main Pl East";
throwWarning: tr("addr:street={0} contains ' Pl ', should likely be expanded to Place","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pl ", " Place "));
group: tr("addr:street contains Pl, should likely be expanded to Place");
}

*["addr:street"]["addr:street"=~/ Plz /] {
assertNoMatch: "way \"addr:street\"=Main Plaza East";
assertMatch: "way \"addr:street\"=Main Plz East";
throwWarning: tr("addr:street={0} contains ' Plz ', should likely be expanded to Plaza","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Plz ", " Plaza "));
group: tr("addr:street contains Plz, should likely be expanded to Plaza");
}

*["addr:street"]["addr:street"=~/ Pvt /] {
assertNoMatch: "way \"addr:street\"=Main Private East";
assertMatch: "way \"addr:street\"=Main Pvt East";
throwWarning: tr("addr:street={0} contains ' Pvt ', should likely be expanded to Private","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pvt ", " Private "));
group: tr("addr:street contains Pvt, should likely be expanded to Private");
}

*["addr:street"]["addr:street"=~/ Rd /] {
assertNoMatch: "way \"addr:street\"=Main Road East";
assertMatch: "way \"addr:street\"=Main Rd East";
throwWarning: tr("addr:street={0} contains ' Rd ', should likely be expanded to Road","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rd ", " Road "));
group: tr("addr:street contains Rd, should likely be expanded to Road");
}

*["addr:street"]["addr:street"=~/ Rdg /] {
assertNoMatch: "way \"addr:street\"=Main Ridge East";
assertMatch: "way \"addr:street\"=Main Rdg East";
throwWarning: tr("addr:street={0} contains ' Rdg ', should likely be expanded to Ridge","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rdg ", " Ridge "));
group: tr("addr:street contains Rdg, should likely be expanded to Ridge");
}

*["addr:street"]["addr:street"=~/ Rmrd /] {
assertNoMatch: "way \"addr:street\"=Main Ranch to Market Road East";
assertMatch: "way \"addr:street\"=Main Rmrd East";
throwWarning: tr("addr:street={0} contains ' Rmrd ', should likely be expanded to Ranch to Market Road","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rmrd ", " Ranch to Market Road "));
group: tr("addr:street contains Rmrd, should likely be expanded to Ranch to Market Road");
}

*["addr:street"]["addr:street"=~/ Rte /] {
assertNoMatch: "way \"addr:street\"=Main Route East";
assertMatch: "way \"addr:street\"=Main Rte East";
throwWarning: tr("addr:street={0} contains ' Rte ', should likely be expanded to Route","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rte ", " Route "));
group: tr("addr:street contains Rte, should likely be expanded to Route");
}

*["addr:street"]["addr:street"=~/ Skwy /] {
assertNoMatch: "way \"addr:street\"=Main Skyway East";
assertMatch: "way \"addr:street\"=Main Skwy East";
throwWarning: tr("addr:street={0} contains ' Skwy ', should likely be expanded to Skyway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Skwy ", " Skyway "));
group: tr("addr:street contains Skwy, should likely be expanded to Skyway");
}

*["addr:street"]["addr:street"=~/ Sq /] {
assertNoMatch: "way \"addr:street\"=Main Square East";
assertMatch: "way \"addr:street\"=Main Sq East";
throwWarning: tr("addr:street={0} contains ' Sq ', should likely be expanded to Square","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Sq ", " Square "));
group: tr("addr:street contains Sq, should likely be expanded to Square");
}

*["addr:street"]["addr:street"=~/ Srvc /] {
assertNoMatch: "way \"addr:street\"=Main Service East";
assertMatch: "way \"addr:street\"=Main Srvc East";
throwWarning: tr("addr:street={0} contains ' Srvc ', should likely be expanded to Service","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Srvc ", " Service "));
group: tr("addr:street contains Srvc, should likely be expanded to Service");
}

*["addr:street"]["addr:street"=~/ St /] {
assertNoMatch: "way \"addr:street\"=Main Street East";
assertMatch: "way \"addr:street\"=Main St East";
throwWarning: tr("addr:street={0} contains ' St ', should likely be expanded to Street","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," St ", " Street "));
group: tr("addr:street contains St, should likely be expanded to Street");
}

*["addr:street"]["addr:street"=~/ Ter /] {
assertNoMatch: "way \"addr:street\"=Main Terrace East";
assertMatch: "way \"addr:street\"=Main Ter East";
throwWarning: tr("addr:street={0} contains ' Ter ', should likely be expanded to Terrace","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ter ", " Terrace "));
group: tr("addr:street contains Ter, should likely be expanded to Terrace");
}

*["addr:street"]["addr:street"=~/ Tfwy /] {
assertNoMatch: "way \"addr:street\"=Main Trafficway East";
assertMatch: "way \"addr:street\"=Main Tfwy East";
throwWarning: tr("addr:street={0} contains ' Tfwy ', should likely be expanded to Trafficway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tfwy ", " Trafficway "));
group: tr("addr:street contains Tfwy, should likely be expanded to Trafficway");
}

*["addr:street"]["addr:street"=~/ Thfr /] {
assertNoMatch: "way \"addr:street\"=Main Thoroughfare East";
assertMatch: "way \"addr:street\"=Main Thfr East";
throwWarning: tr("addr:street={0} contains ' Thfr ', should likely be expanded to Thoroughfare","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Thfr ", " Thoroughfare "));
group: tr("addr:street contains Thfr, should likely be expanded to Thoroughfare");
}

*["addr:street"]["addr:street"=~/ Thwy /] {
assertNoMatch: "way \"addr:street\"=Main Throughway East";
assertMatch: "way \"addr:street\"=Main Thwy East";
throwWarning: tr("addr:street={0} contains ' Thwy ', should likely be expanded to Throughway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Thwy ", " Throughway "));
group: tr("addr:street contains Thwy, should likely be expanded to Throughway");
}

*["addr:street"]["addr:street"=~/ Tl /] {
assertNoMatch: "way \"addr:street\"=Main Trail East";
assertMatch: "way \"addr:street\"=Main Tl East";
throwWarning: tr("addr:street={0} contains ' Tl ', should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tl ", " Trail "));
group: tr("addr:street contains Tl, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Tpke /] {
assertNoMatch: "way \"addr:street\"=Main Turnpike East";
assertMatch: "way \"addr:street\"=Main Tpke East";
throwWarning: tr("addr:street={0} contains ' Tpke ', should likely be expanded to Turnpike","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tpke ", " Turnpike "));
group: tr("addr:street contains Tpke, should likely be expanded to Turnpike");
}

*["addr:street"]["addr:street"=~/ Trce /] {
assertNoMatch: "way \"addr:street\"=Main Trace East";
assertMatch: "way \"addr:street\"=Main Trce East";
throwWarning: tr("addr:street={0} contains ' Trce ', should likely be expanded to Trace","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Trce ", " Trace "));
group: tr("addr:street contains Trce, should likely be expanded to Trace");
}

*["addr:street"]["addr:street"=~/ Tr /] {
assertNoMatch: "way \"addr:street\"=Main Trail East";
assertMatch: "way \"addr:street\"=Main Tr East";
throwWarning: tr("addr:street={0} contains ' Tr ', should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tr ", " Trail "));
group: tr("addr:street contains Tr, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Trl /] {
assertNoMatch: "way \"addr:street\"=Main Trail East";
assertMatch: "way \"addr:street\"=Main Trl East";
throwWarning: tr("addr:street={0} contains ' Trl ', should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Trl ", " Trail "));
group: tr("addr:street contains Trl, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Tunl /] {
assertNoMatch: "way \"addr:street\"=Main Tunnel East";
assertMatch: "way \"addr:street\"=Main Tunl East";
throwWarning: tr("addr:street={0} contains ' Tunl ', should likely be expanded to Tunnel","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tunl ", " Tunnel "));
group: tr("addr:street contains Tunl, should likely be expanded to Tunnel");
}

*["addr:street"]["addr:street"=~/ Unp /] {
assertNoMatch: "way \"addr:street\"=Main Underpass East";
assertMatch: "way \"addr:street\"=Main Unp East";
throwWarning: tr("addr:street={0} contains ' Unp ', should likely be expanded to Underpass","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Unp ", " Underpass "));
group: tr("addr:street contains Unp, should likely be expanded to Underpass");
}

*["addr:street"]["addr:street"=~/ Vly /] {
assertNoMatch: "way \"addr:street\"=Main Valley East";
assertMatch: "way \"addr:street\"=Main Vly East";
throwWarning: tr("addr:street={0} contains ' Vly ', should likely be expanded to Valley","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vly ", " Valley "));
group: tr("addr:street contains Vly, should likely be expanded to Valley");
}

*["addr:street"]["addr:street"=~/ Vw /] {
assertNoMatch: "way \"addr:street\"=Main View East";
assertMatch: "way \"addr:street\"=Main Vw East";
throwWarning: tr("addr:street={0} contains ' Vw ', should likely be expanded to View","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vw ", " View "));
group: tr("addr:street contains Vw, should likely be expanded to View");
}

*["addr:street"]["addr:street"=~/ Wkwy /] {
assertNoMatch: "way \"addr:street\"=Main Walkway East";
assertMatch: "way \"addr:street\"=Main Wkwy East";
throwWarning: tr("addr:street={0} contains ' Wkwy ', should likely be expanded to Walkway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Wkwy ", " Walkway "));
group: tr("addr:street contains Wkwy, should likely be expanded to Walkway");
}

*["addr:street"]["addr:street"=~/ Wy /] {
assertNoMatch: "way \"addr:street\"=Main Way East";
assertMatch: "way \"addr:street\"=Main Wy East";
throwWarning: tr("addr:street={0} contains ' Wy ', should likely be expanded to Way","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Wy ", " Way "));
group: tr("addr:street contains Wy, should likely be expanded to Way");
}

*["addr:street"]["addr:street"=~/ Xing /] {
assertNoMatch: "way \"addr:street\"=Main Crossing East";
assertMatch: "way \"addr:street\"=Main Xing East";
throwWarning: tr("addr:street={0} contains ' Xing ', should likely be expanded to Crossing","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Xing ", " Crossing "));
group: tr("addr:street contains Xing, should likely be expanded to Crossing");
}

*["name"=~/ Acc /].highway_name {
assertNoMatch: "way \"name\"=Main Access East";
assertMatch: "way \"name\"=Main Acc East";
throwWarning: tr("Highway name contains Acc, may need to be expanded to Access");
fixAdd: concat("name=", replace(tag("name")," Acc ", " Access "));
}

*["name"=~/ Arc /].highway_name {
assertNoMatch: "way \"name\"=Main Arcade East";
assertMatch: "way \"name\"=Main Arc East";
throwWarning: tr("Highway name contains Arc, may need to be expanded to Arcade");
fixAdd: concat("name=", replace(tag("name")," Arc ", " Arcade "));
}

*["name"=~/ Av /].highway_name {
assertNoMatch: "way \"name\"=Main Avenue East";
assertMatch: "way \"name\"=Main Av East";
throwWarning: tr("Highway name contains Av, may need to be expanded to Avenue");
fixAdd: concat("name=", replace(tag("name")," Av ", " Avenue "));
}

*["name"=~/ Ave /].highway_name {
assertNoMatch: "way \"name\"=Main Avenue East";
assertMatch: "way \"name\"=Main Ave East";
throwWarning: tr("Highway name contains Ave, may need to be expanded to Avenue");
fixAdd: concat("name=", replace(tag("name")," Ave ", " Avenue "));
}

*["name"=~/ Blf /].highway_name {
assertNoMatch: "way \"name\"=Main Bluff East";
assertMatch: "way \"name\"=Main Blf East";
throwWarning: tr("Highway name contains Blf, may need to be expanded to Bluff");
fixAdd: concat("name=", replace(tag("name")," Blf ", " Bluff "));
}

*["name"=~/ Blvd /].highway_name {
assertNoMatch: "way \"name\"=Main Boulevard East";
assertMatch: "way \"name\"=Main Blvd East";
throwWarning: tr("Highway name contains Blvd, may need to be expanded to Boulevard");
fixAdd: concat("name=", replace(tag("name")," Blvd ", " Boulevard "));
}

*["name"=~/ Bnd /].highway_name {
assertNoMatch: "way \"name\"=Main Bend East";
assertMatch: "way \"name\"=Main Bnd East";
throwWarning: tr("Highway name contains Bnd, may need to be expanded to Bend");
fixAdd: concat("name=", replace(tag("name")," Bnd ", " Bend "));
}

*["name"=~/ Br /].highway_name {
assertNoMatch: "way \"name\"=Main Bridge East";
assertMatch: "way \"name\"=Main Br East";
throwWarning: tr("Highway name contains Br, may need to be expanded to Bridge");
fixAdd: concat("name=", replace(tag("name")," Br ", " Bridge "));
}

*["name"=~/ Brg /].highway_name {
assertNoMatch: "way \"name\"=Main Bridge East";
assertMatch: "way \"name\"=Main Brg East";
throwWarning: tr("Highway name contains Brg, may need to be expanded to Bridge");
fixAdd: concat("name=", replace(tag("name")," Brg ", " Bridge "));
}

*["name"=~/ Byp /].highway_name {
assertNoMatch: "way \"name\"=Main Bypass East";
assertMatch: "way \"name\"=Main Byp East";
throwWarning: tr("Highway name contains Byp, may need to be expanded to Bypass");
fixAdd: concat("name=", replace(tag("name")," Byp ", " Bypass "));
}

*["name"=~/ Cir /].highway_name {
assertNoMatch: "way \"name\"=Main Circle East";
assertMatch: "way \"name\"=Main Cir East";
throwWarning: tr("Highway name contains Cir, may need to be expanded to Circle");
fixAdd: concat("name=", replace(tag("name")," Cir ", " Circle "));
}

*["name"=~/ Cr /].highway_name {
assertNoMatch: "way \"name\"=Main Creek East";
assertMatch: "way \"name\"=Main Cr East";
throwWarning: tr("Highway name contains Cr, may need to be expanded to Creek");
fixAdd: concat("name=", replace(tag("name")," Cr ", " Creek "));
}

*["name"=~/ Cres /].highway_name {
assertNoMatch: "way \"name\"=Main Crescent East";
assertMatch: "way \"name\"=Main Cres East";
throwWarning: tr("Highway name contains Cres, may need to be expanded to Crescent");
fixAdd: concat("name=", replace(tag("name")," Cres ", " Crescent "));
}

*["name"=~/ Cswy /].highway_name {
assertNoMatch: "way \"name\"=Main Causeway East";
assertMatch: "way \"name\"=Main Cswy East";
throwWarning: tr("Highway name contains Cswy, may need to be expanded to Causeway");
fixAdd: concat("name=", replace(tag("name")," Cswy ", " Causeway "));
}

*["name"=~/ Ct /].highway_name {
assertNoMatch: "way \"name\"=Main Court East";
assertMatch: "way \"name\"=Main Ct East";
throwWarning: tr("Highway name contains Ct, may need to be expanded to Court");
fixAdd: concat("name=", replace(tag("name")," Ct ", " Court "));
}

*["name"=~/ Ctr /].highway_name {
assertNoMatch: "way \"name\"=Main Center East";
assertMatch: "way \"name\"=Main Ctr East";
throwWarning: tr("Highway name contains Ctr, may need to be expanded to Center");
fixAdd: concat("name=", replace(tag("name")," Ctr ", " Center "));
}

*["name"=~/ Cv /].highway_name {
assertNoMatch: "way \"name\"=Main Cove East";
assertMatch: "way \"name\"=Main Cv East";
throwWarning: tr("Highway name contains Cv, may need to be expanded to Cove");
fixAdd: concat("name=", replace(tag("name")," Cv ", " Cove "));
}

*["name"=~/ Dr /].highway_name {
assertNoMatch: "way \"name\"=Main Drive East";
assertMatch: "way \"name\"=Main Dr East";
throwWarning: tr("Highway name contains Dr, may need to be expanded to Drive");
fixAdd: concat("name=", replace(tag("name")," Dr ", " Drive "));
}

*["name"=~/ Expy /].highway_name {
assertNoMatch: "way \"name\"=Main Expressway East";
assertMatch: "way \"name\"=Main Expy East";
throwWarning: tr("Highway name contains Expy, may need to be expanded to Expressway");
fixAdd: concat("name=", replace(tag("name")," Expy ", " Expressway "));
}

*["name"=~/ Expwy /].highway_name {
assertNoMatch: "way \"name\"=Main Expressway East";
assertMatch: "way \"name\"=Main Expwy East";
throwWarning: tr("Highway name contains Expwy, may need to be expanded to Expressway");
fixAdd: concat("name=", replace(tag("name")," Expwy ", " Expressway "));
}

*["name"=~/ Flds /].highway_name {
assertNoMatch: "way \"name\"=Main Fields East";
assertMatch: "way \"name\"=Main Flds East";
throwWarning: tr("Highway name contains Flds, may need to be expanded to Fields");
fixAdd: concat("name=", replace(tag("name")," Flds ", " Fields "));
}

*["name"=~/ Fmrd /].highway_name {
assertNoMatch: "way \"name\"=Main Farm to Market Road East";
assertMatch: "way \"name\"=Main Fmrd East";
throwWarning: tr("Highway name contains Fmrd, may need to be expanded to Farm to Market Road");
fixAdd: concat("name=", replace(tag("name")," Fmrd ", " Farm to Market Road "));
}

*["name"=~/ Fwy /].highway_name {
assertNoMatch: "way \"name\"=Main Freeway East";
assertMatch: "way \"name\"=Main Fwy East";
throwWarning: tr("Highway name contains Fwy, may need to be expanded to Freeway");
fixAdd: concat("name=", replace(tag("name")," Fwy ", " Freeway "));
}

*["name"=~/ Gd /].highway_name {
assertNoMatch: "way \"name\"=Main Grade East";
assertMatch: "way \"name\"=Main Gd East";
throwWarning: tr("Highway name contains Gd, may need to be expanded to Grade");
fixAdd: concat("name=", replace(tag("name")," Gd ", " Grade "));
}

*["name"=~/ Grv /].highway_name {
assertNoMatch: "way \"name\"=Main Grove East";
assertMatch: "way \"name\"=Main Grv East";
throwWarning: tr("Highway name contains Grv, may need to be expanded to Grove");
fixAdd: concat("name=", replace(tag("name")," Grv ", " Grove "));
}

*["name"=~/ Hbr /].highway_name {
assertNoMatch: "way \"name\"=Main Harbor East";
assertMatch: "way \"name\"=Main Hbr East";
throwWarning: tr("Highway name contains Hbr, may need to be expanded to Harbor");
fixAdd: concat("name=", replace(tag("name")," Hbr ", " Harbor "));
}

*["name"=~/ Holw /].highway_name {
assertNoMatch: "way \"name\"=Main Hollow East";
assertMatch: "way \"name\"=Main Holw East";
throwWarning: tr("Highway name contains Holw, may need to be expanded to Hollow");
fixAdd: concat("name=", replace(tag("name")," Holw ", " Hollow "));
}

*["name"=~/ Hts /].highway_name {
assertNoMatch: "way \"name\"=Main Heights East";
assertMatch: "way \"name\"=Main Hts East";
throwWarning: tr("Highway name contains Hts, may need to be expanded to Heights");
fixAdd: concat("name=", replace(tag("name")," Hts ", " Heights "));
}

*["name"=~/ Hw /].highway_name {
assertNoMatch: "way \"name\"=Main Highway East";
assertMatch: "way \"name\"=Main Hw East";
throwWarning: tr("Highway name contains Hw, may need to be expanded to Highway");
fixAdd: concat("name=", replace(tag("name")," Hw ", " Highway "));
}

*["name"=~/ Hwy /].highway_name {
assertNoMatch: "way \"name\"=Main Highway East";
assertMatch: "way \"name\"=Main Hwy East";
throwWarning: tr("Highway name contains Hwy, may need to be expanded to Highway");
fixAdd: concat("name=", replace(tag("name")," Hwy ", " Highway "));
}

*["name"=~/ Lk /].highway_name {
assertNoMatch: "way \"name\"=Main Lake East";
assertMatch: "way \"name\"=Main Lk East";
throwWarning: tr("Highway name contains Lk, may need to be expanded to Lake");
fixAdd: concat("name=", replace(tag("name")," Lk ", " Lake "));
}

*["name"=~/ Ln /].highway_name {
assertNoMatch: "way \"name\"=Main Lane East";
assertMatch: "way \"name\"=Main Ln East";
throwWarning: tr("Highway name contains Ln, may need to be expanded to Lane");
fixAdd: concat("name=", replace(tag("name")," Ln ", " Lane "));
}

*["name"=~/ Lndg /].highway_name {
assertNoMatch: "way \"name\"=Main Landing East";
assertMatch: "way \"name\"=Main Lndg East";
throwWarning: tr("Highway name contains Lndg, may need to be expanded to Landing");
fixAdd: concat("name=", replace(tag("name")," Lndg ", " Landing "));
}

*["name"=~/ Lp /].highway_name {
assertNoMatch: "way \"name\"=Main Loop East";
assertMatch: "way \"name\"=Main Lp East";
throwWarning: tr("Highway name contains Lp, may need to be expanded to Loop");
fixAdd: concat("name=", replace(tag("name")," Lp ", " Loop "));
}

*["name"=~/ Mal /].highway_name {
assertNoMatch: "way \"name\"=Main Mall East";
assertMatch: "way \"name\"=Main Mal East";
throwWarning: tr("Highway name contains Mal, may need to be expanded to Mall");
fixAdd: concat("name=", replace(tag("name")," Mal ", " Mall "));
}

*["name"=~/ Mt /].highway_name {
assertNoMatch: "way \"name\"=Main Mount East";
assertMatch: "way \"name\"=Main Mt East";
throwWarning: tr("Highway name contains Mt, may need to be expanded to Mount");
fixAdd: concat("name=", replace(tag("name")," Mt ", " Mount "));
}

*["name"=~/ Mtwy /].highway_name {
assertNoMatch: "way \"name\"=Main Motorway East";
assertMatch: "way \"name\"=Main Mtwy East";
throwWarning: tr("Highway name contains Mtwy, may need to be expanded to Motorway");
fixAdd: concat("name=", replace(tag("name")," Mtwy ", " Motorway "));
}

*["name"=~/ Ovps /].highway_name {
assertNoMatch: "way \"name\"=Main Overpass East";
assertMatch: "way \"name\"=Main Ovps East";
throwWarning: tr("Highway name contains Ovps, may need to be expanded to Overpass");
fixAdd: concat("name=", replace(tag("name")," Ovps ", " Overpass "));
}

*["name"=~/ Pky /].highway_name {
assertNoMatch: "way \"name\"=Main Parkway East";
assertMatch: "way \"name\"=Main Pky East";
throwWarning: tr("Highway name contains Pky, may need to be expanded to Parkway");
fixAdd: concat("name=", replace(tag("name")," Pky ", " Parkway "));
}

*["name"=~/ Pkwy /].highway_name {
assertNoMatch: "way \"name\"=Main Parkway East";
assertMatch: "way \"name\"=Main Pkwy East";
throwWarning: tr("Highway name contains Pkwy, may need to be expanded to Parkway");
fixAdd: concat("name=", replace(tag("name")," Pkwy ", " Parkway "));
}

*["name"=~/ Pl /].highway_name {
assertNoMatch: "way \"name\"=Main Place East";
assertMatch: "way \"name\"=Main Pl East";
throwWarning: tr("Highway name contains Pl, may need to be expanded to Place");
fixAdd: concat("name=", replace(tag("name")," Pl ", " Place "));
}

*["name"=~/ Plz /].highway_name {
assertNoMatch: "way \"name\"=Main Plaza East";
assertMatch: "way \"name\"=Main Plz East";
throwWarning: tr("Highway name contains Plz, may need to be expanded to Plaza");
fixAdd: concat("name=", replace(tag("name")," Plz ", " Plaza "));
}

*["name"=~/ Pvt /].highway_name {
assertNoMatch: "way \"name\"=Main Private East";
assertMatch: "way \"name\"=Main Pvt East";
throwWarning: tr("Highway name contains Pvt, may need to be expanded to Private");
fixAdd: concat("name=", replace(tag("name")," Pvt ", " Private "));
}

*["name"=~/ Rd /].highway_name {
assertNoMatch: "way \"name\"=Main Road East";
assertMatch: "way \"name\"=Main Rd East";
throwWarning: tr("Highway name contains Rd, may need to be expanded to Road");
fixAdd: concat("name=", replace(tag("name")," Rd ", " Road "));
}

*["name"=~/ Rdg /].highway_name {
assertNoMatch: "way \"name\"=Main Ridge East";
assertMatch: "way \"name\"=Main Rdg East";
throwWarning: tr("Highway name contains Rdg, may need to be expanded to Ridge");
fixAdd: concat("name=", replace(tag("name")," Rdg ", " Ridge "));
}

*["name"=~/ Rmrd /].highway_name {
assertNoMatch: "way \"name\"=Main Ranch to Market Road East";
assertMatch: "way \"name\"=Main Rmrd East";
throwWarning: tr("Highway name contains Rmrd, may need to be expanded to Ranch to Market Road");
fixAdd: concat("name=", replace(tag("name")," Rmrd ", " Ranch to Market Road "));
}

*["name"=~/ Rte /].highway_name {
assertNoMatch: "way \"name\"=Main Route East";
assertMatch: "way \"name\"=Main Rte East";
throwWarning: tr("Highway name contains Rte, may need to be expanded to Route");
fixAdd: concat("name=", replace(tag("name")," Rte ", " Route "));
}

*["name"=~/ Skwy /].highway_name {
assertNoMatch: "way \"name\"=Main Skyway East";
assertMatch: "way \"name\"=Main Skwy East";
throwWarning: tr("Highway name contains Skwy, may need to be expanded to Skyway");
fixAdd: concat("name=", replace(tag("name")," Skwy ", " Skyway "));
}

*["name"=~/ Sq /].highway_name {
assertNoMatch: "way \"name\"=Main Square East";
assertMatch: "way \"name\"=Main Sq East";
throwWarning: tr("Highway name contains Sq, may need to be expanded to Square");
fixAdd: concat("name=", replace(tag("name")," Sq ", " Square "));
}

*["name"=~/ Srvc /].highway_name {
assertNoMatch: "way \"name\"=Main Service East";
assertMatch: "way \"name\"=Main Srvc East";
throwWarning: tr("Highway name contains Srvc, may need to be expanded to Service");
fixAdd: concat("name=", replace(tag("name")," Srvc ", " Service "));
}

*["name"=~/ St /].highway_name {
assertNoMatch: "way \"name\"=Main Street East";
assertMatch: "way \"name\"=Main St East";
throwWarning: tr("Highway name contains St, may need to be expanded to Street");
fixAdd: concat("name=", replace(tag("name")," St ", " Street "));
}

*["name"=~/ Ter /].highway_name {
assertNoMatch: "way \"name\"=Main Terrace East";
assertMatch: "way \"name\"=Main Ter East";
throwWarning: tr("Highway name contains Ter, may need to be expanded to Terrace");
fixAdd: concat("name=", replace(tag("name")," Ter ", " Terrace "));
}

*["name"=~/ Tfwy /].highway_name {
assertNoMatch: "way \"name\"=Main Trafficway East";
assertMatch: "way \"name\"=Main Tfwy East";
throwWarning: tr("Highway name contains Tfwy, may need to be expanded to Trafficway");
fixAdd: concat("name=", replace(tag("name")," Tfwy ", " Trafficway "));
}

*["name"=~/ Thfr /].highway_name {
assertNoMatch: "way \"name\"=Main Thoroughfare East";
assertMatch: "way \"name\"=Main Thfr East";
throwWarning: tr("Highway name contains Thfr, may need to be expanded to Thoroughfare");
fixAdd: concat("name=", replace(tag("name")," Thfr ", " Thoroughfare "));
}

*["name"=~/ Thwy /].highway_name {
assertNoMatch: "way \"name\"=Main Throughway East";
assertMatch: "way \"name\"=Main Thwy East";
throwWarning: tr("Highway name contains Thwy, may need to be expanded to Throughway");
fixAdd: concat("name=", replace(tag("name")," Thwy ", " Throughway "));
}

*["name"=~/ Tl /].highway_name {
assertNoMatch: "way \"name\"=Main Trail East";
assertMatch: "way \"name\"=Main Tl East";
throwWarning: tr("Highway name contains Tl, may need to be expanded to Trail");
fixAdd: concat("name=", replace(tag("name")," Tl ", " Trail "));
}

*["name"=~/ Tpke /].highway_name {
assertNoMatch: "way \"name\"=Main Turnpike East";
assertMatch: "way \"name\"=Main Tpke East";
throwWarning: tr("Highway name contains Tpke, may need to be expanded to Turnpike");
fixAdd: concat("name=", replace(tag("name")," Tpke ", " Turnpike "));
}

*["name"=~/ Trce /].highway_name {
assertNoMatch: "way \"name\"=Main Trace East";
assertMatch: "way \"name\"=Main Trce East";
throwWarning: tr("Highway name contains Trce, may need to be expanded to Trace");
fixAdd: concat("name=", replace(tag("name")," Trce ", " Trace "));
}

*["name"=~/ Tr /].highway_name {
assertNoMatch: "way \"name\"=Main Trail East";
assertMatch: "way \"name\"=Main Tr East";
throwWarning: tr("Highway name contains Tr, may need to be expanded to Trail");
fixAdd: concat("name=", replace(tag("name")," Tr ", " Trail "));
}

*["name"=~/ Trl /].highway_name {
assertNoMatch: "way \"name\"=Main Trail East";
assertMatch: "way \"name\"=Main Trl East";
throwWarning: tr("Highway name contains Trl, may need to be expanded to Trail");
fixAdd: concat("name=", replace(tag("name")," Trl ", " Trail "));
}

*["name"=~/ Tunl /].highway_name {
assertNoMatch: "way \"name\"=Main Tunnel East";
assertMatch: "way \"name\"=Main Tunl East";
throwWarning: tr("Highway name contains Tunl, may need to be expanded to Tunnel");
fixAdd: concat("name=", replace(tag("name")," Tunl ", " Tunnel "));
}

*["name"=~/ Unp /].highway_name {
assertNoMatch: "way \"name\"=Main Underpass East";
assertMatch: "way \"name\"=Main Unp East";
throwWarning: tr("Highway name contains Unp, may need to be expanded to Underpass");
fixAdd: concat("name=", replace(tag("name")," Unp ", " Underpass "));
}

*["name"=~/ Vly /].highway_name {
assertNoMatch: "way \"name\"=Main Valley East";
assertMatch: "way \"name\"=Main Vly East";
throwWarning: tr("Highway name contains Vly, may need to be expanded to Valley");
fixAdd: concat("name=", replace(tag("name")," Vly ", " Valley "));
}

*["name"=~/ Vw /].highway_name {
assertNoMatch: "way \"name\"=Main View East";
assertMatch: "way \"name\"=Main Vw East";
throwWarning: tr("Highway name contains Vw, may need to be expanded to View");
fixAdd: concat("name=", replace(tag("name")," Vw ", " View "));
}

*["name"=~/ Wkwy /].highway_name {
assertNoMatch: "way \"name\"=Main Walkway East";
assertMatch: "way \"name\"=Main Wkwy East";
throwWarning: tr("Highway name contains Wkwy, may need to be expanded to Walkway");
fixAdd: concat("name=", replace(tag("name")," Wkwy ", " Walkway "));
}

*["name"=~/ Wy /].highway_name {
assertNoMatch: "way \"name\"=Main Way East";
assertMatch: "way \"name\"=Main Wy East";
throwWarning: tr("Highway name contains Wy, may need to be expanded to Way");
fixAdd: concat("name=", replace(tag("name")," Wy ", " Way "));
}

*["name"=~/ Xing /].highway_name {
assertNoMatch: "way \"name\"=Main Crossing East";
assertMatch: "way \"name\"=Main Xing East";
throwWarning: tr("Highway name contains Xing, may need to be expanded to Crossing");
fixAdd: concat("name=", replace(tag("name")," Xing ", " Crossing "));
}

*["addr:street"]["addr:street"=~/ Acc\. /] {
assertNoMatch: "way \"addr:street\"=Main Access East";
assertMatch: "way \"addr:street\"=Main Acc East";
throwWarning: tr("addr:street={0} contains ' Acc. ', should likely be expanded to Access","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Acc. ", " Access "));
group: tr("addr:street contains Acc, should likely be expanded to Access");
}

*["addr:street"]["addr:street"=~/ Arc\. /] {
assertNoMatch: "way \"addr:street\"=Main Arcade East";
assertMatch: "way \"addr:street\"=Main Arc East";
throwWarning: tr("addr:street={0} contains ' Arc. ', should likely be expanded to Arcade","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Arc. ", " Arcade "));
group: tr("addr:street contains Arc, should likely be expanded to Arcade");
}

*["addr:street"]["addr:street"=~/ Av\. /] {
assertNoMatch: "way \"addr:street\"=Main Avenue East";
assertMatch: "way \"addr:street\"=Main Av East";
throwWarning: tr("addr:street={0} contains ' Av. ', should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Av. ", " Avenue "));
group: tr("addr:street contains Av, should likely be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/ Ave\. /] {
assertNoMatch: "way \"addr:street\"=Main Avenue East";
assertMatch: "way \"addr:street\"=Main Ave East";
throwWarning: tr("addr:street={0} contains ' Ave. ', should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ave. ", " Avenue "));
group: tr("addr:street contains Ave, should likely be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/ Blf\. /] {
assertNoMatch: "way \"addr:street\"=Main Bluff East";
assertMatch: "way \"addr:street\"=Main Blf East";
throwWarning: tr("addr:street={0} contains ' Blf. ', should likely be expanded to Bluff","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Blf. ", " Bluff "));
group: tr("addr:street contains Blf, should likely be expanded to Bluff");
}

*["addr:street"]["addr:street"=~/ Blvd\. /] {
assertNoMatch: "way \"addr:street\"=Main Boulevard East";
assertMatch: "way \"addr:street\"=Main Blvd East";
throwWarning: tr("addr:street={0} contains ' Blvd. ', should likely be expanded to Boulevard","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Blvd. ", " Boulevard "));
group: tr("addr:street contains Blvd, should likely be expanded to Boulevard");
}

*["addr:street"]["addr:street"=~/ Bnd\. /] {
assertNoMatch: "way \"addr:street\"=Main Bend East";
assertMatch: "way \"addr:street\"=Main Bnd East";
throwWarning: tr("addr:street={0} contains ' Bnd. ', should likely be expanded to Bend","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Bnd. ", " Bend "));
group: tr("addr:street contains Bnd, should likely be expanded to Bend");
}

*["addr:street"]["addr:street"=~/ Br\. /] {
assertNoMatch: "way \"addr:street\"=Main Bridge East";
assertMatch: "way \"addr:street\"=Main Br East";
throwWarning: tr("addr:street={0} contains ' Br. ', should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Br. ", " Bridge "));
group: tr("addr:street contains Br, should likely be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/ Brg\. /] {
assertNoMatch: "way \"addr:street\"=Main Bridge East";
assertMatch: "way \"addr:street\"=Main Brg East";
throwWarning: tr("addr:street={0} contains ' Brg. ', should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Brg. ", " Bridge "));
group: tr("addr:street contains Brg, should likely be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/ Byp\. /] {
assertNoMatch: "way \"addr:street\"=Main Bypass East";
assertMatch: "way \"addr:street\"=Main Byp East";
throwWarning: tr("addr:street={0} contains ' Byp. ', should likely be expanded to Bypass","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Byp. ", " Bypass "));
group: tr("addr:street contains Byp, should likely be expanded to Bypass");
}

*["addr:street"]["addr:street"=~/ Cir\. /] {
assertNoMatch: "way \"addr:street\"=Main Circle East";
assertMatch: "way \"addr:street\"=Main Cir East";
throwWarning: tr("addr:street={0} contains ' Cir. ', should likely be expanded to Circle","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cir. ", " Circle "));
group: tr("addr:street contains Cir, should likely be expanded to Circle");
}

*["addr:street"]["addr:street"=~/ Cr\. /] {
assertNoMatch: "way \"addr:street\"=Main Creek East";
assertMatch: "way \"addr:street\"=Main Cr East";
throwWarning: tr("addr:street={0} contains ' Cr. ', should likely be expanded to Creek","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cr. ", " Creek "));
group: tr("addr:street contains Cr, should likely be expanded to Creek");
}

*["addr:street"]["addr:street"=~/ Cres\. /] {
assertNoMatch: "way \"addr:street\"=Main Crescent East";
assertMatch: "way \"addr:street\"=Main Cres East";
throwWarning: tr("addr:street={0} contains ' Cres. ', should likely be expanded to Crescent","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cres. ", " Crescent "));
group: tr("addr:street contains Cres, should likely be expanded to Crescent");
}

*["addr:street"]["addr:street"=~/ Cswy\. /] {
assertNoMatch: "way \"addr:street\"=Main Causeway East";
assertMatch: "way \"addr:street\"=Main Cswy East";
throwWarning: tr("addr:street={0} contains ' Cswy. ', should likely be expanded to Causeway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cswy. ", " Causeway "));
group: tr("addr:street contains Cswy, should likely be expanded to Causeway");
}

*["addr:street"]["addr:street"=~/ Ct\. /] {
assertNoMatch: "way \"addr:street\"=Main Court East";
assertMatch: "way \"addr:street\"=Main Ct East";
throwWarning: tr("addr:street={0} contains ' Ct. ', should likely be expanded to Court","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ct. ", " Court "));
group: tr("addr:street contains Ct, should likely be expanded to Court");
}

*["addr:street"]["addr:street"=~/ Ctr\. /] {
assertNoMatch: "way \"addr:street\"=Main Center East";
assertMatch: "way \"addr:street\"=Main Ctr East";
throwWarning: tr("addr:street={0} contains ' Ctr. ', should likely be expanded to Center","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ctr. ", " Center "));
group: tr("addr:street contains Ctr, should likely be expanded to Center");
}

*["addr:street"]["addr:street"=~/ Cv\. /] {
assertNoMatch: "way \"addr:street\"=Main Cove East";
assertMatch: "way \"addr:street\"=Main Cv East";
throwWarning: tr("addr:street={0} contains ' Cv. ', should likely be expanded to Cove","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Cv. ", " Cove "));
group: tr("addr:street contains Cv, should likely be expanded to Cove");
}

*["addr:street"]["addr:street"=~/ Dr\. /] {
assertNoMatch: "way \"addr:street\"=Main Drive East";
assertMatch: "way \"addr:street\"=Main Dr East";
throwWarning: tr("addr:street={0} contains ' Dr. ', should likely be expanded to Drive","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Dr. ", " Drive "));
group: tr("addr:street contains Dr, should likely be expanded to Drive");
}

*["addr:street"]["addr:street"=~/ Expy\. /] {
assertNoMatch: "way \"addr:street\"=Main Expressway East";
assertMatch: "way \"addr:street\"=Main Expy East";
throwWarning: tr("addr:street={0} contains ' Expy. ', should likely be expanded to Expressway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Expy. ", " Expressway "));
group: tr("addr:street contains Expy, should likely be expanded to Expressway");
}

*["addr:street"]["addr:street"=~/ Expwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Expressway East";
assertMatch: "way \"addr:street\"=Main Expwy East";
throwWarning: tr("addr:street={0} contains ' Expwy. ', should likely be expanded to Expressway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Expwy. ", " Expressway "));
group: tr("addr:street contains Expwy, should likely be expanded to Expressway");
}

*["addr:street"]["addr:street"=~/ Flds\. /] {
assertNoMatch: "way \"addr:street\"=Main Fields East";
assertMatch: "way \"addr:street\"=Main Flds East";
throwWarning: tr("addr:street={0} contains ' Flds. ', should likely be expanded to Fields","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Flds. ", " Fields "));
group: tr("addr:street contains Flds, should likely be expanded to Fields");
}

*["addr:street"]["addr:street"=~/ Fmrd\. /] {
assertNoMatch: "way \"addr:street\"=Main Farm to Market Road East";
assertMatch: "way \"addr:street\"=Main Fmrd East";
throwWarning: tr("addr:street={0} contains ' Fmrd. ', should likely be expanded to Farm to Market Road","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fmrd. ", " Farm to Market Road "));
group: tr("addr:street contains Fmrd, should likely be expanded to Farm to Market Road");
}

*["addr:street"]["addr:street"=~/ Fwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Freeway East";
assertMatch: "way \"addr:street\"=Main Fwy East";
throwWarning: tr("addr:street={0} contains ' Fwy. ', should likely be expanded to Freeway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Fwy. ", " Freeway "));
group: tr("addr:street contains Fwy, should likely be expanded to Freeway");
}

*["addr:street"]["addr:street"=~/ Gd\. /] {
assertNoMatch: "way \"addr:street\"=Main Grade East";
assertMatch: "way \"addr:street\"=Main Gd East";
throwWarning: tr("addr:street={0} contains ' Gd. ', should likely be expanded to Grade","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Gd. ", " Grade "));
group: tr("addr:street contains Gd, should likely be expanded to Grade");
}

*["addr:street"]["addr:street"=~/ Grv\. /] {
assertNoMatch: "way \"addr:street\"=Main Grove East";
assertMatch: "way \"addr:street\"=Main Grv East";
throwWarning: tr("addr:street={0} contains ' Grv. ', should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Grv. ", " Grove "));
group: tr("addr:street contains Grv, should likely be expanded to Grove");
}

*["addr:street"]["addr:street"=~/ Hbr\. /] {
assertNoMatch: "way \"addr:street\"=Main Harbor East";
assertMatch: "way \"addr:street\"=Main Hbr East";
throwWarning: tr("addr:street={0} contains ' Hbr. ', should likely be expanded to Harbor","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hbr. ", " Harbor "));
group: tr("addr:street contains Hbr, should likely be expanded to Harbor");
}

*["addr:street"]["addr:street"=~/ Holw\. /] {
assertNoMatch: "way \"addr:street\"=Main Hollow East";
assertMatch: "way \"addr:street\"=Main Holw East";
throwWarning: tr("addr:street={0} contains ' Holw. ', should likely be expanded to Hollow","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Holw. ", " Hollow "));
group: tr("addr:street contains Holw, should likely be expanded to Hollow");
}

*["addr:street"]["addr:street"=~/ Hts\. /] {
assertNoMatch: "way \"addr:street\"=Main Heights East";
assertMatch: "way \"addr:street\"=Main Hts East";
throwWarning: tr("addr:street={0} contains ' Hts. ', should likely be expanded to Heights","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hts. ", " Heights "));
group: tr("addr:street contains Hts, should likely be expanded to Heights");
}

*["addr:street"]["addr:street"=~/ Hw\. /] {
assertNoMatch: "way \"addr:street\"=Main Highway East";
assertMatch: "way \"addr:street\"=Main Hw East";
throwWarning: tr("addr:street={0} contains ' Hw. ', should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hw. ", " Highway "));
group: tr("addr:street contains Hw, should likely be expanded to Highway");
}

*["addr:street"]["addr:street"=~/ Hwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Highway East";
assertMatch: "way \"addr:street\"=Main Hwy East";
throwWarning: tr("addr:street={0} contains ' Hwy. ', should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Hwy. ", " Highway "));
group: tr("addr:street contains Hwy, should likely be expanded to Highway");
}

*["addr:street"]["addr:street"=~/ Lk\. /] {
assertNoMatch: "way \"addr:street\"=Main Lake East";
assertMatch: "way \"addr:street\"=Main Lk East";
throwWarning: tr("addr:street={0} contains ' Lk. ', should likely be expanded to Lake","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lk. ", " Lake "));
group: tr("addr:street contains Lk, should likely be expanded to Lake");
}

*["addr:street"]["addr:street"=~/ Ln\. /] {
assertNoMatch: "way \"addr:street\"=Main Lane East";
assertMatch: "way \"addr:street\"=Main Ln East";
throwWarning: tr("addr:street={0} contains ' Ln. ', should likely be expanded to Lane","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ln. ", " Lane "));
group: tr("addr:street contains Ln, should likely be expanded to Lane");
}

*["addr:street"]["addr:street"=~/ Lndg\. /] {
assertNoMatch: "way \"addr:street\"=Main Landing East";
assertMatch: "way \"addr:street\"=Main Lndg East";
throwWarning: tr("addr:street={0} contains ' Lndg. ', should likely be expanded to Landing","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lndg. ", " Landing "));
group: tr("addr:street contains Lndg, should likely be expanded to Landing");
}

*["addr:street"]["addr:street"=~/ Lp\. /] {
assertNoMatch: "way \"addr:street\"=Main Loop East";
assertMatch: "way \"addr:street\"=Main Lp East";
throwWarning: tr("addr:street={0} contains ' Lp. ', should likely be expanded to Loop","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Lp. ", " Loop "));
group: tr("addr:street contains Lp, should likely be expanded to Loop");
}

*["addr:street"]["addr:street"=~/ Mal\. /] {
assertNoMatch: "way \"addr:street\"=Main Mall East";
assertMatch: "way \"addr:street\"=Main Mal East";
throwWarning: tr("addr:street={0} contains ' Mal. ', should likely be expanded to Mall","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mal. ", " Mall "));
group: tr("addr:street contains Mal, should likely be expanded to Mall");
}

*["addr:street"]["addr:street"=~/ Mt\. /] {
assertNoMatch: "way \"addr:street\"=Main Mount East";
assertMatch: "way \"addr:street\"=Main Mt East";
throwWarning: tr("addr:street={0} contains ' Mt. ', should likely be expanded to Mount","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mt. ", " Mount "));
group: tr("addr:street contains Mt, should likely be expanded to Mount");
}

*["addr:street"]["addr:street"=~/ Mtwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Motorway East";
assertMatch: "way \"addr:street\"=Main Mtwy East";
throwWarning: tr("addr:street={0} contains ' Mtwy. ', should likely be expanded to Motorway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Mtwy. ", " Motorway "));
group: tr("addr:street contains Mtwy, should likely be expanded to Motorway");
}

*["addr:street"]["addr:street"=~/ Ovps\. /] {
assertNoMatch: "way \"addr:street\"=Main Overpass East";
assertMatch: "way \"addr:street\"=Main Ovps East";
throwWarning: tr("addr:street={0} contains ' Ovps. ', should likely be expanded to Overpass","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ovps. ", " Overpass "));
group: tr("addr:street contains Ovps, should likely be expanded to Overpass");
}

*["addr:street"]["addr:street"=~/ Pky\. /] {
assertNoMatch: "way \"addr:street\"=Main Parkway East";
assertMatch: "way \"addr:street\"=Main Pky East";
throwWarning: tr("addr:street={0} contains ' Pky. ', should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pky. ", " Parkway "));
group: tr("addr:street contains Pky, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pkwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Parkway East";
assertMatch: "way \"addr:street\"=Main Pkwy East";
throwWarning: tr("addr:street={0} contains ' Pkwy. ', should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pkwy. ", " Parkway "));
group: tr("addr:street contains Pkwy, should likely be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/ Pl\. /] {
assertNoMatch: "way \"addr:street\"=Main Place East";
assertMatch: "way \"addr:street\"=Main Pl East";
throwWarning: tr("addr:street={0} contains ' Pl. ', should likely be expanded to Place","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pl. ", " Place "));
group: tr("addr:street contains Pl, should likely be expanded to Place");
}

*["addr:street"]["addr:street"=~/ Plz\. /] {
assertNoMatch: "way \"addr:street\"=Main Plaza East";
assertMatch: "way \"addr:street\"=Main Plz East";
throwWarning: tr("addr:street={0} contains ' Plz. ', should likely be expanded to Plaza","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Plz. ", " Plaza "));
group: tr("addr:street contains Plz, should likely be expanded to Plaza");
}

*["addr:street"]["addr:street"=~/ Pvt\. /] {
assertNoMatch: "way \"addr:street\"=Main Private East";
assertMatch: "way \"addr:street\"=Main Pvt East";
throwWarning: tr("addr:street={0} contains ' Pvt. ', should likely be expanded to Private","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Pvt. ", " Private "));
group: tr("addr:street contains Pvt, should likely be expanded to Private");
}

*["addr:street"]["addr:street"=~/ Rd\. /] {
assertNoMatch: "way \"addr:street\"=Main Road East";
assertMatch: "way \"addr:street\"=Main Rd East";
throwWarning: tr("addr:street={0} contains ' Rd. ', should likely be expanded to Road","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rd. ", " Road "));
group: tr("addr:street contains Rd, should likely be expanded to Road");
}

*["addr:street"]["addr:street"=~/ Rdg\. /] {
assertNoMatch: "way \"addr:street\"=Main Ridge East";
assertMatch: "way \"addr:street\"=Main Rdg East";
throwWarning: tr("addr:street={0} contains ' Rdg. ', should likely be expanded to Ridge","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rdg. ", " Ridge "));
group: tr("addr:street contains Rdg, should likely be expanded to Ridge");
}

*["addr:street"]["addr:street"=~/ Rmrd\. /] {
assertNoMatch: "way \"addr:street\"=Main Ranch to Market Road East";
assertMatch: "way \"addr:street\"=Main Rmrd East";
throwWarning: tr("addr:street={0} contains ' Rmrd. ', should likely be expanded to Ranch to Market Road","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rmrd. ", " Ranch to Market Road "));
group: tr("addr:street contains Rmrd, should likely be expanded to Ranch to Market Road");
}

*["addr:street"]["addr:street"=~/ Rte\. /] {
assertNoMatch: "way \"addr:street\"=Main Route East";
assertMatch: "way \"addr:street\"=Main Rte East";
throwWarning: tr("addr:street={0} contains ' Rte. ', should likely be expanded to Route","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Rte. ", " Route "));
group: tr("addr:street contains Rte, should likely be expanded to Route");
}

*["addr:street"]["addr:street"=~/ Skwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Skyway East";
assertMatch: "way \"addr:street\"=Main Skwy East";
throwWarning: tr("addr:street={0} contains ' Skwy. ', should likely be expanded to Skyway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Skwy. ", " Skyway "));
group: tr("addr:street contains Skwy, should likely be expanded to Skyway");
}

*["addr:street"]["addr:street"=~/ Sq\. /] {
assertNoMatch: "way \"addr:street\"=Main Square East";
assertMatch: "way \"addr:street\"=Main Sq East";
throwWarning: tr("addr:street={0} contains ' Sq. ', should likely be expanded to Square","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Sq. ", " Square "));
group: tr("addr:street contains Sq, should likely be expanded to Square");
}

*["addr:street"]["addr:street"=~/ Srvc\. /] {
assertNoMatch: "way \"addr:street\"=Main Service East";
assertMatch: "way \"addr:street\"=Main Srvc East";
throwWarning: tr("addr:street={0} contains ' Srvc. ', should likely be expanded to Service","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Srvc. ", " Service "));
group: tr("addr:street contains Srvc, should likely be expanded to Service");
}

*["addr:street"]["addr:street"=~/ St\. /] {
assertNoMatch: "way \"addr:street\"=Main Street East";
assertMatch: "way \"addr:street\"=Main St East";
throwWarning: tr("addr:street={0} contains ' St. ', should likely be expanded to Street","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," St. ", " Street "));
group: tr("addr:street contains St, should likely be expanded to Street");
}

*["addr:street"]["addr:street"=~/ Ter\. /] {
assertNoMatch: "way \"addr:street\"=Main Terrace East";
assertMatch: "way \"addr:street\"=Main Ter East";
throwWarning: tr("addr:street={0} contains ' Ter. ', should likely be expanded to Terrace","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Ter. ", " Terrace "));
group: tr("addr:street contains Ter, should likely be expanded to Terrace");
}

*["addr:street"]["addr:street"=~/ Tfwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Trafficway East";
assertMatch: "way \"addr:street\"=Main Tfwy East";
throwWarning: tr("addr:street={0} contains ' Tfwy. ', should likely be expanded to Trafficway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tfwy. ", " Trafficway "));
group: tr("addr:street contains Tfwy, should likely be expanded to Trafficway");
}

*["addr:street"]["addr:street"=~/ Thfr\. /] {
assertNoMatch: "way \"addr:street\"=Main Thoroughfare East";
assertMatch: "way \"addr:street\"=Main Thfr East";
throwWarning: tr("addr:street={0} contains ' Thfr. ', should likely be expanded to Thoroughfare","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Thfr. ", " Thoroughfare "));
group: tr("addr:street contains Thfr, should likely be expanded to Thoroughfare");
}

*["addr:street"]["addr:street"=~/ Thwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Throughway East";
assertMatch: "way \"addr:street\"=Main Thwy East";
throwWarning: tr("addr:street={0} contains ' Thwy. ', should likely be expanded to Throughway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Thwy. ", " Throughway "));
group: tr("addr:street contains Thwy, should likely be expanded to Throughway");
}

*["addr:street"]["addr:street"=~/ Tl\. /] {
assertNoMatch: "way \"addr:street\"=Main Trail East";
assertMatch: "way \"addr:street\"=Main Tl East";
throwWarning: tr("addr:street={0} contains ' Tl. ', should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tl. ", " Trail "));
group: tr("addr:street contains Tl, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Tpke\. /] {
assertNoMatch: "way \"addr:street\"=Main Turnpike East";
assertMatch: "way \"addr:street\"=Main Tpke East";
throwWarning: tr("addr:street={0} contains ' Tpke. ', should likely be expanded to Turnpike","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tpke. ", " Turnpike "));
group: tr("addr:street contains Tpke, should likely be expanded to Turnpike");
}

*["addr:street"]["addr:street"=~/ Trce\. /] {
assertNoMatch: "way \"addr:street\"=Main Trace East";
assertMatch: "way \"addr:street\"=Main Trce East";
throwWarning: tr("addr:street={0} contains ' Trce. ', should likely be expanded to Trace","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Trce. ", " Trace "));
group: tr("addr:street contains Trce, should likely be expanded to Trace");
}

*["addr:street"]["addr:street"=~/ Tr\. /] {
assertNoMatch: "way \"addr:street\"=Main Trail East";
assertMatch: "way \"addr:street\"=Main Tr East";
throwWarning: tr("addr:street={0} contains ' Tr. ', should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tr. ", " Trail "));
group: tr("addr:street contains Tr, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Trl\. /] {
assertNoMatch: "way \"addr:street\"=Main Trail East";
assertMatch: "way \"addr:street\"=Main Trl East";
throwWarning: tr("addr:street={0} contains ' Trl. ', should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Trl. ", " Trail "));
group: tr("addr:street contains Trl, should likely be expanded to Trail");
}

*["addr:street"]["addr:street"=~/ Tunl\. /] {
assertNoMatch: "way \"addr:street\"=Main Tunnel East";
assertMatch: "way \"addr:street\"=Main Tunl East";
throwWarning: tr("addr:street={0} contains ' Tunl. ', should likely be expanded to Tunnel","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Tunl. ", " Tunnel "));
group: tr("addr:street contains Tunl, should likely be expanded to Tunnel");
}

*["addr:street"]["addr:street"=~/ Unp\. /] {
assertNoMatch: "way \"addr:street\"=Main Underpass East";
assertMatch: "way \"addr:street\"=Main Unp East";
throwWarning: tr("addr:street={0} contains ' Unp. ', should likely be expanded to Underpass","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Unp. ", " Underpass "));
group: tr("addr:street contains Unp, should likely be expanded to Underpass");
}

*["addr:street"]["addr:street"=~/ Vly\. /] {
assertNoMatch: "way \"addr:street\"=Main Valley East";
assertMatch: "way \"addr:street\"=Main Vly East";
throwWarning: tr("addr:street={0} contains ' Vly. ', should likely be expanded to Valley","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vly. ", " Valley "));
group: tr("addr:street contains Vly, should likely be expanded to Valley");
}

*["addr:street"]["addr:street"=~/ Vw\. /] {
assertNoMatch: "way \"addr:street\"=Main View East";
assertMatch: "way \"addr:street\"=Main Vw East";
throwWarning: tr("addr:street={0} contains ' Vw. ', should likely be expanded to View","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Vw. ", " View "));
group: tr("addr:street contains Vw, should likely be expanded to View");
}

*["addr:street"]["addr:street"=~/ Wkwy\. /] {
assertNoMatch: "way \"addr:street\"=Main Walkway East";
assertMatch: "way \"addr:street\"=Main Wkwy East";
throwWarning: tr("addr:street={0} contains ' Wkwy. ', should likely be expanded to Walkway","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Wkwy. ", " Walkway "));
group: tr("addr:street contains Wkwy, should likely be expanded to Walkway");
}

*["addr:street"]["addr:street"=~/ Wy\. /] {
assertNoMatch: "way \"addr:street\"=Main Way East";
assertMatch: "way \"addr:street\"=Main Wy East";
throwWarning: tr("addr:street={0} contains ' Wy. ', should likely be expanded to Way","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Wy. ", " Way "));
group: tr("addr:street contains Wy, should likely be expanded to Way");
}

*["addr:street"]["addr:street"=~/ Xing\. /] {
assertNoMatch: "way \"addr:street\"=Main Crossing East";
assertMatch: "way \"addr:street\"=Main Xing East";
throwWarning: tr("addr:street={0} contains ' Xing. ', should likely be expanded to Crossing","{0.value}");
fixAdd: concat("addr:street=", replace(tag("addr:street")," Xing. ", " Crossing "));
group: tr("addr:street contains Xing, should likely be expanded to Crossing");
}

*["name"=~/ Acc\. /].highway_name {
assertNoMatch: "way \"name\"=Main Access East";
assertMatch: "way \"name\"=Main Acc East";
throwWarning: tr("Highway name contains Acc., may need to be expanded to Access");
fixAdd: concat("name=", replace(tag("name")," Acc. ", " Access "));
}

*["name"=~/ Arc\. /].highway_name {
assertNoMatch: "way \"name\"=Main Arcade East";
assertMatch: "way \"name\"=Main Arc East";
throwWarning: tr("Highway name contains Arc., may need to be expanded to Arcade");
fixAdd: concat("name=", replace(tag("name")," Arc. ", " Arcade "));
}

*["name"=~/ Av\. /].highway_name {
assertNoMatch: "way \"name\"=Main Avenue East";
assertMatch: "way \"name\"=Main Av East";
throwWarning: tr("Highway name contains Av., may need to be expanded to Avenue");
fixAdd: concat("name=", replace(tag("name")," Av. ", " Avenue "));
}

*["name"=~/ Ave\. /].highway_name {
assertNoMatch: "way \"name\"=Main Avenue East";
assertMatch: "way \"name\"=Main Ave East";
throwWarning: tr("Highway name contains Ave., may need to be expanded to Avenue");
fixAdd: concat("name=", replace(tag("name")," Ave. ", " Avenue "));
}

*["name"=~/ Blf\. /].highway_name {
assertNoMatch: "way \"name\"=Main Bluff East";
assertMatch: "way \"name\"=Main Blf East";
throwWarning: tr("Highway name contains Blf., may need to be expanded to Bluff");
fixAdd: concat("name=", replace(tag("name")," Blf. ", " Bluff "));
}

*["name"=~/ Blvd\. /].highway_name {
assertNoMatch: "way \"name\"=Main Boulevard East";
assertMatch: "way \"name\"=Main Blvd East";
throwWarning: tr("Highway name contains Blvd., may need to be expanded to Boulevard");
fixAdd: concat("name=", replace(tag("name")," Blvd. ", " Boulevard "));
}

*["name"=~/ Bnd\. /].highway_name {
assertNoMatch: "way \"name\"=Main Bend East";
assertMatch: "way \"name\"=Main Bnd East";
throwWarning: tr("Highway name contains Bnd., may need to be expanded to Bend");
fixAdd: concat("name=", replace(tag("name")," Bnd. ", " Bend "));
}

*["name"=~/ Br\. /].highway_name {
assertNoMatch: "way \"name\"=Main Bridge East";
assertMatch: "way \"name\"=Main Br East";
throwWarning: tr("Highway name contains Br., may need to be expanded to Bridge");
fixAdd: concat("name=", replace(tag("name")," Br. ", " Bridge "));
}

*["name"=~/ Brg\. /].highway_name {
assertNoMatch: "way \"name\"=Main Bridge East";
assertMatch: "way \"name\"=Main Brg East";
throwWarning: tr("Highway name contains Brg., may need to be expanded to Bridge");
fixAdd: concat("name=", replace(tag("name")," Brg. ", " Bridge "));
}

*["name"=~/ Byp\. /].highway_name {
assertNoMatch: "way \"name\"=Main Bypass East";
assertMatch: "way \"name\"=Main Byp East";
throwWarning: tr("Highway name contains Byp., may need to be expanded to Bypass");
fixAdd: concat("name=", replace(tag("name")," Byp. ", " Bypass "));
}

*["name"=~/ Cir\. /].highway_name {
assertNoMatch: "way \"name\"=Main Circle East";
assertMatch: "way \"name\"=Main Cir East";
throwWarning: tr("Highway name contains Cir., may need to be expanded to Circle");
fixAdd: concat("name=", replace(tag("name")," Cir. ", " Circle "));
}

*["name"=~/ Cr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Creek East";
assertMatch: "way \"name\"=Main Cr East";
throwWarning: tr("Highway name contains Cr., may need to be expanded to Creek");
fixAdd: concat("name=", replace(tag("name")," Cr. ", " Creek "));
}

*["name"=~/ Cres\. /].highway_name {
assertNoMatch: "way \"name\"=Main Crescent East";
assertMatch: "way \"name\"=Main Cres East";
throwWarning: tr("Highway name contains Cres., may need to be expanded to Crescent");
fixAdd: concat("name=", replace(tag("name")," Cres. ", " Crescent "));
}

*["name"=~/ Cswy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Causeway East";
assertMatch: "way \"name\"=Main Cswy East";
throwWarning: tr("Highway name contains Cswy., may need to be expanded to Causeway");
fixAdd: concat("name=", replace(tag("name")," Cswy. ", " Causeway "));
}

*["name"=~/ Ct\. /].highway_name {
assertNoMatch: "way \"name\"=Main Court East";
assertMatch: "way \"name\"=Main Ct East";
throwWarning: tr("Highway name contains Ct., may need to be expanded to Court");
fixAdd: concat("name=", replace(tag("name")," Ct. ", " Court "));
}

*["name"=~/ Ctr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Center East";
assertMatch: "way \"name\"=Main Ctr East";
throwWarning: tr("Highway name contains Ctr., may need to be expanded to Center");
fixAdd: concat("name=", replace(tag("name")," Ctr. ", " Center "));
}

*["name"=~/ Cv\. /].highway_name {
assertNoMatch: "way \"name\"=Main Cove East";
assertMatch: "way \"name\"=Main Cv East";
throwWarning: tr("Highway name contains Cv., may need to be expanded to Cove");
fixAdd: concat("name=", replace(tag("name")," Cv. ", " Cove "));
}

*["name"=~/ Dr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Drive East";
assertMatch: "way \"name\"=Main Dr East";
throwWarning: tr("Highway name contains Dr., may need to be expanded to Drive");
fixAdd: concat("name=", replace(tag("name")," Dr. ", " Drive "));
}

*["name"=~/ Expy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Expressway East";
assertMatch: "way \"name\"=Main Expy East";
throwWarning: tr("Highway name contains Expy., may need to be expanded to Expressway");
fixAdd: concat("name=", replace(tag("name")," Expy. ", " Expressway "));
}

*["name"=~/ Expwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Expressway East";
assertMatch: "way \"name\"=Main Expwy East";
throwWarning: tr("Highway name contains Expwy., may need to be expanded to Expressway");
fixAdd: concat("name=", replace(tag("name")," Expwy. ", " Expressway "));
}

*["name"=~/ Flds\. /].highway_name {
assertNoMatch: "way \"name\"=Main Fields East";
assertMatch: "way \"name\"=Main Flds East";
throwWarning: tr("Highway name contains Flds., may need to be expanded to Fields");
fixAdd: concat("name=", replace(tag("name")," Flds. ", " Fields "));
}

*["name"=~/ Fmrd\. /].highway_name {
assertNoMatch: "way \"name\"=Main Farm to Market Road East";
assertMatch: "way \"name\"=Main Fmrd East";
throwWarning: tr("Highway name contains Fmrd., may need to be expanded to Farm to Market Road");
fixAdd: concat("name=", replace(tag("name")," Fmrd. ", " Farm to Market Road "));
}

*["name"=~/ Fwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Freeway East";
assertMatch: "way \"name\"=Main Fwy East";
throwWarning: tr("Highway name contains Fwy., may need to be expanded to Freeway");
fixAdd: concat("name=", replace(tag("name")," Fwy. ", " Freeway "));
}

*["name"=~/ Gd\. /].highway_name {
assertNoMatch: "way \"name\"=Main Grade East";
assertMatch: "way \"name\"=Main Gd East";
throwWarning: tr("Highway name contains Gd., may need to be expanded to Grade");
fixAdd: concat("name=", replace(tag("name")," Gd. ", " Grade "));
}

*["name"=~/ Grv\. /].highway_name {
assertNoMatch: "way \"name\"=Main Grove East";
assertMatch: "way \"name\"=Main Grv East";
throwWarning: tr("Highway name contains Grv., may need to be expanded to Grove");
fixAdd: concat("name=", replace(tag("name")," Grv. ", " Grove "));
}

*["name"=~/ Hbr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Harbor East";
assertMatch: "way \"name\"=Main Hbr East";
throwWarning: tr("Highway name contains Hbr., may need to be expanded to Harbor");
fixAdd: concat("name=", replace(tag("name")," Hbr. ", " Harbor "));
}

*["name"=~/ Holw\. /].highway_name {
assertNoMatch: "way \"name\"=Main Hollow East";
assertMatch: "way \"name\"=Main Holw East";
throwWarning: tr("Highway name contains Holw., may need to be expanded to Hollow");
fixAdd: concat("name=", replace(tag("name")," Holw. ", " Hollow "));
}

*["name"=~/ Hts\. /].highway_name {
assertNoMatch: "way \"name\"=Main Heights East";
assertMatch: "way \"name\"=Main Hts East";
throwWarning: tr("Highway name contains Hts., may need to be expanded to Heights");
fixAdd: concat("name=", replace(tag("name")," Hts. ", " Heights "));
}

*["name"=~/ Hw\. /].highway_name {
assertNoMatch: "way \"name\"=Main Highway East";
assertMatch: "way \"name\"=Main Hw East";
throwWarning: tr("Highway name contains Hw., may need to be expanded to Highway");
fixAdd: concat("name=", replace(tag("name")," Hw. ", " Highway "));
}

*["name"=~/ Hwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Highway East";
assertMatch: "way \"name\"=Main Hwy East";
throwWarning: tr("Highway name contains Hwy., may need to be expanded to Highway");
fixAdd: concat("name=", replace(tag("name")," Hwy. ", " Highway "));
}

*["name"=~/ Lk\. /].highway_name {
assertNoMatch: "way \"name\"=Main Lake East";
assertMatch: "way \"name\"=Main Lk East";
throwWarning: tr("Highway name contains Lk., may need to be expanded to Lake");
fixAdd: concat("name=", replace(tag("name")," Lk. ", " Lake "));
}

*["name"=~/ Ln\. /].highway_name {
assertNoMatch: "way \"name\"=Main Lane East";
assertMatch: "way \"name\"=Main Ln East";
throwWarning: tr("Highway name contains Ln., may need to be expanded to Lane");
fixAdd: concat("name=", replace(tag("name")," Ln. ", " Lane "));
}

*["name"=~/ Lndg\. /].highway_name {
assertNoMatch: "way \"name\"=Main Landing East";
assertMatch: "way \"name\"=Main Lndg East";
throwWarning: tr("Highway name contains Lndg., may need to be expanded to Landing");
fixAdd: concat("name=", replace(tag("name")," Lndg. ", " Landing "));
}

*["name"=~/ Lp\. /].highway_name {
assertNoMatch: "way \"name\"=Main Loop East";
assertMatch: "way \"name\"=Main Lp East";
throwWarning: tr("Highway name contains Lp., may need to be expanded to Loop");
fixAdd: concat("name=", replace(tag("name")," Lp. ", " Loop "));
}

*["name"=~/ Mal\. /].highway_name {
assertNoMatch: "way \"name\"=Main Mall East";
assertMatch: "way \"name\"=Main Mal East";
throwWarning: tr("Highway name contains Mal., may need to be expanded to Mall");
fixAdd: concat("name=", replace(tag("name")," Mal. ", " Mall "));
}

*["name"=~/ Mt\. /].highway_name {
assertNoMatch: "way \"name\"=Main Mount East";
assertMatch: "way \"name\"=Main Mt East";
throwWarning: tr("Highway name contains Mt., may need to be expanded to Mount");
fixAdd: concat("name=", replace(tag("name")," Mt. ", " Mount "));
}

*["name"=~/ Mtwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Motorway East";
assertMatch: "way \"name\"=Main Mtwy East";
throwWarning: tr("Highway name contains Mtwy., may need to be expanded to Motorway");
fixAdd: concat("name=", replace(tag("name")," Mtwy. ", " Motorway "));
}

*["name"=~/ Ovps\. /].highway_name {
assertNoMatch: "way \"name\"=Main Overpass East";
assertMatch: "way \"name\"=Main Ovps East";
throwWarning: tr("Highway name contains Ovps., may need to be expanded to Overpass");
fixAdd: concat("name=", replace(tag("name")," Ovps. ", " Overpass "));
}

*["name"=~/ Pky\. /].highway_name {
assertNoMatch: "way \"name\"=Main Parkway East";
assertMatch: "way \"name\"=Main Pky East";
throwWarning: tr("Highway name contains Pky., may need to be expanded to Parkway");
fixAdd: concat("name=", replace(tag("name")," Pky. ", " Parkway "));
}

*["name"=~/ Pkwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Parkway East";
assertMatch: "way \"name\"=Main Pkwy East";
throwWarning: tr("Highway name contains Pkwy., may need to be expanded to Parkway");
fixAdd: concat("name=", replace(tag("name")," Pkwy. ", " Parkway "));
}

*["name"=~/ Pl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Place East";
assertMatch: "way \"name\"=Main Pl East";
throwWarning: tr("Highway name contains Pl., may need to be expanded to Place");
fixAdd: concat("name=", replace(tag("name")," Pl. ", " Place "));
}

*["name"=~/ Plz\. /].highway_name {
assertNoMatch: "way \"name\"=Main Plaza East";
assertMatch: "way \"name\"=Main Plz East";
throwWarning: tr("Highway name contains Plz., may need to be expanded to Plaza");
fixAdd: concat("name=", replace(tag("name")," Plz. ", " Plaza "));
}

*["name"=~/ Pvt\. /].highway_name {
assertNoMatch: "way \"name\"=Main Private East";
assertMatch: "way \"name\"=Main Pvt East";
throwWarning: tr("Highway name contains Pvt., may need to be expanded to Private");
fixAdd: concat("name=", replace(tag("name")," Pvt. ", " Private "));
}

*["name"=~/ Rd\. /].highway_name {
assertNoMatch: "way \"name\"=Main Road East";
assertMatch: "way \"name\"=Main Rd East";
throwWarning: tr("Highway name contains Rd., may need to be expanded to Road");
fixAdd: concat("name=", replace(tag("name")," Rd. ", " Road "));
}

*["name"=~/ Rdg\. /].highway_name {
assertNoMatch: "way \"name\"=Main Ridge East";
assertMatch: "way \"name\"=Main Rdg East";
throwWarning: tr("Highway name contains Rdg., may need to be expanded to Ridge");
fixAdd: concat("name=", replace(tag("name")," Rdg. ", " Ridge "));
}

*["name"=~/ Rmrd\. /].highway_name {
assertNoMatch: "way \"name\"=Main Ranch to Market Road East";
assertMatch: "way \"name\"=Main Rmrd East";
throwWarning: tr("Highway name contains Rmrd., may need to be expanded to Ranch to Market Road");
fixAdd: concat("name=", replace(tag("name")," Rmrd. ", " Ranch to Market Road "));
}

*["name"=~/ Rte\. /].highway_name {
assertNoMatch: "way \"name\"=Main Route East";
assertMatch: "way \"name\"=Main Rte East";
throwWarning: tr("Highway name contains Rte., may need to be expanded to Route");
fixAdd: concat("name=", replace(tag("name")," Rte. ", " Route "));
}

*["name"=~/ Skwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Skyway East";
assertMatch: "way \"name\"=Main Skwy East";
throwWarning: tr("Highway name contains Skwy., may need to be expanded to Skyway");
fixAdd: concat("name=", replace(tag("name")," Skwy. ", " Skyway "));
}

*["name"=~/ Sq\. /].highway_name {
assertNoMatch: "way \"name\"=Main Square East";
assertMatch: "way \"name\"=Main Sq East";
throwWarning: tr("Highway name contains Sq., may need to be expanded to Square");
fixAdd: concat("name=", replace(tag("name")," Sq. ", " Square "));
}

*["name"=~/ Srvc\. /].highway_name {
assertNoMatch: "way \"name\"=Main Service East";
assertMatch: "way \"name\"=Main Srvc East";
throwWarning: tr("Highway name contains Srvc., may need to be expanded to Service");
fixAdd: concat("name=", replace(tag("name")," Srvc. ", " Service "));
}

*["name"=~/ St\. /].highway_name {
assertNoMatch: "way \"name\"=Main Street East";
assertMatch: "way \"name\"=Main St East";
throwWarning: tr("Highway name contains St., may need to be expanded to Street");
fixAdd: concat("name=", replace(tag("name")," St. ", " Street "));
}

*["name"=~/ Ter\. /].highway_name {
assertNoMatch: "way \"name\"=Main Terrace East";
assertMatch: "way \"name\"=Main Ter East";
throwWarning: tr("Highway name contains Ter., may need to be expanded to Terrace");
fixAdd: concat("name=", replace(tag("name")," Ter. ", " Terrace "));
}

*["name"=~/ Tfwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Trafficway East";
assertMatch: "way \"name\"=Main Tfwy East";
throwWarning: tr("Highway name contains Tfwy., may need to be expanded to Trafficway");
fixAdd: concat("name=", replace(tag("name")," Tfwy. ", " Trafficway "));
}

*["name"=~/ Thfr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Thoroughfare East";
assertMatch: "way \"name\"=Main Thfr East";
throwWarning: tr("Highway name contains Thfr., may need to be expanded to Thoroughfare");
fixAdd: concat("name=", replace(tag("name")," Thfr. ", " Thoroughfare "));
}

*["name"=~/ Thwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Throughway East";
assertMatch: "way \"name\"=Main Thwy East";
throwWarning: tr("Highway name contains Thwy., may need to be expanded to Throughway");
fixAdd: concat("name=", replace(tag("name")," Thwy. ", " Throughway "));
}

*["name"=~/ Tl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Trail East";
assertMatch: "way \"name\"=Main Tl East";
throwWarning: tr("Highway name contains Tl., may need to be expanded to Trail");
fixAdd: concat("name=", replace(tag("name")," Tl. ", " Trail "));
}

*["name"=~/ Tpke\. /].highway_name {
assertNoMatch: "way \"name\"=Main Turnpike East";
assertMatch: "way \"name\"=Main Tpke East";
throwWarning: tr("Highway name contains Tpke., may need to be expanded to Turnpike");
fixAdd: concat("name=", replace(tag("name")," Tpke. ", " Turnpike "));
}

*["name"=~/ Trce\. /].highway_name {
assertNoMatch: "way \"name\"=Main Trace East";
assertMatch: "way \"name\"=Main Trce East";
throwWarning: tr("Highway name contains Trce., may need to be expanded to Trace");
fixAdd: concat("name=", replace(tag("name")," Trce. ", " Trace "));
}

*["name"=~/ Tr\. /].highway_name {
assertNoMatch: "way \"name\"=Main Trail East";
assertMatch: "way \"name\"=Main Tr East";
throwWarning: tr("Highway name contains Tr., may need to be expanded to Trail");
fixAdd: concat("name=", replace(tag("name")," Tr. ", " Trail "));
}

*["name"=~/ Trl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Trail East";
assertMatch: "way \"name\"=Main Trl East";
throwWarning: tr("Highway name contains Trl., may need to be expanded to Trail");
fixAdd: concat("name=", replace(tag("name")," Trl. ", " Trail "));
}

*["name"=~/ Tunl\. /].highway_name {
assertNoMatch: "way \"name\"=Main Tunnel East";
assertMatch: "way \"name\"=Main Tunl East";
throwWarning: tr("Highway name contains Tunl., may need to be expanded to Tunnel");
fixAdd: concat("name=", replace(tag("name")," Tunl. ", " Tunnel "));
}

*["name"=~/ Unp\. /].highway_name {
assertNoMatch: "way \"name\"=Main Underpass East";
assertMatch: "way \"name\"=Main Unp East";
throwWarning: tr("Highway name contains Unp., may need to be expanded to Underpass");
fixAdd: concat("name=", replace(tag("name")," Unp. ", " Underpass "));
}

*["name"=~/ Vly\. /].highway_name {
assertNoMatch: "way \"name\"=Main Valley East";
assertMatch: "way \"name\"=Main Vly East";
throwWarning: tr("Highway name contains Vly., may need to be expanded to Valley");
fixAdd: concat("name=", replace(tag("name")," Vly. ", " Valley "));
}

*["name"=~/ Vw\. /].highway_name {
assertNoMatch: "way \"name\"=Main View East";
assertMatch: "way \"name\"=Main Vw East";
throwWarning: tr("Highway name contains Vw., may need to be expanded to View");
fixAdd: concat("name=", replace(tag("name")," Vw. ", " View "));
}

*["name"=~/ Wkwy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Walkway East";
assertMatch: "way \"name\"=Main Wkwy East";
throwWarning: tr("Highway name contains Wkwy., may need to be expanded to Walkway");
fixAdd: concat("name=", replace(tag("name")," Wkwy. ", " Walkway "));
}

*["name"=~/ Wy\. /].highway_name {
assertNoMatch: "way \"name\"=Main Way East";
assertMatch: "way \"name\"=Main Wy East";
throwWarning: tr("Highway name contains Wy., may need to be expanded to Way");
fixAdd: concat("name=", replace(tag("name")," Wy. ", " Way "));
}

*["name"=~/ Xing\. /].highway_name {
assertNoMatch: "way \"name\"=Main Crossing East";
assertMatch: "way \"name\"=Main Xing East";
throwWarning: tr("Highway name contains Xing., may need to be expanded to Crossing");
fixAdd: concat("name=", replace(tag("name")," Xing. ", " Crossing "));
}

*["addr:street"]["addr:street"=~/^Acc /] {
assertNoMatch: "way \"addr:street\"=Access Foo";
assertMatch: "way \"addr:street\"=Acc Foo";
throwWarning: tr("addr:street={0} begins with Acc, should likely be expanded to Access","{0.value}");
fixAdd: concat("addr:street=", "Access", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Acc, may need to be expanded to Access");
}

*["addr:street"]["addr:street"=~/^Arc /] {
assertNoMatch: "way \"addr:street\"=Arcade Foo";
assertMatch: "way \"addr:street\"=Arc Foo";
throwWarning: tr("addr:street={0} begins with Arc, should likely be expanded to Arcade","{0.value}");
fixAdd: concat("addr:street=", "Arcade", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Arc, may need to be expanded to Arcade");
}

*["addr:street"]["addr:street"=~/^Av /] {
assertNoMatch: "way \"addr:street\"=Avenue Foo";
assertMatch: "way \"addr:street\"=Av Foo";
throwWarning: tr("addr:street={0} begins with Av, should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", "Avenue", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Av, may need to be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/^Ave /] {
assertNoMatch: "way \"addr:street\"=Avenue Foo";
assertMatch: "way \"addr:street\"=Ave Foo";
throwWarning: tr("addr:street={0} begins with Ave, should likely be expanded to Avenue","{0.value}");
fixAdd: concat("addr:street=", "Avenue", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Ave, may need to be expanded to Avenue");
}

*["addr:street"]["addr:street"=~/^Blf /] {
assertNoMatch: "way \"addr:street\"=Bluff Foo";
assertMatch: "way \"addr:street\"=Blf Foo";
throwWarning: tr("addr:street={0} begins with Blf, should likely be expanded to Bluff","{0.value}");
fixAdd: concat("addr:street=", "Bluff", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Blf, may need to be expanded to Bluff");
}

*["addr:street"]["addr:street"=~/^Blvd /] {
assertNoMatch: "way \"addr:street\"=Boulevard Foo";
assertMatch: "way \"addr:street\"=Blvd Foo";
throwWarning: tr("addr:street={0} begins with Blvd, should likely be expanded to Boulevard","{0.value}");
fixAdd: concat("addr:street=", "Boulevard", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Blvd, may need to be expanded to Boulevard");
}

*["addr:street"]["addr:street"=~/^Bnd /] {
assertNoMatch: "way \"addr:street\"=Bend Foo";
assertMatch: "way \"addr:street\"=Bnd Foo";
throwWarning: tr("addr:street={0} begins with Bnd, should likely be expanded to Bend","{0.value}");
fixAdd: concat("addr:street=", "Bend", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Bnd, may need to be expanded to Bend");
}

*["addr:street"]["addr:street"=~/^Br /] {
assertNoMatch: "way \"addr:street\"=Bridge Foo";
assertMatch: "way \"addr:street\"=Br Foo";
throwWarning: tr("addr:street={0} begins with Br, should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", "Bridge", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Br, may need to be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/^Brg /] {
assertNoMatch: "way \"addr:street\"=Bridge Foo";
assertMatch: "way \"addr:street\"=Brg Foo";
throwWarning: tr("addr:street={0} begins with Brg, should likely be expanded to Bridge","{0.value}");
fixAdd: concat("addr:street=", "Bridge", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Brg, may need to be expanded to Bridge");
}

*["addr:street"]["addr:street"=~/^Byp /] {
assertNoMatch: "way \"addr:street\"=Bypass Foo";
assertMatch: "way \"addr:street\"=Byp Foo";
throwWarning: tr("addr:street={0} begins with Byp, should likely be expanded to Bypass","{0.value}");
fixAdd: concat("addr:street=", "Bypass", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Byp, may need to be expanded to Bypass");
}

*["addr:street"]["addr:street"=~/^Cir /] {
assertNoMatch: "way \"addr:street\"=Circle Foo";
assertMatch: "way \"addr:street\"=Cir Foo";
throwWarning: tr("addr:street={0} begins with Cir, should likely be expanded to Circle","{0.value}");
fixAdd: concat("addr:street=", "Circle", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Cir, may need to be expanded to Circle");
}

*["addr:street"]["addr:street"=~/^Cr /] {
assertNoMatch: "way \"addr:street\"=Creek Foo";
assertMatch: "way \"addr:street\"=Cr Foo";
throwWarning: tr("addr:street={0} begins with Cr, should likely be expanded to Creek","{0.value}");
fixAdd: concat("addr:street=", "Creek", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Cr, may need to be expanded to Creek");
}

*["addr:street"]["addr:street"=~/^Cres /] {
assertNoMatch: "way \"addr:street\"=Crescent Foo";
assertMatch: "way \"addr:street\"=Cres Foo";
throwWarning: tr("addr:street={0} begins with Cres, should likely be expanded to Crescent","{0.value}");
fixAdd: concat("addr:street=", "Crescent", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Cres, may need to be expanded to Crescent");
}

*["addr:street"]["addr:street"=~/^Cswy /] {
assertNoMatch: "way \"addr:street\"=Causeway Foo";
assertMatch: "way \"addr:street\"=Cswy Foo";
throwWarning: tr("addr:street={0} begins with Cswy, should likely be expanded to Causeway","{0.value}");
fixAdd: concat("addr:street=", "Causeway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Cswy, may need to be expanded to Causeway");
}

*["addr:street"]["addr:street"=~/^Ct /] {
assertNoMatch: "way \"addr:street\"=Court Foo";
assertMatch: "way \"addr:street\"=Ct Foo";
throwWarning: tr("addr:street={0} begins with Ct, should likely be expanded to Court","{0.value}");
fixAdd: concat("addr:street=", "Court", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Ct, may need to be expanded to Court");
}

*["addr:street"]["addr:street"=~/^Ctr /] {
assertNoMatch: "way \"addr:street\"=Center Foo";
assertMatch: "way \"addr:street\"=Ctr Foo";
throwWarning: tr("addr:street={0} begins with Ctr, should likely be expanded to Center","{0.value}");
fixAdd: concat("addr:street=", "Center", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Ctr, may need to be expanded to Center");
}

*["addr:street"]["addr:street"=~/^Cv /] {
assertNoMatch: "way \"addr:street\"=Cove Foo";
assertMatch: "way \"addr:street\"=Cv Foo";
throwWarning: tr("addr:street={0} begins with Cv, should likely be expanded to Cove","{0.value}");
fixAdd: concat("addr:street=", "Cove", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Cv, may need to be expanded to Cove");
}

*["addr:street"]["addr:street"=~/^Dr /] {
assertNoMatch: "way \"addr:street\"=Drive Foo";
assertMatch: "way \"addr:street\"=Dr Foo";
throwWarning: tr("addr:street={0} begins with Dr, should likely be expanded to Drive","{0.value}");
fixAdd: concat("addr:street=", "Drive", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Dr, may need to be expanded to Drive");
}

*["addr:street"]["addr:street"=~/^Expy /] {
assertNoMatch: "way \"addr:street\"=Expressway Foo";
assertMatch: "way \"addr:street\"=Expy Foo";
throwWarning: tr("addr:street={0} begins with Expy, should likely be expanded to Expressway","{0.value}");
fixAdd: concat("addr:street=", "Expressway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Expy, may need to be expanded to Expressway");
}

*["addr:street"]["addr:street"=~/^Expwy /] {
assertNoMatch: "way \"addr:street\"=Expressway Foo";
assertMatch: "way \"addr:street\"=Expwy Foo";
throwWarning: tr("addr:street={0} begins with Expwy, should likely be expanded to Expressway","{0.value}");
fixAdd: concat("addr:street=", "Expressway", substring(tag("addr:street"), 5));
group: tr("addr:street begins with Expwy, may need to be expanded to Expressway");
}

*["addr:street"]["addr:street"=~/^Flds /] {
assertNoMatch: "way \"addr:street\"=Fields Foo";
assertMatch: "way \"addr:street\"=Flds Foo";
throwWarning: tr("addr:street={0} begins with Flds, should likely be expanded to Fields","{0.value}");
fixAdd: concat("addr:street=", "Fields", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Flds, may need to be expanded to Fields");
}

*["addr:street"]["addr:street"=~/^Fmrd /] {
assertNoMatch: "way \"addr:street\"=Farm to Market Road Foo";
assertMatch: "way \"addr:street\"=Fmrd Foo";
throwWarning: tr("addr:street={0} begins with Fmrd, should likely be expanded to Farm to Market Road","{0.value}");
fixAdd: concat("addr:street=", "Farm to Market Road", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Fmrd, may need to be expanded to Farm to Market Road");
}

*["addr:street"]["addr:street"=~/^Fwy /] {
assertNoMatch: "way \"addr:street\"=Freeway Foo";
assertMatch: "way \"addr:street\"=Fwy Foo";
throwWarning: tr("addr:street={0} begins with Fwy, should likely be expanded to Freeway","{0.value}");
fixAdd: concat("addr:street=", "Freeway", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Fwy, may need to be expanded to Freeway");
}

*["addr:street"]["addr:street"=~/^Gd /] {
assertNoMatch: "way \"addr:street\"=Grade Foo";
assertMatch: "way \"addr:street\"=Gd Foo";
throwWarning: tr("addr:street={0} begins with Gd, should likely be expanded to Grade","{0.value}");
fixAdd: concat("addr:street=", "Grade", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Gd, may need to be expanded to Grade");
}

*["addr:street"]["addr:street"=~/^Grv /] {
assertNoMatch: "way \"addr:street\"=Grove Foo";
assertMatch: "way \"addr:street\"=Grv Foo";
throwWarning: tr("addr:street={0} begins with Grv, should likely be expanded to Grove","{0.value}");
fixAdd: concat("addr:street=", "Grove", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Grv, may need to be expanded to Grove");
}

*["addr:street"]["addr:street"=~/^Hbr /] {
assertNoMatch: "way \"addr:street\"=Harbor Foo";
assertMatch: "way \"addr:street\"=Hbr Foo";
throwWarning: tr("addr:street={0} begins with Hbr, should likely be expanded to Harbor","{0.value}");
fixAdd: concat("addr:street=", "Harbor", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Hbr, may need to be expanded to Harbor");
}

*["addr:street"]["addr:street"=~/^Holw /] {
assertNoMatch: "way \"addr:street\"=Hollow Foo";
assertMatch: "way \"addr:street\"=Holw Foo";
throwWarning: tr("addr:street={0} begins with Holw, should likely be expanded to Hollow","{0.value}");
fixAdd: concat("addr:street=", "Hollow", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Holw, may need to be expanded to Hollow");
}

*["addr:street"]["addr:street"=~/^Hts /] {
assertNoMatch: "way \"addr:street\"=Heights Foo";
assertMatch: "way \"addr:street\"=Hts Foo";
throwWarning: tr("addr:street={0} begins with Hts, should likely be expanded to Heights","{0.value}");
fixAdd: concat("addr:street=", "Heights", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Hts, may need to be expanded to Heights");
}

*["addr:street"]["addr:street"=~/^Hw /] {
assertNoMatch: "way \"addr:street\"=Highway Foo";
assertMatch: "way \"addr:street\"=Hw Foo";
throwWarning: tr("addr:street={0} begins with Hw, should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", "Highway", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Hw, may need to be expanded to Highway");
}

*["addr:street"]["addr:street"=~/^Hwy /] {
assertNoMatch: "way \"addr:street\"=Highway Foo";
assertMatch: "way \"addr:street\"=Hwy Foo";
throwWarning: tr("addr:street={0} begins with Hwy, should likely be expanded to Highway","{0.value}");
fixAdd: concat("addr:street=", "Highway", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Hwy, may need to be expanded to Highway");
}

*["addr:street"]["addr:street"=~/^Lk /] {
assertNoMatch: "way \"addr:street\"=Lake Foo";
assertMatch: "way \"addr:street\"=Lk Foo";
throwWarning: tr("addr:street={0} begins with Lk, should likely be expanded to Lake","{0.value}");
fixAdd: concat("addr:street=", "Lake", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Lk, may need to be expanded to Lake");
}

*["addr:street"]["addr:street"=~/^Ln /] {
assertNoMatch: "way \"addr:street\"=Lane Foo";
assertMatch: "way \"addr:street\"=Ln Foo";
throwWarning: tr("addr:street={0} begins with Ln, should likely be expanded to Lane","{0.value}");
fixAdd: concat("addr:street=", "Lane", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Ln, may need to be expanded to Lane");
}

*["addr:street"]["addr:street"=~/^Lndg /] {
assertNoMatch: "way \"addr:street\"=Landing Foo";
assertMatch: "way \"addr:street\"=Lndg Foo";
throwWarning: tr("addr:street={0} begins with Lndg, should likely be expanded to Landing","{0.value}");
fixAdd: concat("addr:street=", "Landing", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Lndg, may need to be expanded to Landing");
}

*["addr:street"]["addr:street"=~/^Lp /] {
assertNoMatch: "way \"addr:street\"=Loop Foo";
assertMatch: "way \"addr:street\"=Lp Foo";
throwWarning: tr("addr:street={0} begins with Lp, should likely be expanded to Loop","{0.value}");
fixAdd: concat("addr:street=", "Loop", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Lp, may need to be expanded to Loop");
}

*["addr:street"]["addr:street"=~/^Mal /] {
assertNoMatch: "way \"addr:street\"=Mall Foo";
assertMatch: "way \"addr:street\"=Mal Foo";
throwWarning: tr("addr:street={0} begins with Mal, should likely be expanded to Mall","{0.value}");
fixAdd: concat("addr:street=", "Mall", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Mal, may need to be expanded to Mall");
}

*["addr:street"]["addr:street"=~/^Mt /] {
assertNoMatch: "way \"addr:street\"=Mount Foo";
assertMatch: "way \"addr:street\"=Mt Foo";
throwWarning: tr("addr:street={0} begins with Mt, should likely be expanded to Mount","{0.value}");
fixAdd: concat("addr:street=", "Mount", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Mt, may need to be expanded to Mount");
}

*["addr:street"]["addr:street"=~/^Mtwy /] {
assertNoMatch: "way \"addr:street\"=Motorway Foo";
assertMatch: "way \"addr:street\"=Mtwy Foo";
throwWarning: tr("addr:street={0} begins with Mtwy, should likely be expanded to Motorway","{0.value}");
fixAdd: concat("addr:street=", "Motorway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Mtwy, may need to be expanded to Motorway");
}

*["addr:street"]["addr:street"=~/^Ovps /] {
assertNoMatch: "way \"addr:street\"=Overpass Foo";
assertMatch: "way \"addr:street\"=Ovps Foo";
throwWarning: tr("addr:street={0} begins with Ovps, should likely be expanded to Overpass","{0.value}");
fixAdd: concat("addr:street=", "Overpass", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Ovps, may need to be expanded to Overpass");
}

*["addr:street"]["addr:street"=~/^Pky /] {
assertNoMatch: "way \"addr:street\"=Parkway Foo";
assertMatch: "way \"addr:street\"=Pky Foo";
throwWarning: tr("addr:street={0} begins with Pky, should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", "Parkway", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Pky, may need to be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/^Pkwy /] {
assertNoMatch: "way \"addr:street\"=Parkway Foo";
assertMatch: "way \"addr:street\"=Pkwy Foo";
throwWarning: tr("addr:street={0} begins with Pkwy, should likely be expanded to Parkway","{0.value}");
fixAdd: concat("addr:street=", "Parkway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Pkwy, may need to be expanded to Parkway");
}

*["addr:street"]["addr:street"=~/^Pl /] {
assertNoMatch: "way \"addr:street\"=Place Foo";
assertMatch: "way \"addr:street\"=Pl Foo";
throwWarning: tr("addr:street={0} begins with Pl, should likely be expanded to Place","{0.value}");
fixAdd: concat("addr:street=", "Place", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Pl, may need to be expanded to Place");
}

*["addr:street"]["addr:street"=~/^Plz /] {
assertNoMatch: "way \"addr:street\"=Plaza Foo";
assertMatch: "way \"addr:street\"=Plz Foo";
throwWarning: tr("addr:street={0} begins with Plz, should likely be expanded to Plaza","{0.value}");
fixAdd: concat("addr:street=", "Plaza", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Plz, may need to be expanded to Plaza");
}

*["addr:street"]["addr:street"=~/^Pvt /] {
assertNoMatch: "way \"addr:street\"=Private Foo";
assertMatch: "way \"addr:street\"=Pvt Foo";
throwWarning: tr("addr:street={0} begins with Pvt, should likely be expanded to Private","{0.value}");
fixAdd: concat("addr:street=", "Private", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Pvt, may need to be expanded to Private");
}

*["addr:street"]["addr:street"=~/^Rd /] {
assertNoMatch: "way \"addr:street\"=Road Foo";
assertMatch: "way \"addr:street\"=Rd Foo";
throwWarning: tr("addr:street={0} begins with Rd, should likely be expanded to Road","{0.value}");
fixAdd: concat("addr:street=", "Road", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Rd, may need to be expanded to Road");
}

*["addr:street"]["addr:street"=~/^Rdg /] {
assertNoMatch: "way \"addr:street\"=Ridge Foo";
assertMatch: "way \"addr:street\"=Rdg Foo";
throwWarning: tr("addr:street={0} begins with Rdg, should likely be expanded to Ridge","{0.value}");
fixAdd: concat("addr:street=", "Ridge", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Rdg, may need to be expanded to Ridge");
}

*["addr:street"]["addr:street"=~/^Rmrd /] {
assertNoMatch: "way \"addr:street\"=Ranch to Market Road Foo";
assertMatch: "way \"addr:street\"=Rmrd Foo";
throwWarning: tr("addr:street={0} begins with Rmrd, should likely be expanded to Ranch to Market Road","{0.value}");
fixAdd: concat("addr:street=", "Ranch to Market Road", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Rmrd, may need to be expanded to Ranch to Market Road");
}

*["addr:street"]["addr:street"=~/^Rte /] {
assertNoMatch: "way \"addr:street\"=Route Foo";
assertMatch: "way \"addr:street\"=Rte Foo";
throwWarning: tr("addr:street={0} begins with Rte, should likely be expanded to Route","{0.value}");
fixAdd: concat("addr:street=", "Route", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Rte, may need to be expanded to Route");
}

*["addr:street"]["addr:street"=~/^Skwy /] {
assertNoMatch: "way \"addr:street\"=Skyway Foo";
assertMatch: "way \"addr:street\"=Skwy Foo";
throwWarning: tr("addr:street={0} begins with Skwy, should likely be expanded to Skyway","{0.value}");
fixAdd: concat("addr:street=", "Skyway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Skwy, may need to be expanded to Skyway");
}

*["addr:street"]["addr:street"=~/^Sq /] {
assertNoMatch: "way \"addr:street\"=Square Foo";
assertMatch: "way \"addr:street\"=Sq Foo";
throwWarning: tr("addr:street={0} begins with Sq, should likely be expanded to Square","{0.value}");
fixAdd: concat("addr:street=", "Square", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Sq, may need to be expanded to Square");
}

*["addr:street"]["addr:street"=~/^Srvc /] {
assertNoMatch: "way \"addr:street\"=Service Foo";
assertMatch: "way \"addr:street\"=Srvc Foo";
throwWarning: tr("addr:street={0} begins with Srvc, should likely be expanded to Service","{0.value}");
fixAdd: concat("addr:street=", "Service", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Srvc, may need to be expanded to Service");
}

*["addr:street"]["addr:street"=~/^St /] {
assertNoMatch: "way \"addr:street\"=Street Foo";
assertMatch: "way \"addr:street\"=St Foo";
throwWarning: tr("addr:street={0} begins with St, should likely be expanded to Street","{0.value}");
fixAdd: concat("addr:street=", "Street", substring(tag("addr:street"), 2));
group: tr("addr:street begins with St, may need to be expanded to Street");
}

*["addr:street"]["addr:street"=~/^Ter /] {
assertNoMatch: "way \"addr:street\"=Terrace Foo";
assertMatch: "way \"addr:street\"=Ter Foo";
throwWarning: tr("addr:street={0} begins with Ter, should likely be expanded to Terrace","{0.value}");
fixAdd: concat("addr:street=", "Terrace", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Ter, may need to be expanded to Terrace");
}

*["addr:street"]["addr:street"=~/^Tfwy /] {
assertNoMatch: "way \"addr:street\"=Trafficway Foo";
assertMatch: "way \"addr:street\"=Tfwy Foo";
throwWarning: tr("addr:street={0} begins with Tfwy, should likely be expanded to Trafficway","{0.value}");
fixAdd: concat("addr:street=", "Trafficway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Tfwy, may need to be expanded to Trafficway");
}

*["addr:street"]["addr:street"=~/^Thfr /] {
assertNoMatch: "way \"addr:street\"=Thoroughfare Foo";
assertMatch: "way \"addr:street\"=Thfr Foo";
throwWarning: tr("addr:street={0} begins with Thfr, should likely be expanded to Thoroughfare","{0.value}");
fixAdd: concat("addr:street=", "Thoroughfare", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Thfr, may need to be expanded to Thoroughfare");
}

*["addr:street"]["addr:street"=~/^Thwy /] {
assertNoMatch: "way \"addr:street\"=Throughway Foo";
assertMatch: "way \"addr:street\"=Thwy Foo";
throwWarning: tr("addr:street={0} begins with Thwy, should likely be expanded to Throughway","{0.value}");
fixAdd: concat("addr:street=", "Throughway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Thwy, may need to be expanded to Throughway");
}

*["addr:street"]["addr:street"=~/^Tl /] {
assertNoMatch: "way \"addr:street\"=Trail Foo";
assertMatch: "way \"addr:street\"=Tl Foo";
throwWarning: tr("addr:street={0} begins with Tl, should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", "Trail", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Tl, may need to be expanded to Trail");
}

*["addr:street"]["addr:street"=~/^Tpke /] {
assertNoMatch: "way \"addr:street\"=Turnpike Foo";
assertMatch: "way \"addr:street\"=Tpke Foo";
throwWarning: tr("addr:street={0} begins with Tpke, should likely be expanded to Turnpike","{0.value}");
fixAdd: concat("addr:street=", "Turnpike", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Tpke, may need to be expanded to Turnpike");
}

*["addr:street"]["addr:street"=~/^Trce /] {
assertNoMatch: "way \"addr:street\"=Trace Foo";
assertMatch: "way \"addr:street\"=Trce Foo";
throwWarning: tr("addr:street={0} begins with Trce, should likely be expanded to Trace","{0.value}");
fixAdd: concat("addr:street=", "Trace", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Trce, may need to be expanded to Trace");
}

*["addr:street"]["addr:street"=~/^Tr /] {
assertNoMatch: "way \"addr:street\"=Trail Foo";
assertMatch: "way \"addr:street\"=Tr Foo";
throwWarning: tr("addr:street={0} begins with Tr, should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", "Trail", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Tr, may need to be expanded to Trail");
}

*["addr:street"]["addr:street"=~/^Trl /] {
assertNoMatch: "way \"addr:street\"=Trail Foo";
assertMatch: "way \"addr:street\"=Trl Foo";
throwWarning: tr("addr:street={0} begins with Trl, should likely be expanded to Trail","{0.value}");
fixAdd: concat("addr:street=", "Trail", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Trl, may need to be expanded to Trail");
}

*["addr:street"]["addr:street"=~/^Tunl /] {
assertNoMatch: "way \"addr:street\"=Tunnel Foo";
assertMatch: "way \"addr:street\"=Tunl Foo";
throwWarning: tr("addr:street={0} begins with Tunl, should likely be expanded to Tunnel","{0.value}");
fixAdd: concat("addr:street=", "Tunnel", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Tunl, may need to be expanded to Tunnel");
}

*["addr:street"]["addr:street"=~/^Unp /] {
assertNoMatch: "way \"addr:street\"=Underpass Foo";
assertMatch: "way \"addr:street\"=Unp Foo";
throwWarning: tr("addr:street={0} begins with Unp, should likely be expanded to Underpass","{0.value}");
fixAdd: concat("addr:street=", "Underpass", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Unp, may need to be expanded to Underpass");
}

*["addr:street"]["addr:street"=~/^Vly /] {
assertNoMatch: "way \"addr:street\"=Valley Foo";
assertMatch: "way \"addr:street\"=Vly Foo";
throwWarning: tr("addr:street={0} begins with Vly, should likely be expanded to Valley","{0.value}");
fixAdd: concat("addr:street=", "Valley", substring(tag("addr:street"), 3));
group: tr("addr:street begins with Vly, may need to be expanded to Valley");
}

*["addr:street"]["addr:street"=~/^Vw /] {
assertNoMatch: "way \"addr:street\"=View Foo";
assertMatch: "way \"addr:street\"=Vw Foo";
throwWarning: tr("addr:street={0} begins with Vw, should likely be expanded to View","{0.value}");
fixAdd: concat("addr:street=", "View", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Vw, may need to be expanded to View");
}

*["addr:street"]["addr:street"=~/^Wkwy /] {
assertNoMatch: "way \"addr:street\"=Walkway Foo";
assertMatch: "way \"addr:street\"=Wkwy Foo";
throwWarning: tr("addr:street={0} begins with Wkwy, should likely be expanded to Walkway","{0.value}");
fixAdd: concat("addr:street=", "Walkway", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Wkwy, may need to be expanded to Walkway");
}

*["addr:street"]["addr:street"=~/^Wy /] {
assertNoMatch: "way \"addr:street\"=Way Foo";
assertMatch: "way \"addr:street\"=Wy Foo";
throwWarning: tr("addr:street={0} begins with Wy, should likely be expanded to Way","{0.value}");
fixAdd: concat("addr:street=", "Way", substring(tag("addr:street"), 2));
group: tr("addr:street begins with Wy, may need to be expanded to Way");
}

*["addr:street"]["addr:street"=~/^Xing /] {
assertNoMatch: "way \"addr:street\"=Crossing Foo";
assertMatch: "way \"addr:street\"=Xing Foo";
throwWarning: tr("addr:street={0} begins with Xing, should likely be expanded to Crossing","{0.value}");
fixAdd: concat("addr:street=", "Crossing", substring(tag("addr:street"), 4));
group: tr("addr:street begins with Xing, may need to be expanded to Crossing");
}

*["name"=~/^Acc /].highway_name {
assertNoMatch: "way \"name\"=Access Foo";
assertMatch: "way \"name\"=Acc Foo";
throwWarning: tr("Highway name begins with Acc, may need to be expanded to Access");
fixAdd: concat("name=", "Access", substring(tag("name"), 3));
}

*["name"=~/^Arc /].highway_name {
assertNoMatch: "way \"name\"=Arcade Foo";
assertMatch: "way \"name\"=Arc Foo";
throwWarning: tr("Highway name begins with Arc, may need to be expanded to Arcade");
fixAdd: concat("name=", "Arcade", substring(tag("name"), 3));
}

*["name"=~/^Av /].highway_name {
assertNoMatch: "way \"name\"=Avenue Foo";
assertMatch: "way \"name\"=Av Foo";
throwWarning: tr("Highway name begins with Av, may need to be expanded to Avenue");
fixAdd: concat("name=", "Avenue", substring(tag("name"), 2));
}

*["name"=~/^Ave /].highway_name {
assertNoMatch: "way \"name\"=Avenue Foo";
assertMatch: "way \"name\"=Ave Foo";
throwWarning: tr("Highway name begins with Ave, may need to be expanded to Avenue");
fixAdd: concat("name=", "Avenue", substring(tag("name"), 3));
}

*["name"=~/^Blf /].highway_name {
assertNoMatch: "way \"name\"=Bluff Foo";
assertMatch: "way \"name\"=Blf Foo";
throwWarning: tr("Highway name begins with Blf, may need to be expanded to Bluff");
fixAdd: concat("name=", "Bluff", substring(tag("name"), 3));
}

*["name"=~/^Blvd /].highway_name {
assertNoMatch: "way \"name\"=Boulevard Foo";
assertMatch: "way \"name\"=Blvd Foo";
throwWarning: tr("Highway name begins with Blvd, may need to be expanded to Boulevard");
fixAdd: concat("name=", "Boulevard", substring(tag("name"), 4));
}

*["name"=~/^Bnd /].highway_name {
assertNoMatch: "way \"name\"=Bend Foo";
assertMatch: "way \"name\"=Bnd Foo";
throwWarning: tr("Highway name begins with Bnd, may need to be expanded to Bend");
fixAdd: concat("name=", "Bend", substring(tag("name"), 3));
}

*["name"=~/^Br /].highway_name {
assertNoMatch: "way \"name\"=Bridge Foo";
assertMatch: "way \"name\"=Br Foo";
throwWarning: tr("Highway name begins with Br, may need to be expanded to Bridge");
fixAdd: concat("name=", "Bridge", substring(tag("name"), 2));
}

*["name"=~/^Brg /].highway_name {
assertNoMatch: "way \"name\"=Bridge Foo";
assertMatch: "way \"name\"=Brg Foo";
throwWarning: tr("Highway name begins with Brg, may need to be expanded to Bridge");
fixAdd: concat("name=", "Bridge", substring(tag("name"), 3));
}

*["name"=~/^Byp /].highway_name {
assertNoMatch: "way \"name\"=Bypass Foo";
assertMatch: "way \"name\"=Byp Foo";
throwWarning: tr("Highway name begins with Byp, may need to be expanded to Bypass");
fixAdd: concat("name=", "Bypass", substring(tag("name"), 3));
}

*["name"=~/^Cir /].highway_name {
assertNoMatch: "way \"name\"=Circle Foo";
assertMatch: "way \"name\"=Cir Foo";
throwWarning: tr("Highway name begins with Cir, may need to be expanded to Circle");
fixAdd: concat("name=", "Circle", substring(tag("name"), 3));
}

*["name"=~/^Cr /].highway_name {
assertNoMatch: "way \"name\"=Creek Foo";
assertMatch: "way \"name\"=Cr Foo";
throwWarning: tr("Highway name begins with Cr, may need to be expanded to Creek");
fixAdd: concat("name=", "Creek", substring(tag("name"), 2));
}

*["name"=~/^Cres /].highway_name {
assertNoMatch: "way \"name\"=Crescent Foo";
assertMatch: "way \"name\"=Cres Foo";
throwWarning: tr("Highway name begins with Cres, may need to be expanded to Crescent");
fixAdd: concat("name=", "Crescent", substring(tag("name"), 4));
}

*["name"=~/^Cswy /].highway_name {
assertNoMatch: "way \"name\"=Causeway Foo";
assertMatch: "way \"name\"=Cswy Foo";
throwWarning: tr("Highway name begins with Cswy, may need to be expanded to Causeway");
fixAdd: concat("name=", "Causeway", substring(tag("name"), 4));
}

*["name"=~/^Ct /].highway_name {
assertNoMatch: "way \"name\"=Court Foo";
assertMatch: "way \"name\"=Ct Foo";
throwWarning: tr("Highway name begins with Ct, may need to be expanded to Court");
fixAdd: concat("name=", "Court", substring(tag("name"), 2));
}

*["name"=~/^Ctr /].highway_name {
assertNoMatch: "way \"name\"=Center Foo";
assertMatch: "way \"name\"=Ctr Foo";
throwWarning: tr("Highway name begins with Ctr, may need to be expanded to Center");
fixAdd: concat("name=", "Center", substring(tag("name"), 3));
}

*["name"=~/^Cv /].highway_name {
assertNoMatch: "way \"name\"=Cove Foo";
assertMatch: "way \"name\"=Cv Foo";
throwWarning: tr("Highway name begins with Cv, may need to be expanded to Cove");
fixAdd: concat("name=", "Cove", substring(tag("name"), 2));
}

*["name"=~/^Dr /].highway_name {
assertNoMatch: "way \"name\"=Drive Foo";
assertMatch: "way \"name\"=Dr Foo";
throwWarning: tr("Highway name begins with Dr, may need to be expanded to Drive");
fixAdd: concat("name=", "Drive", substring(tag("name"), 2));
}

*["name"=~/^Expy /].highway_name {
assertNoMatch: "way \"name\"=Expressway Foo";
assertMatch: "way \"name\"=Expy Foo";
throwWarning: tr("Highway name begins with Expy, may need to be expanded to Expressway");
fixAdd: concat("name=", "Expressway", substring(tag("name"), 4));
}

*["name"=~/^Expwy /].highway_name {
assertNoMatch: "way \"name\"=Expressway Foo";
assertMatch: "way \"name\"=Expwy Foo";
throwWarning: tr("Highway name begins with Expwy, may need to be expanded to Expressway");
fixAdd: concat("name=", "Expressway", substring(tag("name"), 5));
}

*["name"=~/^Flds /].highway_name {
assertNoMatch: "way \"name\"=Fields Foo";
assertMatch: "way \"name\"=Flds Foo";
throwWarning: tr("Highway name begins with Flds, may need to be expanded to Fields");
fixAdd: concat("name=", "Fields", substring(tag("name"), 4));
}

*["name"=~/^Fmrd /].highway_name {
assertNoMatch: "way \"name\"=Farm to Market Road Foo";
assertMatch: "way \"name\"=Fmrd Foo";
throwWarning: tr("Highway name begins with Fmrd, may need to be expanded to Farm to Market Road");
fixAdd: concat("name=", "Farm to Market Road", substring(tag("name"), 4));
}

*["name"=~/^Fwy /].highway_name {
assertNoMatch: "way \"name\"=Freeway Foo";
assertMatch: "way \"name\"=Fwy Foo";
throwWarning: tr("Highway name begins with Fwy, may need to be expanded to Freeway");
fixAdd: concat("name=", "Freeway", substring(tag("name"), 3));
}

*["name"=~/^Gd /].highway_name {
assertNoMatch: "way \"name\"=Grade Foo";
assertMatch: "way \"name\"=Gd Foo";
throwWarning: tr("Highway name begins with Gd, may need to be expanded to Grade");
fixAdd: concat("name=", "Grade", substring(tag("name"), 2));
}

*["name"=~/^Grv /].highway_name {
assertNoMatch: "way \"name\"=Grove Foo";
assertMatch: "way \"name\"=Grv Foo";
throwWarning: tr("Highway name begins with Grv, may need to be expanded to Grove");
fixAdd: concat("name=", "Grove", substring(tag("name"), 3));
}

*["name"=~/^Hbr /].highway_name {
assertNoMatch: "way \"name\"=Harbor Foo";
assertMatch: "way \"name\"=Hbr Foo";
throwWarning: tr("Highway name begins with Hbr, may need to be expanded to Harbor");
fixAdd: concat("name=", "Harbor", substring(tag("name"), 3));
}

*["name"=~/^Holw /].highway_name {
assertNoMatch: "way \"name\"=Hollow Foo";
assertMatch: "way \"name\"=Holw Foo";
throwWarning: tr("Highway name begins with Holw, may need to be expanded to Hollow");
fixAdd: concat("name=", "Hollow", substring(tag("name"), 4));
}

*["name"=~/^Hts /].highway_name {
assertNoMatch: "way \"name\"=Heights Foo";
assertMatch: "way \"name\"=Hts Foo";
throwWarning: tr("Highway name begins with Hts, may need to be expanded to Heights");
fixAdd: concat("name=", "Heights", substring(tag("name"), 3));
}

*["name"=~/^Hw /].highway_name {
assertNoMatch: "way \"name\"=Highway Foo";
assertMatch: "way \"name\"=Hw Foo";
throwWarning: tr("Highway name begins with Hw, may need to be expanded to Highway");
fixAdd: concat("name=", "Highway", substring(tag("name"), 2));
}

*["name"=~/^Hwy /].highway_name {
assertNoMatch: "way \"name\"=Highway Foo";
assertMatch: "way \"name\"=Hwy Foo";
throwWarning: tr("Highway name begins with Hwy, may need to be expanded to Highway");
fixAdd: concat("name=", "Highway", substring(tag("name"), 3));
}

*["name"=~/^Lk /].highway_name {
assertNoMatch: "way \"name\"=Lake Foo";
assertMatch: "way \"name\"=Lk Foo";
throwWarning: tr("Highway name begins with Lk, may need to be expanded to Lake");
fixAdd: concat("name=", "Lake", substring(tag("name"), 2));
}

*["name"=~/^Ln /].highway_name {
assertNoMatch: "way \"name\"=Lane Foo";
assertMatch: "way \"name\"=Ln Foo";
throwWarning: tr("Highway name begins with Ln, may need to be expanded to Lane");
fixAdd: concat("name=", "Lane", substring(tag("name"), 2));
}

*["name"=~/^Lndg /].highway_name {
assertNoMatch: "way \"name\"=Landing Foo";
assertMatch: "way \"name\"=Lndg Foo";
throwWarning: tr("Highway name begins with Lndg, may need to be expanded to Landing");
fixAdd: concat("name=", "Landing", substring(tag("name"), 4));
}

*["name"=~/^Lp /].highway_name {
assertNoMatch: "way \"name\"=Loop Foo";
assertMatch: "way \"name\"=Lp Foo";
throwWarning: tr("Highway name begins with Lp, may need to be expanded to Loop");
fixAdd: concat("name=", "Loop", substring(tag("name"), 2));
}

*["name"=~/^Mal /].highway_name {
assertNoMatch: "way \"name\"=Mall Foo";
assertMatch: "way \"name\"=Mal Foo";
throwWarning: tr("Highway name begins with Mal, may need to be expanded to Mall");
fixAdd: concat("name=", "Mall", substring(tag("name"), 3));
}

*["name"=~/^Mt /].highway_name {
assertNoMatch: "way \"name\"=Mount Foo";
assertMatch: "way \"name\"=Mt Foo";
throwWarning: tr("Highway name begins with Mt, may need to be expanded to Mount");
fixAdd: concat("name=", "Mount", substring(tag("name"), 2));
}

*["name"=~/^Mtwy /].highway_name {
assertNoMatch: "way \"name\"=Motorway Foo";
assertMatch: "way \"name\"=Mtwy Foo";
throwWarning: tr("Highway name begins with Mtwy, may need to be expanded to Motorway");
fixAdd: concat("name=", "Motorway", substring(tag("name"), 4));
}

*["name"=~/^Ovps /].highway_name {
assertNoMatch: "way \"name\"=Overpass Foo";
assertMatch: "way \"name\"=Ovps Foo";
throwWarning: tr("Highway name begins with Ovps, may need to be expanded to Overpass");
fixAdd: concat("name=", "Overpass", substring(tag("name"), 4));
}

*["name"=~/^Pky /].highway_name {
assertNoMatch: "way \"name\"=Parkway Foo";
assertMatch: "way \"name\"=Pky Foo";
throwWarning: tr("Highway name begins with Pky, may need to be expanded to Parkway");
fixAdd: concat("name=", "Parkway", substring(tag("name"), 3));
}

*["name"=~/^Pkwy /].highway_name {
assertNoMatch: "way \"name\"=Parkway Foo";
assertMatch: "way \"name\"=Pkwy Foo";
throwWarning: tr("Highway name begins with Pkwy, may need to be expanded to Parkway");
fixAdd: concat("name=", "Parkway", substring(tag("name"), 4));
}

*["name"=~/^Pl /].highway_name {
assertNoMatch: "way \"name\"=Place Foo";
assertMatch: "way \"name\"=Pl Foo";
throwWarning: tr("Highway name begins with Pl, may need to be expanded to Place");
fixAdd: concat("name=", "Place", substring(tag("name"), 2));
}

*["name"=~/^Plz /].highway_name {
assertNoMatch: "way \"name\"=Plaza Foo";
assertMatch: "way \"name\"=Plz Foo";
throwWarning: tr("Highway name begins with Plz, may need to be expanded to Plaza");
fixAdd: concat("name=", "Plaza", substring(tag("name"), 3));
}

*["name"=~/^Pvt /].highway_name {
assertNoMatch: "way \"name\"=Private Foo";
assertMatch: "way \"name\"=Pvt Foo";
throwWarning: tr("Highway name begins with Pvt, may need to be expanded to Private");
fixAdd: concat("name=", "Private", substring(tag("name"), 3));
}

*["name"=~/^Rd /].highway_name {
assertNoMatch: "way \"name\"=Road Foo";
assertMatch: "way \"name\"=Rd Foo";
throwWarning: tr("Highway name begins with Rd, may need to be expanded to Road");
fixAdd: concat("name=", "Road", substring(tag("name"), 2));
}

*["name"=~/^Rdg /].highway_name {
assertNoMatch: "way \"name\"=Ridge Foo";
assertMatch: "way \"name\"=Rdg Foo";
throwWarning: tr("Highway name begins with Rdg, may need to be expanded to Ridge");
fixAdd: concat("name=", "Ridge", substring(tag("name"), 3));
}

*["name"=~/^Rmrd /].highway_name {
assertNoMatch: "way \"name\"=Ranch to Market Road Foo";
assertMatch: "way \"name\"=Rmrd Foo";
throwWarning: tr("Highway name begins with Rmrd, may need to be expanded to Ranch to Market Road");
fixAdd: concat("name=", "Ranch to Market Road", substring(tag("name"), 4));
}

*["name"=~/^Rte /].highway_name {
assertNoMatch: "way \"name\"=Route Foo";
assertMatch: "way \"name\"=Rte Foo";
throwWarning: tr("Highway name begins with Rte, may need to be expanded to Route");
fixAdd: concat("name=", "Route", substring(tag("name"), 3));
}

*["name"=~/^Skwy /].highway_name {
assertNoMatch: "way \"name\"=Skyway Foo";
assertMatch: "way \"name\"=Skwy Foo";
throwWarning: tr("Highway name begins with Skwy, may need to be expanded to Skyway");
fixAdd: concat("name=", "Skyway", substring(tag("name"), 4));
}

*["name"=~/^Sq /].highway_name {
assertNoMatch: "way \"name\"=Square Foo";
assertMatch: "way \"name\"=Sq Foo";
throwWarning: tr("Highway name begins with Sq, may need to be expanded to Square");
fixAdd: concat("name=", "Square", substring(tag("name"), 2));
}

*["name"=~/^Srvc /].highway_name {
assertNoMatch: "way \"name\"=Service Foo";
assertMatch: "way \"name\"=Srvc Foo";
throwWarning: tr("Highway name begins with Srvc, may need to be expanded to Service");
fixAdd: concat("name=", "Service", substring(tag("name"), 4));
}

*["name"=~/^St /].highway_name {
assertNoMatch: "way \"name\"=Street Foo";
assertMatch: "way \"name\"=St Foo";
throwWarning: tr("Highway name begins with St, may need to be expanded to Street");
fixAdd: concat("name=", "Street", substring(tag("name"), 2));
}

*["name"=~/^Ter /].highway_name {
assertNoMatch: "way \"name\"=Terrace Foo";
assertMatch: "way \"name\"=Ter Foo";
throwWarning: tr("Highway name begins with Ter, may need to be expanded to Terrace");
fixAdd: concat("name=", "Terrace", substring(tag("name"), 3));
}

*["name"=~/^Tfwy /].highway_name {
assertNoMatch: "way \"name\"=Trafficway Foo";
assertMatch: "way \"name\"=Tfwy Foo";
throwWarning: tr("Highway name begins with Tfwy, may need to be expanded to Trafficway");
fixAdd: concat("name=", "Trafficway", substring(tag("name"), 4));
}

*["name"=~/^Thfr /].highway_name {
assertNoMatch: "way \"name\"=Thoroughfare Foo";
assertMatch: "way \"name\"=Thfr Foo";
throwWarning: tr("Highway name begins with Thfr, may need to be expanded to Thoroughfare");
fixAdd: concat("name=", "Thoroughfare", substring(tag("name"), 4));
}

*["name"=~/^Thwy /].highway_name {
assertNoMatch: "way \"name\"=Throughway Foo";
assertMatch: "way \"name\"=Thwy Foo";
throwWarning: tr("Highway name begins with Thwy, may need to be expanded to Throughway");
fixAdd: concat("name=", "Throughway", substring(tag("name"), 4));
}

*["name"=~/^Tl /].highway_name {
assertNoMatch: "way \"name\"=Trail Foo";
assertMatch: "way \"name\"=Tl Foo";
throwWarning: tr("Highway name begins with Tl, may need to be expanded to Trail");
fixAdd: concat("name=", "Trail", substring(tag("name"), 2));
}

*["name"=~/^Tpke /].highway_name {
assertNoMatch: "way \"name\"=Turnpike Foo";
assertMatch: "way \"name\"=Tpke Foo";
throwWarning: tr("Highway name begins with Tpke, may need to be expanded to Turnpike");
fixAdd: concat("name=", "Turnpike", substring(tag("name"), 4));
}

*["name"=~/^Trce /].highway_name {
assertNoMatch: "way \"name\"=Trace Foo";
assertMatch: "way \"name\"=Trce Foo";
throwWarning: tr("Highway name begins with Trce, may need to be expanded to Trace");
fixAdd: concat("name=", "Trace", substring(tag("name"), 4));
}

*["name"=~/^Tr /].highway_name {
assertNoMatch: "way \"name\"=Trail Foo";
assertMatch: "way \"name\"=Tr Foo";
throwWarning: tr("Highway name begins with Tr, may need to be expanded to Trail");
fixAdd: concat("name=", "Trail", substring(tag("name"), 2));
}

*["name"=~/^Trl /].highway_name {
assertNoMatch: "way \"name\"=Trail Foo";
assertMatch: "way \"name\"=Trl Foo";
throwWarning: tr("Highway name begins with Trl, may need to be expanded to Trail");
fixAdd: concat("name=", "Trail", substring(tag("name"), 3));
}

*["name"=~/^Tunl /].highway_name {
assertNoMatch: "way \"name\"=Tunnel Foo";
assertMatch: "way \"name\"=Tunl Foo";
throwWarning: tr("Highway name begins with Tunl, may need to be expanded to Tunnel");
fixAdd: concat("name=", "Tunnel", substring(tag("name"), 4));
}

*["name"=~/^Unp /].highway_name {
assertNoMatch: "way \"name\"=Underpass Foo";
assertMatch: "way \"name\"=Unp Foo";
throwWarning: tr("Highway name begins with Unp, may need to be expanded to Underpass");
fixAdd: concat("name=", "Underpass", substring(tag("name"), 3));
}

*["name"=~/^Vly /].highway_name {
assertNoMatch: "way \"name\"=Valley Foo";
assertMatch: "way \"name\"=Vly Foo";
throwWarning: tr("Highway name begins with Vly, may need to be expanded to Valley");
fixAdd: concat("name=", "Valley", substring(tag("name"), 3));
}

*["name"=~/^Vw /].highway_name {
assertNoMatch: "way \"name\"=View Foo";
assertMatch: "way \"name\"=Vw Foo";
throwWarning: tr("Highway name begins with Vw, may need to be expanded to View");
fixAdd: concat("name=", "View", substring(tag("name"), 2));
}

*["name"=~/^Wkwy /].highway_name {
assertNoMatch: "way \"name\"=Walkway Foo";
assertMatch: "way \"name\"=Wkwy Foo";
throwWarning: tr("Highway name begins with Wkwy, may need to be expanded to Walkway");
fixAdd: concat("name=", "Walkway", substring(tag("name"), 4));
}

*["name"=~/^Wy /].highway_name {
assertNoMatch: "way \"name\"=Way Foo";
assertMatch: "way \"name\"=Wy Foo";
throwWarning: tr("Highway name begins with Wy, may need to be expanded to Way");
fixAdd: concat("name=", "Way", substring(tag("name"), 2));
}

*["name"=~/^Xing /].highway_name {
assertNoMatch: "way \"name\"=Crossing Foo";
assertMatch: "way \"name\"=Xing Foo";
throwWarning: tr("Highway name begins with Xing, may need to be expanded to Crossing");
fixAdd: concat("name=", "Crossing", substring(tag("name"), 4));
}